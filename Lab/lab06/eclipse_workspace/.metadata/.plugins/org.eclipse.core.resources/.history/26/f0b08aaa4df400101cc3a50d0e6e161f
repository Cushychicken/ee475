/*
 * gps.c
 *
 *  Created on: Oct 3, 2011
 *      Author: nash.reilly
 */

#include <stdio.h>
#include "lcdwrite.h"
#include "gpsparse.h"

#define Switches (volatile int *) 0x01001030
#define LEDs 	 (int *) 		  0x01001020

int main()
{
	char test;
	char cs;
	char pkt[83];
	char print[] = "Sixteen LCD char";
	char aorp;
	double height;
	double lat;
	double lon;
	double lat_min;
	double lon_min;
	struct packet packet_GGA;
	int temp;
	int time[3]      = {0, 0, 0};
	int latitude[3]  = {0, 0, 0};
	int longitude[3] = {0, 0, 0};

	while(1){
		test=getchar();																/*Gets first character from serial stream             */

		*LEDs = *Switches;
		temp  = *LEDs;

		if(checksum(test,cs,pkt)){													/*Pipes all the fun stuff to checksum and parse f'ns  */
			parse_GGA(pkt, &packet_GGA);												/*See gpsparse.h library for full view of functions   */
			temp = (temp & 0x01);
			if (temp == 1){
				sprintf(print, "Lat:%s%c", packet_GGA.latitude, packet_GGA.ns[0]);
				WriteLCD(print);
				sprintf(print, "Lon:%s%c", packet_GGA.longitude, packet_GGA.ew[0]);
				WriteLCD(print);
			};
			if (temp == 0){
				aorp = GMT_to_MST(time, packet_GGA.time);
				sprintf(print, "Time: %d:%02d:%02d%cM", time[0], time[1], time[2], aorp);
				WriteLCD(print);
				height = m_to_ft(packet_GGA.ant_ht);
				sprintf(print, "Elev: %5.2f ft", height);
				WriteLCD(print);
			};
			lat_to_deg(packet_GGA.latitude, latitude);
			long_to_deg(packet_GGA.longitude, longitude);

			lat = ((double)latitude[0]) + (((double)latitude[1])/60) + (((double)latitude[2]/60)*.01);
			lon = ((double)longitude[0]) + (((double)longitude[1])/60) + (((double)longitude[2]/60)*.01);

			printf("Latitude :  %f deg\n", lat);
			printf("Longitude: %f deg\n", lon);

			printf("Latitude :  %d.%d%05d deg\n", latitude[0], latitude[1], latitude[2]);
			printf("Longitude: %d deg, %d.%05d min\n", longitude[0], longitude[1], longitude[2]);
		} else {
			sprintf(print, "GPS not ready.\n");
			WriteLCD(print);
		}
	};
	return 0;
}




