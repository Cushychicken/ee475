
lab08_buttons.elf:     file format elf32-littlenios2
lab08_buttons.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000f0f4 memsz 0x0000f0f4 flags r-x
    LOAD off    0x00010114 vaddr 0x0080f114 paddr 0x00810d5c align 2**12
         filesz 0x00001c48 memsz 0x00001c48 flags rw-
    LOAD off    0x000129a4 vaddr 0x008129a4 paddr 0x008129a4 align 2**12
         filesz 0x00000000 memsz 0x00000518 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e938  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000628  0080eaec  0080eaec  0000faec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c48  0080f114  00810d5c  00010114  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000518  008129a4  008129a4  000129a4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011d5c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001676  00000000  00000000  00012bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a280  00000000  00000000  0001424e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008eac  00000000  00000000  0003e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000167f6  00000000  00000000  0004737a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d00  00000000  00000000  0005db70  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024df  00000000  00000000  0005f870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ca19  00000000  00000000  00061d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006e768  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0006e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007270d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00072710  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072718  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072719  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007271a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000a  00000000  00000000  00072725  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007272f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0007273a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  00072743  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080eaec l    d  .rodata	00000000 .rodata
0080f114 l    d  .rwdata	00000000 .rwdata
008129a4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab08_uart.c
008001f0 l     F .text	00000068 WriteLCD
00800258 l     F .text	000000cc handle_UART_interrupts
00800324 l     F .text	00000038 init_UART_ISR
008129a4 l     O .bss	00000001 count
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008006fc l     F .text	00000058 std
00800808 l     F .text	00000008 __fp_lock
00800810 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080f114 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00802294 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008024e0 l     F .text	00000058 __sprint_r
0080eb96 l     O .rodata	00000010 blanks.3452
0080eb86 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0080462c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00810d28 l     O .rwdata	00000004 charset
0080ebc8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0080ed10 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00808b10 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00809c3c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a4b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a510 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a610 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a8f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a9d0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ab2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080ac38 l     F .text	000000dc alt_file_locked
0080ae9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080b01c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00810d48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080b2e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fad0 l     O .rwdata	00001060 jtag_uart_0
00810b30 l     O .rwdata	00000120 lcd_0
00810c50 l     O .rwdata	000000c4 uart_RS232
0080b410 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080b650 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b878 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00810d4c l     O .rwdata	00000004 colstart
0080bef4 l     F .text	000000b8 lcd_write_command
0080bfac l     F .text	000000d4 lcd_write_data
0080c080 l     F .text	000000c4 lcd_clear_screen
0080c144 l     F .text	000001ec lcd_repaint_screen
0080c330 l     F .text	000000c8 lcd_scroll_up
0080c3f8 l     F .text	000002d0 lcd_handle_escape
0080cbd4 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080ce34 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080d0f4 l     F .text	0000009c altera_avalon_uart_irq
0080d190 l     F .text	000000e0 altera_avalon_uart_rxirq
0080d270 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080d65c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080d884 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080dc54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080e2e4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080ef91 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080e868 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080ea1c l     F .text	00000040 alt_sim_halt
00806b50 g     F .text	00000094 _mprec_log10
00806c3c g     F .text	00000088 __any_on
00806334 g     F .text	00000070 _isatty_r
0080ece8 g     O .rodata	00000028 __mprec_tinytens
0080ab8c g     F .text	0000006c alt_main
0080201c g     F .text	000000a0 _puts_r
00812c2c g     O .bss	00000100 alt_irq
00806468 g     F .text	00000078 _lseek_r
00810d5c g       *ABS*	00000000 __flash_rwdata_start
00805df8 g     F .text	000000a0 __sflags
00809630 g     F .text	00000088 __eqdf2
00812a10 g     O .bss	00000028 print
00812ebc g       *ABS*	00000000 __alt_heap_start
00801fa4 g     F .text	00000044 printf
00802328 g     F .text	00000068 __sseek
00800764 g     F .text	000000a4 __sinit
008063c8 g     F .text	00000084 _setlocale_r
00800864 g     F .text	00000068 __sfmoreglue
0080ac18 g     F .text	00000020 __malloc_unlock
008129a8 g     O .bss	00000004 j
00806664 g     F .text	000000e0 memmove
00800854 g     F .text	00000010 _cleanup
00806cc4 g     F .text	000000bc _Balloc
00809740 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
008129ac g     O .bss	00000004 edge_capture
00800020 g       *ABS*	00000000 __flash_exceptions_start
008013cc g     F .text	00000074 _fstat_r
008129b4 g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00812a38 g     O .bss	000001f4 pkt
008129d8 g     O .bss	00000004 alt_argv
00818d14 g       *ABS*	00000000 _gp
0080b198 g     F .text	00000030 usleep
0080f950 g     O .rwdata	00000180 alt_fd_list
0080dd7c g     F .text	00000094 alt_find_dev
008065c4 g     F .text	000000a0 memcpy
00800848 g     F .text	0000000c _cleanup_r
008098d8 g     F .text	000000f8 __floatsidf
0080e3a8 g     F .text	00000078 alt_io_redirect
00809850 g     F .text	00000088 __ltdf2
0080eaec g       *ABS*	00000000 __DTOR_END__
008020bc g     F .text	00000014 puts
00806aa0 g     F .text	000000b0 __ratio
0080ba90 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00801fe8 g     F .text	00000034 _printf_r
00809d78 g     F .text	00000008 __udivsi3
0080a830 g     F .text	000000c0 isatty
0080ebf8 g     O .rodata	000000c8 __mprec_tens
008063a4 g     F .text	00000008 __locale_charset
0080e5e4 g     F .text	00000090 alt_icache_flush
008129b8 g     O .bss	00000004 __malloc_top_pad
00810d24 g     O .rwdata	00000004 __mb_cur_max
008063ac g     F .text	0000000c _localeconv_r
008073bc g     F .text	0000003c __i2b
00805e98 g     F .text	0000049c __sfvwrite_r
008022b0 g     F .text	00000070 _sbrk_r
00807738 g     F .text	00000078 _read_r
0080f91c g     O .rwdata	0000000c __lc_ctype
00810d3c g     O .rwdata	00000004 alt_max_fd
0080a1b4 g     F .text	00000138 __unpack_d
008003a8 g     F .text	00000110 _fclose_r
008006c8 g     F .text	00000034 fflush
008129bc g     O .bss	00000004 __malloc_max_sbrked_mem
0080a670 g     F .text	000001c0 alt_irq_register
00808fa0 g     F .text	00000074 __adddf3
00806980 g     F .text	00000120 __b2d
00808560 g     F .text	000005b0 __umoddi3
0080aa3c g     F .text	000000f0 lseek
00810d18 g     O .rwdata	00000004 _global_impure_ptr
008077b0 g     F .text	000005f4 _realloc_r
00812ebc g       *ABS*	00000000 __bss_end
0080e1ec g     F .text	000000f8 alt_iic_isr_register
0080e4b8 g     F .text	0000010c alt_tick
00807f84 g     F .text	000005dc __udivdi3
0080ecc0 g     O .rodata	00000028 __mprec_bigtens
00807618 g     F .text	00000120 __s2b
00809aa8 g     F .text	00000194 __floatunsidf
008068a0 g     F .text	00000060 __mcmp
0080d02c g     F .text	000000c8 altera_avalon_uart_init
00810d58 g     O .rwdata	00000004 __ctype_ptr
00800830 g     F .text	00000018 __fp_lock_all
0080e1a4 g     F .text	00000048 alt_ic_irq_enabled
0080e420 g     F .text	00000098 alt_alarm_stop
008129d0 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080f928 g     O .rwdata	00000028 alt_dev_null
0080db84 g     F .text	0000001c alt_dcache_flush_all
0080676c g     F .text	00000070 __hi0bits
008099d0 g     F .text	000000d8 __fixdfsi
00810d5c g       *ABS*	00000000 __ram_rwdata_end
00810d34 g     O .rwdata	00000008 alt_dev_list
0080b1c8 g     F .text	00000120 write
0080f114 g       *ABS*	00000000 __ram_rodata_end
0080a53c g     F .text	000000d4 fstat
00800acc g     F .text	0000002c fprintf
008074f8 g     F .text	00000120 __pow5mult
008129c4 g     O .bss	00000004 __nlocale_changed
00809d80 g     F .text	00000008 __umodsi3
00812ebc g       *ABS*	00000000 end
0080c6c8 g     F .text	0000050c altera_avalon_lcd_16207_write
0080d6bc g     F .text	000001c8 altera_avalon_uart_write
008013a8 g     F .text	00000024 fseek
0080b590 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080eae8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080cea4 g     F .text	00000090 alt_avalon_timer_sc_init
0080cf8c g     F .text	00000058 altera_avalon_uart_write_fd
00809e20 g     F .text	00000080 __clzsi2
0080cfe4 g     F .text	00000048 altera_avalon_uart_close_fd
0080bcb4 g     F .text	00000240 altera_avalon_jtag_uart_write
00800754 g     F .text	00000004 __sfp_lock_acquire
008064e0 g     F .text	000000e4 memchr
00802538 g     F .text	00001eac ___vfprintf_internal_r
00800c58 g     F .text	00000314 _free_r
0080e86c g     F .text	000001b0 __call_exitprocs
008129c8 g     O .bss	00000004 __mlocale_changed
00810d20 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
008129e0 g     O .bss	00000004 _alt_tick_rate
00807088 g     F .text	0000014c __lshift
008129e4 g     O .bss	00000004 _alt_nticks
0080aefc g     F .text	00000120 read
0080b37c g     F .text	00000094 alt_sys_init
00801f2c g     F .text	00000078 _open_r
0080e734 g     F .text	00000134 __register_exitproc
008071d4 g     F .text	000001e8 __multiply
0080b928 g     F .text	00000074 altera_avalon_jtag_uart_close
0080f114 g       *ABS*	00000000 __ram_rwdata_start
0080eaec g       *ABS*	00000000 __ram_rodata_start
008129e8 g     O .bss	00000028 __malloc_current_mallinfo
00806d80 g     F .text	0000017c __d2b
0080b448 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080df30 g     F .text	000000b8 alt_get_fd
0080da38 g     F .text	0000014c alt_busy_sleep
0080a2ec g     F .text	000000c8 __fpcmp_parts_d
008045bc g     F .text	00000070 _close_r
0080e6c0 g     F .text	00000074 memcmp
0080b4f8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00812ebc g       *ABS*	00000000 __alt_stack_base
0080b540 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804480 g     F .text	0000013c __swsetup_r
008093d8 g     F .text	00000258 __divdf3
008008cc g     F .text	000000f0 __sfp
00806be4 g     F .text	00000058 __copybits
0080f514 g     O .rwdata	00000408 __malloc_av_
00800760 g     F .text	00000004 __sinit_lock_release
00809014 g     F .text	000003c4 __muldf3
0080240c g     F .text	00000060 __sread
0080de10 g     F .text	00000120 alt_find_file
0080dba0 g     F .text	000000b4 alt_dev_llist_insert
0080abf8 g     F .text	00000020 __malloc_lock
00800af8 g     F .text	00000034 _fprintf_r
0080b0dc g     F .text	000000bc sbrk
008004cc g     F .text	000001fc _fflush_r
00807ed0 g     F .text	000000b4 _calloc_r
008129b0 g     O .bss	00000001 new
00800ab0 g     F .text	0000001c fopen
008129a4 g       *ABS*	00000000 __bss_start
00801e94 g     F .text	00000098 memset
0080035c g     F .text	0000004c main
008129dc g     O .bss	00000004 alt_envp
008129c0 g     O .bss	00000004 __malloc_max_total_mem
0080b4a0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080cca0 g     F .text	0000013c altera_avalon_lcd_16207_init
00802320 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008004b8 g     F .text	00000014 fclose
00812d2c g     O .bss	00000190 _atexit0
00804844 g     F .text	000015b4 _dtoa_r
00801754 g     F .text	00000740 _malloc_r
00810d40 g     O .rwdata	00000004 alt_errno
00801508 g     F .text	000000b8 _fwalk
00809cb8 g     F .text	00000060 __divsi3
0080ed1c g     O .rodata	00000014 __thenan_df
00800b2c g     F .text	0000012c _malloc_trim_r
0080eaec g       *ABS*	00000000 __CTOR_END__
00807e14 g     F .text	000000bc strcmp
0080eaec g       *ABS*	00000000 __flash_rodata_start
0080eaec g       *ABS*	00000000 __DTOR_LIST__
008096b8 g     F .text	00000088 __nedf2
0080b348 g     F .text	00000034 alt_irq_init
0080b07c g     F .text	00000060 alt_release_fd
0080ed30 g     O .rodata	00000100 __clz_tab
008129cc g     O .bss	00000004 _PathLocale
0080e674 g     F .text	00000014 atexit
00804408 g     F .text	00000078 _write_r
0080644c g     F .text	0000001c setlocale
00810d14 g     O .rwdata	00000004 _impure_ptr
008129d4 g     O .bss	00000004 alt_argc
0080dd18 g     F .text	00000064 _do_dtors
00800f6c g     F .text	0000043c _fseek_r
008020d0 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00806900 g     F .text	00000080 __ulp
00807da4 g     F .text	00000040 __isinfd
00800818 g     F .text	00000018 __fp_unlock_all
0080cddc g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00810d2c g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
008063b8 g     F .text	00000010 localeconv
0080e018 g     F .text	00000050 alt_ic_isr_register
00810d5c g       *ABS*	00000000 _edata
0080cf34 g     F .text	00000058 altera_avalon_uart_read_fd
00812ebc g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b99c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080e104 g     F .text	000000a0 alt_ic_irq_disable
00802390 g     F .text	0000007c __swrite
00810d1c g     O .rwdata	00000004 __malloc_trim_threshold
0080e5c4 g     F .text	00000020 altera_nios2_qsys_irq_init
0080e688 g     F .text	00000038 exit
00801440 g     F .text	000000c8 _fwalk_reent
00806efc g     F .text	0000018c __mdiff
00809d18 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800758 g     F .text	00000004 __sfp_lock_release
0080ee90 g     O .rodata	00000101 _ctype_
0080d3cc g     F .text	00000060 altera_avalon_uart_close
008009bc g     F .text	000000f4 _fopen_r
0080ea5c g     F .text	00000020 _exit
00807de4 g     F .text	00000030 __isnand
0080d8e4 g     F .text	00000154 alt_alarm_start
00809d88 g     F .text	00000098 __muldi3
008015c0 g     F .text	00000194 __smakebuf_r
0080246c g     F .text	00000074 strlen
0080ad14 g     F .text	00000188 open
008097c8 g     F .text	00000088 __gedf2
0080dfe8 g     F .text	00000030 alt_icache_flush_all
00810d44 g     O .rwdata	00000004 alt_priority_mask
0080e068 g     F .text	0000009c alt_ic_irq_enable
008043e4 g     F .text	00000024 __vfprintf_internal
0080d42c g     F .text	00000230 altera_avalon_uart_read
00808f20 g     F .text	00000080 __subdf3
008067dc g     F .text	000000c4 __lo0bits
00810d50 g     O .rwdata	00000008 alt_alarm_list
0080dcb4 g     F .text	00000064 _do_ctors
0080a3b4 g     F .text	000000fc close
0080a950 g     F .text	00000080 alt_load
00809ea0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0080075c g     F .text	00000004 __sinit_lock_acquire
008073f8 g     F .text	00000100 __multadd
00806744 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18cb0b04 	addi	r3,r3,11308
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18cb0b04 	addi	r3,r3,11308
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6a34514 	ori	gp,gp,36116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	108a6914 	ori	r2,r2,10660

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18cbaf14 	ori	r3,r3,11964

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080a9500 	call	80a950 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080ab8c0 	call	80ab8c <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <WriteLCD>:
 * Note: ensure the fopen command is accessing the proper lcd driver name!
 *
 ******************************************************************************/

static void WriteLCD(char *msg)
{
  8001f0:	defffc04 	addi	sp,sp,-16
  8001f4:	dfc00315 	stw	ra,12(sp)
  8001f8:	df000215 	stw	fp,8(sp)
  8001fc:	df000204 	addi	fp,sp,8
  800200:	e13fff15 	stw	r4,-4(fp)
  FILE *lcd;

  lcd = fopen("/dev/lcd_0", "w");
  800204:	01002074 	movhi	r4,129
  800208:	213abb04 	addi	r4,r4,-5396
  80020c:	01402074 	movhi	r5,129
  800210:	297abe04 	addi	r5,r5,-5384
  800214:	0800ab00 	call	800ab0 <fopen>
  800218:	e0bffe15 	stw	r2,-8(fp)

  /* Write some simple text to the LCD. */
  if (lcd != NULL )
  80021c:	e0bffe17 	ldw	r2,-8(fp)
  800220:	1005003a 	cmpeq	r2,r2,zero
  800224:	1000051e 	bne	r2,zero,80023c <WriteLCD+0x4c>
  {
    fprintf(lcd, "%s\n", msg);
  800228:	e13ffe17 	ldw	r4,-8(fp)
  80022c:	01402074 	movhi	r5,129
  800230:	297abf04 	addi	r5,r5,-5380
  800234:	e1bfff17 	ldw	r6,-4(fp)
  800238:	0800acc0 	call	800acc <fprintf>
  }

  fclose( lcd );
  80023c:	e13ffe17 	ldw	r4,-8(fp)
  800240:	08004b80 	call	8004b8 <fclose>

  return;
}
  800244:	e037883a 	mov	sp,fp
  800248:	dfc00117 	ldw	ra,4(sp)
  80024c:	df000017 	ldw	fp,0(sp)
  800250:	dec00204 	addi	sp,sp,8
  800254:	f800283a 	ret

00800258 <handle_UART_interrupts>:
 ******************************************************************/

/* Initialize the uart_ISR. */

static void handle_UART_interrupts(void* context, alt_u32 id)
{
  800258:	defffc04 	addi	sp,sp,-16
  80025c:	dfc00315 	stw	ra,12(sp)
  800260:	df000215 	stw	fp,8(sp)
  800264:	df000204 	addi	fp,sp,8
  800268:	e13ffe15 	stw	r4,-8(fp)
  80026c:	e17fff15 	stw	r5,-4(fp)
    new = ((*UART_RX) & 0xff);
  800270:	00804034 	movhi	r2,256
  800274:	10840004 	addi	r2,r2,4096
  800278:	10800017 	ldw	r2,0(r2)
  80027c:	1007883a 	mov	r3,r2
  800280:	00bfffc4 	movi	r2,-1
  800284:	1884703a 	and	r2,r3,r2
  800288:	d0a72705 	stb	r2,-25444(gp)

    if (j < 499){
  80028c:	d0a72517 	ldw	r2,-25452(gp)
  800290:	10807cc8 	cmpgei	r2,r2,499
  800294:	10000a1e 	bne	r2,zero,8002c0 <handle_UART_interrupts+0x68>
    	pkt[j] = new;
  800298:	d0e72517 	ldw	r3,-25452(gp)
  80029c:	d1272703 	ldbu	r4,-25444(gp)
  8002a0:	00802074 	movhi	r2,129
  8002a4:	108a8e04 	addi	r2,r2,10808
  8002a8:	10c5883a 	add	r2,r2,r3
  8002ac:	11000005 	stb	r4,0(r2)
    	j++;
  8002b0:	d0a72517 	ldw	r2,-25452(gp)
  8002b4:	10800044 	addi	r2,r2,1
  8002b8:	d0a72515 	stw	r2,-25452(gp)
  8002bc:	00001406 	br	800310 <handle_UART_interrupts+0xb8>
    } else {
    	pkt[j] = '\0';
  8002c0:	d0e72517 	ldw	r3,-25452(gp)
  8002c4:	00802074 	movhi	r2,129
  8002c8:	108a8e04 	addi	r2,r2,10808
  8002cc:	10c5883a 	add	r2,r2,r3
  8002d0:	10000005 	stb	zero,0(r2)
    	printf("Hey! Look! A packet!\n");
  8002d4:	01002074 	movhi	r4,129
  8002d8:	213ac004 	addi	r4,r4,-5376
  8002dc:	08020bc0 	call	8020bc <puts>
    	printf("%s\n\n", pkt);
  8002e0:	01002074 	movhi	r4,129
  8002e4:	213ac604 	addi	r4,r4,-5352
  8002e8:	01402074 	movhi	r5,129
  8002ec:	294a8e04 	addi	r5,r5,10808
  8002f0:	0801fa40 	call	801fa4 <printf>
    	j = 0;
  8002f4:	d0272515 	stw	zero,-25452(gp)
    	pkt[j] = new;
  8002f8:	d0e72517 	ldw	r3,-25452(gp)
  8002fc:	d1272703 	ldbu	r4,-25444(gp)
  800300:	00802074 	movhi	r2,129
  800304:	108a8e04 	addi	r2,r2,10808
  800308:	10c5883a 	add	r2,r2,r3
  80030c:	11000005 	stb	r4,0(r2)
    }

}
  800310:	e037883a 	mov	sp,fp
  800314:	dfc00117 	ldw	ra,4(sp)
  800318:	df000017 	ldw	fp,0(sp)
  80031c:	dec00204 	addi	sp,sp,8
  800320:	f800283a 	ret

00800324 <init_UART_ISR>:

static void init_UART_ISR()
{
  800324:	defffe04 	addi	sp,sp,-8
  800328:	dfc00115 	stw	ra,4(sp)
  80032c:	df000015 	stw	fp,0(sp)
  800330:	d839883a 	mov	fp,sp
    /* Register the interrupt handler. */
    alt_irq_register( UART_RS232_IRQ, NULL, handle_UART_interrupts );
  800334:	01000044 	movi	r4,1
  800338:	000b883a 	mov	r5,zero
  80033c:	01802034 	movhi	r6,128
  800340:	31809604 	addi	r6,r6,600
  800344:	080a6700 	call	80a670 <alt_irq_register>
}
  800348:	e037883a 	mov	sp,fp
  80034c:	dfc00117 	ldw	ra,4(sp)
  800350:	df000017 	ldw	fp,0(sp)
  800354:	dec00204 	addi	sp,sp,8
  800358:	f800283a 	ret

0080035c <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{
  80035c:	defffe04 	addi	sp,sp,-8
  800360:	dfc00115 	stw	ra,4(sp)
  800364:	df000015 	stw	fp,0(sp)
  800368:	d839883a 	mov	fp,sp
    count = 0;
  80036c:	d0272405 	stb	zero,-25456(gp)
    j	  = 0;
  800370:	d0272515 	stw	zero,-25452(gp)
    /* Initialize the UART ISR. */

    init_UART_ISR();
  800374:	08003240 	call	800324 <init_UART_ISR>

    /* Continue 0-ff counting loop. */

    while( 1 )
    {
    	count = count + 1;
  800378:	d0a72403 	ldbu	r2,-25456(gp)
  80037c:	10800044 	addi	r2,r2,1
  800380:	d0a72405 	stb	r2,-25456(gp)
    	*LEDs = count;
  800384:	00c04034 	movhi	r3,256
  800388:	18c42004 	addi	r3,r3,4224
  80038c:	d0a72403 	ldbu	r2,-25456(gp)
  800390:	10803fcc 	andi	r2,r2,255
  800394:	18800015 	stw	r2,0(r3)
    	usleep(100000);
  800398:	010000b4 	movhi	r4,2
  80039c:	2121a804 	addi	r4,r4,-31072
  8003a0:	080b1980 	call	80b198 <usleep>
    }
  8003a4:	003ff406 	br	800378 <main+0x1c>

008003a8 <_fclose_r>:
  8003a8:	defffc04 	addi	sp,sp,-16
  8003ac:	dc400115 	stw	r17,4(sp)
  8003b0:	dc000015 	stw	r16,0(sp)
  8003b4:	dfc00315 	stw	ra,12(sp)
  8003b8:	dc800215 	stw	r18,8(sp)
  8003bc:	2821883a 	mov	r16,r5
  8003c0:	2023883a 	mov	r17,r4
  8003c4:	28002926 	beq	r5,zero,80046c <_fclose_r+0xc4>
  8003c8:	08007540 	call	800754 <__sfp_lock_acquire>
  8003cc:	88000226 	beq	r17,zero,8003d8 <_fclose_r+0x30>
  8003d0:	88800e17 	ldw	r2,56(r17)
  8003d4:	10002d26 	beq	r2,zero,80048c <_fclose_r+0xe4>
  8003d8:	8080030f 	ldh	r2,12(r16)
  8003dc:	10002226 	beq	r2,zero,800468 <_fclose_r+0xc0>
  8003e0:	8809883a 	mov	r4,r17
  8003e4:	800b883a 	mov	r5,r16
  8003e8:	08004cc0 	call	8004cc <_fflush_r>
  8003ec:	1025883a 	mov	r18,r2
  8003f0:	80800b17 	ldw	r2,44(r16)
  8003f4:	10000426 	beq	r2,zero,800408 <_fclose_r+0x60>
  8003f8:	81400717 	ldw	r5,28(r16)
  8003fc:	8809883a 	mov	r4,r17
  800400:	103ee83a 	callr	r2
  800404:	10002a16 	blt	r2,zero,8004b0 <_fclose_r+0x108>
  800408:	8080030b 	ldhu	r2,12(r16)
  80040c:	1080200c 	andi	r2,r2,128
  800410:	1000231e 	bne	r2,zero,8004a0 <_fclose_r+0xf8>
  800414:	81400c17 	ldw	r5,48(r16)
  800418:	28000526 	beq	r5,zero,800430 <_fclose_r+0x88>
  80041c:	80801004 	addi	r2,r16,64
  800420:	28800226 	beq	r5,r2,80042c <_fclose_r+0x84>
  800424:	8809883a 	mov	r4,r17
  800428:	0800c580 	call	800c58 <_free_r>
  80042c:	80000c15 	stw	zero,48(r16)
  800430:	81401117 	ldw	r5,68(r16)
  800434:	28000326 	beq	r5,zero,800444 <_fclose_r+0x9c>
  800438:	8809883a 	mov	r4,r17
  80043c:	0800c580 	call	800c58 <_free_r>
  800440:	80001115 	stw	zero,68(r16)
  800444:	8000030d 	sth	zero,12(r16)
  800448:	08007580 	call	800758 <__sfp_lock_release>
  80044c:	9005883a 	mov	r2,r18
  800450:	dfc00317 	ldw	ra,12(sp)
  800454:	dc800217 	ldw	r18,8(sp)
  800458:	dc400117 	ldw	r17,4(sp)
  80045c:	dc000017 	ldw	r16,0(sp)
  800460:	dec00404 	addi	sp,sp,16
  800464:	f800283a 	ret
  800468:	08007580 	call	800758 <__sfp_lock_release>
  80046c:	0025883a 	mov	r18,zero
  800470:	9005883a 	mov	r2,r18
  800474:	dfc00317 	ldw	ra,12(sp)
  800478:	dc800217 	ldw	r18,8(sp)
  80047c:	dc400117 	ldw	r17,4(sp)
  800480:	dc000017 	ldw	r16,0(sp)
  800484:	dec00404 	addi	sp,sp,16
  800488:	f800283a 	ret
  80048c:	8809883a 	mov	r4,r17
  800490:	08007640 	call	800764 <__sinit>
  800494:	8080030f 	ldh	r2,12(r16)
  800498:	103fd11e 	bne	r2,zero,8003e0 <_fclose_r+0x38>
  80049c:	003ff206 	br	800468 <_fclose_r+0xc0>
  8004a0:	81400417 	ldw	r5,16(r16)
  8004a4:	8809883a 	mov	r4,r17
  8004a8:	0800c580 	call	800c58 <_free_r>
  8004ac:	003fd906 	br	800414 <_fclose_r+0x6c>
  8004b0:	04bfffc4 	movi	r18,-1
  8004b4:	003fd406 	br	800408 <_fclose_r+0x60>

008004b8 <fclose>:
  8004b8:	00802074 	movhi	r2,129
  8004bc:	10834504 	addi	r2,r2,3348
  8004c0:	200b883a 	mov	r5,r4
  8004c4:	11000017 	ldw	r4,0(r2)
  8004c8:	08003a81 	jmpi	8003a8 <_fclose_r>

008004cc <_fflush_r>:
  8004cc:	defffb04 	addi	sp,sp,-20
  8004d0:	dcc00315 	stw	r19,12(sp)
  8004d4:	dc800215 	stw	r18,8(sp)
  8004d8:	dfc00415 	stw	ra,16(sp)
  8004dc:	dc400115 	stw	r17,4(sp)
  8004e0:	dc000015 	stw	r16,0(sp)
  8004e4:	2027883a 	mov	r19,r4
  8004e8:	2825883a 	mov	r18,r5
  8004ec:	20000226 	beq	r4,zero,8004f8 <_fflush_r+0x2c>
  8004f0:	20800e17 	ldw	r2,56(r4)
  8004f4:	10005626 	beq	r2,zero,800650 <_fflush_r+0x184>
  8004f8:	9100030b 	ldhu	r4,12(r18)
  8004fc:	20ffffcc 	andi	r3,r4,65535
  800500:	18e0001c 	xori	r3,r3,32768
  800504:	18e00004 	addi	r3,r3,-32768
  800508:	1880020c 	andi	r2,r3,8
  80050c:	1000261e 	bne	r2,zero,8005a8 <_fflush_r+0xdc>
  800510:	90c00117 	ldw	r3,4(r18)
  800514:	20820014 	ori	r2,r4,2048
  800518:	9080030d 	sth	r2,12(r18)
  80051c:	1009883a 	mov	r4,r2
  800520:	00c0400e 	bge	zero,r3,800624 <_fflush_r+0x158>
  800524:	92000a17 	ldw	r8,40(r18)
  800528:	40004026 	beq	r8,zero,80062c <_fflush_r+0x160>
  80052c:	2084000c 	andi	r2,r4,4096
  800530:	10005326 	beq	r2,zero,800680 <_fflush_r+0x1b4>
  800534:	94001417 	ldw	r16,80(r18)
  800538:	9080030b 	ldhu	r2,12(r18)
  80053c:	1080010c 	andi	r2,r2,4
  800540:	1000481e 	bne	r2,zero,800664 <_fflush_r+0x198>
  800544:	91400717 	ldw	r5,28(r18)
  800548:	9809883a 	mov	r4,r19
  80054c:	800d883a 	mov	r6,r16
  800550:	000f883a 	mov	r7,zero
  800554:	403ee83a 	callr	r8
  800558:	8080261e 	bne	r16,r2,8005f4 <_fflush_r+0x128>
  80055c:	9080030b 	ldhu	r2,12(r18)
  800560:	91000417 	ldw	r4,16(r18)
  800564:	90000115 	stw	zero,4(r18)
  800568:	10bdffcc 	andi	r2,r2,63487
  80056c:	10ffffcc 	andi	r3,r2,65535
  800570:	18c4000c 	andi	r3,r3,4096
  800574:	9080030d 	sth	r2,12(r18)
  800578:	91000015 	stw	r4,0(r18)
  80057c:	18002b26 	beq	r3,zero,80062c <_fflush_r+0x160>
  800580:	0007883a 	mov	r3,zero
  800584:	1805883a 	mov	r2,r3
  800588:	94001415 	stw	r16,80(r18)
  80058c:	dfc00417 	ldw	ra,16(sp)
  800590:	dcc00317 	ldw	r19,12(sp)
  800594:	dc800217 	ldw	r18,8(sp)
  800598:	dc400117 	ldw	r17,4(sp)
  80059c:	dc000017 	ldw	r16,0(sp)
  8005a0:	dec00504 	addi	sp,sp,20
  8005a4:	f800283a 	ret
  8005a8:	94400417 	ldw	r17,16(r18)
  8005ac:	88001f26 	beq	r17,zero,80062c <_fflush_r+0x160>
  8005b0:	90800017 	ldw	r2,0(r18)
  8005b4:	18c000cc 	andi	r3,r3,3
  8005b8:	94400015 	stw	r17,0(r18)
  8005bc:	1461c83a 	sub	r16,r2,r17
  8005c0:	18002526 	beq	r3,zero,800658 <_fflush_r+0x18c>
  8005c4:	0005883a 	mov	r2,zero
  8005c8:	90800215 	stw	r2,8(r18)
  8005cc:	0400170e 	bge	zero,r16,80062c <_fflush_r+0x160>
  8005d0:	90c00917 	ldw	r3,36(r18)
  8005d4:	91400717 	ldw	r5,28(r18)
  8005d8:	880d883a 	mov	r6,r17
  8005dc:	800f883a 	mov	r7,r16
  8005e0:	9809883a 	mov	r4,r19
  8005e4:	183ee83a 	callr	r3
  8005e8:	88a3883a 	add	r17,r17,r2
  8005ec:	80a1c83a 	sub	r16,r16,r2
  8005f0:	00bff616 	blt	zero,r2,8005cc <_fflush_r+0x100>
  8005f4:	9080030b 	ldhu	r2,12(r18)
  8005f8:	00ffffc4 	movi	r3,-1
  8005fc:	10801014 	ori	r2,r2,64
  800600:	9080030d 	sth	r2,12(r18)
  800604:	1805883a 	mov	r2,r3
  800608:	dfc00417 	ldw	ra,16(sp)
  80060c:	dcc00317 	ldw	r19,12(sp)
  800610:	dc800217 	ldw	r18,8(sp)
  800614:	dc400117 	ldw	r17,4(sp)
  800618:	dc000017 	ldw	r16,0(sp)
  80061c:	dec00504 	addi	sp,sp,20
  800620:	f800283a 	ret
  800624:	90800f17 	ldw	r2,60(r18)
  800628:	00bfbe16 	blt	zero,r2,800524 <_fflush_r+0x58>
  80062c:	0007883a 	mov	r3,zero
  800630:	1805883a 	mov	r2,r3
  800634:	dfc00417 	ldw	ra,16(sp)
  800638:	dcc00317 	ldw	r19,12(sp)
  80063c:	dc800217 	ldw	r18,8(sp)
  800640:	dc400117 	ldw	r17,4(sp)
  800644:	dc000017 	ldw	r16,0(sp)
  800648:	dec00504 	addi	sp,sp,20
  80064c:	f800283a 	ret
  800650:	08007640 	call	800764 <__sinit>
  800654:	003fa806 	br	8004f8 <_fflush_r+0x2c>
  800658:	90800517 	ldw	r2,20(r18)
  80065c:	90800215 	stw	r2,8(r18)
  800660:	003fda06 	br	8005cc <_fflush_r+0x100>
  800664:	90800117 	ldw	r2,4(r18)
  800668:	90c00c17 	ldw	r3,48(r18)
  80066c:	80a1c83a 	sub	r16,r16,r2
  800670:	183fb426 	beq	r3,zero,800544 <_fflush_r+0x78>
  800674:	90800f17 	ldw	r2,60(r18)
  800678:	80a1c83a 	sub	r16,r16,r2
  80067c:	003fb106 	br	800544 <_fflush_r+0x78>
  800680:	91400717 	ldw	r5,28(r18)
  800684:	9809883a 	mov	r4,r19
  800688:	000d883a 	mov	r6,zero
  80068c:	01c00044 	movi	r7,1
  800690:	403ee83a 	callr	r8
  800694:	1021883a 	mov	r16,r2
  800698:	00bfffc4 	movi	r2,-1
  80069c:	80800226 	beq	r16,r2,8006a8 <_fflush_r+0x1dc>
  8006a0:	92000a17 	ldw	r8,40(r18)
  8006a4:	003fa406 	br	800538 <_fflush_r+0x6c>
  8006a8:	98c00017 	ldw	r3,0(r19)
  8006ac:	00800744 	movi	r2,29
  8006b0:	18bfde26 	beq	r3,r2,80062c <_fflush_r+0x160>
  8006b4:	9080030b 	ldhu	r2,12(r18)
  8006b8:	8007883a 	mov	r3,r16
  8006bc:	10801014 	ori	r2,r2,64
  8006c0:	9080030d 	sth	r2,12(r18)
  8006c4:	003fcf06 	br	800604 <_fflush_r+0x138>

008006c8 <fflush>:
  8006c8:	01402034 	movhi	r5,128
  8006cc:	29413304 	addi	r5,r5,1228
  8006d0:	2007883a 	mov	r3,r4
  8006d4:	20000526 	beq	r4,zero,8006ec <fflush+0x24>
  8006d8:	00802074 	movhi	r2,129
  8006dc:	10834504 	addi	r2,r2,3348
  8006e0:	11000017 	ldw	r4,0(r2)
  8006e4:	180b883a 	mov	r5,r3
  8006e8:	08004cc1 	jmpi	8004cc <_fflush_r>
  8006ec:	00802074 	movhi	r2,129
  8006f0:	10834604 	addi	r2,r2,3352
  8006f4:	11000017 	ldw	r4,0(r2)
  8006f8:	08014401 	jmpi	801440 <_fwalk_reent>

008006fc <std>:
  8006fc:	00802034 	movhi	r2,128
  800700:	1088c804 	addi	r2,r2,8992
  800704:	20800b15 	stw	r2,44(r4)
  800708:	00802034 	movhi	r2,128
  80070c:	10890304 	addi	r2,r2,9228
  800710:	20800815 	stw	r2,32(r4)
  800714:	00c02034 	movhi	r3,128
  800718:	18c8e404 	addi	r3,r3,9104
  80071c:	00802034 	movhi	r2,128
  800720:	1088ca04 	addi	r2,r2,9000
  800724:	2140030d 	sth	r5,12(r4)
  800728:	2180038d 	sth	r6,14(r4)
  80072c:	20c00915 	stw	r3,36(r4)
  800730:	20800a15 	stw	r2,40(r4)
  800734:	20000015 	stw	zero,0(r4)
  800738:	20000115 	stw	zero,4(r4)
  80073c:	20000215 	stw	zero,8(r4)
  800740:	20000415 	stw	zero,16(r4)
  800744:	20000515 	stw	zero,20(r4)
  800748:	20000615 	stw	zero,24(r4)
  80074c:	21000715 	stw	r4,28(r4)
  800750:	f800283a 	ret

00800754 <__sfp_lock_acquire>:
  800754:	f800283a 	ret

00800758 <__sfp_lock_release>:
  800758:	f800283a 	ret

0080075c <__sinit_lock_acquire>:
  80075c:	f800283a 	ret

00800760 <__sinit_lock_release>:
  800760:	f800283a 	ret

00800764 <__sinit>:
  800764:	20800e17 	ldw	r2,56(r4)
  800768:	defffd04 	addi	sp,sp,-12
  80076c:	dc400115 	stw	r17,4(sp)
  800770:	dc000015 	stw	r16,0(sp)
  800774:	dfc00215 	stw	ra,8(sp)
  800778:	04400044 	movi	r17,1
  80077c:	01400104 	movi	r5,4
  800780:	000d883a 	mov	r6,zero
  800784:	2021883a 	mov	r16,r4
  800788:	2200bb04 	addi	r8,r4,748
  80078c:	200f883a 	mov	r7,r4
  800790:	10000526 	beq	r2,zero,8007a8 <__sinit+0x44>
  800794:	dfc00217 	ldw	ra,8(sp)
  800798:	dc400117 	ldw	r17,4(sp)
  80079c:	dc000017 	ldw	r16,0(sp)
  8007a0:	dec00304 	addi	sp,sp,12
  8007a4:	f800283a 	ret
  8007a8:	21000117 	ldw	r4,4(r4)
  8007ac:	00802034 	movhi	r2,128
  8007b0:	10821204 	addi	r2,r2,2120
  8007b4:	00c000c4 	movi	r3,3
  8007b8:	80800f15 	stw	r2,60(r16)
  8007bc:	80c0b915 	stw	r3,740(r16)
  8007c0:	8200ba15 	stw	r8,744(r16)
  8007c4:	84400e15 	stw	r17,56(r16)
  8007c8:	8000b815 	stw	zero,736(r16)
  8007cc:	08006fc0 	call	8006fc <std>
  8007d0:	81000217 	ldw	r4,8(r16)
  8007d4:	880d883a 	mov	r6,r17
  8007d8:	800f883a 	mov	r7,r16
  8007dc:	01400284 	movi	r5,10
  8007e0:	08006fc0 	call	8006fc <std>
  8007e4:	81000317 	ldw	r4,12(r16)
  8007e8:	800f883a 	mov	r7,r16
  8007ec:	01400484 	movi	r5,18
  8007f0:	01800084 	movi	r6,2
  8007f4:	dfc00217 	ldw	ra,8(sp)
  8007f8:	dc400117 	ldw	r17,4(sp)
  8007fc:	dc000017 	ldw	r16,0(sp)
  800800:	dec00304 	addi	sp,sp,12
  800804:	08006fc1 	jmpi	8006fc <std>

00800808 <__fp_lock>:
  800808:	0005883a 	mov	r2,zero
  80080c:	f800283a 	ret

00800810 <__fp_unlock>:
  800810:	0005883a 	mov	r2,zero
  800814:	f800283a 	ret

00800818 <__fp_unlock_all>:
  800818:	00802074 	movhi	r2,129
  80081c:	10834504 	addi	r2,r2,3348
  800820:	11000017 	ldw	r4,0(r2)
  800824:	01402034 	movhi	r5,128
  800828:	29420404 	addi	r5,r5,2064
  80082c:	08015081 	jmpi	801508 <_fwalk>

00800830 <__fp_lock_all>:
  800830:	00802074 	movhi	r2,129
  800834:	10834504 	addi	r2,r2,3348
  800838:	11000017 	ldw	r4,0(r2)
  80083c:	01402034 	movhi	r5,128
  800840:	29420204 	addi	r5,r5,2056
  800844:	08015081 	jmpi	801508 <_fwalk>

00800848 <_cleanup_r>:
  800848:	01402034 	movhi	r5,128
  80084c:	29412e04 	addi	r5,r5,1208
  800850:	08015081 	jmpi	801508 <_fwalk>

00800854 <_cleanup>:
  800854:	00802074 	movhi	r2,129
  800858:	10834604 	addi	r2,r2,3352
  80085c:	11000017 	ldw	r4,0(r2)
  800860:	08008481 	jmpi	800848 <_cleanup_r>

00800864 <__sfmoreglue>:
  800864:	defffc04 	addi	sp,sp,-16
  800868:	dc400115 	stw	r17,4(sp)
  80086c:	2c401724 	muli	r17,r5,92
  800870:	dc800215 	stw	r18,8(sp)
  800874:	2825883a 	mov	r18,r5
  800878:	89400304 	addi	r5,r17,12
  80087c:	dc000015 	stw	r16,0(sp)
  800880:	dfc00315 	stw	ra,12(sp)
  800884:	08017540 	call	801754 <_malloc_r>
  800888:	0021883a 	mov	r16,zero
  80088c:	880d883a 	mov	r6,r17
  800890:	000b883a 	mov	r5,zero
  800894:	10000626 	beq	r2,zero,8008b0 <__sfmoreglue+0x4c>
  800898:	11000304 	addi	r4,r2,12
  80089c:	14800115 	stw	r18,4(r2)
  8008a0:	10000015 	stw	zero,0(r2)
  8008a4:	11000215 	stw	r4,8(r2)
  8008a8:	1021883a 	mov	r16,r2
  8008ac:	0801e940 	call	801e94 <memset>
  8008b0:	8005883a 	mov	r2,r16
  8008b4:	dfc00317 	ldw	ra,12(sp)
  8008b8:	dc800217 	ldw	r18,8(sp)
  8008bc:	dc400117 	ldw	r17,4(sp)
  8008c0:	dc000017 	ldw	r16,0(sp)
  8008c4:	dec00404 	addi	sp,sp,16
  8008c8:	f800283a 	ret

008008cc <__sfp>:
  8008cc:	defffd04 	addi	sp,sp,-12
  8008d0:	00802074 	movhi	r2,129
  8008d4:	10834604 	addi	r2,r2,3352
  8008d8:	dc000015 	stw	r16,0(sp)
  8008dc:	14000017 	ldw	r16,0(r2)
  8008e0:	dc400115 	stw	r17,4(sp)
  8008e4:	dfc00215 	stw	ra,8(sp)
  8008e8:	80800e17 	ldw	r2,56(r16)
  8008ec:	2023883a 	mov	r17,r4
  8008f0:	10002626 	beq	r2,zero,80098c <__sfp+0xc0>
  8008f4:	8400b804 	addi	r16,r16,736
  8008f8:	80800117 	ldw	r2,4(r16)
  8008fc:	81000217 	ldw	r4,8(r16)
  800900:	10ffffc4 	addi	r3,r2,-1
  800904:	18000916 	blt	r3,zero,80092c <__sfp+0x60>
  800908:	2080030f 	ldh	r2,12(r4)
  80090c:	10000b26 	beq	r2,zero,80093c <__sfp+0x70>
  800910:	017fffc4 	movi	r5,-1
  800914:	00000206 	br	800920 <__sfp+0x54>
  800918:	2080030f 	ldh	r2,12(r4)
  80091c:	10000726 	beq	r2,zero,80093c <__sfp+0x70>
  800920:	18ffffc4 	addi	r3,r3,-1
  800924:	21001704 	addi	r4,r4,92
  800928:	197ffb1e 	bne	r3,r5,800918 <__sfp+0x4c>
  80092c:	80800017 	ldw	r2,0(r16)
  800930:	10001926 	beq	r2,zero,800998 <__sfp+0xcc>
  800934:	1021883a 	mov	r16,r2
  800938:	003fef06 	br	8008f8 <__sfp+0x2c>
  80093c:	00bfffc4 	movi	r2,-1
  800940:	00c00044 	movi	r3,1
  800944:	2080038d 	sth	r2,14(r4)
  800948:	20c0030d 	sth	r3,12(r4)
  80094c:	20000015 	stw	zero,0(r4)
  800950:	20000215 	stw	zero,8(r4)
  800954:	20000115 	stw	zero,4(r4)
  800958:	20000415 	stw	zero,16(r4)
  80095c:	20000515 	stw	zero,20(r4)
  800960:	20000615 	stw	zero,24(r4)
  800964:	20000c15 	stw	zero,48(r4)
  800968:	20000d15 	stw	zero,52(r4)
  80096c:	20001115 	stw	zero,68(r4)
  800970:	20001215 	stw	zero,72(r4)
  800974:	2005883a 	mov	r2,r4
  800978:	dfc00217 	ldw	ra,8(sp)
  80097c:	dc400117 	ldw	r17,4(sp)
  800980:	dc000017 	ldw	r16,0(sp)
  800984:	dec00304 	addi	sp,sp,12
  800988:	f800283a 	ret
  80098c:	8009883a 	mov	r4,r16
  800990:	08007640 	call	800764 <__sinit>
  800994:	003fd706 	br	8008f4 <__sfp+0x28>
  800998:	8809883a 	mov	r4,r17
  80099c:	01400104 	movi	r5,4
  8009a0:	08008640 	call	800864 <__sfmoreglue>
  8009a4:	80800015 	stw	r2,0(r16)
  8009a8:	103fe21e 	bne	r2,zero,800934 <__sfp+0x68>
  8009ac:	00800304 	movi	r2,12
  8009b0:	0009883a 	mov	r4,zero
  8009b4:	88800015 	stw	r2,0(r17)
  8009b8:	003fee06 	br	800974 <__sfp+0xa8>

008009bc <_fopen_r>:
  8009bc:	defffa04 	addi	sp,sp,-24
  8009c0:	dcc00415 	stw	r19,16(sp)
  8009c4:	2827883a 	mov	r19,r5
  8009c8:	300b883a 	mov	r5,r6
  8009cc:	d80d883a 	mov	r6,sp
  8009d0:	dc800315 	stw	r18,12(sp)
  8009d4:	dc400215 	stw	r17,8(sp)
  8009d8:	dc000115 	stw	r16,4(sp)
  8009dc:	dfc00515 	stw	ra,20(sp)
  8009e0:	2021883a 	mov	r16,r4
  8009e4:	0805df80 	call	805df8 <__sflags>
  8009e8:	1025883a 	mov	r18,r2
  8009ec:	8009883a 	mov	r4,r16
  8009f0:	0023883a 	mov	r17,zero
  8009f4:	1000081e 	bne	r2,zero,800a18 <_fopen_r+0x5c>
  8009f8:	8805883a 	mov	r2,r17
  8009fc:	dfc00517 	ldw	ra,20(sp)
  800a00:	dcc00417 	ldw	r19,16(sp)
  800a04:	dc800317 	ldw	r18,12(sp)
  800a08:	dc400217 	ldw	r17,8(sp)
  800a0c:	dc000117 	ldw	r16,4(sp)
  800a10:	dec00604 	addi	sp,sp,24
  800a14:	f800283a 	ret
  800a18:	08008cc0 	call	8008cc <__sfp>
  800a1c:	1023883a 	mov	r17,r2
  800a20:	980b883a 	mov	r5,r19
  800a24:	8009883a 	mov	r4,r16
  800a28:	01c06d84 	movi	r7,438
  800a2c:	103ff226 	beq	r2,zero,8009f8 <_fopen_r+0x3c>
  800a30:	d9800017 	ldw	r6,0(sp)
  800a34:	0801f2c0 	call	801f2c <_open_r>
  800a38:	10001816 	blt	r2,zero,800a9c <_fopen_r+0xe0>
  800a3c:	00c02034 	movhi	r3,128
  800a40:	18c8e404 	addi	r3,r3,9104
  800a44:	923fffcc 	andi	r8,r18,65535
  800a48:	8880038d 	sth	r2,14(r17)
  800a4c:	00802034 	movhi	r2,128
  800a50:	10890304 	addi	r2,r2,9228
  800a54:	88800815 	stw	r2,32(r17)
  800a58:	88c00915 	stw	r3,36(r17)
  800a5c:	00802034 	movhi	r2,128
  800a60:	1088ca04 	addi	r2,r2,9000
  800a64:	00c02034 	movhi	r3,128
  800a68:	18c8c804 	addi	r3,r3,8992
  800a6c:	4200400c 	andi	r8,r8,256
  800a70:	8c80030d 	sth	r18,12(r17)
  800a74:	8009883a 	mov	r4,r16
  800a78:	880b883a 	mov	r5,r17
  800a7c:	000d883a 	mov	r6,zero
  800a80:	01c00084 	movi	r7,2
  800a84:	88800a15 	stw	r2,40(r17)
  800a88:	88c00b15 	stw	r3,44(r17)
  800a8c:	8c400715 	stw	r17,28(r17)
  800a90:	403fd926 	beq	r8,zero,8009f8 <_fopen_r+0x3c>
  800a94:	0800f6c0 	call	800f6c <_fseek_r>
  800a98:	003fd706 	br	8009f8 <_fopen_r+0x3c>
  800a9c:	08007540 	call	800754 <__sfp_lock_acquire>
  800aa0:	8800030d 	sth	zero,12(r17)
  800aa4:	08007580 	call	800758 <__sfp_lock_release>
  800aa8:	0023883a 	mov	r17,zero
  800aac:	003fd206 	br	8009f8 <_fopen_r+0x3c>

00800ab0 <fopen>:
  800ab0:	01802074 	movhi	r6,129
  800ab4:	31834504 	addi	r6,r6,3348
  800ab8:	2007883a 	mov	r3,r4
  800abc:	31000017 	ldw	r4,0(r6)
  800ac0:	280d883a 	mov	r6,r5
  800ac4:	180b883a 	mov	r5,r3
  800ac8:	08009bc1 	jmpi	8009bc <_fopen_r>

00800acc <fprintf>:
  800acc:	defffc04 	addi	sp,sp,-16
  800ad0:	dfc00115 	stw	ra,4(sp)
  800ad4:	d9800215 	stw	r6,8(sp)
  800ad8:	d9c00315 	stw	r7,12(sp)
  800adc:	d8800204 	addi	r2,sp,8
  800ae0:	100d883a 	mov	r6,r2
  800ae4:	d8800015 	stw	r2,0(sp)
  800ae8:	08043e40 	call	8043e4 <__vfprintf_internal>
  800aec:	dfc00117 	ldw	ra,4(sp)
  800af0:	dec00404 	addi	sp,sp,16
  800af4:	f800283a 	ret

00800af8 <_fprintf_r>:
  800af8:	defffd04 	addi	sp,sp,-12
  800afc:	2807883a 	mov	r3,r5
  800b00:	dfc00115 	stw	ra,4(sp)
  800b04:	d9c00215 	stw	r7,8(sp)
  800b08:	d8800204 	addi	r2,sp,8
  800b0c:	300b883a 	mov	r5,r6
  800b10:	1809883a 	mov	r4,r3
  800b14:	100d883a 	mov	r6,r2
  800b18:	d8800015 	stw	r2,0(sp)
  800b1c:	08043e40 	call	8043e4 <__vfprintf_internal>
  800b20:	dfc00117 	ldw	ra,4(sp)
  800b24:	dec00304 	addi	sp,sp,12
  800b28:	f800283a 	ret

00800b2c <_malloc_trim_r>:
  800b2c:	defffb04 	addi	sp,sp,-20
  800b30:	dcc00315 	stw	r19,12(sp)
  800b34:	04c02074 	movhi	r19,129
  800b38:	9cfd4504 	addi	r19,r19,-2796
  800b3c:	dc800215 	stw	r18,8(sp)
  800b40:	dc400115 	stw	r17,4(sp)
  800b44:	dc000015 	stw	r16,0(sp)
  800b48:	2823883a 	mov	r17,r5
  800b4c:	2025883a 	mov	r18,r4
  800b50:	dfc00415 	stw	ra,16(sp)
  800b54:	080abf80 	call	80abf8 <__malloc_lock>
  800b58:	98800217 	ldw	r2,8(r19)
  800b5c:	9009883a 	mov	r4,r18
  800b60:	000b883a 	mov	r5,zero
  800b64:	10c00117 	ldw	r3,4(r2)
  800b68:	00bfff04 	movi	r2,-4
  800b6c:	18a0703a 	and	r16,r3,r2
  800b70:	8463c83a 	sub	r17,r16,r17
  800b74:	8c43fbc4 	addi	r17,r17,4079
  800b78:	8822d33a 	srli	r17,r17,12
  800b7c:	0083ffc4 	movi	r2,4095
  800b80:	8c7fffc4 	addi	r17,r17,-1
  800b84:	8822933a 	slli	r17,r17,12
  800b88:	1440060e 	bge	r2,r17,800ba4 <_malloc_trim_r+0x78>
  800b8c:	08022b00 	call	8022b0 <_sbrk_r>
  800b90:	98c00217 	ldw	r3,8(r19)
  800b94:	9009883a 	mov	r4,r18
  800b98:	044bc83a 	sub	r5,zero,r17
  800b9c:	80c7883a 	add	r3,r16,r3
  800ba0:	10c00926 	beq	r2,r3,800bc8 <_malloc_trim_r+0x9c>
  800ba4:	080ac180 	call	80ac18 <__malloc_unlock>
  800ba8:	0005883a 	mov	r2,zero
  800bac:	dfc00417 	ldw	ra,16(sp)
  800bb0:	dcc00317 	ldw	r19,12(sp)
  800bb4:	dc800217 	ldw	r18,8(sp)
  800bb8:	dc400117 	ldw	r17,4(sp)
  800bbc:	dc000017 	ldw	r16,0(sp)
  800bc0:	dec00504 	addi	sp,sp,20
  800bc4:	f800283a 	ret
  800bc8:	9009883a 	mov	r4,r18
  800bcc:	08022b00 	call	8022b0 <_sbrk_r>
  800bd0:	844dc83a 	sub	r6,r16,r17
  800bd4:	00ffffc4 	movi	r3,-1
  800bd8:	9009883a 	mov	r4,r18
  800bdc:	000b883a 	mov	r5,zero
  800be0:	01c02074 	movhi	r7,129
  800be4:	39ca7a04 	addi	r7,r7,10728
  800be8:	31800054 	ori	r6,r6,1
  800bec:	10c00926 	beq	r2,r3,800c14 <_malloc_trim_r+0xe8>
  800bf0:	38800017 	ldw	r2,0(r7)
  800bf4:	98c00217 	ldw	r3,8(r19)
  800bf8:	9009883a 	mov	r4,r18
  800bfc:	1445c83a 	sub	r2,r2,r17
  800c00:	38800015 	stw	r2,0(r7)
  800c04:	19800115 	stw	r6,4(r3)
  800c08:	080ac180 	call	80ac18 <__malloc_unlock>
  800c0c:	00800044 	movi	r2,1
  800c10:	003fe606 	br	800bac <_malloc_trim_r+0x80>
  800c14:	08022b00 	call	8022b0 <_sbrk_r>
  800c18:	99800217 	ldw	r6,8(r19)
  800c1c:	100f883a 	mov	r7,r2
  800c20:	9009883a 	mov	r4,r18
  800c24:	1187c83a 	sub	r3,r2,r6
  800c28:	008003c4 	movi	r2,15
  800c2c:	19400054 	ori	r5,r3,1
  800c30:	10ffdc0e 	bge	r2,r3,800ba4 <_malloc_trim_r+0x78>
  800c34:	00802074 	movhi	r2,129
  800c38:	10834804 	addi	r2,r2,3360
  800c3c:	10c00017 	ldw	r3,0(r2)
  800c40:	00802074 	movhi	r2,129
  800c44:	108a7a04 	addi	r2,r2,10728
  800c48:	31400115 	stw	r5,4(r6)
  800c4c:	38c7c83a 	sub	r3,r7,r3
  800c50:	10c00015 	stw	r3,0(r2)
  800c54:	003fd306 	br	800ba4 <_malloc_trim_r+0x78>

00800c58 <_free_r>:
  800c58:	defffd04 	addi	sp,sp,-12
  800c5c:	dc400115 	stw	r17,4(sp)
  800c60:	dc000015 	stw	r16,0(sp)
  800c64:	dfc00215 	stw	ra,8(sp)
  800c68:	2821883a 	mov	r16,r5
  800c6c:	2023883a 	mov	r17,r4
  800c70:	28005a26 	beq	r5,zero,800ddc <_free_r+0x184>
  800c74:	080abf80 	call	80abf8 <__malloc_lock>
  800c78:	823ffe04 	addi	r8,r16,-8
  800c7c:	41400117 	ldw	r5,4(r8)
  800c80:	00bfff84 	movi	r2,-2
  800c84:	02802074 	movhi	r10,129
  800c88:	52bd4504 	addi	r10,r10,-2796
  800c8c:	288e703a 	and	r7,r5,r2
  800c90:	41cd883a 	add	r6,r8,r7
  800c94:	30c00117 	ldw	r3,4(r6)
  800c98:	51000217 	ldw	r4,8(r10)
  800c9c:	00bfff04 	movi	r2,-4
  800ca0:	1892703a 	and	r9,r3,r2
  800ca4:	5017883a 	mov	r11,r10
  800ca8:	31006726 	beq	r6,r4,800e48 <_free_r+0x1f0>
  800cac:	2880004c 	andi	r2,r5,1
  800cb0:	1005003a 	cmpeq	r2,r2,zero
  800cb4:	32400115 	stw	r9,4(r6)
  800cb8:	10001a1e 	bne	r2,zero,800d24 <_free_r+0xcc>
  800cbc:	000b883a 	mov	r5,zero
  800cc0:	3247883a 	add	r3,r6,r9
  800cc4:	18800117 	ldw	r2,4(r3)
  800cc8:	1080004c 	andi	r2,r2,1
  800ccc:	1000231e 	bne	r2,zero,800d5c <_free_r+0x104>
  800cd0:	280ac03a 	cmpne	r5,r5,zero
  800cd4:	3a4f883a 	add	r7,r7,r9
  800cd8:	2800451e 	bne	r5,zero,800df0 <_free_r+0x198>
  800cdc:	31000217 	ldw	r4,8(r6)
  800ce0:	00802074 	movhi	r2,129
  800ce4:	10bd4704 	addi	r2,r2,-2788
  800ce8:	20807b26 	beq	r4,r2,800ed8 <_free_r+0x280>
  800cec:	30800317 	ldw	r2,12(r6)
  800cf0:	3a07883a 	add	r3,r7,r8
  800cf4:	19c00015 	stw	r7,0(r3)
  800cf8:	11000215 	stw	r4,8(r2)
  800cfc:	20800315 	stw	r2,12(r4)
  800d00:	38800054 	ori	r2,r7,1
  800d04:	40800115 	stw	r2,4(r8)
  800d08:	28001a26 	beq	r5,zero,800d74 <_free_r+0x11c>
  800d0c:	8809883a 	mov	r4,r17
  800d10:	dfc00217 	ldw	ra,8(sp)
  800d14:	dc400117 	ldw	r17,4(sp)
  800d18:	dc000017 	ldw	r16,0(sp)
  800d1c:	dec00304 	addi	sp,sp,12
  800d20:	080ac181 	jmpi	80ac18 <__malloc_unlock>
  800d24:	80bffe17 	ldw	r2,-8(r16)
  800d28:	50c00204 	addi	r3,r10,8
  800d2c:	4091c83a 	sub	r8,r8,r2
  800d30:	41000217 	ldw	r4,8(r8)
  800d34:	388f883a 	add	r7,r7,r2
  800d38:	20c06126 	beq	r4,r3,800ec0 <_free_r+0x268>
  800d3c:	40800317 	ldw	r2,12(r8)
  800d40:	3247883a 	add	r3,r6,r9
  800d44:	000b883a 	mov	r5,zero
  800d48:	11000215 	stw	r4,8(r2)
  800d4c:	20800315 	stw	r2,12(r4)
  800d50:	18800117 	ldw	r2,4(r3)
  800d54:	1080004c 	andi	r2,r2,1
  800d58:	103fdd26 	beq	r2,zero,800cd0 <_free_r+0x78>
  800d5c:	38800054 	ori	r2,r7,1
  800d60:	3a07883a 	add	r3,r7,r8
  800d64:	280ac03a 	cmpne	r5,r5,zero
  800d68:	40800115 	stw	r2,4(r8)
  800d6c:	19c00015 	stw	r7,0(r3)
  800d70:	283fe61e 	bne	r5,zero,800d0c <_free_r+0xb4>
  800d74:	00807fc4 	movi	r2,511
  800d78:	11c01f2e 	bgeu	r2,r7,800df8 <_free_r+0x1a0>
  800d7c:	3806d27a 	srli	r3,r7,9
  800d80:	1800481e 	bne	r3,zero,800ea4 <_free_r+0x24c>
  800d84:	3804d0fa 	srli	r2,r7,3
  800d88:	100690fa 	slli	r3,r2,3
  800d8c:	1acd883a 	add	r6,r3,r11
  800d90:	31400217 	ldw	r5,8(r6)
  800d94:	31405926 	beq	r6,r5,800efc <_free_r+0x2a4>
  800d98:	28800117 	ldw	r2,4(r5)
  800d9c:	00ffff04 	movi	r3,-4
  800da0:	10c4703a 	and	r2,r2,r3
  800da4:	3880022e 	bgeu	r7,r2,800db0 <_free_r+0x158>
  800da8:	29400217 	ldw	r5,8(r5)
  800dac:	317ffa1e 	bne	r6,r5,800d98 <_free_r+0x140>
  800db0:	29800317 	ldw	r6,12(r5)
  800db4:	41800315 	stw	r6,12(r8)
  800db8:	41400215 	stw	r5,8(r8)
  800dbc:	8809883a 	mov	r4,r17
  800dc0:	2a000315 	stw	r8,12(r5)
  800dc4:	32000215 	stw	r8,8(r6)
  800dc8:	dfc00217 	ldw	ra,8(sp)
  800dcc:	dc400117 	ldw	r17,4(sp)
  800dd0:	dc000017 	ldw	r16,0(sp)
  800dd4:	dec00304 	addi	sp,sp,12
  800dd8:	080ac181 	jmpi	80ac18 <__malloc_unlock>
  800ddc:	dfc00217 	ldw	ra,8(sp)
  800de0:	dc400117 	ldw	r17,4(sp)
  800de4:	dc000017 	ldw	r16,0(sp)
  800de8:	dec00304 	addi	sp,sp,12
  800dec:	f800283a 	ret
  800df0:	31000217 	ldw	r4,8(r6)
  800df4:	003fbd06 	br	800cec <_free_r+0x94>
  800df8:	3806d0fa 	srli	r3,r7,3
  800dfc:	00800044 	movi	r2,1
  800e00:	51400117 	ldw	r5,4(r10)
  800e04:	180890fa 	slli	r4,r3,3
  800e08:	1807d0ba 	srai	r3,r3,2
  800e0c:	22c9883a 	add	r4,r4,r11
  800e10:	21800217 	ldw	r6,8(r4)
  800e14:	10c4983a 	sll	r2,r2,r3
  800e18:	41000315 	stw	r4,12(r8)
  800e1c:	41800215 	stw	r6,8(r8)
  800e20:	288ab03a 	or	r5,r5,r2
  800e24:	22000215 	stw	r8,8(r4)
  800e28:	8809883a 	mov	r4,r17
  800e2c:	51400115 	stw	r5,4(r10)
  800e30:	32000315 	stw	r8,12(r6)
  800e34:	dfc00217 	ldw	ra,8(sp)
  800e38:	dc400117 	ldw	r17,4(sp)
  800e3c:	dc000017 	ldw	r16,0(sp)
  800e40:	dec00304 	addi	sp,sp,12
  800e44:	080ac181 	jmpi	80ac18 <__malloc_unlock>
  800e48:	2880004c 	andi	r2,r5,1
  800e4c:	3a4d883a 	add	r6,r7,r9
  800e50:	1000071e 	bne	r2,zero,800e70 <_free_r+0x218>
  800e54:	80bffe17 	ldw	r2,-8(r16)
  800e58:	4091c83a 	sub	r8,r8,r2
  800e5c:	41000317 	ldw	r4,12(r8)
  800e60:	40c00217 	ldw	r3,8(r8)
  800e64:	308d883a 	add	r6,r6,r2
  800e68:	20c00215 	stw	r3,8(r4)
  800e6c:	19000315 	stw	r4,12(r3)
  800e70:	00802074 	movhi	r2,129
  800e74:	10834704 	addi	r2,r2,3356
  800e78:	11000017 	ldw	r4,0(r2)
  800e7c:	30c00054 	ori	r3,r6,1
  800e80:	52000215 	stw	r8,8(r10)
  800e84:	40c00115 	stw	r3,4(r8)
  800e88:	313fa036 	bltu	r6,r4,800d0c <_free_r+0xb4>
  800e8c:	00802074 	movhi	r2,129
  800e90:	108a6e04 	addi	r2,r2,10680
  800e94:	11400017 	ldw	r5,0(r2)
  800e98:	8809883a 	mov	r4,r17
  800e9c:	0800b2c0 	call	800b2c <_malloc_trim_r>
  800ea0:	003f9a06 	br	800d0c <_free_r+0xb4>
  800ea4:	00800104 	movi	r2,4
  800ea8:	10c0072e 	bgeu	r2,r3,800ec8 <_free_r+0x270>
  800eac:	00800504 	movi	r2,20
  800eb0:	10c01936 	bltu	r2,r3,800f18 <_free_r+0x2c0>
  800eb4:	188016c4 	addi	r2,r3,91
  800eb8:	100690fa 	slli	r3,r2,3
  800ebc:	003fb306 	br	800d8c <_free_r+0x134>
  800ec0:	01400044 	movi	r5,1
  800ec4:	003f7e06 	br	800cc0 <_free_r+0x68>
  800ec8:	3804d1ba 	srli	r2,r7,6
  800ecc:	10800e04 	addi	r2,r2,56
  800ed0:	100690fa 	slli	r3,r2,3
  800ed4:	003fad06 	br	800d8c <_free_r+0x134>
  800ed8:	22000315 	stw	r8,12(r4)
  800edc:	22000215 	stw	r8,8(r4)
  800ee0:	3a05883a 	add	r2,r7,r8
  800ee4:	38c00054 	ori	r3,r7,1
  800ee8:	11c00015 	stw	r7,0(r2)
  800eec:	41000215 	stw	r4,8(r8)
  800ef0:	40c00115 	stw	r3,4(r8)
  800ef4:	41000315 	stw	r4,12(r8)
  800ef8:	003f8406 	br	800d0c <_free_r+0xb4>
  800efc:	1005d0ba 	srai	r2,r2,2
  800f00:	00c00044 	movi	r3,1
  800f04:	51000117 	ldw	r4,4(r10)
  800f08:	1886983a 	sll	r3,r3,r2
  800f0c:	20c8b03a 	or	r4,r4,r3
  800f10:	51000115 	stw	r4,4(r10)
  800f14:	003fa706 	br	800db4 <_free_r+0x15c>
  800f18:	00801504 	movi	r2,84
  800f1c:	10c00436 	bltu	r2,r3,800f30 <_free_r+0x2d8>
  800f20:	3804d33a 	srli	r2,r7,12
  800f24:	10801b84 	addi	r2,r2,110
  800f28:	100690fa 	slli	r3,r2,3
  800f2c:	003f9706 	br	800d8c <_free_r+0x134>
  800f30:	00805504 	movi	r2,340
  800f34:	10c00436 	bltu	r2,r3,800f48 <_free_r+0x2f0>
  800f38:	3804d3fa 	srli	r2,r7,15
  800f3c:	10801dc4 	addi	r2,r2,119
  800f40:	100690fa 	slli	r3,r2,3
  800f44:	003f9106 	br	800d8c <_free_r+0x134>
  800f48:	00815504 	movi	r2,1364
  800f4c:	10c0032e 	bgeu	r2,r3,800f5c <_free_r+0x304>
  800f50:	00801f84 	movi	r2,126
  800f54:	00c0fc04 	movi	r3,1008
  800f58:	003f8c06 	br	800d8c <_free_r+0x134>
  800f5c:	3804d4ba 	srli	r2,r7,18
  800f60:	10801f04 	addi	r2,r2,124
  800f64:	100690fa 	slli	r3,r2,3
  800f68:	003f8806 	br	800d8c <_free_r+0x134>

00800f6c <_fseek_r>:
  800f6c:	deffe804 	addi	sp,sp,-96
  800f70:	dd801515 	stw	r22,84(sp)
  800f74:	dcc01215 	stw	r19,72(sp)
  800f78:	dc801115 	stw	r18,68(sp)
  800f7c:	dc000f15 	stw	r16,60(sp)
  800f80:	dfc01715 	stw	ra,92(sp)
  800f84:	ddc01615 	stw	r23,88(sp)
  800f88:	dd401415 	stw	r21,80(sp)
  800f8c:	dd001315 	stw	r20,76(sp)
  800f90:	dc401015 	stw	r17,64(sp)
  800f94:	2025883a 	mov	r18,r4
  800f98:	2821883a 	mov	r16,r5
  800f9c:	302d883a 	mov	r22,r6
  800fa0:	3827883a 	mov	r19,r7
  800fa4:	20000226 	beq	r4,zero,800fb0 <_fseek_r+0x44>
  800fa8:	20800e17 	ldw	r2,56(r4)
  800fac:	10007826 	beq	r2,zero,801190 <_fseek_r+0x224>
  800fb0:	8080030b 	ldhu	r2,12(r16)
  800fb4:	00c04204 	movi	r3,264
  800fb8:	1080420c 	andi	r2,r2,264
  800fbc:	10c07926 	beq	r2,r3,8011a4 <_fseek_r+0x238>
  800fc0:	85400a17 	ldw	r21,40(r16)
  800fc4:	a800ea26 	beq	r21,zero,801370 <_fseek_r+0x404>
  800fc8:	00800044 	movi	r2,1
  800fcc:	98805f26 	beq	r19,r2,80114c <_fseek_r+0x1e0>
  800fd0:	00800084 	movi	r2,2
  800fd4:	98801026 	beq	r19,r2,801018 <_fseek_r+0xac>
  800fd8:	98000f26 	beq	r19,zero,801018 <_fseek_r+0xac>
  800fdc:	00800584 	movi	r2,22
  800fe0:	013fffc4 	movi	r4,-1
  800fe4:	90800015 	stw	r2,0(r18)
  800fe8:	2005883a 	mov	r2,r4
  800fec:	dfc01717 	ldw	ra,92(sp)
  800ff0:	ddc01617 	ldw	r23,88(sp)
  800ff4:	dd801517 	ldw	r22,84(sp)
  800ff8:	dd401417 	ldw	r21,80(sp)
  800ffc:	dd001317 	ldw	r20,76(sp)
  801000:	dcc01217 	ldw	r19,72(sp)
  801004:	dc801117 	ldw	r18,68(sp)
  801008:	dc401017 	ldw	r17,64(sp)
  80100c:	dc000f17 	ldw	r16,60(sp)
  801010:	dec01804 	addi	sp,sp,96
  801014:	f800283a 	ret
  801018:	81800417 	ldw	r6,16(r16)
  80101c:	0023883a 	mov	r17,zero
  801020:	002f883a 	mov	r23,zero
  801024:	3000a626 	beq	r6,zero,8012c0 <_fseek_r+0x354>
  801028:	8100030b 	ldhu	r4,12(r16)
  80102c:	2082068c 	andi	r2,r4,2074
  801030:	1000081e 	bne	r2,zero,801054 <_fseek_r+0xe8>
  801034:	2081000c 	andi	r2,r4,1024
  801038:	10001b1e 	bne	r2,zero,8010a8 <_fseek_r+0x13c>
  80103c:	00802034 	movhi	r2,128
  801040:	1088ca04 	addi	r2,r2,9000
  801044:	a8800926 	beq	r21,r2,80106c <_fseek_r+0x100>
  801048:	8080030b 	ldhu	r2,12(r16)
  80104c:	10820014 	ori	r2,r2,2048
  801050:	8080030d 	sth	r2,12(r16)
  801054:	9009883a 	mov	r4,r18
  801058:	800b883a 	mov	r5,r16
  80105c:	08004cc0 	call	8004cc <_fflush_r>
  801060:	1000a326 	beq	r2,zero,8012f0 <_fseek_r+0x384>
  801064:	013fffc4 	movi	r4,-1
  801068:	003fdf06 	br	800fe8 <_fseek_r+0x7c>
  80106c:	8140038f 	ldh	r5,14(r16)
  801070:	283ff516 	blt	r5,zero,801048 <_fseek_r+0xdc>
  801074:	9009883a 	mov	r4,r18
  801078:	d80d883a 	mov	r6,sp
  80107c:	08013cc0 	call	8013cc <_fstat_r>
  801080:	103ff11e 	bne	r2,zero,801048 <_fseek_r+0xdc>
  801084:	d8800117 	ldw	r2,4(sp)
  801088:	00e00014 	movui	r3,32768
  80108c:	10bc000c 	andi	r2,r2,61440
  801090:	10ffed1e 	bne	r2,r3,801048 <_fseek_r+0xdc>
  801094:	80c0030b 	ldhu	r3,12(r16)
  801098:	00810004 	movi	r2,1024
  80109c:	80801315 	stw	r2,76(r16)
  8010a0:	1886b03a 	or	r3,r3,r2
  8010a4:	80c0030d 	sth	r3,12(r16)
  8010a8:	9800701e 	bne	r19,zero,80126c <_fseek_r+0x300>
  8010ac:	b029883a 	mov	r20,r22
  8010b0:	b804c03a 	cmpne	r2,r23,zero
  8010b4:	10003f1e 	bne	r2,zero,8011b4 <_fseek_r+0x248>
  8010b8:	8100030b 	ldhu	r4,12(r16)
  8010bc:	2084000c 	andi	r2,r4,4096
  8010c0:	1000a126 	beq	r2,zero,801348 <_fseek_r+0x3dc>
  8010c4:	81801417 	ldw	r6,80(r16)
  8010c8:	80c00117 	ldw	r3,4(r16)
  8010cc:	81400c17 	ldw	r5,48(r16)
  8010d0:	30e3c83a 	sub	r17,r6,r3
  8010d4:	28008026 	beq	r5,zero,8012d8 <_fseek_r+0x36c>
  8010d8:	81c00f17 	ldw	r7,60(r16)
  8010dc:	89e3c83a 	sub	r17,r17,r7
  8010e0:	80800e17 	ldw	r2,56(r16)
  8010e4:	81800417 	ldw	r6,16(r16)
  8010e8:	88c7883a 	add	r3,r17,r3
  8010ec:	1185c83a 	sub	r2,r2,r6
  8010f0:	11cf883a 	add	r7,r2,r7
  8010f4:	1887c83a 	sub	r3,r3,r2
  8010f8:	2088000c 	andi	r2,r4,8192
  8010fc:	10003e1e 	bne	r2,zero,8011f8 <_fseek_r+0x28c>
  801100:	a0c03d16 	blt	r20,r3,8011f8 <_fseek_r+0x28c>
  801104:	38c5883a 	add	r2,r7,r3
  801108:	a0803b2e 	bgeu	r20,r2,8011f8 <_fseek_r+0x28c>
  80110c:	a0c5c83a 	sub	r2,r20,r3
  801110:	3887c83a 	sub	r3,r7,r2
  801114:	3085883a 	add	r2,r6,r2
  801118:	80800015 	stw	r2,0(r16)
  80111c:	80c00115 	stw	r3,4(r16)
  801120:	28000526 	beq	r5,zero,801138 <_fseek_r+0x1cc>
  801124:	80801004 	addi	r2,r16,64
  801128:	28800226 	beq	r5,r2,801134 <_fseek_r+0x1c8>
  80112c:	9009883a 	mov	r4,r18
  801130:	0800c580 	call	800c58 <_free_r>
  801134:	80000c15 	stw	zero,48(r16)
  801138:	8080030b 	ldhu	r2,12(r16)
  80113c:	0009883a 	mov	r4,zero
  801140:	10bff7cc 	andi	r2,r2,65503
  801144:	8080030d 	sth	r2,12(r16)
  801148:	003fa706 	br	800fe8 <_fseek_r+0x7c>
  80114c:	9009883a 	mov	r4,r18
  801150:	800b883a 	mov	r5,r16
  801154:	08004cc0 	call	8004cc <_fflush_r>
  801158:	8100030b 	ldhu	r4,12(r16)
  80115c:	2084000c 	andi	r2,r4,4096
  801160:	10008726 	beq	r2,zero,801380 <_fseek_r+0x414>
  801164:	84401417 	ldw	r17,80(r16)
  801168:	2080010c 	andi	r2,r4,4
  80116c:	1000171e 	bne	r2,zero,8011cc <_fseek_r+0x260>
  801170:	2080020c 	andi	r2,r4,8
  801174:	10003b26 	beq	r2,zero,801264 <_fseek_r+0x2f8>
  801178:	80800017 	ldw	r2,0(r16)
  80117c:	10003926 	beq	r2,zero,801264 <_fseek_r+0x2f8>
  801180:	81800417 	ldw	r6,16(r16)
  801184:	1185c83a 	sub	r2,r2,r6
  801188:	88a3883a 	add	r17,r17,r2
  80118c:	00001606 	br	8011e8 <_fseek_r+0x27c>
  801190:	08007640 	call	800764 <__sinit>
  801194:	8080030b 	ldhu	r2,12(r16)
  801198:	00c04204 	movi	r3,264
  80119c:	1080420c 	andi	r2,r2,264
  8011a0:	10ff871e 	bne	r2,r3,800fc0 <_fseek_r+0x54>
  8011a4:	9009883a 	mov	r4,r18
  8011a8:	800b883a 	mov	r5,r16
  8011ac:	08004cc0 	call	8004cc <_fflush_r>
  8011b0:	003f8306 	br	800fc0 <_fseek_r+0x54>
  8011b4:	81400c17 	ldw	r5,48(r16)
  8011b8:	28004526 	beq	r5,zero,8012d0 <_fseek_r+0x364>
  8011bc:	8100030b 	ldhu	r4,12(r16)
  8011c0:	80c00117 	ldw	r3,4(r16)
  8011c4:	81c00f17 	ldw	r7,60(r16)
  8011c8:	003fc506 	br	8010e0 <_fseek_r+0x174>
  8011cc:	80c00117 	ldw	r3,4(r16)
  8011d0:	80800c17 	ldw	r2,48(r16)
  8011d4:	88e3c83a 	sub	r17,r17,r3
  8011d8:	10002226 	beq	r2,zero,801264 <_fseek_r+0x2f8>
  8011dc:	81c00f17 	ldw	r7,60(r16)
  8011e0:	81800417 	ldw	r6,16(r16)
  8011e4:	89e3c83a 	sub	r17,r17,r7
  8011e8:	b46d883a 	add	r22,r22,r17
  8011ec:	0027883a 	mov	r19,zero
  8011f0:	05c00044 	movi	r23,1
  8011f4:	003f8b06 	br	801024 <_fseek_r+0xb8>
  8011f8:	80801317 	ldw	r2,76(r16)
  8011fc:	81400717 	ldw	r5,28(r16)
  801200:	9009883a 	mov	r4,r18
  801204:	0085c83a 	sub	r2,zero,r2
  801208:	a0a2703a 	and	r17,r20,r2
  80120c:	880d883a 	mov	r6,r17
  801210:	000f883a 	mov	r7,zero
  801214:	a83ee83a 	callr	r21
  801218:	00ffffc4 	movi	r3,-1
  80121c:	10ff8d26 	beq	r2,r3,801054 <_fseek_r+0xe8>
  801220:	80800417 	ldw	r2,16(r16)
  801224:	81400c17 	ldw	r5,48(r16)
  801228:	80000115 	stw	zero,4(r16)
  80122c:	80800015 	stw	r2,0(r16)
  801230:	28000526 	beq	r5,zero,801248 <_fseek_r+0x2dc>
  801234:	80801004 	addi	r2,r16,64
  801238:	28800226 	beq	r5,r2,801244 <_fseek_r+0x2d8>
  80123c:	9009883a 	mov	r4,r18
  801240:	0800c580 	call	800c58 <_free_r>
  801244:	80000c15 	stw	zero,48(r16)
  801248:	8080030b 	ldhu	r2,12(r16)
  80124c:	a463c83a 	sub	r17,r20,r17
  801250:	10bff7cc 	andi	r2,r2,65503
  801254:	8080030d 	sth	r2,12(r16)
  801258:	88000c1e 	bne	r17,zero,80128c <_fseek_r+0x320>
  80125c:	0009883a 	mov	r4,zero
  801260:	003f6106 	br	800fe8 <_fseek_r+0x7c>
  801264:	81800417 	ldw	r6,16(r16)
  801268:	003fdf06 	br	8011e8 <_fseek_r+0x27c>
  80126c:	8140038f 	ldh	r5,14(r16)
  801270:	9009883a 	mov	r4,r18
  801274:	d80d883a 	mov	r6,sp
  801278:	08013cc0 	call	8013cc <_fstat_r>
  80127c:	103f751e 	bne	r2,zero,801054 <_fseek_r+0xe8>
  801280:	d8800417 	ldw	r2,16(sp)
  801284:	b0a9883a 	add	r20,r22,r2
  801288:	003f8906 	br	8010b0 <_fseek_r+0x144>
  80128c:	9009883a 	mov	r4,r18
  801290:	800b883a 	mov	r5,r16
  801294:	08020d00 	call	8020d0 <__srefill_r>
  801298:	103f6e1e 	bne	r2,zero,801054 <_fseek_r+0xe8>
  80129c:	80c00117 	ldw	r3,4(r16)
  8012a0:	1c7f6c36 	bltu	r3,r17,801054 <_fseek_r+0xe8>
  8012a4:	80800017 	ldw	r2,0(r16)
  8012a8:	1c47c83a 	sub	r3,r3,r17
  8012ac:	0009883a 	mov	r4,zero
  8012b0:	1445883a 	add	r2,r2,r17
  8012b4:	80c00115 	stw	r3,4(r16)
  8012b8:	80800015 	stw	r2,0(r16)
  8012bc:	003f4a06 	br	800fe8 <_fseek_r+0x7c>
  8012c0:	9009883a 	mov	r4,r18
  8012c4:	800b883a 	mov	r5,r16
  8012c8:	08015c00 	call	8015c0 <__smakebuf_r>
  8012cc:	003f5606 	br	801028 <_fseek_r+0xbc>
  8012d0:	8100030b 	ldhu	r4,12(r16)
  8012d4:	80c00117 	ldw	r3,4(r16)
  8012d8:	80800017 	ldw	r2,0(r16)
  8012dc:	81800417 	ldw	r6,16(r16)
  8012e0:	1185c83a 	sub	r2,r2,r6
  8012e4:	10cf883a 	add	r7,r2,r3
  8012e8:	8887c83a 	sub	r3,r17,r2
  8012ec:	003f8206 	br	8010f8 <_fseek_r+0x18c>
  8012f0:	81400717 	ldw	r5,28(r16)
  8012f4:	b00d883a 	mov	r6,r22
  8012f8:	980f883a 	mov	r7,r19
  8012fc:	9009883a 	mov	r4,r18
  801300:	a83ee83a 	callr	r21
  801304:	00ffffc4 	movi	r3,-1
  801308:	10ff5626 	beq	r2,r3,801064 <_fseek_r+0xf8>
  80130c:	81400c17 	ldw	r5,48(r16)
  801310:	28000526 	beq	r5,zero,801328 <_fseek_r+0x3bc>
  801314:	80801004 	addi	r2,r16,64
  801318:	28800226 	beq	r5,r2,801324 <_fseek_r+0x3b8>
  80131c:	9009883a 	mov	r4,r18
  801320:	0800c580 	call	800c58 <_free_r>
  801324:	80000c15 	stw	zero,48(r16)
  801328:	8080030b 	ldhu	r2,12(r16)
  80132c:	80c00417 	ldw	r3,16(r16)
  801330:	0009883a 	mov	r4,zero
  801334:	10bdf7cc 	andi	r2,r2,63455
  801338:	8080030d 	sth	r2,12(r16)
  80133c:	80c00015 	stw	r3,0(r16)
  801340:	80000115 	stw	zero,4(r16)
  801344:	003f2806 	br	800fe8 <_fseek_r+0x7c>
  801348:	81400717 	ldw	r5,28(r16)
  80134c:	000d883a 	mov	r6,zero
  801350:	9009883a 	mov	r4,r18
  801354:	01c00044 	movi	r7,1
  801358:	a83ee83a 	callr	r21
  80135c:	100d883a 	mov	r6,r2
  801360:	00bfffc4 	movi	r2,-1
  801364:	30bf3b26 	beq	r6,r2,801054 <_fseek_r+0xe8>
  801368:	8100030b 	ldhu	r4,12(r16)
  80136c:	003f5606 	br	8010c8 <_fseek_r+0x15c>
  801370:	00800744 	movi	r2,29
  801374:	013fffc4 	movi	r4,-1
  801378:	90800015 	stw	r2,0(r18)
  80137c:	003f1a06 	br	800fe8 <_fseek_r+0x7c>
  801380:	81400717 	ldw	r5,28(r16)
  801384:	980f883a 	mov	r7,r19
  801388:	9009883a 	mov	r4,r18
  80138c:	000d883a 	mov	r6,zero
  801390:	a83ee83a 	callr	r21
  801394:	1023883a 	mov	r17,r2
  801398:	00bfffc4 	movi	r2,-1
  80139c:	88bf3126 	beq	r17,r2,801064 <_fseek_r+0xf8>
  8013a0:	8100030b 	ldhu	r4,12(r16)
  8013a4:	003f7006 	br	801168 <_fseek_r+0x1fc>

008013a8 <fseek>:
  8013a8:	00802074 	movhi	r2,129
  8013ac:	10834504 	addi	r2,r2,3348
  8013b0:	2013883a 	mov	r9,r4
  8013b4:	11000017 	ldw	r4,0(r2)
  8013b8:	2805883a 	mov	r2,r5
  8013bc:	300f883a 	mov	r7,r6
  8013c0:	480b883a 	mov	r5,r9
  8013c4:	100d883a 	mov	r6,r2
  8013c8:	0800f6c1 	jmpi	800f6c <_fseek_r>

008013cc <_fstat_r>:
  8013cc:	defffd04 	addi	sp,sp,-12
  8013d0:	dc000015 	stw	r16,0(sp)
  8013d4:	04002074 	movhi	r16,129
  8013d8:	840a6d04 	addi	r16,r16,10676
  8013dc:	dc400115 	stw	r17,4(sp)
  8013e0:	80000015 	stw	zero,0(r16)
  8013e4:	2023883a 	mov	r17,r4
  8013e8:	2809883a 	mov	r4,r5
  8013ec:	300b883a 	mov	r5,r6
  8013f0:	dfc00215 	stw	ra,8(sp)
  8013f4:	080a53c0 	call	80a53c <fstat>
  8013f8:	1007883a 	mov	r3,r2
  8013fc:	00bfffc4 	movi	r2,-1
  801400:	18800626 	beq	r3,r2,80141c <_fstat_r+0x50>
  801404:	1805883a 	mov	r2,r3
  801408:	dfc00217 	ldw	ra,8(sp)
  80140c:	dc400117 	ldw	r17,4(sp)
  801410:	dc000017 	ldw	r16,0(sp)
  801414:	dec00304 	addi	sp,sp,12
  801418:	f800283a 	ret
  80141c:	80800017 	ldw	r2,0(r16)
  801420:	103ff826 	beq	r2,zero,801404 <_fstat_r+0x38>
  801424:	88800015 	stw	r2,0(r17)
  801428:	1805883a 	mov	r2,r3
  80142c:	dfc00217 	ldw	ra,8(sp)
  801430:	dc400117 	ldw	r17,4(sp)
  801434:	dc000017 	ldw	r16,0(sp)
  801438:	dec00304 	addi	sp,sp,12
  80143c:	f800283a 	ret

00801440 <_fwalk_reent>:
  801440:	defff704 	addi	sp,sp,-36
  801444:	dcc00315 	stw	r19,12(sp)
  801448:	24c0b804 	addi	r19,r4,736
  80144c:	dd800615 	stw	r22,24(sp)
  801450:	dd400515 	stw	r21,20(sp)
  801454:	dfc00815 	stw	ra,32(sp)
  801458:	ddc00715 	stw	r23,28(sp)
  80145c:	dd000415 	stw	r20,16(sp)
  801460:	dc800215 	stw	r18,8(sp)
  801464:	dc400115 	stw	r17,4(sp)
  801468:	dc000015 	stw	r16,0(sp)
  80146c:	202b883a 	mov	r21,r4
  801470:	282d883a 	mov	r22,r5
  801474:	08007540 	call	800754 <__sfp_lock_acquire>
  801478:	98002126 	beq	r19,zero,801500 <_fwalk_reent+0xc0>
  80147c:	002f883a 	mov	r23,zero
  801480:	9c800117 	ldw	r18,4(r19)
  801484:	9c000217 	ldw	r16,8(r19)
  801488:	90bfffc4 	addi	r2,r18,-1
  80148c:	10000d16 	blt	r2,zero,8014c4 <_fwalk_reent+0x84>
  801490:	0023883a 	mov	r17,zero
  801494:	053fffc4 	movi	r20,-1
  801498:	8080030f 	ldh	r2,12(r16)
  80149c:	8c400044 	addi	r17,r17,1
  8014a0:	10000626 	beq	r2,zero,8014bc <_fwalk_reent+0x7c>
  8014a4:	8080038f 	ldh	r2,14(r16)
  8014a8:	800b883a 	mov	r5,r16
  8014ac:	a809883a 	mov	r4,r21
  8014b0:	15000226 	beq	r2,r20,8014bc <_fwalk_reent+0x7c>
  8014b4:	b03ee83a 	callr	r22
  8014b8:	b8aeb03a 	or	r23,r23,r2
  8014bc:	84001704 	addi	r16,r16,92
  8014c0:	947ff51e 	bne	r18,r17,801498 <_fwalk_reent+0x58>
  8014c4:	9cc00017 	ldw	r19,0(r19)
  8014c8:	983fed1e 	bne	r19,zero,801480 <_fwalk_reent+0x40>
  8014cc:	08007580 	call	800758 <__sfp_lock_release>
  8014d0:	b805883a 	mov	r2,r23
  8014d4:	dfc00817 	ldw	ra,32(sp)
  8014d8:	ddc00717 	ldw	r23,28(sp)
  8014dc:	dd800617 	ldw	r22,24(sp)
  8014e0:	dd400517 	ldw	r21,20(sp)
  8014e4:	dd000417 	ldw	r20,16(sp)
  8014e8:	dcc00317 	ldw	r19,12(sp)
  8014ec:	dc800217 	ldw	r18,8(sp)
  8014f0:	dc400117 	ldw	r17,4(sp)
  8014f4:	dc000017 	ldw	r16,0(sp)
  8014f8:	dec00904 	addi	sp,sp,36
  8014fc:	f800283a 	ret
  801500:	002f883a 	mov	r23,zero
  801504:	003ff106 	br	8014cc <_fwalk_reent+0x8c>

00801508 <_fwalk>:
  801508:	defff804 	addi	sp,sp,-32
  80150c:	dcc00315 	stw	r19,12(sp)
  801510:	24c0b804 	addi	r19,r4,736
  801514:	dd400515 	stw	r21,20(sp)
  801518:	dfc00715 	stw	ra,28(sp)
  80151c:	dd800615 	stw	r22,24(sp)
  801520:	dd000415 	stw	r20,16(sp)
  801524:	dc800215 	stw	r18,8(sp)
  801528:	dc400115 	stw	r17,4(sp)
  80152c:	dc000015 	stw	r16,0(sp)
  801530:	282b883a 	mov	r21,r5
  801534:	08007540 	call	800754 <__sfp_lock_acquire>
  801538:	98001f26 	beq	r19,zero,8015b8 <_fwalk+0xb0>
  80153c:	002d883a 	mov	r22,zero
  801540:	9c800117 	ldw	r18,4(r19)
  801544:	9c000217 	ldw	r16,8(r19)
  801548:	90bfffc4 	addi	r2,r18,-1
  80154c:	10000c16 	blt	r2,zero,801580 <_fwalk+0x78>
  801550:	0023883a 	mov	r17,zero
  801554:	053fffc4 	movi	r20,-1
  801558:	8080030f 	ldh	r2,12(r16)
  80155c:	8c400044 	addi	r17,r17,1
  801560:	10000526 	beq	r2,zero,801578 <_fwalk+0x70>
  801564:	8080038f 	ldh	r2,14(r16)
  801568:	8009883a 	mov	r4,r16
  80156c:	15000226 	beq	r2,r20,801578 <_fwalk+0x70>
  801570:	a83ee83a 	callr	r21
  801574:	b0acb03a 	or	r22,r22,r2
  801578:	84001704 	addi	r16,r16,92
  80157c:	947ff61e 	bne	r18,r17,801558 <_fwalk+0x50>
  801580:	9cc00017 	ldw	r19,0(r19)
  801584:	983fee1e 	bne	r19,zero,801540 <_fwalk+0x38>
  801588:	08007580 	call	800758 <__sfp_lock_release>
  80158c:	b005883a 	mov	r2,r22
  801590:	dfc00717 	ldw	ra,28(sp)
  801594:	dd800617 	ldw	r22,24(sp)
  801598:	dd400517 	ldw	r21,20(sp)
  80159c:	dd000417 	ldw	r20,16(sp)
  8015a0:	dcc00317 	ldw	r19,12(sp)
  8015a4:	dc800217 	ldw	r18,8(sp)
  8015a8:	dc400117 	ldw	r17,4(sp)
  8015ac:	dc000017 	ldw	r16,0(sp)
  8015b0:	dec00804 	addi	sp,sp,32
  8015b4:	f800283a 	ret
  8015b8:	002d883a 	mov	r22,zero
  8015bc:	003ff206 	br	801588 <_fwalk+0x80>

008015c0 <__smakebuf_r>:
  8015c0:	2880030b 	ldhu	r2,12(r5)
  8015c4:	deffed04 	addi	sp,sp,-76
  8015c8:	dc401015 	stw	r17,64(sp)
  8015cc:	1080008c 	andi	r2,r2,2
  8015d0:	dc000f15 	stw	r16,60(sp)
  8015d4:	dfc01215 	stw	ra,72(sp)
  8015d8:	dc801115 	stw	r18,68(sp)
  8015dc:	2821883a 	mov	r16,r5
  8015e0:	2023883a 	mov	r17,r4
  8015e4:	10000b26 	beq	r2,zero,801614 <__smakebuf_r+0x54>
  8015e8:	28c010c4 	addi	r3,r5,67
  8015ec:	00800044 	movi	r2,1
  8015f0:	28800515 	stw	r2,20(r5)
  8015f4:	28c00415 	stw	r3,16(r5)
  8015f8:	28c00015 	stw	r3,0(r5)
  8015fc:	dfc01217 	ldw	ra,72(sp)
  801600:	dc801117 	ldw	r18,68(sp)
  801604:	dc401017 	ldw	r17,64(sp)
  801608:	dc000f17 	ldw	r16,60(sp)
  80160c:	dec01304 	addi	sp,sp,76
  801610:	f800283a 	ret
  801614:	2940038f 	ldh	r5,14(r5)
  801618:	28002116 	blt	r5,zero,8016a0 <__smakebuf_r+0xe0>
  80161c:	d80d883a 	mov	r6,sp
  801620:	08013cc0 	call	8013cc <_fstat_r>
  801624:	10001e16 	blt	r2,zero,8016a0 <__smakebuf_r+0xe0>
  801628:	d8800117 	ldw	r2,4(sp)
  80162c:	00e00014 	movui	r3,32768
  801630:	113c000c 	andi	r4,r2,61440
  801634:	20c03126 	beq	r4,r3,8016fc <__smakebuf_r+0x13c>
  801638:	8080030b 	ldhu	r2,12(r16)
  80163c:	00c80004 	movi	r3,8192
  801640:	10820014 	ori	r2,r2,2048
  801644:	8080030d 	sth	r2,12(r16)
  801648:	20c01e26 	beq	r4,r3,8016c4 <__smakebuf_r+0x104>
  80164c:	04810004 	movi	r18,1024
  801650:	8809883a 	mov	r4,r17
  801654:	900b883a 	mov	r5,r18
  801658:	08017540 	call	801754 <_malloc_r>
  80165c:	1009883a 	mov	r4,r2
  801660:	10003126 	beq	r2,zero,801728 <__smakebuf_r+0x168>
  801664:	80c0030b 	ldhu	r3,12(r16)
  801668:	00802034 	movhi	r2,128
  80166c:	10821204 	addi	r2,r2,2120
  801670:	88800f15 	stw	r2,60(r17)
  801674:	18c02014 	ori	r3,r3,128
  801678:	84800515 	stw	r18,20(r16)
  80167c:	80c0030d 	sth	r3,12(r16)
  801680:	81000415 	stw	r4,16(r16)
  801684:	81000015 	stw	r4,0(r16)
  801688:	dfc01217 	ldw	ra,72(sp)
  80168c:	dc801117 	ldw	r18,68(sp)
  801690:	dc401017 	ldw	r17,64(sp)
  801694:	dc000f17 	ldw	r16,60(sp)
  801698:	dec01304 	addi	sp,sp,76
  80169c:	f800283a 	ret
  8016a0:	80c0030b 	ldhu	r3,12(r16)
  8016a4:	1880200c 	andi	r2,r3,128
  8016a8:	10000426 	beq	r2,zero,8016bc <__smakebuf_r+0xfc>
  8016ac:	04801004 	movi	r18,64
  8016b0:	18820014 	ori	r2,r3,2048
  8016b4:	8080030d 	sth	r2,12(r16)
  8016b8:	003fe506 	br	801650 <__smakebuf_r+0x90>
  8016bc:	04810004 	movi	r18,1024
  8016c0:	003ffb06 	br	8016b0 <__smakebuf_r+0xf0>
  8016c4:	8140038f 	ldh	r5,14(r16)
  8016c8:	8809883a 	mov	r4,r17
  8016cc:	08063340 	call	806334 <_isatty_r>
  8016d0:	103fde26 	beq	r2,zero,80164c <__smakebuf_r+0x8c>
  8016d4:	8080030b 	ldhu	r2,12(r16)
  8016d8:	80c010c4 	addi	r3,r16,67
  8016dc:	04810004 	movi	r18,1024
  8016e0:	10800054 	ori	r2,r2,1
  8016e4:	8080030d 	sth	r2,12(r16)
  8016e8:	00800044 	movi	r2,1
  8016ec:	80c00415 	stw	r3,16(r16)
  8016f0:	80800515 	stw	r2,20(r16)
  8016f4:	80c00015 	stw	r3,0(r16)
  8016f8:	003fd506 	br	801650 <__smakebuf_r+0x90>
  8016fc:	80c00a17 	ldw	r3,40(r16)
  801700:	00802034 	movhi	r2,128
  801704:	1088ca04 	addi	r2,r2,9000
  801708:	18bfcb1e 	bne	r3,r2,801638 <__smakebuf_r+0x78>
  80170c:	8080030b 	ldhu	r2,12(r16)
  801710:	00c10004 	movi	r3,1024
  801714:	1825883a 	mov	r18,r3
  801718:	10c4b03a 	or	r2,r2,r3
  80171c:	8080030d 	sth	r2,12(r16)
  801720:	80c01315 	stw	r3,76(r16)
  801724:	003fca06 	br	801650 <__smakebuf_r+0x90>
  801728:	8100030b 	ldhu	r4,12(r16)
  80172c:	2080800c 	andi	r2,r4,512
  801730:	103fb21e 	bne	r2,zero,8015fc <__smakebuf_r+0x3c>
  801734:	80c010c4 	addi	r3,r16,67
  801738:	21000094 	ori	r4,r4,2
  80173c:	00800044 	movi	r2,1
  801740:	80800515 	stw	r2,20(r16)
  801744:	8100030d 	sth	r4,12(r16)
  801748:	80c00415 	stw	r3,16(r16)
  80174c:	80c00015 	stw	r3,0(r16)
  801750:	003faa06 	br	8015fc <__smakebuf_r+0x3c>

00801754 <_malloc_r>:
  801754:	defff604 	addi	sp,sp,-40
  801758:	28c002c4 	addi	r3,r5,11
  80175c:	00800584 	movi	r2,22
  801760:	dc800215 	stw	r18,8(sp)
  801764:	dfc00915 	stw	ra,36(sp)
  801768:	df000815 	stw	fp,32(sp)
  80176c:	ddc00715 	stw	r23,28(sp)
  801770:	dd800615 	stw	r22,24(sp)
  801774:	dd400515 	stw	r21,20(sp)
  801778:	dd000415 	stw	r20,16(sp)
  80177c:	dcc00315 	stw	r19,12(sp)
  801780:	dc400115 	stw	r17,4(sp)
  801784:	dc000015 	stw	r16,0(sp)
  801788:	2025883a 	mov	r18,r4
  80178c:	10c01236 	bltu	r2,r3,8017d8 <_malloc_r+0x84>
  801790:	04400404 	movi	r17,16
  801794:	8940142e 	bgeu	r17,r5,8017e8 <_malloc_r+0x94>
  801798:	00800304 	movi	r2,12
  80179c:	0007883a 	mov	r3,zero
  8017a0:	90800015 	stw	r2,0(r18)
  8017a4:	1805883a 	mov	r2,r3
  8017a8:	dfc00917 	ldw	ra,36(sp)
  8017ac:	df000817 	ldw	fp,32(sp)
  8017b0:	ddc00717 	ldw	r23,28(sp)
  8017b4:	dd800617 	ldw	r22,24(sp)
  8017b8:	dd400517 	ldw	r21,20(sp)
  8017bc:	dd000417 	ldw	r20,16(sp)
  8017c0:	dcc00317 	ldw	r19,12(sp)
  8017c4:	dc800217 	ldw	r18,8(sp)
  8017c8:	dc400117 	ldw	r17,4(sp)
  8017cc:	dc000017 	ldw	r16,0(sp)
  8017d0:	dec00a04 	addi	sp,sp,40
  8017d4:	f800283a 	ret
  8017d8:	00bffe04 	movi	r2,-8
  8017dc:	18a2703a 	and	r17,r3,r2
  8017e0:	883fed16 	blt	r17,zero,801798 <_malloc_r+0x44>
  8017e4:	897fec36 	bltu	r17,r5,801798 <_malloc_r+0x44>
  8017e8:	9009883a 	mov	r4,r18
  8017ec:	080abf80 	call	80abf8 <__malloc_lock>
  8017f0:	00807dc4 	movi	r2,503
  8017f4:	14402b2e 	bgeu	r2,r17,8018a4 <_malloc_r+0x150>
  8017f8:	8806d27a 	srli	r3,r17,9
  8017fc:	18003f1e 	bne	r3,zero,8018fc <_malloc_r+0x1a8>
  801800:	880cd0fa 	srli	r6,r17,3
  801804:	300490fa 	slli	r2,r6,3
  801808:	02c02074 	movhi	r11,129
  80180c:	5afd4504 	addi	r11,r11,-2796
  801810:	12cb883a 	add	r5,r2,r11
  801814:	2c000317 	ldw	r16,12(r5)
  801818:	580f883a 	mov	r7,r11
  80181c:	2c00041e 	bne	r5,r16,801830 <_malloc_r+0xdc>
  801820:	00000a06 	br	80184c <_malloc_r+0xf8>
  801824:	1800860e 	bge	r3,zero,801a40 <_malloc_r+0x2ec>
  801828:	84000317 	ldw	r16,12(r16)
  80182c:	2c000726 	beq	r5,r16,80184c <_malloc_r+0xf8>
  801830:	80800117 	ldw	r2,4(r16)
  801834:	00ffff04 	movi	r3,-4
  801838:	10c8703a 	and	r4,r2,r3
  80183c:	2447c83a 	sub	r3,r4,r17
  801840:	008003c4 	movi	r2,15
  801844:	10fff70e 	bge	r2,r3,801824 <_malloc_r+0xd0>
  801848:	31bfffc4 	addi	r6,r6,-1
  80184c:	32400044 	addi	r9,r6,1
  801850:	02802074 	movhi	r10,129
  801854:	52bd4704 	addi	r10,r10,-2788
  801858:	54000217 	ldw	r16,8(r10)
  80185c:	8280a026 	beq	r16,r10,801ae0 <_malloc_r+0x38c>
  801860:	80800117 	ldw	r2,4(r16)
  801864:	00ffff04 	movi	r3,-4
  801868:	10ca703a 	and	r5,r2,r3
  80186c:	2c4dc83a 	sub	r6,r5,r17
  801870:	008003c4 	movi	r2,15
  801874:	11808316 	blt	r2,r6,801a84 <_malloc_r+0x330>
  801878:	52800315 	stw	r10,12(r10)
  80187c:	52800215 	stw	r10,8(r10)
  801880:	30002916 	blt	r6,zero,801928 <_malloc_r+0x1d4>
  801884:	8147883a 	add	r3,r16,r5
  801888:	18800117 	ldw	r2,4(r3)
  80188c:	9009883a 	mov	r4,r18
  801890:	10800054 	ori	r2,r2,1
  801894:	18800115 	stw	r2,4(r3)
  801898:	080ac180 	call	80ac18 <__malloc_unlock>
  80189c:	80c00204 	addi	r3,r16,8
  8018a0:	003fc006 	br	8017a4 <_malloc_r+0x50>
  8018a4:	02c02074 	movhi	r11,129
  8018a8:	5afd4504 	addi	r11,r11,-2796
  8018ac:	8ac5883a 	add	r2,r17,r11
  8018b0:	14000317 	ldw	r16,12(r2)
  8018b4:	580f883a 	mov	r7,r11
  8018b8:	8806d0fa 	srli	r3,r17,3
  8018bc:	14006c26 	beq	r2,r16,801a70 <_malloc_r+0x31c>
  8018c0:	80c00117 	ldw	r3,4(r16)
  8018c4:	00bfff04 	movi	r2,-4
  8018c8:	81800317 	ldw	r6,12(r16)
  8018cc:	1886703a 	and	r3,r3,r2
  8018d0:	80c7883a 	add	r3,r16,r3
  8018d4:	18800117 	ldw	r2,4(r3)
  8018d8:	81400217 	ldw	r5,8(r16)
  8018dc:	9009883a 	mov	r4,r18
  8018e0:	10800054 	ori	r2,r2,1
  8018e4:	18800115 	stw	r2,4(r3)
  8018e8:	31400215 	stw	r5,8(r6)
  8018ec:	29800315 	stw	r6,12(r5)
  8018f0:	080ac180 	call	80ac18 <__malloc_unlock>
  8018f4:	80c00204 	addi	r3,r16,8
  8018f8:	003faa06 	br	8017a4 <_malloc_r+0x50>
  8018fc:	00800104 	movi	r2,4
  801900:	10c0052e 	bgeu	r2,r3,801918 <_malloc_r+0x1c4>
  801904:	00800504 	movi	r2,20
  801908:	10c07836 	bltu	r2,r3,801aec <_malloc_r+0x398>
  80190c:	198016c4 	addi	r6,r3,91
  801910:	300490fa 	slli	r2,r6,3
  801914:	003fbc06 	br	801808 <_malloc_r+0xb4>
  801918:	8804d1ba 	srli	r2,r17,6
  80191c:	11800e04 	addi	r6,r2,56
  801920:	300490fa 	slli	r2,r6,3
  801924:	003fb806 	br	801808 <_malloc_r+0xb4>
  801928:	00807fc4 	movi	r2,511
  80192c:	1140bb36 	bltu	r2,r5,801c1c <_malloc_r+0x4c8>
  801930:	2806d0fa 	srli	r3,r5,3
  801934:	573ffe04 	addi	fp,r10,-8
  801938:	00800044 	movi	r2,1
  80193c:	180890fa 	slli	r4,r3,3
  801940:	1807d0ba 	srai	r3,r3,2
  801944:	e1c00117 	ldw	r7,4(fp)
  801948:	5909883a 	add	r4,r11,r4
  80194c:	21400217 	ldw	r5,8(r4)
  801950:	10c4983a 	sll	r2,r2,r3
  801954:	81000315 	stw	r4,12(r16)
  801958:	81400215 	stw	r5,8(r16)
  80195c:	388eb03a 	or	r7,r7,r2
  801960:	2c000315 	stw	r16,12(r5)
  801964:	24000215 	stw	r16,8(r4)
  801968:	e1c00115 	stw	r7,4(fp)
  80196c:	4807883a 	mov	r3,r9
  801970:	4800cd16 	blt	r9,zero,801ca8 <_malloc_r+0x554>
  801974:	1807d0ba 	srai	r3,r3,2
  801978:	00800044 	movi	r2,1
  80197c:	10c8983a 	sll	r4,r2,r3
  801980:	39004436 	bltu	r7,r4,801a94 <_malloc_r+0x340>
  801984:	21c4703a 	and	r2,r4,r7
  801988:	10000a1e 	bne	r2,zero,8019b4 <_malloc_r+0x260>
  80198c:	2109883a 	add	r4,r4,r4
  801990:	00bfff04 	movi	r2,-4
  801994:	4884703a 	and	r2,r9,r2
  801998:	3906703a 	and	r3,r7,r4
  80199c:	12400104 	addi	r9,r2,4
  8019a0:	1800041e 	bne	r3,zero,8019b4 <_malloc_r+0x260>
  8019a4:	2109883a 	add	r4,r4,r4
  8019a8:	3904703a 	and	r2,r7,r4
  8019ac:	4a400104 	addi	r9,r9,4
  8019b0:	103ffc26 	beq	r2,zero,8019a4 <_malloc_r+0x250>
  8019b4:	480490fa 	slli	r2,r9,3
  8019b8:	4819883a 	mov	r12,r9
  8019bc:	023fff04 	movi	r8,-4
  8019c0:	589b883a 	add	r13,r11,r2
  8019c4:	6807883a 	mov	r3,r13
  8019c8:	014003c4 	movi	r5,15
  8019cc:	1c000317 	ldw	r16,12(r3)
  8019d0:	1c00041e 	bne	r3,r16,8019e4 <_malloc_r+0x290>
  8019d4:	0000a706 	br	801c74 <_malloc_r+0x520>
  8019d8:	3000ab0e 	bge	r6,zero,801c88 <_malloc_r+0x534>
  8019dc:	84000317 	ldw	r16,12(r16)
  8019e0:	1c00a426 	beq	r3,r16,801c74 <_malloc_r+0x520>
  8019e4:	80800117 	ldw	r2,4(r16)
  8019e8:	1204703a 	and	r2,r2,r8
  8019ec:	144dc83a 	sub	r6,r2,r17
  8019f0:	29bff90e 	bge	r5,r6,8019d8 <_malloc_r+0x284>
  8019f4:	81000317 	ldw	r4,12(r16)
  8019f8:	80c00217 	ldw	r3,8(r16)
  8019fc:	89400054 	ori	r5,r17,1
  801a00:	8445883a 	add	r2,r16,r17
  801a04:	20c00215 	stw	r3,8(r4)
  801a08:	19000315 	stw	r4,12(r3)
  801a0c:	81400115 	stw	r5,4(r16)
  801a10:	1187883a 	add	r3,r2,r6
  801a14:	31000054 	ori	r4,r6,1
  801a18:	50800315 	stw	r2,12(r10)
  801a1c:	50800215 	stw	r2,8(r10)
  801a20:	19800015 	stw	r6,0(r3)
  801a24:	11000115 	stw	r4,4(r2)
  801a28:	12800215 	stw	r10,8(r2)
  801a2c:	12800315 	stw	r10,12(r2)
  801a30:	9009883a 	mov	r4,r18
  801a34:	080ac180 	call	80ac18 <__malloc_unlock>
  801a38:	80c00204 	addi	r3,r16,8
  801a3c:	003f5906 	br	8017a4 <_malloc_r+0x50>
  801a40:	8109883a 	add	r4,r16,r4
  801a44:	20800117 	ldw	r2,4(r4)
  801a48:	80c00217 	ldw	r3,8(r16)
  801a4c:	81400317 	ldw	r5,12(r16)
  801a50:	10800054 	ori	r2,r2,1
  801a54:	20800115 	stw	r2,4(r4)
  801a58:	28c00215 	stw	r3,8(r5)
  801a5c:	19400315 	stw	r5,12(r3)
  801a60:	9009883a 	mov	r4,r18
  801a64:	080ac180 	call	80ac18 <__malloc_unlock>
  801a68:	80c00204 	addi	r3,r16,8
  801a6c:	003f4d06 	br	8017a4 <_malloc_r+0x50>
  801a70:	80800204 	addi	r2,r16,8
  801a74:	14000317 	ldw	r16,12(r2)
  801a78:	143f911e 	bne	r2,r16,8018c0 <_malloc_r+0x16c>
  801a7c:	1a400084 	addi	r9,r3,2
  801a80:	003f7306 	br	801850 <_malloc_r+0xfc>
  801a84:	88c00054 	ori	r3,r17,1
  801a88:	8445883a 	add	r2,r16,r17
  801a8c:	80c00115 	stw	r3,4(r16)
  801a90:	003fdf06 	br	801a10 <_malloc_r+0x2bc>
  801a94:	e4000217 	ldw	r16,8(fp)
  801a98:	00bfff04 	movi	r2,-4
  801a9c:	80c00117 	ldw	r3,4(r16)
  801aa0:	802d883a 	mov	r22,r16
  801aa4:	18aa703a 	and	r21,r3,r2
  801aa8:	ac401636 	bltu	r21,r17,801b04 <_malloc_r+0x3b0>
  801aac:	ac49c83a 	sub	r4,r21,r17
  801ab0:	008003c4 	movi	r2,15
  801ab4:	1100130e 	bge	r2,r4,801b04 <_malloc_r+0x3b0>
  801ab8:	88800054 	ori	r2,r17,1
  801abc:	8447883a 	add	r3,r16,r17
  801ac0:	80800115 	stw	r2,4(r16)
  801ac4:	20800054 	ori	r2,r4,1
  801ac8:	18800115 	stw	r2,4(r3)
  801acc:	e0c00215 	stw	r3,8(fp)
  801ad0:	9009883a 	mov	r4,r18
  801ad4:	080ac180 	call	80ac18 <__malloc_unlock>
  801ad8:	80c00204 	addi	r3,r16,8
  801adc:	003f3106 	br	8017a4 <_malloc_r+0x50>
  801ae0:	39c00117 	ldw	r7,4(r7)
  801ae4:	573ffe04 	addi	fp,r10,-8
  801ae8:	003fa006 	br	80196c <_malloc_r+0x218>
  801aec:	00801504 	movi	r2,84
  801af0:	10c06736 	bltu	r2,r3,801c90 <_malloc_r+0x53c>
  801af4:	8804d33a 	srli	r2,r17,12
  801af8:	11801b84 	addi	r6,r2,110
  801afc:	300490fa 	slli	r2,r6,3
  801b00:	003f4106 	br	801808 <_malloc_r+0xb4>
  801b04:	d0a72917 	ldw	r2,-25436(gp)
  801b08:	d0e00317 	ldw	r3,-32756(gp)
  801b0c:	053fffc4 	movi	r20,-1
  801b10:	10800404 	addi	r2,r2,16
  801b14:	88a7883a 	add	r19,r17,r2
  801b18:	1d000326 	beq	r3,r20,801b28 <_malloc_r+0x3d4>
  801b1c:	98c3ffc4 	addi	r3,r19,4095
  801b20:	00bc0004 	movi	r2,-4096
  801b24:	18a6703a 	and	r19,r3,r2
  801b28:	9009883a 	mov	r4,r18
  801b2c:	980b883a 	mov	r5,r19
  801b30:	08022b00 	call	8022b0 <_sbrk_r>
  801b34:	1009883a 	mov	r4,r2
  801b38:	15000426 	beq	r2,r20,801b4c <_malloc_r+0x3f8>
  801b3c:	854b883a 	add	r5,r16,r21
  801b40:	1029883a 	mov	r20,r2
  801b44:	11405a2e 	bgeu	r2,r5,801cb0 <_malloc_r+0x55c>
  801b48:	87000c26 	beq	r16,fp,801b7c <_malloc_r+0x428>
  801b4c:	e4000217 	ldw	r16,8(fp)
  801b50:	80c00117 	ldw	r3,4(r16)
  801b54:	00bfff04 	movi	r2,-4
  801b58:	1884703a 	and	r2,r3,r2
  801b5c:	14400336 	bltu	r2,r17,801b6c <_malloc_r+0x418>
  801b60:	1449c83a 	sub	r4,r2,r17
  801b64:	008003c4 	movi	r2,15
  801b68:	113fd316 	blt	r2,r4,801ab8 <_malloc_r+0x364>
  801b6c:	9009883a 	mov	r4,r18
  801b70:	080ac180 	call	80ac18 <__malloc_unlock>
  801b74:	0007883a 	mov	r3,zero
  801b78:	003f0a06 	br	8017a4 <_malloc_r+0x50>
  801b7c:	05c02074 	movhi	r23,129
  801b80:	bdca7a04 	addi	r23,r23,10728
  801b84:	b8800017 	ldw	r2,0(r23)
  801b88:	988d883a 	add	r6,r19,r2
  801b8c:	b9800015 	stw	r6,0(r23)
  801b90:	d0e00317 	ldw	r3,-32756(gp)
  801b94:	00bfffc4 	movi	r2,-1
  801b98:	18808e26 	beq	r3,r2,801dd4 <_malloc_r+0x680>
  801b9c:	2145c83a 	sub	r2,r4,r5
  801ba0:	3085883a 	add	r2,r6,r2
  801ba4:	b8800015 	stw	r2,0(r23)
  801ba8:	20c001cc 	andi	r3,r4,7
  801bac:	18005f1e 	bne	r3,zero,801d2c <_malloc_r+0x5d8>
  801bb0:	000b883a 	mov	r5,zero
  801bb4:	a4c5883a 	add	r2,r20,r19
  801bb8:	1083ffcc 	andi	r2,r2,4095
  801bbc:	00c40004 	movi	r3,4096
  801bc0:	1887c83a 	sub	r3,r3,r2
  801bc4:	28e7883a 	add	r19,r5,r3
  801bc8:	9009883a 	mov	r4,r18
  801bcc:	980b883a 	mov	r5,r19
  801bd0:	08022b00 	call	8022b0 <_sbrk_r>
  801bd4:	1007883a 	mov	r3,r2
  801bd8:	00bfffc4 	movi	r2,-1
  801bdc:	18807a26 	beq	r3,r2,801dc8 <_malloc_r+0x674>
  801be0:	1d05c83a 	sub	r2,r3,r20
  801be4:	9885883a 	add	r2,r19,r2
  801be8:	10c00054 	ori	r3,r2,1
  801bec:	b8800017 	ldw	r2,0(r23)
  801bf0:	a021883a 	mov	r16,r20
  801bf4:	a0c00115 	stw	r3,4(r20)
  801bf8:	9885883a 	add	r2,r19,r2
  801bfc:	b8800015 	stw	r2,0(r23)
  801c00:	e5000215 	stw	r20,8(fp)
  801c04:	b7003626 	beq	r22,fp,801ce0 <_malloc_r+0x58c>
  801c08:	018003c4 	movi	r6,15
  801c0c:	35404b36 	bltu	r6,r21,801d3c <_malloc_r+0x5e8>
  801c10:	00800044 	movi	r2,1
  801c14:	a0800115 	stw	r2,4(r20)
  801c18:	003fcd06 	br	801b50 <_malloc_r+0x3fc>
  801c1c:	2808d27a 	srli	r4,r5,9
  801c20:	2000371e 	bne	r4,zero,801d00 <_malloc_r+0x5ac>
  801c24:	2808d0fa 	srli	r4,r5,3
  801c28:	200690fa 	slli	r3,r4,3
  801c2c:	1ad1883a 	add	r8,r3,r11
  801c30:	41800217 	ldw	r6,8(r8)
  801c34:	41805b26 	beq	r8,r6,801da4 <_malloc_r+0x650>
  801c38:	30800117 	ldw	r2,4(r6)
  801c3c:	00ffff04 	movi	r3,-4
  801c40:	10c4703a 	and	r2,r2,r3
  801c44:	2880022e 	bgeu	r5,r2,801c50 <_malloc_r+0x4fc>
  801c48:	31800217 	ldw	r6,8(r6)
  801c4c:	41bffa1e 	bne	r8,r6,801c38 <_malloc_r+0x4e4>
  801c50:	32000317 	ldw	r8,12(r6)
  801c54:	39c00117 	ldw	r7,4(r7)
  801c58:	82000315 	stw	r8,12(r16)
  801c5c:	81800215 	stw	r6,8(r16)
  801c60:	07002074 	movhi	fp,129
  801c64:	e73d4504 	addi	fp,fp,-2796
  801c68:	34000315 	stw	r16,12(r6)
  801c6c:	44000215 	stw	r16,8(r8)
  801c70:	003f3e06 	br	80196c <_malloc_r+0x218>
  801c74:	63000044 	addi	r12,r12,1
  801c78:	608000cc 	andi	r2,r12,3
  801c7c:	10005d26 	beq	r2,zero,801df4 <_malloc_r+0x6a0>
  801c80:	18c00204 	addi	r3,r3,8
  801c84:	003f5106 	br	8019cc <_malloc_r+0x278>
  801c88:	8089883a 	add	r4,r16,r2
  801c8c:	003f6d06 	br	801a44 <_malloc_r+0x2f0>
  801c90:	00805504 	movi	r2,340
  801c94:	10c02036 	bltu	r2,r3,801d18 <_malloc_r+0x5c4>
  801c98:	8804d3fa 	srli	r2,r17,15
  801c9c:	11801dc4 	addi	r6,r2,119
  801ca0:	300490fa 	slli	r2,r6,3
  801ca4:	003ed806 	br	801808 <_malloc_r+0xb4>
  801ca8:	48c000c4 	addi	r3,r9,3
  801cac:	003f3106 	br	801974 <_malloc_r+0x220>
  801cb0:	05c02074 	movhi	r23,129
  801cb4:	bdca7a04 	addi	r23,r23,10728
  801cb8:	b8800017 	ldw	r2,0(r23)
  801cbc:	988d883a 	add	r6,r19,r2
  801cc0:	b9800015 	stw	r6,0(r23)
  801cc4:	293fb21e 	bne	r5,r4,801b90 <_malloc_r+0x43c>
  801cc8:	2083ffcc 	andi	r2,r4,4095
  801ccc:	103fb01e 	bne	r2,zero,801b90 <_malloc_r+0x43c>
  801cd0:	e4000217 	ldw	r16,8(fp)
  801cd4:	9d45883a 	add	r2,r19,r21
  801cd8:	10800054 	ori	r2,r2,1
  801cdc:	80800115 	stw	r2,4(r16)
  801ce0:	b8c00017 	ldw	r3,0(r23)
  801ce4:	d0a72a17 	ldw	r2,-25432(gp)
  801ce8:	10c0012e 	bgeu	r2,r3,801cf0 <_malloc_r+0x59c>
  801cec:	d0e72a15 	stw	r3,-25432(gp)
  801cf0:	d0a72b17 	ldw	r2,-25428(gp)
  801cf4:	10ff962e 	bgeu	r2,r3,801b50 <_malloc_r+0x3fc>
  801cf8:	d0e72b15 	stw	r3,-25428(gp)
  801cfc:	003f9406 	br	801b50 <_malloc_r+0x3fc>
  801d00:	00800104 	movi	r2,4
  801d04:	11001e36 	bltu	r2,r4,801d80 <_malloc_r+0x62c>
  801d08:	2804d1ba 	srli	r2,r5,6
  801d0c:	11000e04 	addi	r4,r2,56
  801d10:	200690fa 	slli	r3,r4,3
  801d14:	003fc506 	br	801c2c <_malloc_r+0x4d8>
  801d18:	00815504 	movi	r2,1364
  801d1c:	10c01d2e 	bgeu	r2,r3,801d94 <_malloc_r+0x640>
  801d20:	01801f84 	movi	r6,126
  801d24:	0080fc04 	movi	r2,1008
  801d28:	003eb706 	br	801808 <_malloc_r+0xb4>
  801d2c:	00800204 	movi	r2,8
  801d30:	10cbc83a 	sub	r5,r2,r3
  801d34:	2169883a 	add	r20,r4,r5
  801d38:	003f9e06 	br	801bb4 <_malloc_r+0x460>
  801d3c:	00bffe04 	movi	r2,-8
  801d40:	a93ffd04 	addi	r4,r21,-12
  801d44:	2088703a 	and	r4,r4,r2
  801d48:	b10b883a 	add	r5,r22,r4
  801d4c:	00c00144 	movi	r3,5
  801d50:	28c00215 	stw	r3,8(r5)
  801d54:	28c00115 	stw	r3,4(r5)
  801d58:	b0800117 	ldw	r2,4(r22)
  801d5c:	1080004c 	andi	r2,r2,1
  801d60:	2084b03a 	or	r2,r4,r2
  801d64:	b0800115 	stw	r2,4(r22)
  801d68:	313fdd2e 	bgeu	r6,r4,801ce0 <_malloc_r+0x58c>
  801d6c:	b1400204 	addi	r5,r22,8
  801d70:	9009883a 	mov	r4,r18
  801d74:	0800c580 	call	800c58 <_free_r>
  801d78:	e4000217 	ldw	r16,8(fp)
  801d7c:	003fd806 	br	801ce0 <_malloc_r+0x58c>
  801d80:	00800504 	movi	r2,20
  801d84:	11001536 	bltu	r2,r4,801ddc <_malloc_r+0x688>
  801d88:	210016c4 	addi	r4,r4,91
  801d8c:	200690fa 	slli	r3,r4,3
  801d90:	003fa606 	br	801c2c <_malloc_r+0x4d8>
  801d94:	8804d4ba 	srli	r2,r17,18
  801d98:	11801f04 	addi	r6,r2,124
  801d9c:	300490fa 	slli	r2,r6,3
  801da0:	003e9906 	br	801808 <_malloc_r+0xb4>
  801da4:	2009d0ba 	srai	r4,r4,2
  801da8:	01402074 	movhi	r5,129
  801dac:	297d4504 	addi	r5,r5,-2796
  801db0:	00c00044 	movi	r3,1
  801db4:	28800117 	ldw	r2,4(r5)
  801db8:	1906983a 	sll	r3,r3,r4
  801dbc:	10c4b03a 	or	r2,r2,r3
  801dc0:	28800115 	stw	r2,4(r5)
  801dc4:	003fa306 	br	801c54 <_malloc_r+0x500>
  801dc8:	0027883a 	mov	r19,zero
  801dcc:	00c00044 	movi	r3,1
  801dd0:	003f8606 	br	801bec <_malloc_r+0x498>
  801dd4:	d1200315 	stw	r4,-32756(gp)
  801dd8:	003f7306 	br	801ba8 <_malloc_r+0x454>
  801ddc:	00801504 	movi	r2,84
  801de0:	11001936 	bltu	r2,r4,801e48 <_malloc_r+0x6f4>
  801de4:	2804d33a 	srli	r2,r5,12
  801de8:	11001b84 	addi	r4,r2,110
  801dec:	200690fa 	slli	r3,r4,3
  801df0:	003f8e06 	br	801c2c <_malloc_r+0x4d8>
  801df4:	480b883a 	mov	r5,r9
  801df8:	6807883a 	mov	r3,r13
  801dfc:	288000cc 	andi	r2,r5,3
  801e00:	18fffe04 	addi	r3,r3,-8
  801e04:	297fffc4 	addi	r5,r5,-1
  801e08:	10001526 	beq	r2,zero,801e60 <_malloc_r+0x70c>
  801e0c:	18800217 	ldw	r2,8(r3)
  801e10:	10fffa26 	beq	r2,r3,801dfc <_malloc_r+0x6a8>
  801e14:	2109883a 	add	r4,r4,r4
  801e18:	393f1e36 	bltu	r7,r4,801a94 <_malloc_r+0x340>
  801e1c:	203f1d26 	beq	r4,zero,801a94 <_malloc_r+0x340>
  801e20:	21c4703a 	and	r2,r4,r7
  801e24:	10000226 	beq	r2,zero,801e30 <_malloc_r+0x6dc>
  801e28:	6013883a 	mov	r9,r12
  801e2c:	003ee106 	br	8019b4 <_malloc_r+0x260>
  801e30:	2109883a 	add	r4,r4,r4
  801e34:	3904703a 	and	r2,r7,r4
  801e38:	63000104 	addi	r12,r12,4
  801e3c:	103ffc26 	beq	r2,zero,801e30 <_malloc_r+0x6dc>
  801e40:	6013883a 	mov	r9,r12
  801e44:	003edb06 	br	8019b4 <_malloc_r+0x260>
  801e48:	00805504 	movi	r2,340
  801e4c:	11000836 	bltu	r2,r4,801e70 <_malloc_r+0x71c>
  801e50:	2804d3fa 	srli	r2,r5,15
  801e54:	11001dc4 	addi	r4,r2,119
  801e58:	200690fa 	slli	r3,r4,3
  801e5c:	003f7306 	br	801c2c <_malloc_r+0x4d8>
  801e60:	0104303a 	nor	r2,zero,r4
  801e64:	388e703a 	and	r7,r7,r2
  801e68:	e1c00115 	stw	r7,4(fp)
  801e6c:	003fe906 	br	801e14 <_malloc_r+0x6c0>
  801e70:	00815504 	movi	r2,1364
  801e74:	1100032e 	bgeu	r2,r4,801e84 <_malloc_r+0x730>
  801e78:	01001f84 	movi	r4,126
  801e7c:	00c0fc04 	movi	r3,1008
  801e80:	003f6a06 	br	801c2c <_malloc_r+0x4d8>
  801e84:	2804d4ba 	srli	r2,r5,18
  801e88:	11001f04 	addi	r4,r2,124
  801e8c:	200690fa 	slli	r3,r4,3
  801e90:	003f6606 	br	801c2c <_malloc_r+0x4d8>

00801e94 <memset>:
  801e94:	008000c4 	movi	r2,3
  801e98:	29403fcc 	andi	r5,r5,255
  801e9c:	2007883a 	mov	r3,r4
  801ea0:	1180022e 	bgeu	r2,r6,801eac <memset+0x18>
  801ea4:	2084703a 	and	r2,r4,r2
  801ea8:	10000826 	beq	r2,zero,801ecc <memset+0x38>
  801eac:	30000526 	beq	r6,zero,801ec4 <memset+0x30>
  801eb0:	2805883a 	mov	r2,r5
  801eb4:	30cd883a 	add	r6,r6,r3
  801eb8:	18800005 	stb	r2,0(r3)
  801ebc:	18c00044 	addi	r3,r3,1
  801ec0:	19bffd1e 	bne	r3,r6,801eb8 <memset+0x24>
  801ec4:	2005883a 	mov	r2,r4
  801ec8:	f800283a 	ret
  801ecc:	2804923a 	slli	r2,r5,8
  801ed0:	020003c4 	movi	r8,15
  801ed4:	200f883a 	mov	r7,r4
  801ed8:	2884b03a 	or	r2,r5,r2
  801edc:	1006943a 	slli	r3,r2,16
  801ee0:	10c6b03a 	or	r3,r2,r3
  801ee4:	41800a2e 	bgeu	r8,r6,801f10 <memset+0x7c>
  801ee8:	4005883a 	mov	r2,r8
  801eec:	31bffc04 	addi	r6,r6,-16
  801ef0:	38c00015 	stw	r3,0(r7)
  801ef4:	38c00115 	stw	r3,4(r7)
  801ef8:	38c00215 	stw	r3,8(r7)
  801efc:	38c00315 	stw	r3,12(r7)
  801f00:	39c00404 	addi	r7,r7,16
  801f04:	11bff936 	bltu	r2,r6,801eec <memset+0x58>
  801f08:	008000c4 	movi	r2,3
  801f0c:	1180052e 	bgeu	r2,r6,801f24 <memset+0x90>
  801f10:	31bfff04 	addi	r6,r6,-4
  801f14:	008000c4 	movi	r2,3
  801f18:	38c00015 	stw	r3,0(r7)
  801f1c:	39c00104 	addi	r7,r7,4
  801f20:	11bffb36 	bltu	r2,r6,801f10 <memset+0x7c>
  801f24:	3807883a 	mov	r3,r7
  801f28:	003fe006 	br	801eac <memset+0x18>

00801f2c <_open_r>:
  801f2c:	defffd04 	addi	sp,sp,-12
  801f30:	dc000015 	stw	r16,0(sp)
  801f34:	04002074 	movhi	r16,129
  801f38:	840a6d04 	addi	r16,r16,10676
  801f3c:	dc400115 	stw	r17,4(sp)
  801f40:	80000015 	stw	zero,0(r16)
  801f44:	2023883a 	mov	r17,r4
  801f48:	2809883a 	mov	r4,r5
  801f4c:	300b883a 	mov	r5,r6
  801f50:	380d883a 	mov	r6,r7
  801f54:	dfc00215 	stw	ra,8(sp)
  801f58:	080ad140 	call	80ad14 <open>
  801f5c:	1007883a 	mov	r3,r2
  801f60:	00bfffc4 	movi	r2,-1
  801f64:	18800626 	beq	r3,r2,801f80 <_open_r+0x54>
  801f68:	1805883a 	mov	r2,r3
  801f6c:	dfc00217 	ldw	ra,8(sp)
  801f70:	dc400117 	ldw	r17,4(sp)
  801f74:	dc000017 	ldw	r16,0(sp)
  801f78:	dec00304 	addi	sp,sp,12
  801f7c:	f800283a 	ret
  801f80:	80800017 	ldw	r2,0(r16)
  801f84:	103ff826 	beq	r2,zero,801f68 <_open_r+0x3c>
  801f88:	88800015 	stw	r2,0(r17)
  801f8c:	1805883a 	mov	r2,r3
  801f90:	dfc00217 	ldw	ra,8(sp)
  801f94:	dc400117 	ldw	r17,4(sp)
  801f98:	dc000017 	ldw	r16,0(sp)
  801f9c:	dec00304 	addi	sp,sp,12
  801fa0:	f800283a 	ret

00801fa4 <printf>:
  801fa4:	defffb04 	addi	sp,sp,-20
  801fa8:	dfc00115 	stw	ra,4(sp)
  801fac:	d9400215 	stw	r5,8(sp)
  801fb0:	d9800315 	stw	r6,12(sp)
  801fb4:	d9c00415 	stw	r7,16(sp)
  801fb8:	00802074 	movhi	r2,129
  801fbc:	10834504 	addi	r2,r2,3348
  801fc0:	10c00017 	ldw	r3,0(r2)
  801fc4:	200b883a 	mov	r5,r4
  801fc8:	d8800204 	addi	r2,sp,8
  801fcc:	19000217 	ldw	r4,8(r3)
  801fd0:	100d883a 	mov	r6,r2
  801fd4:	d8800015 	stw	r2,0(sp)
  801fd8:	08043e40 	call	8043e4 <__vfprintf_internal>
  801fdc:	dfc00117 	ldw	ra,4(sp)
  801fe0:	dec00504 	addi	sp,sp,20
  801fe4:	f800283a 	ret

00801fe8 <_printf_r>:
  801fe8:	defffc04 	addi	sp,sp,-16
  801fec:	dfc00115 	stw	ra,4(sp)
  801ff0:	d9800215 	stw	r6,8(sp)
  801ff4:	d9c00315 	stw	r7,12(sp)
  801ff8:	280d883a 	mov	r6,r5
  801ffc:	21400217 	ldw	r5,8(r4)
  802000:	d8c00204 	addi	r3,sp,8
  802004:	180f883a 	mov	r7,r3
  802008:	d8c00015 	stw	r3,0(sp)
  80200c:	08025380 	call	802538 <___vfprintf_internal_r>
  802010:	dfc00117 	ldw	ra,4(sp)
  802014:	dec00404 	addi	sp,sp,16
  802018:	f800283a 	ret

0080201c <_puts_r>:
  80201c:	defff604 	addi	sp,sp,-40
  802020:	dc400715 	stw	r17,28(sp)
  802024:	2023883a 	mov	r17,r4
  802028:	2809883a 	mov	r4,r5
  80202c:	dfc00915 	stw	ra,36(sp)
  802030:	dcc00815 	stw	r19,32(sp)
  802034:	2827883a 	mov	r19,r5
  802038:	080246c0 	call	80246c <strlen>
  80203c:	89400217 	ldw	r5,8(r17)
  802040:	00c02074 	movhi	r3,129
  802044:	18fac904 	addi	r3,r3,-5340
  802048:	01c00044 	movi	r7,1
  80204c:	12000044 	addi	r8,r2,1
  802050:	d8c00515 	stw	r3,20(sp)
  802054:	d9c00615 	stw	r7,24(sp)
  802058:	d8c00304 	addi	r3,sp,12
  80205c:	01c00084 	movi	r7,2
  802060:	8809883a 	mov	r4,r17
  802064:	d80d883a 	mov	r6,sp
  802068:	d8c00015 	stw	r3,0(sp)
  80206c:	dcc00315 	stw	r19,12(sp)
  802070:	da000215 	stw	r8,8(sp)
  802074:	d9c00115 	stw	r7,4(sp)
  802078:	d8800415 	stw	r2,16(sp)
  80207c:	0805e980 	call	805e98 <__sfvwrite_r>
  802080:	00ffffc4 	movi	r3,-1
  802084:	10000626 	beq	r2,zero,8020a0 <_puts_r+0x84>
  802088:	1805883a 	mov	r2,r3
  80208c:	dfc00917 	ldw	ra,36(sp)
  802090:	dcc00817 	ldw	r19,32(sp)
  802094:	dc400717 	ldw	r17,28(sp)
  802098:	dec00a04 	addi	sp,sp,40
  80209c:	f800283a 	ret
  8020a0:	00c00284 	movi	r3,10
  8020a4:	1805883a 	mov	r2,r3
  8020a8:	dfc00917 	ldw	ra,36(sp)
  8020ac:	dcc00817 	ldw	r19,32(sp)
  8020b0:	dc400717 	ldw	r17,28(sp)
  8020b4:	dec00a04 	addi	sp,sp,40
  8020b8:	f800283a 	ret

008020bc <puts>:
  8020bc:	00802074 	movhi	r2,129
  8020c0:	10834504 	addi	r2,r2,3348
  8020c4:	200b883a 	mov	r5,r4
  8020c8:	11000017 	ldw	r4,0(r2)
  8020cc:	080201c1 	jmpi	80201c <_puts_r>

008020d0 <__srefill_r>:
  8020d0:	defffd04 	addi	sp,sp,-12
  8020d4:	dc400115 	stw	r17,4(sp)
  8020d8:	dc000015 	stw	r16,0(sp)
  8020dc:	dfc00215 	stw	ra,8(sp)
  8020e0:	2023883a 	mov	r17,r4
  8020e4:	2821883a 	mov	r16,r5
  8020e8:	20000226 	beq	r4,zero,8020f4 <__srefill_r+0x24>
  8020ec:	20800e17 	ldw	r2,56(r4)
  8020f0:	10004126 	beq	r2,zero,8021f8 <__srefill_r+0x128>
  8020f4:	80c0030b 	ldhu	r3,12(r16)
  8020f8:	80000115 	stw	zero,4(r16)
  8020fc:	1880080c 	andi	r2,r3,32
  802100:	1000361e 	bne	r2,zero,8021dc <__srefill_r+0x10c>
  802104:	1880010c 	andi	r2,r3,4
  802108:	1000211e 	bne	r2,zero,802190 <__srefill_r+0xc0>
  80210c:	1880040c 	andi	r2,r3,16
  802110:	10005026 	beq	r2,zero,802254 <__srefill_r+0x184>
  802114:	1880020c 	andi	r2,r3,8
  802118:	1000541e 	bne	r2,zero,80226c <__srefill_r+0x19c>
  80211c:	8080030b 	ldhu	r2,12(r16)
  802120:	10800114 	ori	r2,r2,4
  802124:	8080030d 	sth	r2,12(r16)
  802128:	80800417 	ldw	r2,16(r16)
  80212c:	10004526 	beq	r2,zero,802244 <__srefill_r+0x174>
  802130:	8080030b 	ldhu	r2,12(r16)
  802134:	108000cc 	andi	r2,r2,3
  802138:	1000361e 	bne	r2,zero,802214 <__srefill_r+0x144>
  80213c:	81800417 	ldw	r6,16(r16)
  802140:	80c00817 	ldw	r3,32(r16)
  802144:	81400717 	ldw	r5,28(r16)
  802148:	81c00517 	ldw	r7,20(r16)
  80214c:	8809883a 	mov	r4,r17
  802150:	81800015 	stw	r6,0(r16)
  802154:	183ee83a 	callr	r3
  802158:	80c0030b 	ldhu	r3,12(r16)
  80215c:	1009883a 	mov	r4,r2
  802160:	80800115 	stw	r2,4(r16)
  802164:	00b7ffc4 	movi	r2,-8193
  802168:	1884703a 	and	r2,r3,r2
  80216c:	8080030d 	sth	r2,12(r16)
  802170:	0100230e 	bge	zero,r4,802200 <__srefill_r+0x130>
  802174:	0009883a 	mov	r4,zero
  802178:	2005883a 	mov	r2,r4
  80217c:	dfc00217 	ldw	ra,8(sp)
  802180:	dc400117 	ldw	r17,4(sp)
  802184:	dc000017 	ldw	r16,0(sp)
  802188:	dec00304 	addi	sp,sp,12
  80218c:	f800283a 	ret
  802190:	81400c17 	ldw	r5,48(r16)
  802194:	283fe426 	beq	r5,zero,802128 <__srefill_r+0x58>
  802198:	80801004 	addi	r2,r16,64
  80219c:	28800226 	beq	r5,r2,8021a8 <__srefill_r+0xd8>
  8021a0:	8809883a 	mov	r4,r17
  8021a4:	0800c580 	call	800c58 <_free_r>
  8021a8:	80800f17 	ldw	r2,60(r16)
  8021ac:	80000c15 	stw	zero,48(r16)
  8021b0:	80800115 	stw	r2,4(r16)
  8021b4:	103fdc26 	beq	r2,zero,802128 <__srefill_r+0x58>
  8021b8:	80800e17 	ldw	r2,56(r16)
  8021bc:	0009883a 	mov	r4,zero
  8021c0:	80800015 	stw	r2,0(r16)
  8021c4:	2005883a 	mov	r2,r4
  8021c8:	dfc00217 	ldw	ra,8(sp)
  8021cc:	dc400117 	ldw	r17,4(sp)
  8021d0:	dc000017 	ldw	r16,0(sp)
  8021d4:	dec00304 	addi	sp,sp,12
  8021d8:	f800283a 	ret
  8021dc:	013fffc4 	movi	r4,-1
  8021e0:	2005883a 	mov	r2,r4
  8021e4:	dfc00217 	ldw	ra,8(sp)
  8021e8:	dc400117 	ldw	r17,4(sp)
  8021ec:	dc000017 	ldw	r16,0(sp)
  8021f0:	dec00304 	addi	sp,sp,12
  8021f4:	f800283a 	ret
  8021f8:	08007640 	call	800764 <__sinit>
  8021fc:	003fbd06 	br	8020f4 <__srefill_r+0x24>
  802200:	20000b1e 	bne	r4,zero,802230 <__srefill_r+0x160>
  802204:	10800814 	ori	r2,r2,32
  802208:	013fffc4 	movi	r4,-1
  80220c:	8080030d 	sth	r2,12(r16)
  802210:	003fd906 	br	802178 <__srefill_r+0xa8>
  802214:	00802074 	movhi	r2,129
  802218:	10834604 	addi	r2,r2,3352
  80221c:	11000017 	ldw	r4,0(r2)
  802220:	01402034 	movhi	r5,128
  802224:	2948a504 	addi	r5,r5,8852
  802228:	08015080 	call	801508 <_fwalk>
  80222c:	003fc306 	br	80213c <__srefill_r+0x6c>
  802230:	10801014 	ori	r2,r2,64
  802234:	013fffc4 	movi	r4,-1
  802238:	8080030d 	sth	r2,12(r16)
  80223c:	80000115 	stw	zero,4(r16)
  802240:	003fcd06 	br	802178 <__srefill_r+0xa8>
  802244:	8809883a 	mov	r4,r17
  802248:	800b883a 	mov	r5,r16
  80224c:	08015c00 	call	8015c0 <__smakebuf_r>
  802250:	003fb706 	br	802130 <__srefill_r+0x60>
  802254:	18c01014 	ori	r3,r3,64
  802258:	00800244 	movi	r2,9
  80225c:	013fffc4 	movi	r4,-1
  802260:	88800015 	stw	r2,0(r17)
  802264:	80c0030d 	sth	r3,12(r16)
  802268:	003fc306 	br	802178 <__srefill_r+0xa8>
  80226c:	8809883a 	mov	r4,r17
  802270:	800b883a 	mov	r5,r16
  802274:	08004cc0 	call	8004cc <_fflush_r>
  802278:	103fd81e 	bne	r2,zero,8021dc <__srefill_r+0x10c>
  80227c:	8080030b 	ldhu	r2,12(r16)
  802280:	80000215 	stw	zero,8(r16)
  802284:	80000615 	stw	zero,24(r16)
  802288:	10bffdcc 	andi	r2,r2,65527
  80228c:	8080030d 	sth	r2,12(r16)
  802290:	003fa206 	br	80211c <__srefill_r+0x4c>

00802294 <lflush>:
  802294:	20c0030b 	ldhu	r3,12(r4)
  802298:	01400244 	movi	r5,9
  80229c:	0005883a 	mov	r2,zero
  8022a0:	18c0024c 	andi	r3,r3,9
  8022a4:	19400126 	beq	r3,r5,8022ac <lflush+0x18>
  8022a8:	f800283a 	ret
  8022ac:	08006c81 	jmpi	8006c8 <fflush>

008022b0 <_sbrk_r>:
  8022b0:	defffd04 	addi	sp,sp,-12
  8022b4:	dc000015 	stw	r16,0(sp)
  8022b8:	04002074 	movhi	r16,129
  8022bc:	840a6d04 	addi	r16,r16,10676
  8022c0:	dc400115 	stw	r17,4(sp)
  8022c4:	80000015 	stw	zero,0(r16)
  8022c8:	2023883a 	mov	r17,r4
  8022cc:	2809883a 	mov	r4,r5
  8022d0:	dfc00215 	stw	ra,8(sp)
  8022d4:	080b0dc0 	call	80b0dc <sbrk>
  8022d8:	1007883a 	mov	r3,r2
  8022dc:	00bfffc4 	movi	r2,-1
  8022e0:	18800626 	beq	r3,r2,8022fc <_sbrk_r+0x4c>
  8022e4:	1805883a 	mov	r2,r3
  8022e8:	dfc00217 	ldw	ra,8(sp)
  8022ec:	dc400117 	ldw	r17,4(sp)
  8022f0:	dc000017 	ldw	r16,0(sp)
  8022f4:	dec00304 	addi	sp,sp,12
  8022f8:	f800283a 	ret
  8022fc:	80800017 	ldw	r2,0(r16)
  802300:	103ff826 	beq	r2,zero,8022e4 <_sbrk_r+0x34>
  802304:	88800015 	stw	r2,0(r17)
  802308:	1805883a 	mov	r2,r3
  80230c:	dfc00217 	ldw	ra,8(sp)
  802310:	dc400117 	ldw	r17,4(sp)
  802314:	dc000017 	ldw	r16,0(sp)
  802318:	dec00304 	addi	sp,sp,12
  80231c:	f800283a 	ret

00802320 <__sclose>:
  802320:	2940038f 	ldh	r5,14(r5)
  802324:	08045bc1 	jmpi	8045bc <_close_r>

00802328 <__sseek>:
  802328:	defffe04 	addi	sp,sp,-8
  80232c:	dc000015 	stw	r16,0(sp)
  802330:	2821883a 	mov	r16,r5
  802334:	2940038f 	ldh	r5,14(r5)
  802338:	dfc00115 	stw	ra,4(sp)
  80233c:	08064680 	call	806468 <_lseek_r>
  802340:	1007883a 	mov	r3,r2
  802344:	00bfffc4 	movi	r2,-1
  802348:	18800926 	beq	r3,r2,802370 <__sseek+0x48>
  80234c:	8080030b 	ldhu	r2,12(r16)
  802350:	80c01415 	stw	r3,80(r16)
  802354:	10840014 	ori	r2,r2,4096
  802358:	8080030d 	sth	r2,12(r16)
  80235c:	1805883a 	mov	r2,r3
  802360:	dfc00117 	ldw	ra,4(sp)
  802364:	dc000017 	ldw	r16,0(sp)
  802368:	dec00204 	addi	sp,sp,8
  80236c:	f800283a 	ret
  802370:	8080030b 	ldhu	r2,12(r16)
  802374:	10bbffcc 	andi	r2,r2,61439
  802378:	8080030d 	sth	r2,12(r16)
  80237c:	1805883a 	mov	r2,r3
  802380:	dfc00117 	ldw	ra,4(sp)
  802384:	dc000017 	ldw	r16,0(sp)
  802388:	dec00204 	addi	sp,sp,8
  80238c:	f800283a 	ret

00802390 <__swrite>:
  802390:	2880030b 	ldhu	r2,12(r5)
  802394:	defffb04 	addi	sp,sp,-20
  802398:	dcc00315 	stw	r19,12(sp)
  80239c:	1080400c 	andi	r2,r2,256
  8023a0:	dc800215 	stw	r18,8(sp)
  8023a4:	dc400115 	stw	r17,4(sp)
  8023a8:	dc000015 	stw	r16,0(sp)
  8023ac:	3027883a 	mov	r19,r6
  8023b0:	3825883a 	mov	r18,r7
  8023b4:	dfc00415 	stw	ra,16(sp)
  8023b8:	2821883a 	mov	r16,r5
  8023bc:	000d883a 	mov	r6,zero
  8023c0:	01c00084 	movi	r7,2
  8023c4:	2023883a 	mov	r17,r4
  8023c8:	10000226 	beq	r2,zero,8023d4 <__swrite+0x44>
  8023cc:	2940038f 	ldh	r5,14(r5)
  8023d0:	08064680 	call	806468 <_lseek_r>
  8023d4:	8080030b 	ldhu	r2,12(r16)
  8023d8:	8140038f 	ldh	r5,14(r16)
  8023dc:	8809883a 	mov	r4,r17
  8023e0:	10bbffcc 	andi	r2,r2,61439
  8023e4:	980d883a 	mov	r6,r19
  8023e8:	900f883a 	mov	r7,r18
  8023ec:	8080030d 	sth	r2,12(r16)
  8023f0:	dfc00417 	ldw	ra,16(sp)
  8023f4:	dcc00317 	ldw	r19,12(sp)
  8023f8:	dc800217 	ldw	r18,8(sp)
  8023fc:	dc400117 	ldw	r17,4(sp)
  802400:	dc000017 	ldw	r16,0(sp)
  802404:	dec00504 	addi	sp,sp,20
  802408:	08044081 	jmpi	804408 <_write_r>

0080240c <__sread>:
  80240c:	defffe04 	addi	sp,sp,-8
  802410:	dc000015 	stw	r16,0(sp)
  802414:	2821883a 	mov	r16,r5
  802418:	2940038f 	ldh	r5,14(r5)
  80241c:	dfc00115 	stw	ra,4(sp)
  802420:	08077380 	call	807738 <_read_r>
  802424:	1007883a 	mov	r3,r2
  802428:	10000816 	blt	r2,zero,80244c <__sread+0x40>
  80242c:	80801417 	ldw	r2,80(r16)
  802430:	10c5883a 	add	r2,r2,r3
  802434:	80801415 	stw	r2,80(r16)
  802438:	1805883a 	mov	r2,r3
  80243c:	dfc00117 	ldw	ra,4(sp)
  802440:	dc000017 	ldw	r16,0(sp)
  802444:	dec00204 	addi	sp,sp,8
  802448:	f800283a 	ret
  80244c:	8080030b 	ldhu	r2,12(r16)
  802450:	10bbffcc 	andi	r2,r2,61439
  802454:	8080030d 	sth	r2,12(r16)
  802458:	1805883a 	mov	r2,r3
  80245c:	dfc00117 	ldw	ra,4(sp)
  802460:	dc000017 	ldw	r16,0(sp)
  802464:	dec00204 	addi	sp,sp,8
  802468:	f800283a 	ret

0080246c <strlen>:
  80246c:	208000cc 	andi	r2,r4,3
  802470:	2011883a 	mov	r8,r4
  802474:	1000161e 	bne	r2,zero,8024d0 <strlen+0x64>
  802478:	20c00017 	ldw	r3,0(r4)
  80247c:	017fbff4 	movhi	r5,65279
  802480:	297fbfc4 	addi	r5,r5,-257
  802484:	01e02074 	movhi	r7,32897
  802488:	39e02004 	addi	r7,r7,-32640
  80248c:	1945883a 	add	r2,r3,r5
  802490:	11c4703a 	and	r2,r2,r7
  802494:	00c6303a 	nor	r3,zero,r3
  802498:	1886703a 	and	r3,r3,r2
  80249c:	18000c1e 	bne	r3,zero,8024d0 <strlen+0x64>
  8024a0:	280d883a 	mov	r6,r5
  8024a4:	380b883a 	mov	r5,r7
  8024a8:	21000104 	addi	r4,r4,4
  8024ac:	20800017 	ldw	r2,0(r4)
  8024b0:	1187883a 	add	r3,r2,r6
  8024b4:	1946703a 	and	r3,r3,r5
  8024b8:	0084303a 	nor	r2,zero,r2
  8024bc:	10c4703a 	and	r2,r2,r3
  8024c0:	103ff926 	beq	r2,zero,8024a8 <strlen+0x3c>
  8024c4:	20800007 	ldb	r2,0(r4)
  8024c8:	10000326 	beq	r2,zero,8024d8 <strlen+0x6c>
  8024cc:	21000044 	addi	r4,r4,1
  8024d0:	20800007 	ldb	r2,0(r4)
  8024d4:	103ffd1e 	bne	r2,zero,8024cc <strlen+0x60>
  8024d8:	2205c83a 	sub	r2,r4,r8
  8024dc:	f800283a 	ret

008024e0 <__sprint_r>:
  8024e0:	30800217 	ldw	r2,8(r6)
  8024e4:	defffe04 	addi	sp,sp,-8
  8024e8:	dc000015 	stw	r16,0(sp)
  8024ec:	dfc00115 	stw	ra,4(sp)
  8024f0:	3021883a 	mov	r16,r6
  8024f4:	0007883a 	mov	r3,zero
  8024f8:	1000061e 	bne	r2,zero,802514 <__sprint_r+0x34>
  8024fc:	1805883a 	mov	r2,r3
  802500:	30000115 	stw	zero,4(r6)
  802504:	dfc00117 	ldw	ra,4(sp)
  802508:	dc000017 	ldw	r16,0(sp)
  80250c:	dec00204 	addi	sp,sp,8
  802510:	f800283a 	ret
  802514:	0805e980 	call	805e98 <__sfvwrite_r>
  802518:	1007883a 	mov	r3,r2
  80251c:	1805883a 	mov	r2,r3
  802520:	80000115 	stw	zero,4(r16)
  802524:	80000215 	stw	zero,8(r16)
  802528:	dfc00117 	ldw	ra,4(sp)
  80252c:	dc000017 	ldw	r16,0(sp)
  802530:	dec00204 	addi	sp,sp,8
  802534:	f800283a 	ret

00802538 <___vfprintf_internal_r>:
  802538:	defea404 	addi	sp,sp,-1392
  80253c:	dd815815 	stw	r22,1376(sp)
  802540:	dc015215 	stw	r16,1352(sp)
  802544:	d9c15115 	stw	r7,1348(sp)
  802548:	dfc15b15 	stw	ra,1388(sp)
  80254c:	df015a15 	stw	fp,1384(sp)
  802550:	ddc15915 	stw	r23,1380(sp)
  802554:	dd415715 	stw	r21,1372(sp)
  802558:	dd015615 	stw	r20,1368(sp)
  80255c:	dcc15515 	stw	r19,1364(sp)
  802560:	dc815415 	stw	r18,1360(sp)
  802564:	dc415315 	stw	r17,1356(sp)
  802568:	282d883a 	mov	r22,r5
  80256c:	3021883a 	mov	r16,r6
  802570:	d9014f15 	stw	r4,1340(sp)
  802574:	08063ac0 	call	8063ac <_localeconv_r>
  802578:	10800017 	ldw	r2,0(r2)
  80257c:	d9c15117 	ldw	r7,1348(sp)
  802580:	d8814915 	stw	r2,1316(sp)
  802584:	d8814f17 	ldw	r2,1340(sp)
  802588:	10000226 	beq	r2,zero,802594 <___vfprintf_internal_r+0x5c>
  80258c:	10800e17 	ldw	r2,56(r2)
  802590:	10020d26 	beq	r2,zero,802dc8 <___vfprintf_internal_r+0x890>
  802594:	b080030b 	ldhu	r2,12(r22)
  802598:	1080020c 	andi	r2,r2,8
  80259c:	10020e26 	beq	r2,zero,802dd8 <___vfprintf_internal_r+0x8a0>
  8025a0:	b0800417 	ldw	r2,16(r22)
  8025a4:	10020c26 	beq	r2,zero,802dd8 <___vfprintf_internal_r+0x8a0>
  8025a8:	b200030b 	ldhu	r8,12(r22)
  8025ac:	00800284 	movi	r2,10
  8025b0:	40c0068c 	andi	r3,r8,26
  8025b4:	18802f1e 	bne	r3,r2,802674 <___vfprintf_internal_r+0x13c>
  8025b8:	b080038f 	ldh	r2,14(r22)
  8025bc:	10002d16 	blt	r2,zero,802674 <___vfprintf_internal_r+0x13c>
  8025c0:	b240038b 	ldhu	r9,14(r22)
  8025c4:	b2800717 	ldw	r10,28(r22)
  8025c8:	b2c00917 	ldw	r11,36(r22)
  8025cc:	d9014f17 	ldw	r4,1340(sp)
  8025d0:	dc402904 	addi	r17,sp,164
  8025d4:	d8804004 	addi	r2,sp,256
  8025d8:	00c10004 	movi	r3,1024
  8025dc:	423fff4c 	andi	r8,r8,65533
  8025e0:	800d883a 	mov	r6,r16
  8025e4:	880b883a 	mov	r5,r17
  8025e8:	da002c0d 	sth	r8,176(sp)
  8025ec:	da402c8d 	sth	r9,178(sp)
  8025f0:	da803015 	stw	r10,192(sp)
  8025f4:	dac03215 	stw	r11,200(sp)
  8025f8:	d8802d15 	stw	r2,180(sp)
  8025fc:	d8c02e15 	stw	r3,184(sp)
  802600:	d8802915 	stw	r2,164(sp)
  802604:	d8c02b15 	stw	r3,172(sp)
  802608:	d8002f15 	stw	zero,188(sp)
  80260c:	08025380 	call	802538 <___vfprintf_internal_r>
  802610:	d8814b15 	stw	r2,1324(sp)
  802614:	10000416 	blt	r2,zero,802628 <___vfprintf_internal_r+0xf0>
  802618:	d9014f17 	ldw	r4,1340(sp)
  80261c:	880b883a 	mov	r5,r17
  802620:	08004cc0 	call	8004cc <_fflush_r>
  802624:	1002321e 	bne	r2,zero,802ef0 <___vfprintf_internal_r+0x9b8>
  802628:	d8802c0b 	ldhu	r2,176(sp)
  80262c:	1080100c 	andi	r2,r2,64
  802630:	10000326 	beq	r2,zero,802640 <___vfprintf_internal_r+0x108>
  802634:	b080030b 	ldhu	r2,12(r22)
  802638:	10801014 	ori	r2,r2,64
  80263c:	b080030d 	sth	r2,12(r22)
  802640:	d8814b17 	ldw	r2,1324(sp)
  802644:	dfc15b17 	ldw	ra,1388(sp)
  802648:	df015a17 	ldw	fp,1384(sp)
  80264c:	ddc15917 	ldw	r23,1380(sp)
  802650:	dd815817 	ldw	r22,1376(sp)
  802654:	dd415717 	ldw	r21,1372(sp)
  802658:	dd015617 	ldw	r20,1368(sp)
  80265c:	dcc15517 	ldw	r19,1364(sp)
  802660:	dc815417 	ldw	r18,1360(sp)
  802664:	dc415317 	ldw	r17,1356(sp)
  802668:	dc015217 	ldw	r16,1352(sp)
  80266c:	dec15c04 	addi	sp,sp,1392
  802670:	f800283a 	ret
  802674:	0005883a 	mov	r2,zero
  802678:	0007883a 	mov	r3,zero
  80267c:	dd401904 	addi	r21,sp,100
  802680:	d8814215 	stw	r2,1288(sp)
  802684:	802f883a 	mov	r23,r16
  802688:	d8c14315 	stw	r3,1292(sp)
  80268c:	d8014b15 	stw	zero,1324(sp)
  802690:	d8014815 	stw	zero,1312(sp)
  802694:	d8014415 	stw	zero,1296(sp)
  802698:	d8014715 	stw	zero,1308(sp)
  80269c:	dd400c15 	stw	r21,48(sp)
  8026a0:	d8000e15 	stw	zero,56(sp)
  8026a4:	d8000d15 	stw	zero,52(sp)
  8026a8:	b8800007 	ldb	r2,0(r23)
  8026ac:	10001926 	beq	r2,zero,802714 <___vfprintf_internal_r+0x1dc>
  8026b0:	00c00944 	movi	r3,37
  8026b4:	10c01726 	beq	r2,r3,802714 <___vfprintf_internal_r+0x1dc>
  8026b8:	b821883a 	mov	r16,r23
  8026bc:	00000106 	br	8026c4 <___vfprintf_internal_r+0x18c>
  8026c0:	10c00326 	beq	r2,r3,8026d0 <___vfprintf_internal_r+0x198>
  8026c4:	84000044 	addi	r16,r16,1
  8026c8:	80800007 	ldb	r2,0(r16)
  8026cc:	103ffc1e 	bne	r2,zero,8026c0 <___vfprintf_internal_r+0x188>
  8026d0:	85e7c83a 	sub	r19,r16,r23
  8026d4:	98000e26 	beq	r19,zero,802710 <___vfprintf_internal_r+0x1d8>
  8026d8:	dc800e17 	ldw	r18,56(sp)
  8026dc:	dc400d17 	ldw	r17,52(sp)
  8026e0:	008001c4 	movi	r2,7
  8026e4:	94e5883a 	add	r18,r18,r19
  8026e8:	8c400044 	addi	r17,r17,1
  8026ec:	adc00015 	stw	r23,0(r21)
  8026f0:	dc800e15 	stw	r18,56(sp)
  8026f4:	acc00115 	stw	r19,4(r21)
  8026f8:	dc400d15 	stw	r17,52(sp)
  8026fc:	14428b16 	blt	r2,r17,80312c <___vfprintf_internal_r+0xbf4>
  802700:	ad400204 	addi	r21,r21,8
  802704:	d9014b17 	ldw	r4,1324(sp)
  802708:	24c9883a 	add	r4,r4,r19
  80270c:	d9014b15 	stw	r4,1324(sp)
  802710:	802f883a 	mov	r23,r16
  802714:	b8800007 	ldb	r2,0(r23)
  802718:	10013c26 	beq	r2,zero,802c0c <___vfprintf_internal_r+0x6d4>
  80271c:	bdc00044 	addi	r23,r23,1
  802720:	d8000405 	stb	zero,16(sp)
  802724:	b8c00007 	ldb	r3,0(r23)
  802728:	04ffffc4 	movi	r19,-1
  80272c:	d8014c15 	stw	zero,1328(sp)
  802730:	d8014a15 	stw	zero,1320(sp)
  802734:	d8c14d15 	stw	r3,1332(sp)
  802738:	bdc00044 	addi	r23,r23,1
  80273c:	d9414d17 	ldw	r5,1332(sp)
  802740:	00801604 	movi	r2,88
  802744:	28fff804 	addi	r3,r5,-32
  802748:	10c06036 	bltu	r2,r3,8028cc <___vfprintf_internal_r+0x394>
  80274c:	18c5883a 	add	r2,r3,r3
  802750:	1085883a 	add	r2,r2,r2
  802754:	00c02034 	movhi	r3,128
  802758:	18c9da04 	addi	r3,r3,10088
  80275c:	10c5883a 	add	r2,r2,r3
  802760:	11000017 	ldw	r4,0(r2)
  802764:	2000683a 	jmp	r4
  802768:	008036dc 	xori	r2,zero,219
  80276c:	008028cc 	andi	r2,zero,163
  802770:	008028cc 	andi	r2,zero,163
  802774:	008036c8 	cmpgei	r2,zero,219
  802778:	008028cc 	andi	r2,zero,163
  80277c:	008028cc 	andi	r2,zero,163
  802780:	008028cc 	andi	r2,zero,163
  802784:	008028cc 	andi	r2,zero,163
  802788:	008028cc 	andi	r2,zero,163
  80278c:	008028cc 	andi	r2,zero,163
  802790:	008034a8 	cmpgeui	r2,zero,210
  802794:	008036b8 	rdprs	r2,zero,218
  802798:	008028cc 	andi	r2,zero,163
  80279c:	008034c0 	call	8034c <__reset-0x77fcb4>
  8027a0:	00803754 	movui	r2,221
  8027a4:	008028cc 	andi	r2,zero,163
  8027a8:	00803740 	call	80374 <__reset-0x77fc8c>
  8027ac:	00803708 	cmpgei	r2,zero,220
  8027b0:	00803708 	cmpgei	r2,zero,220
  8027b4:	00803708 	cmpgei	r2,zero,220
  8027b8:	00803708 	cmpgei	r2,zero,220
  8027bc:	00803708 	cmpgei	r2,zero,220
  8027c0:	00803708 	cmpgei	r2,zero,220
  8027c4:	00803708 	cmpgei	r2,zero,220
  8027c8:	00803708 	cmpgei	r2,zero,220
  8027cc:	00803708 	cmpgei	r2,zero,220
  8027d0:	008028cc 	andi	r2,zero,163
  8027d4:	008028cc 	andi	r2,zero,163
  8027d8:	008028cc 	andi	r2,zero,163
  8027dc:	008028cc 	andi	r2,zero,163
  8027e0:	008028cc 	andi	r2,zero,163
  8027e4:	008028cc 	andi	r2,zero,163
  8027e8:	008028cc 	andi	r2,zero,163
  8027ec:	008028cc 	andi	r2,zero,163
  8027f0:	008028cc 	andi	r2,zero,163
  8027f4:	008028cc 	andi	r2,zero,163
  8027f8:	00802f24 	muli	r2,zero,188
  8027fc:	00803590 	cmplti	r2,zero,214
  802800:	008028cc 	andi	r2,zero,163
  802804:	00803590 	cmplti	r2,zero,214
  802808:	008028cc 	andi	r2,zero,163
  80280c:	008028cc 	andi	r2,zero,163
  802810:	008028cc 	andi	r2,zero,163
  802814:	008028cc 	andi	r2,zero,163
  802818:	008036f4 	movhi	r2,219
  80281c:	008028cc 	andi	r2,zero,163
  802820:	008028cc 	andi	r2,zero,163
  802824:	00802fd8 	cmpnei	r2,zero,191
  802828:	008028cc 	andi	r2,zero,163
  80282c:	008028cc 	andi	r2,zero,163
  802830:	008028cc 	andi	r2,zero,163
  802834:	008028cc 	andi	r2,zero,163
  802838:	008028cc 	andi	r2,zero,163
  80283c:	00803024 	muli	r2,zero,192
  802840:	008028cc 	andi	r2,zero,163
  802844:	008028cc 	andi	r2,zero,163
  802848:	00803644 	movi	r2,217
  80284c:	008028cc 	andi	r2,zero,163
  802850:	008028cc 	andi	r2,zero,163
  802854:	008028cc 	andi	r2,zero,163
  802858:	008028cc 	andi	r2,zero,163
  80285c:	008028cc 	andi	r2,zero,163
  802860:	008028cc 	andi	r2,zero,163
  802864:	008028cc 	andi	r2,zero,163
  802868:	008028cc 	andi	r2,zero,163
  80286c:	008028cc 	andi	r2,zero,163
  802870:	008028cc 	andi	r2,zero,163
  802874:	00803618 	cmpnei	r2,zero,216
  802878:	00802f30 	cmpltui	r2,zero,188
  80287c:	00803590 	cmplti	r2,zero,214
  802880:	00803590 	cmplti	r2,zero,214
  802884:	00803590 	cmplti	r2,zero,214
  802888:	0080357c 	xorhi	r2,zero,213
  80288c:	00802f30 	cmpltui	r2,zero,188
  802890:	008028cc 	andi	r2,zero,163
  802894:	008028cc 	andi	r2,zero,163
  802898:	00803504 	movi	r2,212
  80289c:	008028cc 	andi	r2,zero,163
  8028a0:	008034d4 	movui	r2,211
  8028a4:	00802fe4 	muli	r2,zero,191
  8028a8:	00803534 	movhi	r2,212
  8028ac:	00803520 	cmpeqi	r2,zero,212
  8028b0:	008028cc 	andi	r2,zero,163
  8028b4:	008037b0 	cmpltui	r2,zero,222
  8028b8:	008028cc 	andi	r2,zero,163
  8028bc:	00803030 	cmpltui	r2,zero,192
  8028c0:	008028cc 	andi	r2,zero,163
  8028c4:	008028cc 	andi	r2,zero,163
  8028c8:	008036a8 	cmpgeui	r2,zero,218
  8028cc:	d9014d17 	ldw	r4,1332(sp)
  8028d0:	2000ce26 	beq	r4,zero,802c0c <___vfprintf_internal_r+0x6d4>
  8028d4:	01400044 	movi	r5,1
  8028d8:	d9800f04 	addi	r6,sp,60
  8028dc:	d9c14015 	stw	r7,1280(sp)
  8028e0:	d9414515 	stw	r5,1300(sp)
  8028e4:	d9814115 	stw	r6,1284(sp)
  8028e8:	280f883a 	mov	r7,r5
  8028ec:	d9000f05 	stb	r4,60(sp)
  8028f0:	d8000405 	stb	zero,16(sp)
  8028f4:	d8014615 	stw	zero,1304(sp)
  8028f8:	d8c14c17 	ldw	r3,1328(sp)
  8028fc:	1880008c 	andi	r2,r3,2
  802900:	1005003a 	cmpeq	r2,r2,zero
  802904:	d8815015 	stw	r2,1344(sp)
  802908:	1000031e 	bne	r2,zero,802918 <___vfprintf_internal_r+0x3e0>
  80290c:	d9014517 	ldw	r4,1300(sp)
  802910:	21000084 	addi	r4,r4,2
  802914:	d9014515 	stw	r4,1300(sp)
  802918:	d9414c17 	ldw	r5,1328(sp)
  80291c:	2940210c 	andi	r5,r5,132
  802920:	d9414e15 	stw	r5,1336(sp)
  802924:	28002d1e 	bne	r5,zero,8029dc <___vfprintf_internal_r+0x4a4>
  802928:	d9814a17 	ldw	r6,1320(sp)
  80292c:	d8814517 	ldw	r2,1300(sp)
  802930:	30a1c83a 	sub	r16,r6,r2
  802934:	0400290e 	bge	zero,r16,8029dc <___vfprintf_internal_r+0x4a4>
  802938:	00800404 	movi	r2,16
  80293c:	1404580e 	bge	r2,r16,803aa0 <___vfprintf_internal_r+0x1568>
  802940:	dc800e17 	ldw	r18,56(sp)
  802944:	dc400d17 	ldw	r17,52(sp)
  802948:	1027883a 	mov	r19,r2
  80294c:	07002074 	movhi	fp,129
  802950:	e73ae584 	addi	fp,fp,-5226
  802954:	050001c4 	movi	r20,7
  802958:	00000306 	br	802968 <___vfprintf_internal_r+0x430>
  80295c:	843ffc04 	addi	r16,r16,-16
  802960:	ad400204 	addi	r21,r21,8
  802964:	9c00130e 	bge	r19,r16,8029b4 <___vfprintf_internal_r+0x47c>
  802968:	94800404 	addi	r18,r18,16
  80296c:	8c400044 	addi	r17,r17,1
  802970:	af000015 	stw	fp,0(r21)
  802974:	acc00115 	stw	r19,4(r21)
  802978:	dc800e15 	stw	r18,56(sp)
  80297c:	dc400d15 	stw	r17,52(sp)
  802980:	a47ff60e 	bge	r20,r17,80295c <___vfprintf_internal_r+0x424>
  802984:	d9014f17 	ldw	r4,1340(sp)
  802988:	b00b883a 	mov	r5,r22
  80298c:	d9800c04 	addi	r6,sp,48
  802990:	d9c15115 	stw	r7,1348(sp)
  802994:	08024e00 	call	8024e0 <__sprint_r>
  802998:	d9c15117 	ldw	r7,1348(sp)
  80299c:	10009e1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  8029a0:	843ffc04 	addi	r16,r16,-16
  8029a4:	dc800e17 	ldw	r18,56(sp)
  8029a8:	dc400d17 	ldw	r17,52(sp)
  8029ac:	dd401904 	addi	r21,sp,100
  8029b0:	9c3fed16 	blt	r19,r16,802968 <___vfprintf_internal_r+0x430>
  8029b4:	9425883a 	add	r18,r18,r16
  8029b8:	8c400044 	addi	r17,r17,1
  8029bc:	008001c4 	movi	r2,7
  8029c0:	af000015 	stw	fp,0(r21)
  8029c4:	ac000115 	stw	r16,4(r21)
  8029c8:	dc800e15 	stw	r18,56(sp)
  8029cc:	dc400d15 	stw	r17,52(sp)
  8029d0:	1441f516 	blt	r2,r17,8031a8 <___vfprintf_internal_r+0xc70>
  8029d4:	ad400204 	addi	r21,r21,8
  8029d8:	00000206 	br	8029e4 <___vfprintf_internal_r+0x4ac>
  8029dc:	dc800e17 	ldw	r18,56(sp)
  8029e0:	dc400d17 	ldw	r17,52(sp)
  8029e4:	d8800407 	ldb	r2,16(sp)
  8029e8:	10000b26 	beq	r2,zero,802a18 <___vfprintf_internal_r+0x4e0>
  8029ec:	00800044 	movi	r2,1
  8029f0:	94800044 	addi	r18,r18,1
  8029f4:	8c400044 	addi	r17,r17,1
  8029f8:	a8800115 	stw	r2,4(r21)
  8029fc:	d8c00404 	addi	r3,sp,16
  802a00:	008001c4 	movi	r2,7
  802a04:	a8c00015 	stw	r3,0(r21)
  802a08:	dc800e15 	stw	r18,56(sp)
  802a0c:	dc400d15 	stw	r17,52(sp)
  802a10:	1441da16 	blt	r2,r17,80317c <___vfprintf_internal_r+0xc44>
  802a14:	ad400204 	addi	r21,r21,8
  802a18:	d9015017 	ldw	r4,1344(sp)
  802a1c:	20000b1e 	bne	r4,zero,802a4c <___vfprintf_internal_r+0x514>
  802a20:	d8800444 	addi	r2,sp,17
  802a24:	94800084 	addi	r18,r18,2
  802a28:	8c400044 	addi	r17,r17,1
  802a2c:	a8800015 	stw	r2,0(r21)
  802a30:	00c00084 	movi	r3,2
  802a34:	008001c4 	movi	r2,7
  802a38:	a8c00115 	stw	r3,4(r21)
  802a3c:	dc800e15 	stw	r18,56(sp)
  802a40:	dc400d15 	stw	r17,52(sp)
  802a44:	1441c216 	blt	r2,r17,803150 <___vfprintf_internal_r+0xc18>
  802a48:	ad400204 	addi	r21,r21,8
  802a4c:	d9414e17 	ldw	r5,1336(sp)
  802a50:	00802004 	movi	r2,128
  802a54:	2880b126 	beq	r5,r2,802d1c <___vfprintf_internal_r+0x7e4>
  802a58:	d8c14617 	ldw	r3,1304(sp)
  802a5c:	19e1c83a 	sub	r16,r3,r7
  802a60:	0400260e 	bge	zero,r16,802afc <___vfprintf_internal_r+0x5c4>
  802a64:	00800404 	movi	r2,16
  802a68:	1403c90e 	bge	r2,r16,803990 <___vfprintf_internal_r+0x1458>
  802a6c:	1027883a 	mov	r19,r2
  802a70:	07002074 	movhi	fp,129
  802a74:	e73ae184 	addi	fp,fp,-5242
  802a78:	050001c4 	movi	r20,7
  802a7c:	00000306 	br	802a8c <___vfprintf_internal_r+0x554>
  802a80:	843ffc04 	addi	r16,r16,-16
  802a84:	ad400204 	addi	r21,r21,8
  802a88:	9c00130e 	bge	r19,r16,802ad8 <___vfprintf_internal_r+0x5a0>
  802a8c:	94800404 	addi	r18,r18,16
  802a90:	8c400044 	addi	r17,r17,1
  802a94:	af000015 	stw	fp,0(r21)
  802a98:	acc00115 	stw	r19,4(r21)
  802a9c:	dc800e15 	stw	r18,56(sp)
  802aa0:	dc400d15 	stw	r17,52(sp)
  802aa4:	a47ff60e 	bge	r20,r17,802a80 <___vfprintf_internal_r+0x548>
  802aa8:	d9014f17 	ldw	r4,1340(sp)
  802aac:	b00b883a 	mov	r5,r22
  802ab0:	d9800c04 	addi	r6,sp,48
  802ab4:	d9c15115 	stw	r7,1348(sp)
  802ab8:	08024e00 	call	8024e0 <__sprint_r>
  802abc:	d9c15117 	ldw	r7,1348(sp)
  802ac0:	1000551e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  802ac4:	843ffc04 	addi	r16,r16,-16
  802ac8:	dc800e17 	ldw	r18,56(sp)
  802acc:	dc400d17 	ldw	r17,52(sp)
  802ad0:	dd401904 	addi	r21,sp,100
  802ad4:	9c3fed16 	blt	r19,r16,802a8c <___vfprintf_internal_r+0x554>
  802ad8:	9425883a 	add	r18,r18,r16
  802adc:	8c400044 	addi	r17,r17,1
  802ae0:	008001c4 	movi	r2,7
  802ae4:	af000015 	stw	fp,0(r21)
  802ae8:	ac000115 	stw	r16,4(r21)
  802aec:	dc800e15 	stw	r18,56(sp)
  802af0:	dc400d15 	stw	r17,52(sp)
  802af4:	14418216 	blt	r2,r17,803100 <___vfprintf_internal_r+0xbc8>
  802af8:	ad400204 	addi	r21,r21,8
  802afc:	d9014c17 	ldw	r4,1328(sp)
  802b00:	2080400c 	andi	r2,r4,256
  802b04:	10004a1e 	bne	r2,zero,802c30 <___vfprintf_internal_r+0x6f8>
  802b08:	d9414117 	ldw	r5,1284(sp)
  802b0c:	91e5883a 	add	r18,r18,r7
  802b10:	8c400044 	addi	r17,r17,1
  802b14:	008001c4 	movi	r2,7
  802b18:	a9400015 	stw	r5,0(r21)
  802b1c:	a9c00115 	stw	r7,4(r21)
  802b20:	dc800e15 	stw	r18,56(sp)
  802b24:	dc400d15 	stw	r17,52(sp)
  802b28:	14416716 	blt	r2,r17,8030c8 <___vfprintf_internal_r+0xb90>
  802b2c:	a8c00204 	addi	r3,r21,8
  802b30:	d9814c17 	ldw	r6,1328(sp)
  802b34:	3080010c 	andi	r2,r6,4
  802b38:	10002826 	beq	r2,zero,802bdc <___vfprintf_internal_r+0x6a4>
  802b3c:	d8814a17 	ldw	r2,1320(sp)
  802b40:	d9014517 	ldw	r4,1300(sp)
  802b44:	1121c83a 	sub	r16,r2,r4
  802b48:	0400240e 	bge	zero,r16,802bdc <___vfprintf_internal_r+0x6a4>
  802b4c:	00800404 	movi	r2,16
  802b50:	14044f0e 	bge	r2,r16,803c90 <___vfprintf_internal_r+0x1758>
  802b54:	dc400d17 	ldw	r17,52(sp)
  802b58:	1027883a 	mov	r19,r2
  802b5c:	07002074 	movhi	fp,129
  802b60:	e73ae584 	addi	fp,fp,-5226
  802b64:	050001c4 	movi	r20,7
  802b68:	00000306 	br	802b78 <___vfprintf_internal_r+0x640>
  802b6c:	843ffc04 	addi	r16,r16,-16
  802b70:	18c00204 	addi	r3,r3,8
  802b74:	9c00110e 	bge	r19,r16,802bbc <___vfprintf_internal_r+0x684>
  802b78:	94800404 	addi	r18,r18,16
  802b7c:	8c400044 	addi	r17,r17,1
  802b80:	1f000015 	stw	fp,0(r3)
  802b84:	1cc00115 	stw	r19,4(r3)
  802b88:	dc800e15 	stw	r18,56(sp)
  802b8c:	dc400d15 	stw	r17,52(sp)
  802b90:	a47ff60e 	bge	r20,r17,802b6c <___vfprintf_internal_r+0x634>
  802b94:	d9014f17 	ldw	r4,1340(sp)
  802b98:	b00b883a 	mov	r5,r22
  802b9c:	d9800c04 	addi	r6,sp,48
  802ba0:	08024e00 	call	8024e0 <__sprint_r>
  802ba4:	10001c1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  802ba8:	843ffc04 	addi	r16,r16,-16
  802bac:	dc800e17 	ldw	r18,56(sp)
  802bb0:	dc400d17 	ldw	r17,52(sp)
  802bb4:	d8c01904 	addi	r3,sp,100
  802bb8:	9c3fef16 	blt	r19,r16,802b78 <___vfprintf_internal_r+0x640>
  802bbc:	9425883a 	add	r18,r18,r16
  802bc0:	8c400044 	addi	r17,r17,1
  802bc4:	008001c4 	movi	r2,7
  802bc8:	1f000015 	stw	fp,0(r3)
  802bcc:	1c000115 	stw	r16,4(r3)
  802bd0:	dc800e15 	stw	r18,56(sp)
  802bd4:	dc400d15 	stw	r17,52(sp)
  802bd8:	1440cb16 	blt	r2,r17,802f08 <___vfprintf_internal_r+0x9d0>
  802bdc:	d8814a17 	ldw	r2,1320(sp)
  802be0:	d9414517 	ldw	r5,1300(sp)
  802be4:	1140010e 	bge	r2,r5,802bec <___vfprintf_internal_r+0x6b4>
  802be8:	2805883a 	mov	r2,r5
  802bec:	d9814b17 	ldw	r6,1324(sp)
  802bf0:	308d883a 	add	r6,r6,r2
  802bf4:	d9814b15 	stw	r6,1324(sp)
  802bf8:	90013b1e 	bne	r18,zero,8030e8 <___vfprintf_internal_r+0xbb0>
  802bfc:	d9c14017 	ldw	r7,1280(sp)
  802c00:	dd401904 	addi	r21,sp,100
  802c04:	d8000d15 	stw	zero,52(sp)
  802c08:	003ea706 	br	8026a8 <___vfprintf_internal_r+0x170>
  802c0c:	d8800e17 	ldw	r2,56(sp)
  802c10:	10053f1e 	bne	r2,zero,804110 <___vfprintf_internal_r+0x1bd8>
  802c14:	d8000d15 	stw	zero,52(sp)
  802c18:	b080030b 	ldhu	r2,12(r22)
  802c1c:	1080100c 	andi	r2,r2,64
  802c20:	103e8726 	beq	r2,zero,802640 <___vfprintf_internal_r+0x108>
  802c24:	00bfffc4 	movi	r2,-1
  802c28:	d8814b15 	stw	r2,1324(sp)
  802c2c:	003e8406 	br	802640 <___vfprintf_internal_r+0x108>
  802c30:	d9814d17 	ldw	r6,1332(sp)
  802c34:	00801944 	movi	r2,101
  802c38:	11806e16 	blt	r2,r6,802df4 <___vfprintf_internal_r+0x8bc>
  802c3c:	d9414717 	ldw	r5,1308(sp)
  802c40:	00c00044 	movi	r3,1
  802c44:	1943430e 	bge	r3,r5,803954 <___vfprintf_internal_r+0x141c>
  802c48:	d8814117 	ldw	r2,1284(sp)
  802c4c:	94800044 	addi	r18,r18,1
  802c50:	8c400044 	addi	r17,r17,1
  802c54:	a8800015 	stw	r2,0(r21)
  802c58:	008001c4 	movi	r2,7
  802c5c:	a8c00115 	stw	r3,4(r21)
  802c60:	dc800e15 	stw	r18,56(sp)
  802c64:	dc400d15 	stw	r17,52(sp)
  802c68:	1441ca16 	blt	r2,r17,803394 <___vfprintf_internal_r+0xe5c>
  802c6c:	a8c00204 	addi	r3,r21,8
  802c70:	d9014917 	ldw	r4,1316(sp)
  802c74:	00800044 	movi	r2,1
  802c78:	94800044 	addi	r18,r18,1
  802c7c:	8c400044 	addi	r17,r17,1
  802c80:	18800115 	stw	r2,4(r3)
  802c84:	008001c4 	movi	r2,7
  802c88:	19000015 	stw	r4,0(r3)
  802c8c:	dc800e15 	stw	r18,56(sp)
  802c90:	dc400d15 	stw	r17,52(sp)
  802c94:	1441b616 	blt	r2,r17,803370 <___vfprintf_internal_r+0xe38>
  802c98:	1cc00204 	addi	r19,r3,8
  802c9c:	d9014217 	ldw	r4,1288(sp)
  802ca0:	d9414317 	ldw	r5,1292(sp)
  802ca4:	000d883a 	mov	r6,zero
  802ca8:	000f883a 	mov	r7,zero
  802cac:	08096b80 	call	8096b8 <__nedf2>
  802cb0:	10017426 	beq	r2,zero,803284 <___vfprintf_internal_r+0xd4c>
  802cb4:	d9414717 	ldw	r5,1308(sp)
  802cb8:	d9814117 	ldw	r6,1284(sp)
  802cbc:	8c400044 	addi	r17,r17,1
  802cc0:	2c85883a 	add	r2,r5,r18
  802cc4:	14bfffc4 	addi	r18,r2,-1
  802cc8:	28bfffc4 	addi	r2,r5,-1
  802ccc:	30c00044 	addi	r3,r6,1
  802cd0:	98800115 	stw	r2,4(r19)
  802cd4:	008001c4 	movi	r2,7
  802cd8:	98c00015 	stw	r3,0(r19)
  802cdc:	dc800e15 	stw	r18,56(sp)
  802ce0:	dc400d15 	stw	r17,52(sp)
  802ce4:	14418e16 	blt	r2,r17,803320 <___vfprintf_internal_r+0xde8>
  802ce8:	9cc00204 	addi	r19,r19,8
  802cec:	d9414817 	ldw	r5,1312(sp)
  802cf0:	d8800804 	addi	r2,sp,32
  802cf4:	8c400044 	addi	r17,r17,1
  802cf8:	9165883a 	add	r18,r18,r5
  802cfc:	98800015 	stw	r2,0(r19)
  802d00:	008001c4 	movi	r2,7
  802d04:	99400115 	stw	r5,4(r19)
  802d08:	dc800e15 	stw	r18,56(sp)
  802d0c:	dc400d15 	stw	r17,52(sp)
  802d10:	1440ed16 	blt	r2,r17,8030c8 <___vfprintf_internal_r+0xb90>
  802d14:	98c00204 	addi	r3,r19,8
  802d18:	003f8506 	br	802b30 <___vfprintf_internal_r+0x5f8>
  802d1c:	d9814a17 	ldw	r6,1320(sp)
  802d20:	d8814517 	ldw	r2,1300(sp)
  802d24:	30a1c83a 	sub	r16,r6,r2
  802d28:	043f4b0e 	bge	zero,r16,802a58 <___vfprintf_internal_r+0x520>
  802d2c:	00800404 	movi	r2,16
  802d30:	1404340e 	bge	r2,r16,803e04 <___vfprintf_internal_r+0x18cc>
  802d34:	1027883a 	mov	r19,r2
  802d38:	07002074 	movhi	fp,129
  802d3c:	e73ae184 	addi	fp,fp,-5242
  802d40:	050001c4 	movi	r20,7
  802d44:	00000306 	br	802d54 <___vfprintf_internal_r+0x81c>
  802d48:	843ffc04 	addi	r16,r16,-16
  802d4c:	ad400204 	addi	r21,r21,8
  802d50:	9c00130e 	bge	r19,r16,802da0 <___vfprintf_internal_r+0x868>
  802d54:	94800404 	addi	r18,r18,16
  802d58:	8c400044 	addi	r17,r17,1
  802d5c:	af000015 	stw	fp,0(r21)
  802d60:	acc00115 	stw	r19,4(r21)
  802d64:	dc800e15 	stw	r18,56(sp)
  802d68:	dc400d15 	stw	r17,52(sp)
  802d6c:	a47ff60e 	bge	r20,r17,802d48 <___vfprintf_internal_r+0x810>
  802d70:	d9014f17 	ldw	r4,1340(sp)
  802d74:	b00b883a 	mov	r5,r22
  802d78:	d9800c04 	addi	r6,sp,48
  802d7c:	d9c15115 	stw	r7,1348(sp)
  802d80:	08024e00 	call	8024e0 <__sprint_r>
  802d84:	d9c15117 	ldw	r7,1348(sp)
  802d88:	103fa31e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  802d8c:	843ffc04 	addi	r16,r16,-16
  802d90:	dc800e17 	ldw	r18,56(sp)
  802d94:	dc400d17 	ldw	r17,52(sp)
  802d98:	dd401904 	addi	r21,sp,100
  802d9c:	9c3fed16 	blt	r19,r16,802d54 <___vfprintf_internal_r+0x81c>
  802da0:	9425883a 	add	r18,r18,r16
  802da4:	8c400044 	addi	r17,r17,1
  802da8:	008001c4 	movi	r2,7
  802dac:	af000015 	stw	fp,0(r21)
  802db0:	ac000115 	stw	r16,4(r21)
  802db4:	dc800e15 	stw	r18,56(sp)
  802db8:	dc400d15 	stw	r17,52(sp)
  802dbc:	14416116 	blt	r2,r17,803344 <___vfprintf_internal_r+0xe0c>
  802dc0:	ad400204 	addi	r21,r21,8
  802dc4:	003f2406 	br	802a58 <___vfprintf_internal_r+0x520>
  802dc8:	d9014f17 	ldw	r4,1340(sp)
  802dcc:	08007640 	call	800764 <__sinit>
  802dd0:	d9c15117 	ldw	r7,1348(sp)
  802dd4:	003def06 	br	802594 <___vfprintf_internal_r+0x5c>
  802dd8:	d9014f17 	ldw	r4,1340(sp)
  802ddc:	b00b883a 	mov	r5,r22
  802de0:	d9c15115 	stw	r7,1348(sp)
  802de4:	08044800 	call	804480 <__swsetup_r>
  802de8:	d9c15117 	ldw	r7,1348(sp)
  802dec:	103dee26 	beq	r2,zero,8025a8 <___vfprintf_internal_r+0x70>
  802df0:	003f8c06 	br	802c24 <___vfprintf_internal_r+0x6ec>
  802df4:	d9014217 	ldw	r4,1288(sp)
  802df8:	d9414317 	ldw	r5,1292(sp)
  802dfc:	000d883a 	mov	r6,zero
  802e00:	000f883a 	mov	r7,zero
  802e04:	08096300 	call	809630 <__eqdf2>
  802e08:	1000f21e 	bne	r2,zero,8031d4 <___vfprintf_internal_r+0xc9c>
  802e0c:	00802074 	movhi	r2,129
  802e10:	10bae104 	addi	r2,r2,-5244
  802e14:	94800044 	addi	r18,r18,1
  802e18:	8c400044 	addi	r17,r17,1
  802e1c:	a8800015 	stw	r2,0(r21)
  802e20:	00c00044 	movi	r3,1
  802e24:	008001c4 	movi	r2,7
  802e28:	a8c00115 	stw	r3,4(r21)
  802e2c:	dc800e15 	stw	r18,56(sp)
  802e30:	dc400d15 	stw	r17,52(sp)
  802e34:	1442fa16 	blt	r2,r17,803a20 <___vfprintf_internal_r+0x14e8>
  802e38:	a8c00204 	addi	r3,r21,8
  802e3c:	d8800517 	ldw	r2,20(sp)
  802e40:	d9014717 	ldw	r4,1308(sp)
  802e44:	11015c0e 	bge	r2,r4,8033b8 <___vfprintf_internal_r+0xe80>
  802e48:	dc400d17 	ldw	r17,52(sp)
  802e4c:	d9814917 	ldw	r6,1316(sp)
  802e50:	00800044 	movi	r2,1
  802e54:	94800044 	addi	r18,r18,1
  802e58:	8c400044 	addi	r17,r17,1
  802e5c:	18800115 	stw	r2,4(r3)
  802e60:	008001c4 	movi	r2,7
  802e64:	19800015 	stw	r6,0(r3)
  802e68:	dc800e15 	stw	r18,56(sp)
  802e6c:	dc400d15 	stw	r17,52(sp)
  802e70:	14431016 	blt	r2,r17,803ab4 <___vfprintf_internal_r+0x157c>
  802e74:	18c00204 	addi	r3,r3,8
  802e78:	d8814717 	ldw	r2,1308(sp)
  802e7c:	143fffc4 	addi	r16,r2,-1
  802e80:	043f2b0e 	bge	zero,r16,802b30 <___vfprintf_internal_r+0x5f8>
  802e84:	00800404 	movi	r2,16
  802e88:	1402a20e 	bge	r2,r16,803914 <___vfprintf_internal_r+0x13dc>
  802e8c:	dc400d17 	ldw	r17,52(sp)
  802e90:	1027883a 	mov	r19,r2
  802e94:	07002074 	movhi	fp,129
  802e98:	e73ae184 	addi	fp,fp,-5242
  802e9c:	050001c4 	movi	r20,7
  802ea0:	00000306 	br	802eb0 <___vfprintf_internal_r+0x978>
  802ea4:	18c00204 	addi	r3,r3,8
  802ea8:	843ffc04 	addi	r16,r16,-16
  802eac:	9c029c0e 	bge	r19,r16,803920 <___vfprintf_internal_r+0x13e8>
  802eb0:	94800404 	addi	r18,r18,16
  802eb4:	8c400044 	addi	r17,r17,1
  802eb8:	1f000015 	stw	fp,0(r3)
  802ebc:	1cc00115 	stw	r19,4(r3)
  802ec0:	dc800e15 	stw	r18,56(sp)
  802ec4:	dc400d15 	stw	r17,52(sp)
  802ec8:	a47ff60e 	bge	r20,r17,802ea4 <___vfprintf_internal_r+0x96c>
  802ecc:	d9014f17 	ldw	r4,1340(sp)
  802ed0:	b00b883a 	mov	r5,r22
  802ed4:	d9800c04 	addi	r6,sp,48
  802ed8:	08024e00 	call	8024e0 <__sprint_r>
  802edc:	103f4e1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  802ee0:	dc800e17 	ldw	r18,56(sp)
  802ee4:	dc400d17 	ldw	r17,52(sp)
  802ee8:	d8c01904 	addi	r3,sp,100
  802eec:	003fee06 	br	802ea8 <___vfprintf_internal_r+0x970>
  802ef0:	d8802c0b 	ldhu	r2,176(sp)
  802ef4:	00ffffc4 	movi	r3,-1
  802ef8:	d8c14b15 	stw	r3,1324(sp)
  802efc:	1080100c 	andi	r2,r2,64
  802f00:	103dcc1e 	bne	r2,zero,802634 <___vfprintf_internal_r+0xfc>
  802f04:	003dce06 	br	802640 <___vfprintf_internal_r+0x108>
  802f08:	d9014f17 	ldw	r4,1340(sp)
  802f0c:	b00b883a 	mov	r5,r22
  802f10:	d9800c04 	addi	r6,sp,48
  802f14:	08024e00 	call	8024e0 <__sprint_r>
  802f18:	103f3f1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  802f1c:	dc800e17 	ldw	r18,56(sp)
  802f20:	003f2e06 	br	802bdc <___vfprintf_internal_r+0x6a4>
  802f24:	d9414c17 	ldw	r5,1328(sp)
  802f28:	29400414 	ori	r5,r5,16
  802f2c:	d9414c15 	stw	r5,1328(sp)
  802f30:	d9814c17 	ldw	r6,1328(sp)
  802f34:	3080080c 	andi	r2,r6,32
  802f38:	10014f1e 	bne	r2,zero,803478 <___vfprintf_internal_r+0xf40>
  802f3c:	d8c14c17 	ldw	r3,1328(sp)
  802f40:	1880040c 	andi	r2,r3,16
  802f44:	1002ea1e 	bne	r2,zero,803af0 <___vfprintf_internal_r+0x15b8>
  802f48:	d9014c17 	ldw	r4,1328(sp)
  802f4c:	2080100c 	andi	r2,r4,64
  802f50:	1002e726 	beq	r2,zero,803af0 <___vfprintf_internal_r+0x15b8>
  802f54:	3880000f 	ldh	r2,0(r7)
  802f58:	39c00104 	addi	r7,r7,4
  802f5c:	d9c14015 	stw	r7,1280(sp)
  802f60:	1023d7fa 	srai	r17,r2,31
  802f64:	1021883a 	mov	r16,r2
  802f68:	88037216 	blt	r17,zero,803d34 <___vfprintf_internal_r+0x17fc>
  802f6c:	01000044 	movi	r4,1
  802f70:	98000416 	blt	r19,zero,802f84 <___vfprintf_internal_r+0xa4c>
  802f74:	d8c14c17 	ldw	r3,1328(sp)
  802f78:	00bfdfc4 	movi	r2,-129
  802f7c:	1886703a 	and	r3,r3,r2
  802f80:	d8c14c15 	stw	r3,1328(sp)
  802f84:	8444b03a 	or	r2,r16,r17
  802f88:	1002261e 	bne	r2,zero,803824 <___vfprintf_internal_r+0x12ec>
  802f8c:	9802251e 	bne	r19,zero,803824 <___vfprintf_internal_r+0x12ec>
  802f90:	20803fcc 	andi	r2,r4,255
  802f94:	10029b26 	beq	r2,zero,803a04 <___vfprintf_internal_r+0x14cc>
  802f98:	d8c01904 	addi	r3,sp,100
  802f9c:	dd000f04 	addi	r20,sp,60
  802fa0:	d8c14115 	stw	r3,1284(sp)
  802fa4:	d8c14117 	ldw	r3,1284(sp)
  802fa8:	dcc14515 	stw	r19,1300(sp)
  802fac:	a0c5c83a 	sub	r2,r20,r3
  802fb0:	11c00a04 	addi	r7,r2,40
  802fb4:	99c0010e 	bge	r19,r7,802fbc <___vfprintf_internal_r+0xa84>
  802fb8:	d9c14515 	stw	r7,1300(sp)
  802fbc:	dcc14615 	stw	r19,1304(sp)
  802fc0:	d8800407 	ldb	r2,16(sp)
  802fc4:	103e4c26 	beq	r2,zero,8028f8 <___vfprintf_internal_r+0x3c0>
  802fc8:	d8814517 	ldw	r2,1300(sp)
  802fcc:	10800044 	addi	r2,r2,1
  802fd0:	d8814515 	stw	r2,1300(sp)
  802fd4:	003e4806 	br	8028f8 <___vfprintf_internal_r+0x3c0>
  802fd8:	d9814c17 	ldw	r6,1328(sp)
  802fdc:	31800414 	ori	r6,r6,16
  802fe0:	d9814c15 	stw	r6,1328(sp)
  802fe4:	d8c14c17 	ldw	r3,1328(sp)
  802fe8:	1880080c 	andi	r2,r3,32
  802fec:	1001271e 	bne	r2,zero,80348c <___vfprintf_internal_r+0xf54>
  802ff0:	d9414c17 	ldw	r5,1328(sp)
  802ff4:	2880040c 	andi	r2,r5,16
  802ff8:	1002b61e 	bne	r2,zero,803ad4 <___vfprintf_internal_r+0x159c>
  802ffc:	d9814c17 	ldw	r6,1328(sp)
  803000:	3080100c 	andi	r2,r6,64
  803004:	1002b326 	beq	r2,zero,803ad4 <___vfprintf_internal_r+0x159c>
  803008:	3c00000b 	ldhu	r16,0(r7)
  80300c:	0009883a 	mov	r4,zero
  803010:	39c00104 	addi	r7,r7,4
  803014:	0023883a 	mov	r17,zero
  803018:	d9c14015 	stw	r7,1280(sp)
  80301c:	d8000405 	stb	zero,16(sp)
  803020:	003fd306 	br	802f70 <___vfprintf_internal_r+0xa38>
  803024:	d9014c17 	ldw	r4,1328(sp)
  803028:	21000414 	ori	r4,r4,16
  80302c:	d9014c15 	stw	r4,1328(sp)
  803030:	d9414c17 	ldw	r5,1328(sp)
  803034:	2880080c 	andi	r2,r5,32
  803038:	1001081e 	bne	r2,zero,80345c <___vfprintf_internal_r+0xf24>
  80303c:	d8c14c17 	ldw	r3,1328(sp)
  803040:	1880040c 	andi	r2,r3,16
  803044:	1002b01e 	bne	r2,zero,803b08 <___vfprintf_internal_r+0x15d0>
  803048:	d9014c17 	ldw	r4,1328(sp)
  80304c:	2080100c 	andi	r2,r4,64
  803050:	1002ad26 	beq	r2,zero,803b08 <___vfprintf_internal_r+0x15d0>
  803054:	3c00000b 	ldhu	r16,0(r7)
  803058:	01000044 	movi	r4,1
  80305c:	39c00104 	addi	r7,r7,4
  803060:	0023883a 	mov	r17,zero
  803064:	d9c14015 	stw	r7,1280(sp)
  803068:	d8000405 	stb	zero,16(sp)
  80306c:	003fc006 	br	802f70 <___vfprintf_internal_r+0xa38>
  803070:	d9014f17 	ldw	r4,1340(sp)
  803074:	b00b883a 	mov	r5,r22
  803078:	d9800c04 	addi	r6,sp,48
  80307c:	08024e00 	call	8024e0 <__sprint_r>
  803080:	103ee51e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803084:	dc800e17 	ldw	r18,56(sp)
  803088:	d8c01904 	addi	r3,sp,100
  80308c:	d9814c17 	ldw	r6,1328(sp)
  803090:	3080004c 	andi	r2,r6,1
  803094:	1005003a 	cmpeq	r2,r2,zero
  803098:	103ea51e 	bne	r2,zero,802b30 <___vfprintf_internal_r+0x5f8>
  80309c:	00800044 	movi	r2,1
  8030a0:	dc400d17 	ldw	r17,52(sp)
  8030a4:	18800115 	stw	r2,4(r3)
  8030a8:	d8814917 	ldw	r2,1316(sp)
  8030ac:	94800044 	addi	r18,r18,1
  8030b0:	8c400044 	addi	r17,r17,1
  8030b4:	18800015 	stw	r2,0(r3)
  8030b8:	008001c4 	movi	r2,7
  8030bc:	dc800e15 	stw	r18,56(sp)
  8030c0:	dc400d15 	stw	r17,52(sp)
  8030c4:	14421e0e 	bge	r2,r17,803940 <___vfprintf_internal_r+0x1408>
  8030c8:	d9014f17 	ldw	r4,1340(sp)
  8030cc:	b00b883a 	mov	r5,r22
  8030d0:	d9800c04 	addi	r6,sp,48
  8030d4:	08024e00 	call	8024e0 <__sprint_r>
  8030d8:	103ecf1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  8030dc:	dc800e17 	ldw	r18,56(sp)
  8030e0:	d8c01904 	addi	r3,sp,100
  8030e4:	003e9206 	br	802b30 <___vfprintf_internal_r+0x5f8>
  8030e8:	d9014f17 	ldw	r4,1340(sp)
  8030ec:	b00b883a 	mov	r5,r22
  8030f0:	d9800c04 	addi	r6,sp,48
  8030f4:	08024e00 	call	8024e0 <__sprint_r>
  8030f8:	103ec026 	beq	r2,zero,802bfc <___vfprintf_internal_r+0x6c4>
  8030fc:	003ec606 	br	802c18 <___vfprintf_internal_r+0x6e0>
  803100:	d9014f17 	ldw	r4,1340(sp)
  803104:	b00b883a 	mov	r5,r22
  803108:	d9800c04 	addi	r6,sp,48
  80310c:	d9c15115 	stw	r7,1348(sp)
  803110:	08024e00 	call	8024e0 <__sprint_r>
  803114:	d9c15117 	ldw	r7,1348(sp)
  803118:	103ebf1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  80311c:	dc800e17 	ldw	r18,56(sp)
  803120:	dc400d17 	ldw	r17,52(sp)
  803124:	dd401904 	addi	r21,sp,100
  803128:	003e7406 	br	802afc <___vfprintf_internal_r+0x5c4>
  80312c:	d9014f17 	ldw	r4,1340(sp)
  803130:	b00b883a 	mov	r5,r22
  803134:	d9800c04 	addi	r6,sp,48
  803138:	d9c15115 	stw	r7,1348(sp)
  80313c:	08024e00 	call	8024e0 <__sprint_r>
  803140:	d9c15117 	ldw	r7,1348(sp)
  803144:	103eb41e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803148:	dd401904 	addi	r21,sp,100
  80314c:	003d6d06 	br	802704 <___vfprintf_internal_r+0x1cc>
  803150:	d9014f17 	ldw	r4,1340(sp)
  803154:	b00b883a 	mov	r5,r22
  803158:	d9800c04 	addi	r6,sp,48
  80315c:	d9c15115 	stw	r7,1348(sp)
  803160:	08024e00 	call	8024e0 <__sprint_r>
  803164:	d9c15117 	ldw	r7,1348(sp)
  803168:	103eab1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  80316c:	dc800e17 	ldw	r18,56(sp)
  803170:	dc400d17 	ldw	r17,52(sp)
  803174:	dd401904 	addi	r21,sp,100
  803178:	003e3406 	br	802a4c <___vfprintf_internal_r+0x514>
  80317c:	d9014f17 	ldw	r4,1340(sp)
  803180:	b00b883a 	mov	r5,r22
  803184:	d9800c04 	addi	r6,sp,48
  803188:	d9c15115 	stw	r7,1348(sp)
  80318c:	08024e00 	call	8024e0 <__sprint_r>
  803190:	d9c15117 	ldw	r7,1348(sp)
  803194:	103ea01e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803198:	dc800e17 	ldw	r18,56(sp)
  80319c:	dc400d17 	ldw	r17,52(sp)
  8031a0:	dd401904 	addi	r21,sp,100
  8031a4:	003e1c06 	br	802a18 <___vfprintf_internal_r+0x4e0>
  8031a8:	d9014f17 	ldw	r4,1340(sp)
  8031ac:	b00b883a 	mov	r5,r22
  8031b0:	d9800c04 	addi	r6,sp,48
  8031b4:	d9c15115 	stw	r7,1348(sp)
  8031b8:	08024e00 	call	8024e0 <__sprint_r>
  8031bc:	d9c15117 	ldw	r7,1348(sp)
  8031c0:	103e951e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  8031c4:	dc800e17 	ldw	r18,56(sp)
  8031c8:	dc400d17 	ldw	r17,52(sp)
  8031cc:	dd401904 	addi	r21,sp,100
  8031d0:	003e0406 	br	8029e4 <___vfprintf_internal_r+0x4ac>
  8031d4:	d9000517 	ldw	r4,20(sp)
  8031d8:	0102520e 	bge	zero,r4,803b24 <___vfprintf_internal_r+0x15ec>
  8031dc:	d9814717 	ldw	r6,1308(sp)
  8031e0:	21807a16 	blt	r4,r6,8033cc <___vfprintf_internal_r+0xe94>
  8031e4:	d8814117 	ldw	r2,1284(sp)
  8031e8:	91a5883a 	add	r18,r18,r6
  8031ec:	8c400044 	addi	r17,r17,1
  8031f0:	a8800015 	stw	r2,0(r21)
  8031f4:	008001c4 	movi	r2,7
  8031f8:	a9800115 	stw	r6,4(r21)
  8031fc:	dc800e15 	stw	r18,56(sp)
  803200:	dc400d15 	stw	r17,52(sp)
  803204:	1442f616 	blt	r2,r17,803de0 <___vfprintf_internal_r+0x18a8>
  803208:	a8c00204 	addi	r3,r21,8
  80320c:	d9414717 	ldw	r5,1308(sp)
  803210:	2161c83a 	sub	r16,r4,r5
  803214:	043f9d0e 	bge	zero,r16,80308c <___vfprintf_internal_r+0xb54>
  803218:	00800404 	movi	r2,16
  80321c:	1402130e 	bge	r2,r16,803a6c <___vfprintf_internal_r+0x1534>
  803220:	dc400d17 	ldw	r17,52(sp)
  803224:	1027883a 	mov	r19,r2
  803228:	07002074 	movhi	fp,129
  80322c:	e73ae184 	addi	fp,fp,-5242
  803230:	050001c4 	movi	r20,7
  803234:	00000306 	br	803244 <___vfprintf_internal_r+0xd0c>
  803238:	18c00204 	addi	r3,r3,8
  80323c:	843ffc04 	addi	r16,r16,-16
  803240:	9c020d0e 	bge	r19,r16,803a78 <___vfprintf_internal_r+0x1540>
  803244:	94800404 	addi	r18,r18,16
  803248:	8c400044 	addi	r17,r17,1
  80324c:	1f000015 	stw	fp,0(r3)
  803250:	1cc00115 	stw	r19,4(r3)
  803254:	dc800e15 	stw	r18,56(sp)
  803258:	dc400d15 	stw	r17,52(sp)
  80325c:	a47ff60e 	bge	r20,r17,803238 <___vfprintf_internal_r+0xd00>
  803260:	d9014f17 	ldw	r4,1340(sp)
  803264:	b00b883a 	mov	r5,r22
  803268:	d9800c04 	addi	r6,sp,48
  80326c:	08024e00 	call	8024e0 <__sprint_r>
  803270:	103e691e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803274:	dc800e17 	ldw	r18,56(sp)
  803278:	dc400d17 	ldw	r17,52(sp)
  80327c:	d8c01904 	addi	r3,sp,100
  803280:	003fee06 	br	80323c <___vfprintf_internal_r+0xd04>
  803284:	d8814717 	ldw	r2,1308(sp)
  803288:	143fffc4 	addi	r16,r2,-1
  80328c:	043e970e 	bge	zero,r16,802cec <___vfprintf_internal_r+0x7b4>
  803290:	00800404 	movi	r2,16
  803294:	1400180e 	bge	r2,r16,8032f8 <___vfprintf_internal_r+0xdc0>
  803298:	1029883a 	mov	r20,r2
  80329c:	07002074 	movhi	fp,129
  8032a0:	e73ae184 	addi	fp,fp,-5242
  8032a4:	054001c4 	movi	r21,7
  8032a8:	00000306 	br	8032b8 <___vfprintf_internal_r+0xd80>
  8032ac:	9cc00204 	addi	r19,r19,8
  8032b0:	843ffc04 	addi	r16,r16,-16
  8032b4:	a400120e 	bge	r20,r16,803300 <___vfprintf_internal_r+0xdc8>
  8032b8:	94800404 	addi	r18,r18,16
  8032bc:	8c400044 	addi	r17,r17,1
  8032c0:	9f000015 	stw	fp,0(r19)
  8032c4:	9d000115 	stw	r20,4(r19)
  8032c8:	dc800e15 	stw	r18,56(sp)
  8032cc:	dc400d15 	stw	r17,52(sp)
  8032d0:	ac7ff60e 	bge	r21,r17,8032ac <___vfprintf_internal_r+0xd74>
  8032d4:	d9014f17 	ldw	r4,1340(sp)
  8032d8:	b00b883a 	mov	r5,r22
  8032dc:	d9800c04 	addi	r6,sp,48
  8032e0:	08024e00 	call	8024e0 <__sprint_r>
  8032e4:	103e4c1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  8032e8:	dc800e17 	ldw	r18,56(sp)
  8032ec:	dc400d17 	ldw	r17,52(sp)
  8032f0:	dcc01904 	addi	r19,sp,100
  8032f4:	003fee06 	br	8032b0 <___vfprintf_internal_r+0xd78>
  8032f8:	07002074 	movhi	fp,129
  8032fc:	e73ae184 	addi	fp,fp,-5242
  803300:	9425883a 	add	r18,r18,r16
  803304:	8c400044 	addi	r17,r17,1
  803308:	008001c4 	movi	r2,7
  80330c:	9f000015 	stw	fp,0(r19)
  803310:	9c000115 	stw	r16,4(r19)
  803314:	dc800e15 	stw	r18,56(sp)
  803318:	dc400d15 	stw	r17,52(sp)
  80331c:	147e720e 	bge	r2,r17,802ce8 <___vfprintf_internal_r+0x7b0>
  803320:	d9014f17 	ldw	r4,1340(sp)
  803324:	b00b883a 	mov	r5,r22
  803328:	d9800c04 	addi	r6,sp,48
  80332c:	08024e00 	call	8024e0 <__sprint_r>
  803330:	103e391e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803334:	dc800e17 	ldw	r18,56(sp)
  803338:	dc400d17 	ldw	r17,52(sp)
  80333c:	dcc01904 	addi	r19,sp,100
  803340:	003e6a06 	br	802cec <___vfprintf_internal_r+0x7b4>
  803344:	d9014f17 	ldw	r4,1340(sp)
  803348:	b00b883a 	mov	r5,r22
  80334c:	d9800c04 	addi	r6,sp,48
  803350:	d9c15115 	stw	r7,1348(sp)
  803354:	08024e00 	call	8024e0 <__sprint_r>
  803358:	d9c15117 	ldw	r7,1348(sp)
  80335c:	103e2e1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803360:	dc800e17 	ldw	r18,56(sp)
  803364:	dc400d17 	ldw	r17,52(sp)
  803368:	dd401904 	addi	r21,sp,100
  80336c:	003dba06 	br	802a58 <___vfprintf_internal_r+0x520>
  803370:	d9014f17 	ldw	r4,1340(sp)
  803374:	b00b883a 	mov	r5,r22
  803378:	d9800c04 	addi	r6,sp,48
  80337c:	08024e00 	call	8024e0 <__sprint_r>
  803380:	103e251e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803384:	dc800e17 	ldw	r18,56(sp)
  803388:	dc400d17 	ldw	r17,52(sp)
  80338c:	dcc01904 	addi	r19,sp,100
  803390:	003e4206 	br	802c9c <___vfprintf_internal_r+0x764>
  803394:	d9014f17 	ldw	r4,1340(sp)
  803398:	b00b883a 	mov	r5,r22
  80339c:	d9800c04 	addi	r6,sp,48
  8033a0:	08024e00 	call	8024e0 <__sprint_r>
  8033a4:	103e1c1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  8033a8:	dc800e17 	ldw	r18,56(sp)
  8033ac:	dc400d17 	ldw	r17,52(sp)
  8033b0:	d8c01904 	addi	r3,sp,100
  8033b4:	003e2e06 	br	802c70 <___vfprintf_internal_r+0x738>
  8033b8:	d9414c17 	ldw	r5,1328(sp)
  8033bc:	2880004c 	andi	r2,r5,1
  8033c0:	1005003a 	cmpeq	r2,r2,zero
  8033c4:	103dda1e 	bne	r2,zero,802b30 <___vfprintf_internal_r+0x5f8>
  8033c8:	003e9f06 	br	802e48 <___vfprintf_internal_r+0x910>
  8033cc:	d8c14117 	ldw	r3,1284(sp)
  8033d0:	9125883a 	add	r18,r18,r4
  8033d4:	8c400044 	addi	r17,r17,1
  8033d8:	008001c4 	movi	r2,7
  8033dc:	a8c00015 	stw	r3,0(r21)
  8033e0:	a9000115 	stw	r4,4(r21)
  8033e4:	dc800e15 	stw	r18,56(sp)
  8033e8:	dc400d15 	stw	r17,52(sp)
  8033ec:	14426616 	blt	r2,r17,803d88 <___vfprintf_internal_r+0x1850>
  8033f0:	a8c00204 	addi	r3,r21,8
  8033f4:	d9414917 	ldw	r5,1316(sp)
  8033f8:	00800044 	movi	r2,1
  8033fc:	94800044 	addi	r18,r18,1
  803400:	8c400044 	addi	r17,r17,1
  803404:	18800115 	stw	r2,4(r3)
  803408:	008001c4 	movi	r2,7
  80340c:	19400015 	stw	r5,0(r3)
  803410:	dc800e15 	stw	r18,56(sp)
  803414:	dc400d15 	stw	r17,52(sp)
  803418:	2021883a 	mov	r16,r4
  80341c:	14425016 	blt	r2,r17,803d60 <___vfprintf_internal_r+0x1828>
  803420:	19400204 	addi	r5,r3,8
  803424:	d9814717 	ldw	r6,1308(sp)
  803428:	8c400044 	addi	r17,r17,1
  80342c:	dc400d15 	stw	r17,52(sp)
  803430:	3107c83a 	sub	r3,r6,r4
  803434:	d9014117 	ldw	r4,1284(sp)
  803438:	90e5883a 	add	r18,r18,r3
  80343c:	28c00115 	stw	r3,4(r5)
  803440:	8105883a 	add	r2,r16,r4
  803444:	28800015 	stw	r2,0(r5)
  803448:	008001c4 	movi	r2,7
  80344c:	dc800e15 	stw	r18,56(sp)
  803450:	147f1d16 	blt	r2,r17,8030c8 <___vfprintf_internal_r+0xb90>
  803454:	28c00204 	addi	r3,r5,8
  803458:	003db506 	br	802b30 <___vfprintf_internal_r+0x5f8>
  80345c:	3c000017 	ldw	r16,0(r7)
  803460:	3c400117 	ldw	r17,4(r7)
  803464:	39800204 	addi	r6,r7,8
  803468:	01000044 	movi	r4,1
  80346c:	d9814015 	stw	r6,1280(sp)
  803470:	d8000405 	stb	zero,16(sp)
  803474:	003ebe06 	br	802f70 <___vfprintf_internal_r+0xa38>
  803478:	3c000017 	ldw	r16,0(r7)
  80347c:	3c400117 	ldw	r17,4(r7)
  803480:	38800204 	addi	r2,r7,8
  803484:	d8814015 	stw	r2,1280(sp)
  803488:	003eb706 	br	802f68 <___vfprintf_internal_r+0xa30>
  80348c:	3c000017 	ldw	r16,0(r7)
  803490:	3c400117 	ldw	r17,4(r7)
  803494:	39000204 	addi	r4,r7,8
  803498:	d9014015 	stw	r4,1280(sp)
  80349c:	0009883a 	mov	r4,zero
  8034a0:	d8000405 	stb	zero,16(sp)
  8034a4:	003eb206 	br	802f70 <___vfprintf_internal_r+0xa38>
  8034a8:	38c00017 	ldw	r3,0(r7)
  8034ac:	39c00104 	addi	r7,r7,4
  8034b0:	d8c14a15 	stw	r3,1320(sp)
  8034b4:	1800d10e 	bge	r3,zero,8037fc <___vfprintf_internal_r+0x12c4>
  8034b8:	00c7c83a 	sub	r3,zero,r3
  8034bc:	d8c14a15 	stw	r3,1320(sp)
  8034c0:	d9014c17 	ldw	r4,1328(sp)
  8034c4:	b8c00007 	ldb	r3,0(r23)
  8034c8:	21000114 	ori	r4,r4,4
  8034cc:	d9014c15 	stw	r4,1328(sp)
  8034d0:	003c9806 	br	802734 <___vfprintf_internal_r+0x1fc>
  8034d4:	d9814c17 	ldw	r6,1328(sp)
  8034d8:	3080080c 	andi	r2,r6,32
  8034dc:	1001f026 	beq	r2,zero,803ca0 <___vfprintf_internal_r+0x1768>
  8034e0:	d9014b17 	ldw	r4,1324(sp)
  8034e4:	38800017 	ldw	r2,0(r7)
  8034e8:	39c00104 	addi	r7,r7,4
  8034ec:	d9c14015 	stw	r7,1280(sp)
  8034f0:	2007d7fa 	srai	r3,r4,31
  8034f4:	d9c14017 	ldw	r7,1280(sp)
  8034f8:	11000015 	stw	r4,0(r2)
  8034fc:	10c00115 	stw	r3,4(r2)
  803500:	003c6906 	br	8026a8 <___vfprintf_internal_r+0x170>
  803504:	b8c00007 	ldb	r3,0(r23)
  803508:	00801b04 	movi	r2,108
  80350c:	18824f26 	beq	r3,r2,803e4c <___vfprintf_internal_r+0x1914>
  803510:	d9414c17 	ldw	r5,1328(sp)
  803514:	29400414 	ori	r5,r5,16
  803518:	d9414c15 	stw	r5,1328(sp)
  80351c:	003c8506 	br	802734 <___vfprintf_internal_r+0x1fc>
  803520:	d9814c17 	ldw	r6,1328(sp)
  803524:	b8c00007 	ldb	r3,0(r23)
  803528:	31800814 	ori	r6,r6,32
  80352c:	d9814c15 	stw	r6,1328(sp)
  803530:	003c8006 	br	802734 <___vfprintf_internal_r+0x1fc>
  803534:	d8814c17 	ldw	r2,1328(sp)
  803538:	3c000017 	ldw	r16,0(r7)
  80353c:	00c01e04 	movi	r3,120
  803540:	10800094 	ori	r2,r2,2
  803544:	d8814c15 	stw	r2,1328(sp)
  803548:	39c00104 	addi	r7,r7,4
  80354c:	01402074 	movhi	r5,129
  803550:	297aca04 	addi	r5,r5,-5336
  803554:	00800c04 	movi	r2,48
  803558:	0023883a 	mov	r17,zero
  80355c:	01000084 	movi	r4,2
  803560:	d9c14015 	stw	r7,1280(sp)
  803564:	d8c14d15 	stw	r3,1332(sp)
  803568:	d9414415 	stw	r5,1296(sp)
  80356c:	d8800445 	stb	r2,17(sp)
  803570:	d8c00485 	stb	r3,18(sp)
  803574:	d8000405 	stb	zero,16(sp)
  803578:	003e7d06 	br	802f70 <___vfprintf_internal_r+0xa38>
  80357c:	d8814c17 	ldw	r2,1328(sp)
  803580:	b8c00007 	ldb	r3,0(r23)
  803584:	10801014 	ori	r2,r2,64
  803588:	d8814c15 	stw	r2,1328(sp)
  80358c:	003c6906 	br	802734 <___vfprintf_internal_r+0x1fc>
  803590:	d9414c17 	ldw	r5,1328(sp)
  803594:	2880020c 	andi	r2,r5,8
  803598:	1001df26 	beq	r2,zero,803d18 <___vfprintf_internal_r+0x17e0>
  80359c:	39800017 	ldw	r6,0(r7)
  8035a0:	38800204 	addi	r2,r7,8
  8035a4:	d8814015 	stw	r2,1280(sp)
  8035a8:	d9814215 	stw	r6,1288(sp)
  8035ac:	39c00117 	ldw	r7,4(r7)
  8035b0:	d9c14315 	stw	r7,1292(sp)
  8035b4:	d9014217 	ldw	r4,1288(sp)
  8035b8:	d9414317 	ldw	r5,1292(sp)
  8035bc:	0807da40 	call	807da4 <__isinfd>
  8035c0:	10021726 	beq	r2,zero,803e20 <___vfprintf_internal_r+0x18e8>
  8035c4:	d9014217 	ldw	r4,1288(sp)
  8035c8:	d9414317 	ldw	r5,1292(sp)
  8035cc:	000d883a 	mov	r6,zero
  8035d0:	000f883a 	mov	r7,zero
  8035d4:	08098500 	call	809850 <__ltdf2>
  8035d8:	1002ca16 	blt	r2,zero,804104 <___vfprintf_internal_r+0x1bcc>
  8035dc:	d9414d17 	ldw	r5,1332(sp)
  8035e0:	008011c4 	movi	r2,71
  8035e4:	11420a16 	blt	r2,r5,803e10 <___vfprintf_internal_r+0x18d8>
  8035e8:	01802074 	movhi	r6,129
  8035ec:	31bacf04 	addi	r6,r6,-5316
  8035f0:	d9814115 	stw	r6,1284(sp)
  8035f4:	d9014c17 	ldw	r4,1328(sp)
  8035f8:	00c000c4 	movi	r3,3
  8035fc:	00bfdfc4 	movi	r2,-129
  803600:	2088703a 	and	r4,r4,r2
  803604:	180f883a 	mov	r7,r3
  803608:	d8c14515 	stw	r3,1300(sp)
  80360c:	d9014c15 	stw	r4,1328(sp)
  803610:	d8014615 	stw	zero,1304(sp)
  803614:	003e6a06 	br	802fc0 <___vfprintf_internal_r+0xa88>
  803618:	38800017 	ldw	r2,0(r7)
  80361c:	00c00044 	movi	r3,1
  803620:	39c00104 	addi	r7,r7,4
  803624:	d9c14015 	stw	r7,1280(sp)
  803628:	d9000f04 	addi	r4,sp,60
  80362c:	180f883a 	mov	r7,r3
  803630:	d8c14515 	stw	r3,1300(sp)
  803634:	d9014115 	stw	r4,1284(sp)
  803638:	d8800f05 	stb	r2,60(sp)
  80363c:	d8000405 	stb	zero,16(sp)
  803640:	003cac06 	br	8028f4 <___vfprintf_internal_r+0x3bc>
  803644:	01402074 	movhi	r5,129
  803648:	297ad504 	addi	r5,r5,-5292
  80364c:	d9414415 	stw	r5,1296(sp)
  803650:	d9814c17 	ldw	r6,1328(sp)
  803654:	3080080c 	andi	r2,r6,32
  803658:	1000f926 	beq	r2,zero,803a40 <___vfprintf_internal_r+0x1508>
  80365c:	3c000017 	ldw	r16,0(r7)
  803660:	3c400117 	ldw	r17,4(r7)
  803664:	38800204 	addi	r2,r7,8
  803668:	d8814015 	stw	r2,1280(sp)
  80366c:	d9414c17 	ldw	r5,1328(sp)
  803670:	2880004c 	andi	r2,r5,1
  803674:	1005003a 	cmpeq	r2,r2,zero
  803678:	1000b31e 	bne	r2,zero,803948 <___vfprintf_internal_r+0x1410>
  80367c:	8444b03a 	or	r2,r16,r17
  803680:	1000b126 	beq	r2,zero,803948 <___vfprintf_internal_r+0x1410>
  803684:	d9814d17 	ldw	r6,1332(sp)
  803688:	29400094 	ori	r5,r5,2
  80368c:	00800c04 	movi	r2,48
  803690:	01000084 	movi	r4,2
  803694:	d9414c15 	stw	r5,1328(sp)
  803698:	d8800445 	stb	r2,17(sp)
  80369c:	d9800485 	stb	r6,18(sp)
  8036a0:	d8000405 	stb	zero,16(sp)
  8036a4:	003e3206 	br	802f70 <___vfprintf_internal_r+0xa38>
  8036a8:	01802074 	movhi	r6,129
  8036ac:	31baca04 	addi	r6,r6,-5336
  8036b0:	d9814415 	stw	r6,1296(sp)
  8036b4:	003fe606 	br	803650 <___vfprintf_internal_r+0x1118>
  8036b8:	00800ac4 	movi	r2,43
  8036bc:	d8800405 	stb	r2,16(sp)
  8036c0:	b8c00007 	ldb	r3,0(r23)
  8036c4:	003c1b06 	br	802734 <___vfprintf_internal_r+0x1fc>
  8036c8:	d8814c17 	ldw	r2,1328(sp)
  8036cc:	b8c00007 	ldb	r3,0(r23)
  8036d0:	10800054 	ori	r2,r2,1
  8036d4:	d8814c15 	stw	r2,1328(sp)
  8036d8:	003c1606 	br	802734 <___vfprintf_internal_r+0x1fc>
  8036dc:	d8800407 	ldb	r2,16(sp)
  8036e0:	1000461e 	bne	r2,zero,8037fc <___vfprintf_internal_r+0x12c4>
  8036e4:	00800804 	movi	r2,32
  8036e8:	d8800405 	stb	r2,16(sp)
  8036ec:	b8c00007 	ldb	r3,0(r23)
  8036f0:	003c1006 	br	802734 <___vfprintf_internal_r+0x1fc>
  8036f4:	d9814c17 	ldw	r6,1328(sp)
  8036f8:	b8c00007 	ldb	r3,0(r23)
  8036fc:	31800214 	ori	r6,r6,8
  803700:	d9814c15 	stw	r6,1328(sp)
  803704:	003c0b06 	br	802734 <___vfprintf_internal_r+0x1fc>
  803708:	0007883a 	mov	r3,zero
  80370c:	01000244 	movi	r4,9
  803710:	188002a4 	muli	r2,r3,10
  803714:	b8c00007 	ldb	r3,0(r23)
  803718:	d9814d17 	ldw	r6,1332(sp)
  80371c:	bdc00044 	addi	r23,r23,1
  803720:	d8c14d15 	stw	r3,1332(sp)
  803724:	d9414d17 	ldw	r5,1332(sp)
  803728:	3085883a 	add	r2,r6,r2
  80372c:	10fff404 	addi	r3,r2,-48
  803730:	28bff404 	addi	r2,r5,-48
  803734:	20bff62e 	bgeu	r4,r2,803710 <___vfprintf_internal_r+0x11d8>
  803738:	d8c14a15 	stw	r3,1320(sp)
  80373c:	003bff06 	br	80273c <___vfprintf_internal_r+0x204>
  803740:	d9414c17 	ldw	r5,1328(sp)
  803744:	b8c00007 	ldb	r3,0(r23)
  803748:	29402014 	ori	r5,r5,128
  80374c:	d9414c15 	stw	r5,1328(sp)
  803750:	003bf806 	br	802734 <___vfprintf_internal_r+0x1fc>
  803754:	b8c00007 	ldb	r3,0(r23)
  803758:	00800a84 	movi	r2,42
  80375c:	bdc00044 	addi	r23,r23,1
  803760:	18831526 	beq	r3,r2,8043b8 <___vfprintf_internal_r+0x1e80>
  803764:	d8c14d15 	stw	r3,1332(sp)
  803768:	18bff404 	addi	r2,r3,-48
  80376c:	00c00244 	movi	r3,9
  803770:	18827836 	bltu	r3,r2,804154 <___vfprintf_internal_r+0x1c1c>
  803774:	000d883a 	mov	r6,zero
  803778:	308002a4 	muli	r2,r6,10
  80377c:	b9800007 	ldb	r6,0(r23)
  803780:	d9414d17 	ldw	r5,1332(sp)
  803784:	bdc00044 	addi	r23,r23,1
  803788:	d9814d15 	stw	r6,1332(sp)
  80378c:	d9014d17 	ldw	r4,1332(sp)
  803790:	1145883a 	add	r2,r2,r5
  803794:	11bff404 	addi	r6,r2,-48
  803798:	20bff404 	addi	r2,r4,-48
  80379c:	18bff62e 	bgeu	r3,r2,803778 <___vfprintf_internal_r+0x1240>
  8037a0:	3027883a 	mov	r19,r6
  8037a4:	303be50e 	bge	r6,zero,80273c <___vfprintf_internal_r+0x204>
  8037a8:	04ffffc4 	movi	r19,-1
  8037ac:	003be306 	br	80273c <___vfprintf_internal_r+0x204>
  8037b0:	d8000405 	stb	zero,16(sp)
  8037b4:	39800017 	ldw	r6,0(r7)
  8037b8:	39c00104 	addi	r7,r7,4
  8037bc:	d9c14015 	stw	r7,1280(sp)
  8037c0:	d9814115 	stw	r6,1284(sp)
  8037c4:	3001c926 	beq	r6,zero,803eec <___vfprintf_internal_r+0x19b4>
  8037c8:	98000e16 	blt	r19,zero,803804 <___vfprintf_internal_r+0x12cc>
  8037cc:	d9014117 	ldw	r4,1284(sp)
  8037d0:	000b883a 	mov	r5,zero
  8037d4:	980d883a 	mov	r6,r19
  8037d8:	08064e00 	call	8064e0 <memchr>
  8037dc:	10025926 	beq	r2,zero,804144 <___vfprintf_internal_r+0x1c0c>
  8037e0:	d8c14117 	ldw	r3,1284(sp)
  8037e4:	10cfc83a 	sub	r7,r2,r3
  8037e8:	99c19e16 	blt	r19,r7,803e64 <___vfprintf_internal_r+0x192c>
  8037ec:	d9c14515 	stw	r7,1300(sp)
  8037f0:	38000916 	blt	r7,zero,803818 <___vfprintf_internal_r+0x12e0>
  8037f4:	d8014615 	stw	zero,1304(sp)
  8037f8:	003df106 	br	802fc0 <___vfprintf_internal_r+0xa88>
  8037fc:	b8c00007 	ldb	r3,0(r23)
  803800:	003bcc06 	br	802734 <___vfprintf_internal_r+0x1fc>
  803804:	d9014117 	ldw	r4,1284(sp)
  803808:	080246c0 	call	80246c <strlen>
  80380c:	d8814515 	stw	r2,1300(sp)
  803810:	100f883a 	mov	r7,r2
  803814:	103ff70e 	bge	r2,zero,8037f4 <___vfprintf_internal_r+0x12bc>
  803818:	d8014515 	stw	zero,1300(sp)
  80381c:	d8014615 	stw	zero,1304(sp)
  803820:	003de706 	br	802fc0 <___vfprintf_internal_r+0xa88>
  803824:	20c03fcc 	andi	r3,r4,255
  803828:	00800044 	movi	r2,1
  80382c:	18802d26 	beq	r3,r2,8038e4 <___vfprintf_internal_r+0x13ac>
  803830:	18800e36 	bltu	r3,r2,80386c <___vfprintf_internal_r+0x1334>
  803834:	00800084 	movi	r2,2
  803838:	1880fa26 	beq	r3,r2,803c24 <___vfprintf_internal_r+0x16ec>
  80383c:	01002074 	movhi	r4,129
  803840:	213ada04 	addi	r4,r4,-5272
  803844:	080246c0 	call	80246c <strlen>
  803848:	100f883a 	mov	r7,r2
  80384c:	dcc14515 	stw	r19,1300(sp)
  803850:	9880010e 	bge	r19,r2,803858 <___vfprintf_internal_r+0x1320>
  803854:	d8814515 	stw	r2,1300(sp)
  803858:	00802074 	movhi	r2,129
  80385c:	10bada04 	addi	r2,r2,-5272
  803860:	dcc14615 	stw	r19,1304(sp)
  803864:	d8814115 	stw	r2,1284(sp)
  803868:	003dd506 	br	802fc0 <___vfprintf_internal_r+0xa88>
  80386c:	d9401904 	addi	r5,sp,100
  803870:	dd000f04 	addi	r20,sp,60
  803874:	d9414115 	stw	r5,1284(sp)
  803878:	880a977a 	slli	r5,r17,29
  80387c:	d9814117 	ldw	r6,1284(sp)
  803880:	8004d0fa 	srli	r2,r16,3
  803884:	8806d0fa 	srli	r3,r17,3
  803888:	810001cc 	andi	r4,r16,7
  80388c:	2884b03a 	or	r2,r5,r2
  803890:	31bfffc4 	addi	r6,r6,-1
  803894:	21000c04 	addi	r4,r4,48
  803898:	d9814115 	stw	r6,1284(sp)
  80389c:	10cab03a 	or	r5,r2,r3
  8038a0:	31000005 	stb	r4,0(r6)
  8038a4:	1021883a 	mov	r16,r2
  8038a8:	1823883a 	mov	r17,r3
  8038ac:	283ff21e 	bne	r5,zero,803878 <___vfprintf_internal_r+0x1340>
  8038b0:	d8c14c17 	ldw	r3,1328(sp)
  8038b4:	1880004c 	andi	r2,r3,1
  8038b8:	1005003a 	cmpeq	r2,r2,zero
  8038bc:	103db91e 	bne	r2,zero,802fa4 <___vfprintf_internal_r+0xa6c>
  8038c0:	20803fcc 	andi	r2,r4,255
  8038c4:	1080201c 	xori	r2,r2,128
  8038c8:	10bfe004 	addi	r2,r2,-128
  8038cc:	00c00c04 	movi	r3,48
  8038d0:	10fdb426 	beq	r2,r3,802fa4 <___vfprintf_internal_r+0xa6c>
  8038d4:	31bfffc4 	addi	r6,r6,-1
  8038d8:	d9814115 	stw	r6,1284(sp)
  8038dc:	30c00005 	stb	r3,0(r6)
  8038e0:	003db006 	br	802fa4 <___vfprintf_internal_r+0xa6c>
  8038e4:	88800068 	cmpgeui	r2,r17,1
  8038e8:	10002c1e 	bne	r2,zero,80399c <___vfprintf_internal_r+0x1464>
  8038ec:	8800021e 	bne	r17,zero,8038f8 <___vfprintf_internal_r+0x13c0>
  8038f0:	00800244 	movi	r2,9
  8038f4:	14002936 	bltu	r2,r16,80399c <___vfprintf_internal_r+0x1464>
  8038f8:	d90018c4 	addi	r4,sp,99
  8038fc:	dd000f04 	addi	r20,sp,60
  803900:	d9014115 	stw	r4,1284(sp)
  803904:	d9014117 	ldw	r4,1284(sp)
  803908:	80800c04 	addi	r2,r16,48
  80390c:	20800005 	stb	r2,0(r4)
  803910:	003da406 	br	802fa4 <___vfprintf_internal_r+0xa6c>
  803914:	dc400d17 	ldw	r17,52(sp)
  803918:	07002074 	movhi	fp,129
  80391c:	e73ae184 	addi	fp,fp,-5242
  803920:	9425883a 	add	r18,r18,r16
  803924:	8c400044 	addi	r17,r17,1
  803928:	008001c4 	movi	r2,7
  80392c:	1f000015 	stw	fp,0(r3)
  803930:	1c000115 	stw	r16,4(r3)
  803934:	dc800e15 	stw	r18,56(sp)
  803938:	dc400d15 	stw	r17,52(sp)
  80393c:	147de216 	blt	r2,r17,8030c8 <___vfprintf_internal_r+0xb90>
  803940:	18c00204 	addi	r3,r3,8
  803944:	003c7a06 	br	802b30 <___vfprintf_internal_r+0x5f8>
  803948:	01000084 	movi	r4,2
  80394c:	d8000405 	stb	zero,16(sp)
  803950:	003d8706 	br	802f70 <___vfprintf_internal_r+0xa38>
  803954:	d9814c17 	ldw	r6,1328(sp)
  803958:	30c4703a 	and	r2,r6,r3
  80395c:	1005003a 	cmpeq	r2,r2,zero
  803960:	103cb926 	beq	r2,zero,802c48 <___vfprintf_internal_r+0x710>
  803964:	d9014117 	ldw	r4,1284(sp)
  803968:	94800044 	addi	r18,r18,1
  80396c:	8c400044 	addi	r17,r17,1
  803970:	008001c4 	movi	r2,7
  803974:	a9000015 	stw	r4,0(r21)
  803978:	a8c00115 	stw	r3,4(r21)
  80397c:	dc800e15 	stw	r18,56(sp)
  803980:	dc400d15 	stw	r17,52(sp)
  803984:	147e6616 	blt	r2,r17,803320 <___vfprintf_internal_r+0xde8>
  803988:	acc00204 	addi	r19,r21,8
  80398c:	003cd706 	br	802cec <___vfprintf_internal_r+0x7b4>
  803990:	07002074 	movhi	fp,129
  803994:	e73ae184 	addi	fp,fp,-5242
  803998:	003c4f06 	br	802ad8 <___vfprintf_internal_r+0x5a0>
  80399c:	dd000f04 	addi	r20,sp,60
  8039a0:	dc801904 	addi	r18,sp,100
  8039a4:	8009883a 	mov	r4,r16
  8039a8:	880b883a 	mov	r5,r17
  8039ac:	01800284 	movi	r6,10
  8039b0:	000f883a 	mov	r7,zero
  8039b4:	08085600 	call	808560 <__umoddi3>
  8039b8:	12000c04 	addi	r8,r2,48
  8039bc:	94bfffc4 	addi	r18,r18,-1
  8039c0:	8009883a 	mov	r4,r16
  8039c4:	880b883a 	mov	r5,r17
  8039c8:	01800284 	movi	r6,10
  8039cc:	000f883a 	mov	r7,zero
  8039d0:	92000005 	stb	r8,0(r18)
  8039d4:	0807f840 	call	807f84 <__udivdi3>
  8039d8:	1009883a 	mov	r4,r2
  8039dc:	1021883a 	mov	r16,r2
  8039e0:	18800068 	cmpgeui	r2,r3,1
  8039e4:	1823883a 	mov	r17,r3
  8039e8:	103fee1e 	bne	r2,zero,8039a4 <___vfprintf_internal_r+0x146c>
  8039ec:	1800021e 	bne	r3,zero,8039f8 <___vfprintf_internal_r+0x14c0>
  8039f0:	00800244 	movi	r2,9
  8039f4:	113feb36 	bltu	r2,r4,8039a4 <___vfprintf_internal_r+0x146c>
  8039f8:	94bfffc4 	addi	r18,r18,-1
  8039fc:	dc814115 	stw	r18,1284(sp)
  803a00:	003fc006 	br	803904 <___vfprintf_internal_r+0x13cc>
  803a04:	d9014c17 	ldw	r4,1328(sp)
  803a08:	2080004c 	andi	r2,r4,1
  803a0c:	10009a1e 	bne	r2,zero,803c78 <___vfprintf_internal_r+0x1740>
  803a10:	d9401904 	addi	r5,sp,100
  803a14:	dd000f04 	addi	r20,sp,60
  803a18:	d9414115 	stw	r5,1284(sp)
  803a1c:	003d6106 	br	802fa4 <___vfprintf_internal_r+0xa6c>
  803a20:	d9014f17 	ldw	r4,1340(sp)
  803a24:	b00b883a 	mov	r5,r22
  803a28:	d9800c04 	addi	r6,sp,48
  803a2c:	08024e00 	call	8024e0 <__sprint_r>
  803a30:	103c791e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803a34:	dc800e17 	ldw	r18,56(sp)
  803a38:	d8c01904 	addi	r3,sp,100
  803a3c:	003cff06 	br	802e3c <___vfprintf_internal_r+0x904>
  803a40:	d8c14c17 	ldw	r3,1328(sp)
  803a44:	1880040c 	andi	r2,r3,16
  803a48:	1000711e 	bne	r2,zero,803c10 <___vfprintf_internal_r+0x16d8>
  803a4c:	d9014c17 	ldw	r4,1328(sp)
  803a50:	2080100c 	andi	r2,r4,64
  803a54:	10006e26 	beq	r2,zero,803c10 <___vfprintf_internal_r+0x16d8>
  803a58:	3c00000b 	ldhu	r16,0(r7)
  803a5c:	0023883a 	mov	r17,zero
  803a60:	39c00104 	addi	r7,r7,4
  803a64:	d9c14015 	stw	r7,1280(sp)
  803a68:	003f0006 	br	80366c <___vfprintf_internal_r+0x1134>
  803a6c:	dc400d17 	ldw	r17,52(sp)
  803a70:	07002074 	movhi	fp,129
  803a74:	e73ae184 	addi	fp,fp,-5242
  803a78:	9425883a 	add	r18,r18,r16
  803a7c:	8c400044 	addi	r17,r17,1
  803a80:	008001c4 	movi	r2,7
  803a84:	1f000015 	stw	fp,0(r3)
  803a88:	1c000115 	stw	r16,4(r3)
  803a8c:	dc800e15 	stw	r18,56(sp)
  803a90:	dc400d15 	stw	r17,52(sp)
  803a94:	147d7616 	blt	r2,r17,803070 <___vfprintf_internal_r+0xb38>
  803a98:	18c00204 	addi	r3,r3,8
  803a9c:	003d7b06 	br	80308c <___vfprintf_internal_r+0xb54>
  803aa0:	dc800e17 	ldw	r18,56(sp)
  803aa4:	dc400d17 	ldw	r17,52(sp)
  803aa8:	07002074 	movhi	fp,129
  803aac:	e73ae584 	addi	fp,fp,-5226
  803ab0:	003bc006 	br	8029b4 <___vfprintf_internal_r+0x47c>
  803ab4:	d9014f17 	ldw	r4,1340(sp)
  803ab8:	b00b883a 	mov	r5,r22
  803abc:	d9800c04 	addi	r6,sp,48
  803ac0:	08024e00 	call	8024e0 <__sprint_r>
  803ac4:	103c541e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803ac8:	dc800e17 	ldw	r18,56(sp)
  803acc:	d8c01904 	addi	r3,sp,100
  803ad0:	003ce906 	br	802e78 <___vfprintf_internal_r+0x940>
  803ad4:	3c000017 	ldw	r16,0(r7)
  803ad8:	0009883a 	mov	r4,zero
  803adc:	39c00104 	addi	r7,r7,4
  803ae0:	0023883a 	mov	r17,zero
  803ae4:	d9c14015 	stw	r7,1280(sp)
  803ae8:	d8000405 	stb	zero,16(sp)
  803aec:	003d2006 	br	802f70 <___vfprintf_internal_r+0xa38>
  803af0:	38800017 	ldw	r2,0(r7)
  803af4:	39c00104 	addi	r7,r7,4
  803af8:	d9c14015 	stw	r7,1280(sp)
  803afc:	1023d7fa 	srai	r17,r2,31
  803b00:	1021883a 	mov	r16,r2
  803b04:	003d1806 	br	802f68 <___vfprintf_internal_r+0xa30>
  803b08:	3c000017 	ldw	r16,0(r7)
  803b0c:	01000044 	movi	r4,1
  803b10:	39c00104 	addi	r7,r7,4
  803b14:	0023883a 	mov	r17,zero
  803b18:	d9c14015 	stw	r7,1280(sp)
  803b1c:	d8000405 	stb	zero,16(sp)
  803b20:	003d1306 	br	802f70 <___vfprintf_internal_r+0xa38>
  803b24:	00802074 	movhi	r2,129
  803b28:	10bae104 	addi	r2,r2,-5244
  803b2c:	94800044 	addi	r18,r18,1
  803b30:	8c400044 	addi	r17,r17,1
  803b34:	a8800015 	stw	r2,0(r21)
  803b38:	00c00044 	movi	r3,1
  803b3c:	008001c4 	movi	r2,7
  803b40:	a8c00115 	stw	r3,4(r21)
  803b44:	dc800e15 	stw	r18,56(sp)
  803b48:	dc400d15 	stw	r17,52(sp)
  803b4c:	1440ca16 	blt	r2,r17,803e78 <___vfprintf_internal_r+0x1940>
  803b50:	a8c00204 	addi	r3,r21,8
  803b54:	2000061e 	bne	r4,zero,803b70 <___vfprintf_internal_r+0x1638>
  803b58:	d9414717 	ldw	r5,1308(sp)
  803b5c:	2800041e 	bne	r5,zero,803b70 <___vfprintf_internal_r+0x1638>
  803b60:	d9814c17 	ldw	r6,1328(sp)
  803b64:	3080004c 	andi	r2,r6,1
  803b68:	1005003a 	cmpeq	r2,r2,zero
  803b6c:	103bf01e 	bne	r2,zero,802b30 <___vfprintf_internal_r+0x5f8>
  803b70:	00800044 	movi	r2,1
  803b74:	dc400d17 	ldw	r17,52(sp)
  803b78:	18800115 	stw	r2,4(r3)
  803b7c:	d8814917 	ldw	r2,1316(sp)
  803b80:	94800044 	addi	r18,r18,1
  803b84:	8c400044 	addi	r17,r17,1
  803b88:	18800015 	stw	r2,0(r3)
  803b8c:	008001c4 	movi	r2,7
  803b90:	dc800e15 	stw	r18,56(sp)
  803b94:	dc400d15 	stw	r17,52(sp)
  803b98:	1440ca16 	blt	r2,r17,803ec4 <___vfprintf_internal_r+0x198c>
  803b9c:	18c00204 	addi	r3,r3,8
  803ba0:	0121c83a 	sub	r16,zero,r4
  803ba4:	0400500e 	bge	zero,r16,803ce8 <___vfprintf_internal_r+0x17b0>
  803ba8:	00800404 	movi	r2,16
  803bac:	1400800e 	bge	r2,r16,803db0 <___vfprintf_internal_r+0x1878>
  803bb0:	1027883a 	mov	r19,r2
  803bb4:	07002074 	movhi	fp,129
  803bb8:	e73ae184 	addi	fp,fp,-5242
  803bbc:	050001c4 	movi	r20,7
  803bc0:	00000306 	br	803bd0 <___vfprintf_internal_r+0x1698>
  803bc4:	18c00204 	addi	r3,r3,8
  803bc8:	843ffc04 	addi	r16,r16,-16
  803bcc:	9c007a0e 	bge	r19,r16,803db8 <___vfprintf_internal_r+0x1880>
  803bd0:	94800404 	addi	r18,r18,16
  803bd4:	8c400044 	addi	r17,r17,1
  803bd8:	1f000015 	stw	fp,0(r3)
  803bdc:	1cc00115 	stw	r19,4(r3)
  803be0:	dc800e15 	stw	r18,56(sp)
  803be4:	dc400d15 	stw	r17,52(sp)
  803be8:	a47ff60e 	bge	r20,r17,803bc4 <___vfprintf_internal_r+0x168c>
  803bec:	d9014f17 	ldw	r4,1340(sp)
  803bf0:	b00b883a 	mov	r5,r22
  803bf4:	d9800c04 	addi	r6,sp,48
  803bf8:	08024e00 	call	8024e0 <__sprint_r>
  803bfc:	103c061e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803c00:	dc800e17 	ldw	r18,56(sp)
  803c04:	dc400d17 	ldw	r17,52(sp)
  803c08:	d8c01904 	addi	r3,sp,100
  803c0c:	003fee06 	br	803bc8 <___vfprintf_internal_r+0x1690>
  803c10:	3c000017 	ldw	r16,0(r7)
  803c14:	0023883a 	mov	r17,zero
  803c18:	39c00104 	addi	r7,r7,4
  803c1c:	d9c14015 	stw	r7,1280(sp)
  803c20:	003e9206 	br	80366c <___vfprintf_internal_r+0x1134>
  803c24:	d9401904 	addi	r5,sp,100
  803c28:	dd000f04 	addi	r20,sp,60
  803c2c:	d9414115 	stw	r5,1284(sp)
  803c30:	d9814417 	ldw	r6,1296(sp)
  803c34:	880a973a 	slli	r5,r17,28
  803c38:	8004d13a 	srli	r2,r16,4
  803c3c:	810003cc 	andi	r4,r16,15
  803c40:	3109883a 	add	r4,r6,r4
  803c44:	2884b03a 	or	r2,r5,r2
  803c48:	21400003 	ldbu	r5,0(r4)
  803c4c:	d9014117 	ldw	r4,1284(sp)
  803c50:	8806d13a 	srli	r3,r17,4
  803c54:	1021883a 	mov	r16,r2
  803c58:	213fffc4 	addi	r4,r4,-1
  803c5c:	d9014115 	stw	r4,1284(sp)
  803c60:	d9814117 	ldw	r6,1284(sp)
  803c64:	10c8b03a 	or	r4,r2,r3
  803c68:	1823883a 	mov	r17,r3
  803c6c:	31400005 	stb	r5,0(r6)
  803c70:	203fef1e 	bne	r4,zero,803c30 <___vfprintf_internal_r+0x16f8>
  803c74:	003ccb06 	br	802fa4 <___vfprintf_internal_r+0xa6c>
  803c78:	00800c04 	movi	r2,48
  803c7c:	d98018c4 	addi	r6,sp,99
  803c80:	dd000f04 	addi	r20,sp,60
  803c84:	d88018c5 	stb	r2,99(sp)
  803c88:	d9814115 	stw	r6,1284(sp)
  803c8c:	003cc506 	br	802fa4 <___vfprintf_internal_r+0xa6c>
  803c90:	dc400d17 	ldw	r17,52(sp)
  803c94:	07002074 	movhi	fp,129
  803c98:	e73ae584 	addi	fp,fp,-5226
  803c9c:	003bc706 	br	802bbc <___vfprintf_internal_r+0x684>
  803ca0:	d9414c17 	ldw	r5,1328(sp)
  803ca4:	2880040c 	andi	r2,r5,16
  803ca8:	10007c26 	beq	r2,zero,803e9c <___vfprintf_internal_r+0x1964>
  803cac:	38800017 	ldw	r2,0(r7)
  803cb0:	39c00104 	addi	r7,r7,4
  803cb4:	d9c14015 	stw	r7,1280(sp)
  803cb8:	d9814b17 	ldw	r6,1324(sp)
  803cbc:	d9c14017 	ldw	r7,1280(sp)
  803cc0:	11800015 	stw	r6,0(r2)
  803cc4:	003a7806 	br	8026a8 <___vfprintf_internal_r+0x170>
  803cc8:	d9014f17 	ldw	r4,1340(sp)
  803ccc:	b00b883a 	mov	r5,r22
  803cd0:	d9800c04 	addi	r6,sp,48
  803cd4:	08024e00 	call	8024e0 <__sprint_r>
  803cd8:	103bcf1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803cdc:	dc800e17 	ldw	r18,56(sp)
  803ce0:	dc400d17 	ldw	r17,52(sp)
  803ce4:	d8c01904 	addi	r3,sp,100
  803ce8:	d9014717 	ldw	r4,1308(sp)
  803cec:	d9414117 	ldw	r5,1284(sp)
  803cf0:	8c400044 	addi	r17,r17,1
  803cf4:	9125883a 	add	r18,r18,r4
  803cf8:	008001c4 	movi	r2,7
  803cfc:	19400015 	stw	r5,0(r3)
  803d00:	19000115 	stw	r4,4(r3)
  803d04:	dc800e15 	stw	r18,56(sp)
  803d08:	dc400d15 	stw	r17,52(sp)
  803d0c:	147cee16 	blt	r2,r17,8030c8 <___vfprintf_internal_r+0xb90>
  803d10:	18c00204 	addi	r3,r3,8
  803d14:	003b8606 	br	802b30 <___vfprintf_internal_r+0x5f8>
  803d18:	38c00017 	ldw	r3,0(r7)
  803d1c:	39000204 	addi	r4,r7,8
  803d20:	d9014015 	stw	r4,1280(sp)
  803d24:	d8c14215 	stw	r3,1288(sp)
  803d28:	39c00117 	ldw	r7,4(r7)
  803d2c:	d9c14315 	stw	r7,1292(sp)
  803d30:	003e2006 	br	8035b4 <___vfprintf_internal_r+0x107c>
  803d34:	0005883a 	mov	r2,zero
  803d38:	1409c83a 	sub	r4,r2,r16
  803d3c:	1105803a 	cmpltu	r2,r2,r4
  803d40:	044bc83a 	sub	r5,zero,r17
  803d44:	2885c83a 	sub	r2,r5,r2
  803d48:	2021883a 	mov	r16,r4
  803d4c:	1023883a 	mov	r17,r2
  803d50:	01000044 	movi	r4,1
  803d54:	00800b44 	movi	r2,45
  803d58:	d8800405 	stb	r2,16(sp)
  803d5c:	003c8406 	br	802f70 <___vfprintf_internal_r+0xa38>
  803d60:	d9014f17 	ldw	r4,1340(sp)
  803d64:	b00b883a 	mov	r5,r22
  803d68:	d9800c04 	addi	r6,sp,48
  803d6c:	08024e00 	call	8024e0 <__sprint_r>
  803d70:	103ba91e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803d74:	dc800e17 	ldw	r18,56(sp)
  803d78:	dc400d17 	ldw	r17,52(sp)
  803d7c:	d9000517 	ldw	r4,20(sp)
  803d80:	d9401904 	addi	r5,sp,100
  803d84:	003da706 	br	803424 <___vfprintf_internal_r+0xeec>
  803d88:	d9014f17 	ldw	r4,1340(sp)
  803d8c:	b00b883a 	mov	r5,r22
  803d90:	d9800c04 	addi	r6,sp,48
  803d94:	08024e00 	call	8024e0 <__sprint_r>
  803d98:	103b9f1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803d9c:	dc800e17 	ldw	r18,56(sp)
  803da0:	dc400d17 	ldw	r17,52(sp)
  803da4:	d9000517 	ldw	r4,20(sp)
  803da8:	d8c01904 	addi	r3,sp,100
  803dac:	003d9106 	br	8033f4 <___vfprintf_internal_r+0xebc>
  803db0:	07002074 	movhi	fp,129
  803db4:	e73ae184 	addi	fp,fp,-5242
  803db8:	9425883a 	add	r18,r18,r16
  803dbc:	8c400044 	addi	r17,r17,1
  803dc0:	008001c4 	movi	r2,7
  803dc4:	1f000015 	stw	fp,0(r3)
  803dc8:	1c000115 	stw	r16,4(r3)
  803dcc:	dc800e15 	stw	r18,56(sp)
  803dd0:	dc400d15 	stw	r17,52(sp)
  803dd4:	147fbc16 	blt	r2,r17,803cc8 <___vfprintf_internal_r+0x1790>
  803dd8:	18c00204 	addi	r3,r3,8
  803ddc:	003fc206 	br	803ce8 <___vfprintf_internal_r+0x17b0>
  803de0:	d9014f17 	ldw	r4,1340(sp)
  803de4:	b00b883a 	mov	r5,r22
  803de8:	d9800c04 	addi	r6,sp,48
  803dec:	08024e00 	call	8024e0 <__sprint_r>
  803df0:	103b891e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803df4:	dc800e17 	ldw	r18,56(sp)
  803df8:	d9000517 	ldw	r4,20(sp)
  803dfc:	d8c01904 	addi	r3,sp,100
  803e00:	003d0206 	br	80320c <___vfprintf_internal_r+0xcd4>
  803e04:	07002074 	movhi	fp,129
  803e08:	e73ae184 	addi	fp,fp,-5242
  803e0c:	003be406 	br	802da0 <___vfprintf_internal_r+0x868>
  803e10:	00802074 	movhi	r2,129
  803e14:	10bad004 	addi	r2,r2,-5312
  803e18:	d8814115 	stw	r2,1284(sp)
  803e1c:	003df506 	br	8035f4 <___vfprintf_internal_r+0x10bc>
  803e20:	d9014217 	ldw	r4,1288(sp)
  803e24:	d9414317 	ldw	r5,1292(sp)
  803e28:	0807de40 	call	807de4 <__isnand>
  803e2c:	10003926 	beq	r2,zero,803f14 <___vfprintf_internal_r+0x19dc>
  803e30:	d9414d17 	ldw	r5,1332(sp)
  803e34:	008011c4 	movi	r2,71
  803e38:	1140ce16 	blt	r2,r5,804174 <___vfprintf_internal_r+0x1c3c>
  803e3c:	01802074 	movhi	r6,129
  803e40:	31bad104 	addi	r6,r6,-5308
  803e44:	d9814115 	stw	r6,1284(sp)
  803e48:	003dea06 	br	8035f4 <___vfprintf_internal_r+0x10bc>
  803e4c:	d9014c17 	ldw	r4,1328(sp)
  803e50:	bdc00044 	addi	r23,r23,1
  803e54:	b8c00007 	ldb	r3,0(r23)
  803e58:	21000814 	ori	r4,r4,32
  803e5c:	d9014c15 	stw	r4,1328(sp)
  803e60:	003a3406 	br	802734 <___vfprintf_internal_r+0x1fc>
  803e64:	dcc14515 	stw	r19,1300(sp)
  803e68:	98011016 	blt	r19,zero,8042ac <___vfprintf_internal_r+0x1d74>
  803e6c:	980f883a 	mov	r7,r19
  803e70:	d8014615 	stw	zero,1304(sp)
  803e74:	003c5206 	br	802fc0 <___vfprintf_internal_r+0xa88>
  803e78:	d9014f17 	ldw	r4,1340(sp)
  803e7c:	b00b883a 	mov	r5,r22
  803e80:	d9800c04 	addi	r6,sp,48
  803e84:	08024e00 	call	8024e0 <__sprint_r>
  803e88:	103b631e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803e8c:	dc800e17 	ldw	r18,56(sp)
  803e90:	d9000517 	ldw	r4,20(sp)
  803e94:	d8c01904 	addi	r3,sp,100
  803e98:	003f2e06 	br	803b54 <___vfprintf_internal_r+0x161c>
  803e9c:	d8c14c17 	ldw	r3,1328(sp)
  803ea0:	1880100c 	andi	r2,r3,64
  803ea4:	1000a026 	beq	r2,zero,804128 <___vfprintf_internal_r+0x1bf0>
  803ea8:	38800017 	ldw	r2,0(r7)
  803eac:	39c00104 	addi	r7,r7,4
  803eb0:	d9c14015 	stw	r7,1280(sp)
  803eb4:	d9014b17 	ldw	r4,1324(sp)
  803eb8:	d9c14017 	ldw	r7,1280(sp)
  803ebc:	1100000d 	sth	r4,0(r2)
  803ec0:	0039f906 	br	8026a8 <___vfprintf_internal_r+0x170>
  803ec4:	d9014f17 	ldw	r4,1340(sp)
  803ec8:	b00b883a 	mov	r5,r22
  803ecc:	d9800c04 	addi	r6,sp,48
  803ed0:	08024e00 	call	8024e0 <__sprint_r>
  803ed4:	103b501e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  803ed8:	dc800e17 	ldw	r18,56(sp)
  803edc:	dc400d17 	ldw	r17,52(sp)
  803ee0:	d9000517 	ldw	r4,20(sp)
  803ee4:	d8c01904 	addi	r3,sp,100
  803ee8:	003f2d06 	br	803ba0 <___vfprintf_internal_r+0x1668>
  803eec:	00800184 	movi	r2,6
  803ef0:	14c09a36 	bltu	r2,r19,80415c <___vfprintf_internal_r+0x1c24>
  803ef4:	dcc14515 	stw	r19,1300(sp)
  803ef8:	9800010e 	bge	r19,zero,803f00 <___vfprintf_internal_r+0x19c8>
  803efc:	d8014515 	stw	zero,1300(sp)
  803f00:	00802074 	movhi	r2,129
  803f04:	10bad304 	addi	r2,r2,-5300
  803f08:	980f883a 	mov	r7,r19
  803f0c:	d8814115 	stw	r2,1284(sp)
  803f10:	003a7806 	br	8028f4 <___vfprintf_internal_r+0x3bc>
  803f14:	00bfffc4 	movi	r2,-1
  803f18:	9880e226 	beq	r19,r2,8042a4 <___vfprintf_internal_r+0x1d6c>
  803f1c:	d9414d17 	ldw	r5,1332(sp)
  803f20:	008019c4 	movi	r2,103
  803f24:	2880dc26 	beq	r5,r2,804298 <___vfprintf_internal_r+0x1d60>
  803f28:	008011c4 	movi	r2,71
  803f2c:	2880da26 	beq	r5,r2,804298 <___vfprintf_internal_r+0x1d60>
  803f30:	d9414c17 	ldw	r5,1328(sp)
  803f34:	d9014317 	ldw	r4,1292(sp)
  803f38:	d9814217 	ldw	r6,1288(sp)
  803f3c:	29404014 	ori	r5,r5,256
  803f40:	d9414c15 	stw	r5,1328(sp)
  803f44:	2000cc16 	blt	r4,zero,804278 <___vfprintf_internal_r+0x1d40>
  803f48:	3021883a 	mov	r16,r6
  803f4c:	2023883a 	mov	r17,r4
  803f50:	0039883a 	mov	fp,zero
  803f54:	d9414d17 	ldw	r5,1332(sp)
  803f58:	00801984 	movi	r2,102
  803f5c:	2880b726 	beq	r5,r2,80423c <___vfprintf_internal_r+0x1d04>
  803f60:	00801184 	movi	r2,70
  803f64:	2880b526 	beq	r5,r2,80423c <___vfprintf_internal_r+0x1d04>
  803f68:	00801944 	movi	r2,101
  803f6c:	2880c826 	beq	r5,r2,804290 <___vfprintf_internal_r+0x1d58>
  803f70:	00801144 	movi	r2,69
  803f74:	2880c626 	beq	r5,r2,804290 <___vfprintf_internal_r+0x1d58>
  803f78:	9829883a 	mov	r20,r19
  803f7c:	d9014f17 	ldw	r4,1340(sp)
  803f80:	d8800504 	addi	r2,sp,20
  803f84:	880d883a 	mov	r6,r17
  803f88:	d8800115 	stw	r2,4(sp)
  803f8c:	d8c00604 	addi	r3,sp,24
  803f90:	d8800704 	addi	r2,sp,28
  803f94:	800b883a 	mov	r5,r16
  803f98:	01c00084 	movi	r7,2
  803f9c:	d8c00215 	stw	r3,8(sp)
  803fa0:	d8800315 	stw	r2,12(sp)
  803fa4:	dd000015 	stw	r20,0(sp)
  803fa8:	08048440 	call	804844 <_dtoa_r>
  803fac:	d9814d17 	ldw	r6,1332(sp)
  803fb0:	d8814115 	stw	r2,1284(sp)
  803fb4:	008019c4 	movi	r2,103
  803fb8:	30809526 	beq	r6,r2,804210 <___vfprintf_internal_r+0x1cd8>
  803fbc:	d8c14d17 	ldw	r3,1332(sp)
  803fc0:	008011c4 	movi	r2,71
  803fc4:	18809226 	beq	r3,r2,804210 <___vfprintf_internal_r+0x1cd8>
  803fc8:	d9414117 	ldw	r5,1284(sp)
  803fcc:	d9814d17 	ldw	r6,1332(sp)
  803fd0:	00801984 	movi	r2,102
  803fd4:	2d25883a 	add	r18,r5,r20
  803fd8:	30808626 	beq	r6,r2,8041f4 <___vfprintf_internal_r+0x1cbc>
  803fdc:	00801184 	movi	r2,70
  803fe0:	30808426 	beq	r6,r2,8041f4 <___vfprintf_internal_r+0x1cbc>
  803fe4:	000d883a 	mov	r6,zero
  803fe8:	000f883a 	mov	r7,zero
  803fec:	880b883a 	mov	r5,r17
  803ff0:	8009883a 	mov	r4,r16
  803ff4:	08096300 	call	809630 <__eqdf2>
  803ff8:	1000751e 	bne	r2,zero,8041d0 <___vfprintf_internal_r+0x1c98>
  803ffc:	9005883a 	mov	r2,r18
  804000:	dc800715 	stw	r18,28(sp)
  804004:	d9014117 	ldw	r4,1284(sp)
  804008:	d9414d17 	ldw	r5,1332(sp)
  80400c:	00c019c4 	movi	r3,103
  804010:	1125c83a 	sub	r18,r2,r4
  804014:	28c06826 	beq	r5,r3,8041b8 <___vfprintf_internal_r+0x1c80>
  804018:	008011c4 	movi	r2,71
  80401c:	28806626 	beq	r5,r2,8041b8 <___vfprintf_internal_r+0x1c80>
  804020:	d9000517 	ldw	r4,20(sp)
  804024:	d8c14d17 	ldw	r3,1332(sp)
  804028:	00801944 	movi	r2,101
  80402c:	10c05516 	blt	r2,r3,804184 <___vfprintf_internal_r+0x1c4c>
  804030:	213fffc4 	addi	r4,r4,-1
  804034:	d9000515 	stw	r4,20(sp)
  804038:	d8c00805 	stb	r3,32(sp)
  80403c:	2021883a 	mov	r16,r4
  804040:	2000c116 	blt	r4,zero,804348 <___vfprintf_internal_r+0x1e10>
  804044:	00800ac4 	movi	r2,43
  804048:	d8800845 	stb	r2,33(sp)
  80404c:	00800244 	movi	r2,9
  804050:	1400af0e 	bge	r2,r16,804310 <___vfprintf_internal_r+0x1dd8>
  804054:	1027883a 	mov	r19,r2
  804058:	dc400b84 	addi	r17,sp,46
  80405c:	8009883a 	mov	r4,r16
  804060:	01400284 	movi	r5,10
  804064:	0809d180 	call	809d18 <__modsi3>
  804068:	10800c04 	addi	r2,r2,48
  80406c:	8c7fffc4 	addi	r17,r17,-1
  804070:	8009883a 	mov	r4,r16
  804074:	01400284 	movi	r5,10
  804078:	88800005 	stb	r2,0(r17)
  80407c:	0809cb80 	call	809cb8 <__divsi3>
  804080:	1021883a 	mov	r16,r2
  804084:	98bff516 	blt	r19,r2,80405c <___vfprintf_internal_r+0x1b24>
  804088:	10c00c04 	addi	r3,r2,48
  80408c:	d88009c4 	addi	r2,sp,39
  804090:	108001c4 	addi	r2,r2,7
  804094:	897fffc4 	addi	r5,r17,-1
  804098:	88ffffc5 	stb	r3,-1(r17)
  80409c:	2880a72e 	bgeu	r5,r2,80433c <___vfprintf_internal_r+0x1e04>
  8040a0:	1009883a 	mov	r4,r2
  8040a4:	d9800804 	addi	r6,sp,32
  8040a8:	d8c00884 	addi	r3,sp,34
  8040ac:	28800003 	ldbu	r2,0(r5)
  8040b0:	29400044 	addi	r5,r5,1
  8040b4:	18800005 	stb	r2,0(r3)
  8040b8:	18c00044 	addi	r3,r3,1
  8040bc:	293ffb36 	bltu	r5,r4,8040ac <___vfprintf_internal_r+0x1b74>
  8040c0:	1987c83a 	sub	r3,r3,r6
  8040c4:	00800044 	movi	r2,1
  8040c8:	d8c14815 	stw	r3,1312(sp)
  8040cc:	90cf883a 	add	r7,r18,r3
  8040d0:	1480960e 	bge	r2,r18,80432c <___vfprintf_internal_r+0x1df4>
  8040d4:	39c00044 	addi	r7,r7,1
  8040d8:	d9c14515 	stw	r7,1300(sp)
  8040dc:	38003416 	blt	r7,zero,8041b0 <___vfprintf_internal_r+0x1c78>
  8040e0:	e0803fcc 	andi	r2,fp,255
  8040e4:	1080201c 	xori	r2,r2,128
  8040e8:	10bfe004 	addi	r2,r2,-128
  8040ec:	10004e26 	beq	r2,zero,804228 <___vfprintf_internal_r+0x1cf0>
  8040f0:	00800b44 	movi	r2,45
  8040f4:	dc814715 	stw	r18,1308(sp)
  8040f8:	d8014615 	stw	zero,1304(sp)
  8040fc:	d8800405 	stb	r2,16(sp)
  804100:	003bb106 	br	802fc8 <___vfprintf_internal_r+0xa90>
  804104:	00800b44 	movi	r2,45
  804108:	d8800405 	stb	r2,16(sp)
  80410c:	003d3306 	br	8035dc <___vfprintf_internal_r+0x10a4>
  804110:	d9014f17 	ldw	r4,1340(sp)
  804114:	b00b883a 	mov	r5,r22
  804118:	d9800c04 	addi	r6,sp,48
  80411c:	08024e00 	call	8024e0 <__sprint_r>
  804120:	103abd1e 	bne	r2,zero,802c18 <___vfprintf_internal_r+0x6e0>
  804124:	003abb06 	br	802c14 <___vfprintf_internal_r+0x6dc>
  804128:	38800017 	ldw	r2,0(r7)
  80412c:	39c00104 	addi	r7,r7,4
  804130:	d9c14015 	stw	r7,1280(sp)
  804134:	d9414b17 	ldw	r5,1324(sp)
  804138:	d9c14017 	ldw	r7,1280(sp)
  80413c:	11400015 	stw	r5,0(r2)
  804140:	00395906 	br	8026a8 <___vfprintf_internal_r+0x170>
  804144:	980f883a 	mov	r7,r19
  804148:	dcc14515 	stw	r19,1300(sp)
  80414c:	d8014615 	stw	zero,1304(sp)
  804150:	003b9b06 	br	802fc0 <___vfprintf_internal_r+0xa88>
  804154:	0027883a 	mov	r19,zero
  804158:	00397806 	br	80273c <___vfprintf_internal_r+0x204>
  80415c:	00c02074 	movhi	r3,129
  804160:	18fad304 	addi	r3,r3,-5300
  804164:	100f883a 	mov	r7,r2
  804168:	d8814515 	stw	r2,1300(sp)
  80416c:	d8c14115 	stw	r3,1284(sp)
  804170:	0039e006 	br	8028f4 <___vfprintf_internal_r+0x3bc>
  804174:	00802074 	movhi	r2,129
  804178:	10bad204 	addi	r2,r2,-5304
  80417c:	d8814115 	stw	r2,1284(sp)
  804180:	003d1c06 	br	8035f4 <___vfprintf_internal_r+0x10bc>
  804184:	d9414d17 	ldw	r5,1332(sp)
  804188:	00801984 	movi	r2,102
  80418c:	28804926 	beq	r5,r2,8042b4 <___vfprintf_internal_r+0x1d7c>
  804190:	200f883a 	mov	r7,r4
  804194:	24805716 	blt	r4,r18,8042f4 <___vfprintf_internal_r+0x1dbc>
  804198:	d9414c17 	ldw	r5,1328(sp)
  80419c:	2880004c 	andi	r2,r5,1
  8041a0:	10000126 	beq	r2,zero,8041a8 <___vfprintf_internal_r+0x1c70>
  8041a4:	21c00044 	addi	r7,r4,1
  8041a8:	d9c14515 	stw	r7,1300(sp)
  8041ac:	383fcc0e 	bge	r7,zero,8040e0 <___vfprintf_internal_r+0x1ba8>
  8041b0:	d8014515 	stw	zero,1300(sp)
  8041b4:	003fca06 	br	8040e0 <___vfprintf_internal_r+0x1ba8>
  8041b8:	d9000517 	ldw	r4,20(sp)
  8041bc:	00bfff04 	movi	r2,-4
  8041c0:	1100480e 	bge	r2,r4,8042e4 <___vfprintf_internal_r+0x1dac>
  8041c4:	99004716 	blt	r19,r4,8042e4 <___vfprintf_internal_r+0x1dac>
  8041c8:	d8c14d15 	stw	r3,1332(sp)
  8041cc:	003ff006 	br	804190 <___vfprintf_internal_r+0x1c58>
  8041d0:	d8800717 	ldw	r2,28(sp)
  8041d4:	14bf8b2e 	bgeu	r2,r18,804004 <___vfprintf_internal_r+0x1acc>
  8041d8:	9007883a 	mov	r3,r18
  8041dc:	01000c04 	movi	r4,48
  8041e0:	11000005 	stb	r4,0(r2)
  8041e4:	10800044 	addi	r2,r2,1
  8041e8:	d8800715 	stw	r2,28(sp)
  8041ec:	18bffc1e 	bne	r3,r2,8041e0 <___vfprintf_internal_r+0x1ca8>
  8041f0:	003f8406 	br	804004 <___vfprintf_internal_r+0x1acc>
  8041f4:	d8814117 	ldw	r2,1284(sp)
  8041f8:	10c00007 	ldb	r3,0(r2)
  8041fc:	00800c04 	movi	r2,48
  804200:	18805b26 	beq	r3,r2,804370 <___vfprintf_internal_r+0x1e38>
  804204:	d9000517 	ldw	r4,20(sp)
  804208:	9125883a 	add	r18,r18,r4
  80420c:	003f7506 	br	803fe4 <___vfprintf_internal_r+0x1aac>
  804210:	d9014c17 	ldw	r4,1328(sp)
  804214:	2080004c 	andi	r2,r4,1
  804218:	1005003a 	cmpeq	r2,r2,zero
  80421c:	103f6a26 	beq	r2,zero,803fc8 <___vfprintf_internal_r+0x1a90>
  804220:	d8800717 	ldw	r2,28(sp)
  804224:	003f7706 	br	804004 <___vfprintf_internal_r+0x1acc>
  804228:	d9c14515 	stw	r7,1300(sp)
  80422c:	38004d16 	blt	r7,zero,804364 <___vfprintf_internal_r+0x1e2c>
  804230:	dc814715 	stw	r18,1308(sp)
  804234:	d8014615 	stw	zero,1304(sp)
  804238:	003b6106 	br	802fc0 <___vfprintf_internal_r+0xa88>
  80423c:	d9014f17 	ldw	r4,1340(sp)
  804240:	d8800504 	addi	r2,sp,20
  804244:	d8800115 	stw	r2,4(sp)
  804248:	d8c00604 	addi	r3,sp,24
  80424c:	d8800704 	addi	r2,sp,28
  804250:	800b883a 	mov	r5,r16
  804254:	880d883a 	mov	r6,r17
  804258:	01c000c4 	movi	r7,3
  80425c:	d8c00215 	stw	r3,8(sp)
  804260:	d8800315 	stw	r2,12(sp)
  804264:	dcc00015 	stw	r19,0(sp)
  804268:	9829883a 	mov	r20,r19
  80426c:	08048440 	call	804844 <_dtoa_r>
  804270:	d8814115 	stw	r2,1284(sp)
  804274:	003f5106 	br	803fbc <___vfprintf_internal_r+0x1a84>
  804278:	d8c14217 	ldw	r3,1288(sp)
  80427c:	d9014317 	ldw	r4,1292(sp)
  804280:	07000b44 	movi	fp,45
  804284:	1821883a 	mov	r16,r3
  804288:	2460003c 	xorhi	r17,r4,32768
  80428c:	003f3106 	br	803f54 <___vfprintf_internal_r+0x1a1c>
  804290:	9d000044 	addi	r20,r19,1
  804294:	003f3906 	br	803f7c <___vfprintf_internal_r+0x1a44>
  804298:	983f251e 	bne	r19,zero,803f30 <___vfprintf_internal_r+0x19f8>
  80429c:	04c00044 	movi	r19,1
  8042a0:	003f2306 	br	803f30 <___vfprintf_internal_r+0x19f8>
  8042a4:	04c00184 	movi	r19,6
  8042a8:	003f2106 	br	803f30 <___vfprintf_internal_r+0x19f8>
  8042ac:	d8014515 	stw	zero,1300(sp)
  8042b0:	003eee06 	br	803e6c <___vfprintf_internal_r+0x1934>
  8042b4:	200f883a 	mov	r7,r4
  8042b8:	0100370e 	bge	zero,r4,804398 <___vfprintf_internal_r+0x1e60>
  8042bc:	9800031e 	bne	r19,zero,8042cc <___vfprintf_internal_r+0x1d94>
  8042c0:	d9814c17 	ldw	r6,1328(sp)
  8042c4:	3080004c 	andi	r2,r6,1
  8042c8:	103fb726 	beq	r2,zero,8041a8 <___vfprintf_internal_r+0x1c70>
  8042cc:	20800044 	addi	r2,r4,1
  8042d0:	98a7883a 	add	r19,r19,r2
  8042d4:	dcc14515 	stw	r19,1300(sp)
  8042d8:	980f883a 	mov	r7,r19
  8042dc:	983f800e 	bge	r19,zero,8040e0 <___vfprintf_internal_r+0x1ba8>
  8042e0:	003fb306 	br	8041b0 <___vfprintf_internal_r+0x1c78>
  8042e4:	d9814d17 	ldw	r6,1332(sp)
  8042e8:	31bfff84 	addi	r6,r6,-2
  8042ec:	d9814d15 	stw	r6,1332(sp)
  8042f0:	003f4c06 	br	804024 <___vfprintf_internal_r+0x1aec>
  8042f4:	0100180e 	bge	zero,r4,804358 <___vfprintf_internal_r+0x1e20>
  8042f8:	00800044 	movi	r2,1
  8042fc:	1485883a 	add	r2,r2,r18
  804300:	d8814515 	stw	r2,1300(sp)
  804304:	100f883a 	mov	r7,r2
  804308:	103f750e 	bge	r2,zero,8040e0 <___vfprintf_internal_r+0x1ba8>
  80430c:	003fa806 	br	8041b0 <___vfprintf_internal_r+0x1c78>
  804310:	80c00c04 	addi	r3,r16,48
  804314:	00800c04 	movi	r2,48
  804318:	d8c008c5 	stb	r3,35(sp)
  80431c:	d9800804 	addi	r6,sp,32
  804320:	d8c00904 	addi	r3,sp,36
  804324:	d8800885 	stb	r2,34(sp)
  804328:	003f6506 	br	8040c0 <___vfprintf_internal_r+0x1b88>
  80432c:	d9014c17 	ldw	r4,1328(sp)
  804330:	2084703a 	and	r2,r4,r2
  804334:	103f9c26 	beq	r2,zero,8041a8 <___vfprintf_internal_r+0x1c70>
  804338:	003f6606 	br	8040d4 <___vfprintf_internal_r+0x1b9c>
  80433c:	d9800804 	addi	r6,sp,32
  804340:	d8c00884 	addi	r3,sp,34
  804344:	003f5e06 	br	8040c0 <___vfprintf_internal_r+0x1b88>
  804348:	00800b44 	movi	r2,45
  80434c:	0121c83a 	sub	r16,zero,r4
  804350:	d8800845 	stb	r2,33(sp)
  804354:	003f3d06 	br	80404c <___vfprintf_internal_r+0x1b14>
  804358:	00800084 	movi	r2,2
  80435c:	1105c83a 	sub	r2,r2,r4
  804360:	003fe606 	br	8042fc <___vfprintf_internal_r+0x1dc4>
  804364:	d8014515 	stw	zero,1300(sp)
  804368:	dc814715 	stw	r18,1308(sp)
  80436c:	003fb106 	br	804234 <___vfprintf_internal_r+0x1cfc>
  804370:	000d883a 	mov	r6,zero
  804374:	000f883a 	mov	r7,zero
  804378:	8009883a 	mov	r4,r16
  80437c:	880b883a 	mov	r5,r17
  804380:	08096b80 	call	8096b8 <__nedf2>
  804384:	103f9f26 	beq	r2,zero,804204 <___vfprintf_internal_r+0x1ccc>
  804388:	00800044 	movi	r2,1
  80438c:	1509c83a 	sub	r4,r2,r20
  804390:	d9000515 	stw	r4,20(sp)
  804394:	003f9b06 	br	804204 <___vfprintf_internal_r+0x1ccc>
  804398:	98000d1e 	bne	r19,zero,8043d0 <___vfprintf_internal_r+0x1e98>
  80439c:	d8c14c17 	ldw	r3,1328(sp)
  8043a0:	1880004c 	andi	r2,r3,1
  8043a4:	10000a1e 	bne	r2,zero,8043d0 <___vfprintf_internal_r+0x1e98>
  8043a8:	01000044 	movi	r4,1
  8043ac:	200f883a 	mov	r7,r4
  8043b0:	d9014515 	stw	r4,1300(sp)
  8043b4:	003f4a06 	br	8040e0 <___vfprintf_internal_r+0x1ba8>
  8043b8:	3cc00017 	ldw	r19,0(r7)
  8043bc:	39c00104 	addi	r7,r7,4
  8043c0:	983d0e0e 	bge	r19,zero,8037fc <___vfprintf_internal_r+0x12c4>
  8043c4:	b8c00007 	ldb	r3,0(r23)
  8043c8:	04ffffc4 	movi	r19,-1
  8043cc:	0038d906 	br	802734 <___vfprintf_internal_r+0x1fc>
  8043d0:	9cc00084 	addi	r19,r19,2
  8043d4:	dcc14515 	stw	r19,1300(sp)
  8043d8:	980f883a 	mov	r7,r19
  8043dc:	983f400e 	bge	r19,zero,8040e0 <___vfprintf_internal_r+0x1ba8>
  8043e0:	003f7306 	br	8041b0 <___vfprintf_internal_r+0x1c78>

008043e4 <__vfprintf_internal>:
  8043e4:	00802074 	movhi	r2,129
  8043e8:	10834504 	addi	r2,r2,3348
  8043ec:	2013883a 	mov	r9,r4
  8043f0:	11000017 	ldw	r4,0(r2)
  8043f4:	2805883a 	mov	r2,r5
  8043f8:	300f883a 	mov	r7,r6
  8043fc:	480b883a 	mov	r5,r9
  804400:	100d883a 	mov	r6,r2
  804404:	08025381 	jmpi	802538 <___vfprintf_internal_r>

00804408 <_write_r>:
  804408:	defffd04 	addi	sp,sp,-12
  80440c:	dc000015 	stw	r16,0(sp)
  804410:	04002074 	movhi	r16,129
  804414:	840a6d04 	addi	r16,r16,10676
  804418:	dc400115 	stw	r17,4(sp)
  80441c:	80000015 	stw	zero,0(r16)
  804420:	2023883a 	mov	r17,r4
  804424:	2809883a 	mov	r4,r5
  804428:	300b883a 	mov	r5,r6
  80442c:	380d883a 	mov	r6,r7
  804430:	dfc00215 	stw	ra,8(sp)
  804434:	080b1c80 	call	80b1c8 <write>
  804438:	1007883a 	mov	r3,r2
  80443c:	00bfffc4 	movi	r2,-1
  804440:	18800626 	beq	r3,r2,80445c <_write_r+0x54>
  804444:	1805883a 	mov	r2,r3
  804448:	dfc00217 	ldw	ra,8(sp)
  80444c:	dc400117 	ldw	r17,4(sp)
  804450:	dc000017 	ldw	r16,0(sp)
  804454:	dec00304 	addi	sp,sp,12
  804458:	f800283a 	ret
  80445c:	80800017 	ldw	r2,0(r16)
  804460:	103ff826 	beq	r2,zero,804444 <_write_r+0x3c>
  804464:	88800015 	stw	r2,0(r17)
  804468:	1805883a 	mov	r2,r3
  80446c:	dfc00217 	ldw	ra,8(sp)
  804470:	dc400117 	ldw	r17,4(sp)
  804474:	dc000017 	ldw	r16,0(sp)
  804478:	dec00304 	addi	sp,sp,12
  80447c:	f800283a 	ret

00804480 <__swsetup_r>:
  804480:	00802074 	movhi	r2,129
  804484:	10834504 	addi	r2,r2,3348
  804488:	10c00017 	ldw	r3,0(r2)
  80448c:	defffd04 	addi	sp,sp,-12
  804490:	dc400115 	stw	r17,4(sp)
  804494:	dc000015 	stw	r16,0(sp)
  804498:	dfc00215 	stw	ra,8(sp)
  80449c:	2023883a 	mov	r17,r4
  8044a0:	2821883a 	mov	r16,r5
  8044a4:	18000226 	beq	r3,zero,8044b0 <__swsetup_r+0x30>
  8044a8:	18800e17 	ldw	r2,56(r3)
  8044ac:	10001f26 	beq	r2,zero,80452c <__swsetup_r+0xac>
  8044b0:	8100030b 	ldhu	r4,12(r16)
  8044b4:	2080020c 	andi	r2,r4,8
  8044b8:	10002826 	beq	r2,zero,80455c <__swsetup_r+0xdc>
  8044bc:	81400417 	ldw	r5,16(r16)
  8044c0:	28001d26 	beq	r5,zero,804538 <__swsetup_r+0xb8>
  8044c4:	2080004c 	andi	r2,r4,1
  8044c8:	1005003a 	cmpeq	r2,r2,zero
  8044cc:	10000b26 	beq	r2,zero,8044fc <__swsetup_r+0x7c>
  8044d0:	2080008c 	andi	r2,r4,2
  8044d4:	10001226 	beq	r2,zero,804520 <__swsetup_r+0xa0>
  8044d8:	0005883a 	mov	r2,zero
  8044dc:	80800215 	stw	r2,8(r16)
  8044e0:	28000b26 	beq	r5,zero,804510 <__swsetup_r+0x90>
  8044e4:	0005883a 	mov	r2,zero
  8044e8:	dfc00217 	ldw	ra,8(sp)
  8044ec:	dc400117 	ldw	r17,4(sp)
  8044f0:	dc000017 	ldw	r16,0(sp)
  8044f4:	dec00304 	addi	sp,sp,12
  8044f8:	f800283a 	ret
  8044fc:	80800517 	ldw	r2,20(r16)
  804500:	80000215 	stw	zero,8(r16)
  804504:	0085c83a 	sub	r2,zero,r2
  804508:	80800615 	stw	r2,24(r16)
  80450c:	283ff51e 	bne	r5,zero,8044e4 <__swsetup_r+0x64>
  804510:	2080200c 	andi	r2,r4,128
  804514:	103ff326 	beq	r2,zero,8044e4 <__swsetup_r+0x64>
  804518:	00bfffc4 	movi	r2,-1
  80451c:	003ff206 	br	8044e8 <__swsetup_r+0x68>
  804520:	80800517 	ldw	r2,20(r16)
  804524:	80800215 	stw	r2,8(r16)
  804528:	003fed06 	br	8044e0 <__swsetup_r+0x60>
  80452c:	1809883a 	mov	r4,r3
  804530:	08007640 	call	800764 <__sinit>
  804534:	003fde06 	br	8044b0 <__swsetup_r+0x30>
  804538:	20c0a00c 	andi	r3,r4,640
  80453c:	00808004 	movi	r2,512
  804540:	18bfe026 	beq	r3,r2,8044c4 <__swsetup_r+0x44>
  804544:	8809883a 	mov	r4,r17
  804548:	800b883a 	mov	r5,r16
  80454c:	08015c00 	call	8015c0 <__smakebuf_r>
  804550:	8100030b 	ldhu	r4,12(r16)
  804554:	81400417 	ldw	r5,16(r16)
  804558:	003fda06 	br	8044c4 <__swsetup_r+0x44>
  80455c:	2080040c 	andi	r2,r4,16
  804560:	103fed26 	beq	r2,zero,804518 <__swsetup_r+0x98>
  804564:	2080010c 	andi	r2,r4,4
  804568:	10001226 	beq	r2,zero,8045b4 <__swsetup_r+0x134>
  80456c:	81400c17 	ldw	r5,48(r16)
  804570:	28000526 	beq	r5,zero,804588 <__swsetup_r+0x108>
  804574:	80801004 	addi	r2,r16,64
  804578:	28800226 	beq	r5,r2,804584 <__swsetup_r+0x104>
  80457c:	8809883a 	mov	r4,r17
  804580:	0800c580 	call	800c58 <_free_r>
  804584:	80000c15 	stw	zero,48(r16)
  804588:	8080030b 	ldhu	r2,12(r16)
  80458c:	81400417 	ldw	r5,16(r16)
  804590:	80000115 	stw	zero,4(r16)
  804594:	10bff6cc 	andi	r2,r2,65499
  804598:	8080030d 	sth	r2,12(r16)
  80459c:	81400015 	stw	r5,0(r16)
  8045a0:	8080030b 	ldhu	r2,12(r16)
  8045a4:	10800214 	ori	r2,r2,8
  8045a8:	113fffcc 	andi	r4,r2,65535
  8045ac:	8080030d 	sth	r2,12(r16)
  8045b0:	003fc306 	br	8044c0 <__swsetup_r+0x40>
  8045b4:	81400417 	ldw	r5,16(r16)
  8045b8:	003ff906 	br	8045a0 <__swsetup_r+0x120>

008045bc <_close_r>:
  8045bc:	defffd04 	addi	sp,sp,-12
  8045c0:	dc000015 	stw	r16,0(sp)
  8045c4:	04002074 	movhi	r16,129
  8045c8:	840a6d04 	addi	r16,r16,10676
  8045cc:	dc400115 	stw	r17,4(sp)
  8045d0:	80000015 	stw	zero,0(r16)
  8045d4:	2023883a 	mov	r17,r4
  8045d8:	2809883a 	mov	r4,r5
  8045dc:	dfc00215 	stw	ra,8(sp)
  8045e0:	080a3b40 	call	80a3b4 <close>
  8045e4:	1007883a 	mov	r3,r2
  8045e8:	00bfffc4 	movi	r2,-1
  8045ec:	18800626 	beq	r3,r2,804608 <_close_r+0x4c>
  8045f0:	1805883a 	mov	r2,r3
  8045f4:	dfc00217 	ldw	ra,8(sp)
  8045f8:	dc400117 	ldw	r17,4(sp)
  8045fc:	dc000017 	ldw	r16,0(sp)
  804600:	dec00304 	addi	sp,sp,12
  804604:	f800283a 	ret
  804608:	80800017 	ldw	r2,0(r16)
  80460c:	103ff826 	beq	r2,zero,8045f0 <_close_r+0x34>
  804610:	88800015 	stw	r2,0(r17)
  804614:	1805883a 	mov	r2,r3
  804618:	dfc00217 	ldw	ra,8(sp)
  80461c:	dc400117 	ldw	r17,4(sp)
  804620:	dc000017 	ldw	r16,0(sp)
  804624:	dec00304 	addi	sp,sp,12
  804628:	f800283a 	ret

0080462c <quorem>:
  80462c:	28c00417 	ldw	r3,16(r5)
  804630:	20800417 	ldw	r2,16(r4)
  804634:	defff604 	addi	sp,sp,-40
  804638:	ddc00715 	stw	r23,28(sp)
  80463c:	dd400515 	stw	r21,20(sp)
  804640:	dfc00915 	stw	ra,36(sp)
  804644:	df000815 	stw	fp,32(sp)
  804648:	dd800615 	stw	r22,24(sp)
  80464c:	dd000415 	stw	r20,16(sp)
  804650:	dcc00315 	stw	r19,12(sp)
  804654:	dc800215 	stw	r18,8(sp)
  804658:	dc400115 	stw	r17,4(sp)
  80465c:	dc000015 	stw	r16,0(sp)
  804660:	202f883a 	mov	r23,r4
  804664:	282b883a 	mov	r21,r5
  804668:	10c07416 	blt	r2,r3,80483c <quorem+0x210>
  80466c:	1c7fffc4 	addi	r17,r3,-1
  804670:	8c45883a 	add	r2,r17,r17
  804674:	1085883a 	add	r2,r2,r2
  804678:	2c000504 	addi	r16,r5,20
  80467c:	24c00504 	addi	r19,r4,20
  804680:	14ed883a 	add	r22,r2,r19
  804684:	80a5883a 	add	r18,r16,r2
  804688:	b7000017 	ldw	fp,0(r22)
  80468c:	91400017 	ldw	r5,0(r18)
  804690:	e009883a 	mov	r4,fp
  804694:	29400044 	addi	r5,r5,1
  804698:	0809d780 	call	809d78 <__udivsi3>
  80469c:	1029883a 	mov	r20,r2
  8046a0:	10003c1e 	bne	r2,zero,804794 <quorem+0x168>
  8046a4:	a80b883a 	mov	r5,r21
  8046a8:	b809883a 	mov	r4,r23
  8046ac:	08068a00 	call	8068a0 <__mcmp>
  8046b0:	10002b16 	blt	r2,zero,804760 <quorem+0x134>
  8046b4:	a5000044 	addi	r20,r20,1
  8046b8:	980f883a 	mov	r7,r19
  8046bc:	0011883a 	mov	r8,zero
  8046c0:	0009883a 	mov	r4,zero
  8046c4:	81400017 	ldw	r5,0(r16)
  8046c8:	38c00017 	ldw	r3,0(r7)
  8046cc:	84000104 	addi	r16,r16,4
  8046d0:	28bfffcc 	andi	r2,r5,65535
  8046d4:	2085883a 	add	r2,r4,r2
  8046d8:	11bfffcc 	andi	r6,r2,65535
  8046dc:	193fffcc 	andi	r4,r3,65535
  8046e0:	1004d43a 	srli	r2,r2,16
  8046e4:	280ad43a 	srli	r5,r5,16
  8046e8:	2189c83a 	sub	r4,r4,r6
  8046ec:	2209883a 	add	r4,r4,r8
  8046f0:	1806d43a 	srli	r3,r3,16
  8046f4:	288b883a 	add	r5,r5,r2
  8046f8:	200dd43a 	srai	r6,r4,16
  8046fc:	28bfffcc 	andi	r2,r5,65535
  804700:	1887c83a 	sub	r3,r3,r2
  804704:	1987883a 	add	r3,r3,r6
  804708:	3900000d 	sth	r4,0(r7)
  80470c:	38c0008d 	sth	r3,2(r7)
  804710:	2808d43a 	srli	r4,r5,16
  804714:	39c00104 	addi	r7,r7,4
  804718:	1811d43a 	srai	r8,r3,16
  80471c:	943fe92e 	bgeu	r18,r16,8046c4 <quorem+0x98>
  804720:	8c45883a 	add	r2,r17,r17
  804724:	1085883a 	add	r2,r2,r2
  804728:	9885883a 	add	r2,r19,r2
  80472c:	10c00017 	ldw	r3,0(r2)
  804730:	18000b1e 	bne	r3,zero,804760 <quorem+0x134>
  804734:	113fff04 	addi	r4,r2,-4
  804738:	9900082e 	bgeu	r19,r4,80475c <quorem+0x130>
  80473c:	10bfff17 	ldw	r2,-4(r2)
  804740:	10000326 	beq	r2,zero,804750 <quorem+0x124>
  804744:	00000506 	br	80475c <quorem+0x130>
  804748:	20800017 	ldw	r2,0(r4)
  80474c:	1000031e 	bne	r2,zero,80475c <quorem+0x130>
  804750:	213fff04 	addi	r4,r4,-4
  804754:	8c7fffc4 	addi	r17,r17,-1
  804758:	993ffb36 	bltu	r19,r4,804748 <quorem+0x11c>
  80475c:	bc400415 	stw	r17,16(r23)
  804760:	a005883a 	mov	r2,r20
  804764:	dfc00917 	ldw	ra,36(sp)
  804768:	df000817 	ldw	fp,32(sp)
  80476c:	ddc00717 	ldw	r23,28(sp)
  804770:	dd800617 	ldw	r22,24(sp)
  804774:	dd400517 	ldw	r21,20(sp)
  804778:	dd000417 	ldw	r20,16(sp)
  80477c:	dcc00317 	ldw	r19,12(sp)
  804780:	dc800217 	ldw	r18,8(sp)
  804784:	dc400117 	ldw	r17,4(sp)
  804788:	dc000017 	ldw	r16,0(sp)
  80478c:	dec00a04 	addi	sp,sp,40
  804790:	f800283a 	ret
  804794:	980f883a 	mov	r7,r19
  804798:	8011883a 	mov	r8,r16
  80479c:	0013883a 	mov	r9,zero
  8047a0:	000d883a 	mov	r6,zero
  8047a4:	40c00017 	ldw	r3,0(r8)
  8047a8:	39000017 	ldw	r4,0(r7)
  8047ac:	42000104 	addi	r8,r8,4
  8047b0:	18bfffcc 	andi	r2,r3,65535
  8047b4:	a085383a 	mul	r2,r20,r2
  8047b8:	1806d43a 	srli	r3,r3,16
  8047bc:	217fffcc 	andi	r5,r4,65535
  8047c0:	3085883a 	add	r2,r6,r2
  8047c4:	11bfffcc 	andi	r6,r2,65535
  8047c8:	a0c7383a 	mul	r3,r20,r3
  8047cc:	1004d43a 	srli	r2,r2,16
  8047d0:	298bc83a 	sub	r5,r5,r6
  8047d4:	2a4b883a 	add	r5,r5,r9
  8047d8:	2008d43a 	srli	r4,r4,16
  8047dc:	1887883a 	add	r3,r3,r2
  8047e0:	280dd43a 	srai	r6,r5,16
  8047e4:	18bfffcc 	andi	r2,r3,65535
  8047e8:	2089c83a 	sub	r4,r4,r2
  8047ec:	2189883a 	add	r4,r4,r6
  8047f0:	3900008d 	sth	r4,2(r7)
  8047f4:	3940000d 	sth	r5,0(r7)
  8047f8:	180cd43a 	srli	r6,r3,16
  8047fc:	39c00104 	addi	r7,r7,4
  804800:	2013d43a 	srai	r9,r4,16
  804804:	923fe72e 	bgeu	r18,r8,8047a4 <quorem+0x178>
  804808:	e03fa61e 	bne	fp,zero,8046a4 <quorem+0x78>
  80480c:	b0ffff04 	addi	r3,r22,-4
  804810:	98c0082e 	bgeu	r19,r3,804834 <quorem+0x208>
  804814:	b0bfff17 	ldw	r2,-4(r22)
  804818:	10000326 	beq	r2,zero,804828 <quorem+0x1fc>
  80481c:	00000506 	br	804834 <quorem+0x208>
  804820:	18800017 	ldw	r2,0(r3)
  804824:	1000031e 	bne	r2,zero,804834 <quorem+0x208>
  804828:	18ffff04 	addi	r3,r3,-4
  80482c:	8c7fffc4 	addi	r17,r17,-1
  804830:	98fffb36 	bltu	r19,r3,804820 <quorem+0x1f4>
  804834:	bc400415 	stw	r17,16(r23)
  804838:	003f9a06 	br	8046a4 <quorem+0x78>
  80483c:	0005883a 	mov	r2,zero
  804840:	003fc806 	br	804764 <quorem+0x138>

00804844 <_dtoa_r>:
  804844:	22001017 	ldw	r8,64(r4)
  804848:	deffda04 	addi	sp,sp,-152
  80484c:	dd402115 	stw	r21,132(sp)
  804850:	dd002015 	stw	r20,128(sp)
  804854:	dc801e15 	stw	r18,120(sp)
  804858:	dc401d15 	stw	r17,116(sp)
  80485c:	dfc02515 	stw	ra,148(sp)
  804860:	df002415 	stw	fp,144(sp)
  804864:	ddc02315 	stw	r23,140(sp)
  804868:	dd802215 	stw	r22,136(sp)
  80486c:	dcc01f15 	stw	r19,124(sp)
  804870:	dc001c15 	stw	r16,112(sp)
  804874:	d9001615 	stw	r4,88(sp)
  804878:	3023883a 	mov	r17,r6
  80487c:	2829883a 	mov	r20,r5
  804880:	d9c01715 	stw	r7,92(sp)
  804884:	dc802817 	ldw	r18,160(sp)
  804888:	302b883a 	mov	r21,r6
  80488c:	40000a26 	beq	r8,zero,8048b8 <_dtoa_r+0x74>
  804890:	20801117 	ldw	r2,68(r4)
  804894:	400b883a 	mov	r5,r8
  804898:	40800115 	stw	r2,4(r8)
  80489c:	20c01117 	ldw	r3,68(r4)
  8048a0:	00800044 	movi	r2,1
  8048a4:	10c4983a 	sll	r2,r2,r3
  8048a8:	40800215 	stw	r2,8(r8)
  8048ac:	08067440 	call	806744 <_Bfree>
  8048b0:	d8c01617 	ldw	r3,88(sp)
  8048b4:	18001015 	stw	zero,64(r3)
  8048b8:	8800a316 	blt	r17,zero,804b48 <_dtoa_r+0x304>
  8048bc:	90000015 	stw	zero,0(r18)
  8048c0:	a8dffc2c 	andhi	r3,r21,32752
  8048c4:	009ffc34 	movhi	r2,32752
  8048c8:	18809126 	beq	r3,r2,804b10 <_dtoa_r+0x2cc>
  8048cc:	000d883a 	mov	r6,zero
  8048d0:	000f883a 	mov	r7,zero
  8048d4:	a009883a 	mov	r4,r20
  8048d8:	a80b883a 	mov	r5,r21
  8048dc:	dd001215 	stw	r20,72(sp)
  8048e0:	dd401315 	stw	r21,76(sp)
  8048e4:	08096b80 	call	8096b8 <__nedf2>
  8048e8:	1000171e 	bne	r2,zero,804948 <_dtoa_r+0x104>
  8048ec:	d9802717 	ldw	r6,156(sp)
  8048f0:	00800044 	movi	r2,1
  8048f4:	30800015 	stw	r2,0(r6)
  8048f8:	d8802917 	ldw	r2,164(sp)
  8048fc:	10029b26 	beq	r2,zero,80536c <_dtoa_r+0xb28>
  804900:	d9002917 	ldw	r4,164(sp)
  804904:	00802074 	movhi	r2,129
  804908:	10bae144 	addi	r2,r2,-5243
  80490c:	10ffffc4 	addi	r3,r2,-1
  804910:	20800015 	stw	r2,0(r4)
  804914:	1805883a 	mov	r2,r3
  804918:	dfc02517 	ldw	ra,148(sp)
  80491c:	df002417 	ldw	fp,144(sp)
  804920:	ddc02317 	ldw	r23,140(sp)
  804924:	dd802217 	ldw	r22,136(sp)
  804928:	dd402117 	ldw	r21,132(sp)
  80492c:	dd002017 	ldw	r20,128(sp)
  804930:	dcc01f17 	ldw	r19,124(sp)
  804934:	dc801e17 	ldw	r18,120(sp)
  804938:	dc401d17 	ldw	r17,116(sp)
  80493c:	dc001c17 	ldw	r16,112(sp)
  804940:	dec02604 	addi	sp,sp,152
  804944:	f800283a 	ret
  804948:	d9001617 	ldw	r4,88(sp)
  80494c:	d9401217 	ldw	r5,72(sp)
  804950:	d8800104 	addi	r2,sp,4
  804954:	a80d883a 	mov	r6,r21
  804958:	d9c00204 	addi	r7,sp,8
  80495c:	d8800015 	stw	r2,0(sp)
  804960:	0806d800 	call	806d80 <__d2b>
  804964:	d8800715 	stw	r2,28(sp)
  804968:	a804d53a 	srli	r2,r21,20
  80496c:	1101ffcc 	andi	r4,r2,2047
  804970:	20008626 	beq	r4,zero,804b8c <_dtoa_r+0x348>
  804974:	d8c01217 	ldw	r3,72(sp)
  804978:	00800434 	movhi	r2,16
  80497c:	10bfffc4 	addi	r2,r2,-1
  804980:	ddc00117 	ldw	r23,4(sp)
  804984:	a884703a 	and	r2,r21,r2
  804988:	1811883a 	mov	r8,r3
  80498c:	124ffc34 	orhi	r9,r2,16368
  804990:	25bf0044 	addi	r22,r4,-1023
  804994:	d8000815 	stw	zero,32(sp)
  804998:	0005883a 	mov	r2,zero
  80499c:	00cffe34 	movhi	r3,16376
  8049a0:	480b883a 	mov	r5,r9
  8049a4:	4009883a 	mov	r4,r8
  8049a8:	180f883a 	mov	r7,r3
  8049ac:	100d883a 	mov	r6,r2
  8049b0:	0808f200 	call	808f20 <__subdf3>
  8049b4:	0218dbf4 	movhi	r8,25455
  8049b8:	4210d844 	addi	r8,r8,17249
  8049bc:	024ff4f4 	movhi	r9,16339
  8049c0:	4a61e9c4 	addi	r9,r9,-30809
  8049c4:	480f883a 	mov	r7,r9
  8049c8:	400d883a 	mov	r6,r8
  8049cc:	180b883a 	mov	r5,r3
  8049d0:	1009883a 	mov	r4,r2
  8049d4:	08090140 	call	809014 <__muldf3>
  8049d8:	0222d874 	movhi	r8,35681
  8049dc:	42322cc4 	addi	r8,r8,-14157
  8049e0:	024ff1f4 	movhi	r9,16327
  8049e4:	4a628a04 	addi	r9,r9,-30168
  8049e8:	480f883a 	mov	r7,r9
  8049ec:	400d883a 	mov	r6,r8
  8049f0:	180b883a 	mov	r5,r3
  8049f4:	1009883a 	mov	r4,r2
  8049f8:	0808fa00 	call	808fa0 <__adddf3>
  8049fc:	b009883a 	mov	r4,r22
  804a00:	1021883a 	mov	r16,r2
  804a04:	1823883a 	mov	r17,r3
  804a08:	08098d80 	call	8098d8 <__floatsidf>
  804a0c:	021427f4 	movhi	r8,20639
  804a10:	421e7ec4 	addi	r8,r8,31227
  804a14:	024ff4f4 	movhi	r9,16339
  804a18:	4a5104c4 	addi	r9,r9,17427
  804a1c:	480f883a 	mov	r7,r9
  804a20:	400d883a 	mov	r6,r8
  804a24:	180b883a 	mov	r5,r3
  804a28:	1009883a 	mov	r4,r2
  804a2c:	08090140 	call	809014 <__muldf3>
  804a30:	180f883a 	mov	r7,r3
  804a34:	880b883a 	mov	r5,r17
  804a38:	100d883a 	mov	r6,r2
  804a3c:	8009883a 	mov	r4,r16
  804a40:	0808fa00 	call	808fa0 <__adddf3>
  804a44:	1009883a 	mov	r4,r2
  804a48:	180b883a 	mov	r5,r3
  804a4c:	1021883a 	mov	r16,r2
  804a50:	1823883a 	mov	r17,r3
  804a54:	08099d00 	call	8099d0 <__fixdfsi>
  804a58:	000d883a 	mov	r6,zero
  804a5c:	000f883a 	mov	r7,zero
  804a60:	8009883a 	mov	r4,r16
  804a64:	880b883a 	mov	r5,r17
  804a68:	d8800d15 	stw	r2,52(sp)
  804a6c:	08098500 	call	809850 <__ltdf2>
  804a70:	10031716 	blt	r2,zero,8056d0 <_dtoa_r+0xe8c>
  804a74:	d8c00d17 	ldw	r3,52(sp)
  804a78:	00800584 	movi	r2,22
  804a7c:	10c1482e 	bgeu	r2,r3,804fa0 <_dtoa_r+0x75c>
  804a80:	01000044 	movi	r4,1
  804a84:	d9000c15 	stw	r4,48(sp)
  804a88:	bd85c83a 	sub	r2,r23,r22
  804a8c:	11bfffc4 	addi	r6,r2,-1
  804a90:	30030b16 	blt	r6,zero,8056c0 <_dtoa_r+0xe7c>
  804a94:	d9800a15 	stw	r6,40(sp)
  804a98:	d8001115 	stw	zero,68(sp)
  804a9c:	d8c00d17 	ldw	r3,52(sp)
  804aa0:	1802ff16 	blt	r3,zero,8056a0 <_dtoa_r+0xe5c>
  804aa4:	d9000a17 	ldw	r4,40(sp)
  804aa8:	d8c00915 	stw	r3,36(sp)
  804aac:	d8001015 	stw	zero,64(sp)
  804ab0:	20c9883a 	add	r4,r4,r3
  804ab4:	d9000a15 	stw	r4,40(sp)
  804ab8:	d9001717 	ldw	r4,92(sp)
  804abc:	00800244 	movi	r2,9
  804ac0:	11004636 	bltu	r2,r4,804bdc <_dtoa_r+0x398>
  804ac4:	00800144 	movi	r2,5
  804ac8:	11020416 	blt	r2,r4,8052dc <_dtoa_r+0xa98>
  804acc:	04400044 	movi	r17,1
  804ad0:	d8c01717 	ldw	r3,92(sp)
  804ad4:	00800144 	movi	r2,5
  804ad8:	10c1ed36 	bltu	r2,r3,805290 <_dtoa_r+0xa4c>
  804adc:	18c5883a 	add	r2,r3,r3
  804ae0:	1085883a 	add	r2,r2,r2
  804ae4:	00c02034 	movhi	r3,128
  804ae8:	18d2be04 	addi	r3,r3,19192
  804aec:	10c5883a 	add	r2,r2,r3
  804af0:	11000017 	ldw	r4,0(r2)
  804af4:	2000683a 	jmp	r4
  804af8:	00804be4 	muli	r2,zero,303
  804afc:	00804be4 	muli	r2,zero,303
  804b00:	008055e4 	muli	r2,zero,343
  804b04:	008055bc 	xorhi	r2,zero,342
  804b08:	00805600 	call	80560 <__reset-0x77faa0>
  804b0c:	0080560c 	andi	r2,zero,344
  804b10:	d9002717 	ldw	r4,156(sp)
  804b14:	0089c3c4 	movi	r2,9999
  804b18:	20800015 	stw	r2,0(r4)
  804b1c:	a0001026 	beq	r20,zero,804b60 <_dtoa_r+0x31c>
  804b20:	00c02074 	movhi	r3,129
  804b24:	18faed04 	addi	r3,r3,-5196
  804b28:	d9802917 	ldw	r6,164(sp)
  804b2c:	303f7926 	beq	r6,zero,804914 <_dtoa_r+0xd0>
  804b30:	188000c7 	ldb	r2,3(r3)
  804b34:	190000c4 	addi	r4,r3,3
  804b38:	1000101e 	bne	r2,zero,804b7c <_dtoa_r+0x338>
  804b3c:	d8802917 	ldw	r2,164(sp)
  804b40:	11000015 	stw	r4,0(r2)
  804b44:	003f7306 	br	804914 <_dtoa_r+0xd0>
  804b48:	00a00034 	movhi	r2,32768
  804b4c:	10bfffc4 	addi	r2,r2,-1
  804b50:	00c00044 	movi	r3,1
  804b54:	88aa703a 	and	r21,r17,r2
  804b58:	90c00015 	stw	r3,0(r18)
  804b5c:	003f5806 	br	8048c0 <_dtoa_r+0x7c>
  804b60:	00800434 	movhi	r2,16
  804b64:	10bfffc4 	addi	r2,r2,-1
  804b68:	a884703a 	and	r2,r21,r2
  804b6c:	103fec1e 	bne	r2,zero,804b20 <_dtoa_r+0x2dc>
  804b70:	00c02074 	movhi	r3,129
  804b74:	18faea04 	addi	r3,r3,-5208
  804b78:	003feb06 	br	804b28 <_dtoa_r+0x2e4>
  804b7c:	d8802917 	ldw	r2,164(sp)
  804b80:	19000204 	addi	r4,r3,8
  804b84:	11000015 	stw	r4,0(r2)
  804b88:	003f6206 	br	804914 <_dtoa_r+0xd0>
  804b8c:	ddc00117 	ldw	r23,4(sp)
  804b90:	d8800217 	ldw	r2,8(sp)
  804b94:	01000804 	movi	r4,32
  804b98:	b8c10c84 	addi	r3,r23,1074
  804b9c:	18a3883a 	add	r17,r3,r2
  804ba0:	2441b80e 	bge	r4,r17,805284 <_dtoa_r+0xa40>
  804ba4:	00c01004 	movi	r3,64
  804ba8:	1c47c83a 	sub	r3,r3,r17
  804bac:	88bff804 	addi	r2,r17,-32
  804bb0:	a8c6983a 	sll	r3,r21,r3
  804bb4:	a084d83a 	srl	r2,r20,r2
  804bb8:	1888b03a 	or	r4,r3,r2
  804bbc:	0809aa80 	call	809aa8 <__floatunsidf>
  804bc0:	1011883a 	mov	r8,r2
  804bc4:	00bf8434 	movhi	r2,65040
  804bc8:	01000044 	movi	r4,1
  804bcc:	10d3883a 	add	r9,r2,r3
  804bd0:	8dbef344 	addi	r22,r17,-1075
  804bd4:	d9000815 	stw	r4,32(sp)
  804bd8:	003f6f06 	br	804998 <_dtoa_r+0x154>
  804bdc:	d8001715 	stw	zero,92(sp)
  804be0:	04400044 	movi	r17,1
  804be4:	00bfffc4 	movi	r2,-1
  804be8:	00c00044 	movi	r3,1
  804bec:	d8800e15 	stw	r2,56(sp)
  804bf0:	d8002615 	stw	zero,152(sp)
  804bf4:	d8800f15 	stw	r2,60(sp)
  804bf8:	d8c00b15 	stw	r3,44(sp)
  804bfc:	1021883a 	mov	r16,r2
  804c00:	d8801617 	ldw	r2,88(sp)
  804c04:	10001115 	stw	zero,68(r2)
  804c08:	d8801617 	ldw	r2,88(sp)
  804c0c:	11401117 	ldw	r5,68(r2)
  804c10:	1009883a 	mov	r4,r2
  804c14:	0806cc40 	call	806cc4 <_Balloc>
  804c18:	d8c01617 	ldw	r3,88(sp)
  804c1c:	d8800515 	stw	r2,20(sp)
  804c20:	18801015 	stw	r2,64(r3)
  804c24:	00800384 	movi	r2,14
  804c28:	14006836 	bltu	r2,r16,804dcc <_dtoa_r+0x588>
  804c2c:	8805003a 	cmpeq	r2,r17,zero
  804c30:	1000661e 	bne	r2,zero,804dcc <_dtoa_r+0x588>
  804c34:	d9000d17 	ldw	r4,52(sp)
  804c38:	0102300e 	bge	zero,r4,8054fc <_dtoa_r+0xcb8>
  804c3c:	208003cc 	andi	r2,r4,15
  804c40:	100490fa 	slli	r2,r2,3
  804c44:	2025d13a 	srai	r18,r4,4
  804c48:	00c02074 	movhi	r3,129
  804c4c:	18fafe04 	addi	r3,r3,-5128
  804c50:	10c5883a 	add	r2,r2,r3
  804c54:	90c0040c 	andi	r3,r18,16
  804c58:	14000017 	ldw	r16,0(r2)
  804c5c:	14400117 	ldw	r17,4(r2)
  804c60:	18036a1e 	bne	r3,zero,805a0c <_dtoa_r+0x11c8>
  804c64:	05800084 	movi	r22,2
  804c68:	90001026 	beq	r18,zero,804cac <_dtoa_r+0x468>
  804c6c:	04c02074 	movhi	r19,129
  804c70:	9cfb3004 	addi	r19,r19,-4928
  804c74:	9080004c 	andi	r2,r18,1
  804c78:	1005003a 	cmpeq	r2,r2,zero
  804c7c:	1000081e 	bne	r2,zero,804ca0 <_dtoa_r+0x45c>
  804c80:	99800017 	ldw	r6,0(r19)
  804c84:	99c00117 	ldw	r7,4(r19)
  804c88:	880b883a 	mov	r5,r17
  804c8c:	8009883a 	mov	r4,r16
  804c90:	08090140 	call	809014 <__muldf3>
  804c94:	1021883a 	mov	r16,r2
  804c98:	b5800044 	addi	r22,r22,1
  804c9c:	1823883a 	mov	r17,r3
  804ca0:	9025d07a 	srai	r18,r18,1
  804ca4:	9cc00204 	addi	r19,r19,8
  804ca8:	903ff21e 	bne	r18,zero,804c74 <_dtoa_r+0x430>
  804cac:	a80b883a 	mov	r5,r21
  804cb0:	a009883a 	mov	r4,r20
  804cb4:	880f883a 	mov	r7,r17
  804cb8:	800d883a 	mov	r6,r16
  804cbc:	08093d80 	call	8093d8 <__divdf3>
  804cc0:	1029883a 	mov	r20,r2
  804cc4:	182b883a 	mov	r21,r3
  804cc8:	d8c00c17 	ldw	r3,48(sp)
  804ccc:	1805003a 	cmpeq	r2,r3,zero
  804cd0:	1000081e 	bne	r2,zero,804cf4 <_dtoa_r+0x4b0>
  804cd4:	0005883a 	mov	r2,zero
  804cd8:	00cffc34 	movhi	r3,16368
  804cdc:	180f883a 	mov	r7,r3
  804ce0:	a009883a 	mov	r4,r20
  804ce4:	a80b883a 	mov	r5,r21
  804ce8:	100d883a 	mov	r6,r2
  804cec:	08098500 	call	809850 <__ltdf2>
  804cf0:	1003fe16 	blt	r2,zero,805cec <_dtoa_r+0x14a8>
  804cf4:	b009883a 	mov	r4,r22
  804cf8:	08098d80 	call	8098d8 <__floatsidf>
  804cfc:	180b883a 	mov	r5,r3
  804d00:	1009883a 	mov	r4,r2
  804d04:	a00d883a 	mov	r6,r20
  804d08:	a80f883a 	mov	r7,r21
  804d0c:	08090140 	call	809014 <__muldf3>
  804d10:	0011883a 	mov	r8,zero
  804d14:	02500734 	movhi	r9,16412
  804d18:	1009883a 	mov	r4,r2
  804d1c:	180b883a 	mov	r5,r3
  804d20:	480f883a 	mov	r7,r9
  804d24:	400d883a 	mov	r6,r8
  804d28:	0808fa00 	call	808fa0 <__adddf3>
  804d2c:	d9000f17 	ldw	r4,60(sp)
  804d30:	102d883a 	mov	r22,r2
  804d34:	00bf3034 	movhi	r2,64704
  804d38:	18b9883a 	add	fp,r3,r2
  804d3c:	e02f883a 	mov	r23,fp
  804d40:	20028f1e 	bne	r4,zero,805780 <_dtoa_r+0xf3c>
  804d44:	0005883a 	mov	r2,zero
  804d48:	00d00534 	movhi	r3,16404
  804d4c:	a009883a 	mov	r4,r20
  804d50:	a80b883a 	mov	r5,r21
  804d54:	180f883a 	mov	r7,r3
  804d58:	100d883a 	mov	r6,r2
  804d5c:	0808f200 	call	808f20 <__subdf3>
  804d60:	1009883a 	mov	r4,r2
  804d64:	e00f883a 	mov	r7,fp
  804d68:	180b883a 	mov	r5,r3
  804d6c:	b00d883a 	mov	r6,r22
  804d70:	1025883a 	mov	r18,r2
  804d74:	1827883a 	mov	r19,r3
  804d78:	08097400 	call	809740 <__gtdf2>
  804d7c:	00834f16 	blt	zero,r2,805abc <_dtoa_r+0x1278>
  804d80:	e0e0003c 	xorhi	r3,fp,32768
  804d84:	9009883a 	mov	r4,r18
  804d88:	980b883a 	mov	r5,r19
  804d8c:	180f883a 	mov	r7,r3
  804d90:	b00d883a 	mov	r6,r22
  804d94:	08098500 	call	809850 <__ltdf2>
  804d98:	1000080e 	bge	r2,zero,804dbc <_dtoa_r+0x578>
  804d9c:	0027883a 	mov	r19,zero
  804da0:	0025883a 	mov	r18,zero
  804da4:	d8802617 	ldw	r2,152(sp)
  804da8:	df000517 	ldw	fp,20(sp)
  804dac:	d8000615 	stw	zero,24(sp)
  804db0:	0084303a 	nor	r2,zero,r2
  804db4:	d8800d15 	stw	r2,52(sp)
  804db8:	00019b06 	br	805428 <_dtoa_r+0xbe4>
  804dbc:	d9801217 	ldw	r6,72(sp)
  804dc0:	d8801317 	ldw	r2,76(sp)
  804dc4:	3029883a 	mov	r20,r6
  804dc8:	102b883a 	mov	r21,r2
  804dcc:	d8c00217 	ldw	r3,8(sp)
  804dd0:	18008516 	blt	r3,zero,804fe8 <_dtoa_r+0x7a4>
  804dd4:	d9000d17 	ldw	r4,52(sp)
  804dd8:	00800384 	movi	r2,14
  804ddc:	11008216 	blt	r2,r4,804fe8 <_dtoa_r+0x7a4>
  804de0:	200490fa 	slli	r2,r4,3
  804de4:	d9802617 	ldw	r6,152(sp)
  804de8:	00c02074 	movhi	r3,129
  804dec:	18fafe04 	addi	r3,r3,-5128
  804df0:	10c5883a 	add	r2,r2,r3
  804df4:	14800017 	ldw	r18,0(r2)
  804df8:	14c00117 	ldw	r19,4(r2)
  804dfc:	30031e16 	blt	r6,zero,805a78 <_dtoa_r+0x1234>
  804e00:	d9000517 	ldw	r4,20(sp)
  804e04:	d8c00f17 	ldw	r3,60(sp)
  804e08:	a823883a 	mov	r17,r21
  804e0c:	a021883a 	mov	r16,r20
  804e10:	192b883a 	add	r21,r3,r4
  804e14:	2039883a 	mov	fp,r4
  804e18:	00000f06 	br	804e58 <_dtoa_r+0x614>
  804e1c:	0005883a 	mov	r2,zero
  804e20:	00d00934 	movhi	r3,16420
  804e24:	5009883a 	mov	r4,r10
  804e28:	580b883a 	mov	r5,r11
  804e2c:	180f883a 	mov	r7,r3
  804e30:	100d883a 	mov	r6,r2
  804e34:	08090140 	call	809014 <__muldf3>
  804e38:	180b883a 	mov	r5,r3
  804e3c:	000d883a 	mov	r6,zero
  804e40:	000f883a 	mov	r7,zero
  804e44:	1009883a 	mov	r4,r2
  804e48:	1021883a 	mov	r16,r2
  804e4c:	1823883a 	mov	r17,r3
  804e50:	08096b80 	call	8096b8 <__nedf2>
  804e54:	10004526 	beq	r2,zero,804f6c <_dtoa_r+0x728>
  804e58:	900d883a 	mov	r6,r18
  804e5c:	980f883a 	mov	r7,r19
  804e60:	8009883a 	mov	r4,r16
  804e64:	880b883a 	mov	r5,r17
  804e68:	08093d80 	call	8093d8 <__divdf3>
  804e6c:	180b883a 	mov	r5,r3
  804e70:	1009883a 	mov	r4,r2
  804e74:	08099d00 	call	8099d0 <__fixdfsi>
  804e78:	1009883a 	mov	r4,r2
  804e7c:	1029883a 	mov	r20,r2
  804e80:	08098d80 	call	8098d8 <__floatsidf>
  804e84:	180f883a 	mov	r7,r3
  804e88:	9009883a 	mov	r4,r18
  804e8c:	980b883a 	mov	r5,r19
  804e90:	100d883a 	mov	r6,r2
  804e94:	08090140 	call	809014 <__muldf3>
  804e98:	180f883a 	mov	r7,r3
  804e9c:	880b883a 	mov	r5,r17
  804ea0:	8009883a 	mov	r4,r16
  804ea4:	100d883a 	mov	r6,r2
  804ea8:	0808f200 	call	808f20 <__subdf3>
  804eac:	1015883a 	mov	r10,r2
  804eb0:	a0800c04 	addi	r2,r20,48
  804eb4:	e0800005 	stb	r2,0(fp)
  804eb8:	e7000044 	addi	fp,fp,1
  804ebc:	1817883a 	mov	r11,r3
  804ec0:	e57fd61e 	bne	fp,r21,804e1c <_dtoa_r+0x5d8>
  804ec4:	500d883a 	mov	r6,r10
  804ec8:	180f883a 	mov	r7,r3
  804ecc:	5009883a 	mov	r4,r10
  804ed0:	180b883a 	mov	r5,r3
  804ed4:	0808fa00 	call	808fa0 <__adddf3>
  804ed8:	100d883a 	mov	r6,r2
  804edc:	9009883a 	mov	r4,r18
  804ee0:	980b883a 	mov	r5,r19
  804ee4:	180f883a 	mov	r7,r3
  804ee8:	1021883a 	mov	r16,r2
  804eec:	1823883a 	mov	r17,r3
  804ef0:	08098500 	call	809850 <__ltdf2>
  804ef4:	10000816 	blt	r2,zero,804f18 <_dtoa_r+0x6d4>
  804ef8:	980b883a 	mov	r5,r19
  804efc:	800d883a 	mov	r6,r16
  804f00:	880f883a 	mov	r7,r17
  804f04:	9009883a 	mov	r4,r18
  804f08:	08096300 	call	809630 <__eqdf2>
  804f0c:	1000171e 	bne	r2,zero,804f6c <_dtoa_r+0x728>
  804f10:	a080004c 	andi	r2,r20,1
  804f14:	10001526 	beq	r2,zero,804f6c <_dtoa_r+0x728>
  804f18:	d8800d17 	ldw	r2,52(sp)
  804f1c:	d8800415 	stw	r2,16(sp)
  804f20:	e009883a 	mov	r4,fp
  804f24:	213fffc4 	addi	r4,r4,-1
  804f28:	20c00007 	ldb	r3,0(r4)
  804f2c:	00800e44 	movi	r2,57
  804f30:	1880081e 	bne	r3,r2,804f54 <_dtoa_r+0x710>
  804f34:	d8800517 	ldw	r2,20(sp)
  804f38:	113ffa1e 	bne	r2,r4,804f24 <_dtoa_r+0x6e0>
  804f3c:	d8c00417 	ldw	r3,16(sp)
  804f40:	d9800517 	ldw	r6,20(sp)
  804f44:	00800c04 	movi	r2,48
  804f48:	18c00044 	addi	r3,r3,1
  804f4c:	d8c00415 	stw	r3,16(sp)
  804f50:	30800005 	stb	r2,0(r6)
  804f54:	20800003 	ldbu	r2,0(r4)
  804f58:	d8c00417 	ldw	r3,16(sp)
  804f5c:	27000044 	addi	fp,r4,1
  804f60:	10800044 	addi	r2,r2,1
  804f64:	d8c00d15 	stw	r3,52(sp)
  804f68:	20800005 	stb	r2,0(r4)
  804f6c:	d9001617 	ldw	r4,88(sp)
  804f70:	d9400717 	ldw	r5,28(sp)
  804f74:	08067440 	call	806744 <_Bfree>
  804f78:	e0000005 	stb	zero,0(fp)
  804f7c:	d9800d17 	ldw	r6,52(sp)
  804f80:	d8c02717 	ldw	r3,156(sp)
  804f84:	d9002917 	ldw	r4,164(sp)
  804f88:	30800044 	addi	r2,r6,1
  804f8c:	18800015 	stw	r2,0(r3)
  804f90:	20029c26 	beq	r4,zero,805a04 <_dtoa_r+0x11c0>
  804f94:	d8c00517 	ldw	r3,20(sp)
  804f98:	27000015 	stw	fp,0(r4)
  804f9c:	003e5d06 	br	804914 <_dtoa_r+0xd0>
  804fa0:	d9800d17 	ldw	r6,52(sp)
  804fa4:	00c02074 	movhi	r3,129
  804fa8:	18fafe04 	addi	r3,r3,-5128
  804fac:	d9001217 	ldw	r4,72(sp)
  804fb0:	300490fa 	slli	r2,r6,3
  804fb4:	d9401317 	ldw	r5,76(sp)
  804fb8:	10c5883a 	add	r2,r2,r3
  804fbc:	12000017 	ldw	r8,0(r2)
  804fc0:	12400117 	ldw	r9,4(r2)
  804fc4:	400d883a 	mov	r6,r8
  804fc8:	480f883a 	mov	r7,r9
  804fcc:	08098500 	call	809850 <__ltdf2>
  804fd0:	1000030e 	bge	r2,zero,804fe0 <_dtoa_r+0x79c>
  804fd4:	d8800d17 	ldw	r2,52(sp)
  804fd8:	10bfffc4 	addi	r2,r2,-1
  804fdc:	d8800d15 	stw	r2,52(sp)
  804fe0:	d8000c15 	stw	zero,48(sp)
  804fe4:	003ea806 	br	804a88 <_dtoa_r+0x244>
  804fe8:	d9000b17 	ldw	r4,44(sp)
  804fec:	202cc03a 	cmpne	r22,r4,zero
  804ff0:	b000c71e 	bne	r22,zero,805310 <_dtoa_r+0xacc>
  804ff4:	dc001117 	ldw	r16,68(sp)
  804ff8:	dc801017 	ldw	r18,64(sp)
  804ffc:	0027883a 	mov	r19,zero
  805000:	04000b0e 	bge	zero,r16,805030 <_dtoa_r+0x7ec>
  805004:	d8c00a17 	ldw	r3,40(sp)
  805008:	00c0090e 	bge	zero,r3,805030 <_dtoa_r+0x7ec>
  80500c:	8005883a 	mov	r2,r16
  805010:	1c011316 	blt	r3,r16,805460 <_dtoa_r+0xc1c>
  805014:	d9000a17 	ldw	r4,40(sp)
  805018:	d9801117 	ldw	r6,68(sp)
  80501c:	80a1c83a 	sub	r16,r16,r2
  805020:	2089c83a 	sub	r4,r4,r2
  805024:	308dc83a 	sub	r6,r6,r2
  805028:	d9000a15 	stw	r4,40(sp)
  80502c:	d9801115 	stw	r6,68(sp)
  805030:	d8801017 	ldw	r2,64(sp)
  805034:	0080150e 	bge	zero,r2,80508c <_dtoa_r+0x848>
  805038:	d8c00b17 	ldw	r3,44(sp)
  80503c:	1805003a 	cmpeq	r2,r3,zero
  805040:	1001c91e 	bne	r2,zero,805768 <_dtoa_r+0xf24>
  805044:	04800e0e 	bge	zero,r18,805080 <_dtoa_r+0x83c>
  805048:	d9001617 	ldw	r4,88(sp)
  80504c:	980b883a 	mov	r5,r19
  805050:	900d883a 	mov	r6,r18
  805054:	08074f80 	call	8074f8 <__pow5mult>
  805058:	d9001617 	ldw	r4,88(sp)
  80505c:	d9800717 	ldw	r6,28(sp)
  805060:	100b883a 	mov	r5,r2
  805064:	1027883a 	mov	r19,r2
  805068:	08071d40 	call	8071d4 <__multiply>
  80506c:	d9001617 	ldw	r4,88(sp)
  805070:	d9400717 	ldw	r5,28(sp)
  805074:	1023883a 	mov	r17,r2
  805078:	08067440 	call	806744 <_Bfree>
  80507c:	dc400715 	stw	r17,28(sp)
  805080:	d9001017 	ldw	r4,64(sp)
  805084:	248dc83a 	sub	r6,r4,r18
  805088:	30010e1e 	bne	r6,zero,8054c4 <_dtoa_r+0xc80>
  80508c:	d9001617 	ldw	r4,88(sp)
  805090:	04400044 	movi	r17,1
  805094:	880b883a 	mov	r5,r17
  805098:	08073bc0 	call	8073bc <__i2b>
  80509c:	d9800917 	ldw	r6,36(sp)
  8050a0:	1025883a 	mov	r18,r2
  8050a4:	0180040e 	bge	zero,r6,8050b8 <_dtoa_r+0x874>
  8050a8:	d9001617 	ldw	r4,88(sp)
  8050ac:	100b883a 	mov	r5,r2
  8050b0:	08074f80 	call	8074f8 <__pow5mult>
  8050b4:	1025883a 	mov	r18,r2
  8050b8:	d8801717 	ldw	r2,92(sp)
  8050bc:	8880f30e 	bge	r17,r2,80548c <_dtoa_r+0xc48>
  8050c0:	0023883a 	mov	r17,zero
  8050c4:	d9800917 	ldw	r6,36(sp)
  8050c8:	30019e1e 	bne	r6,zero,805744 <_dtoa_r+0xf00>
  8050cc:	00c00044 	movi	r3,1
  8050d0:	d9000a17 	ldw	r4,40(sp)
  8050d4:	20c5883a 	add	r2,r4,r3
  8050d8:	10c007cc 	andi	r3,r2,31
  8050dc:	1800841e 	bne	r3,zero,8052f0 <_dtoa_r+0xaac>
  8050e0:	00800704 	movi	r2,28
  8050e4:	d9000a17 	ldw	r4,40(sp)
  8050e8:	d9801117 	ldw	r6,68(sp)
  8050ec:	80a1883a 	add	r16,r16,r2
  8050f0:	2089883a 	add	r4,r4,r2
  8050f4:	308d883a 	add	r6,r6,r2
  8050f8:	d9000a15 	stw	r4,40(sp)
  8050fc:	d9801115 	stw	r6,68(sp)
  805100:	d8801117 	ldw	r2,68(sp)
  805104:	0080050e 	bge	zero,r2,80511c <_dtoa_r+0x8d8>
  805108:	d9400717 	ldw	r5,28(sp)
  80510c:	d9001617 	ldw	r4,88(sp)
  805110:	100d883a 	mov	r6,r2
  805114:	08070880 	call	807088 <__lshift>
  805118:	d8800715 	stw	r2,28(sp)
  80511c:	d8c00a17 	ldw	r3,40(sp)
  805120:	00c0050e 	bge	zero,r3,805138 <_dtoa_r+0x8f4>
  805124:	d9001617 	ldw	r4,88(sp)
  805128:	900b883a 	mov	r5,r18
  80512c:	180d883a 	mov	r6,r3
  805130:	08070880 	call	807088 <__lshift>
  805134:	1025883a 	mov	r18,r2
  805138:	d9000c17 	ldw	r4,48(sp)
  80513c:	2005003a 	cmpeq	r2,r4,zero
  805140:	10016f26 	beq	r2,zero,805700 <_dtoa_r+0xebc>
  805144:	d9000f17 	ldw	r4,60(sp)
  805148:	0102170e 	bge	zero,r4,8059a8 <_dtoa_r+0x1164>
  80514c:	d9800b17 	ldw	r6,44(sp)
  805150:	3005003a 	cmpeq	r2,r6,zero
  805154:	1000881e 	bne	r2,zero,805378 <_dtoa_r+0xb34>
  805158:	0400050e 	bge	zero,r16,805170 <_dtoa_r+0x92c>
  80515c:	d9001617 	ldw	r4,88(sp)
  805160:	980b883a 	mov	r5,r19
  805164:	800d883a 	mov	r6,r16
  805168:	08070880 	call	807088 <__lshift>
  80516c:	1027883a 	mov	r19,r2
  805170:	8804c03a 	cmpne	r2,r17,zero
  805174:	1002541e 	bne	r2,zero,805ac8 <_dtoa_r+0x1284>
  805178:	980b883a 	mov	r5,r19
  80517c:	dd800517 	ldw	r22,20(sp)
  805180:	dcc00615 	stw	r19,24(sp)
  805184:	a700004c 	andi	fp,r20,1
  805188:	2827883a 	mov	r19,r5
  80518c:	d9000717 	ldw	r4,28(sp)
  805190:	900b883a 	mov	r5,r18
  805194:	080462c0 	call	80462c <quorem>
  805198:	d9000717 	ldw	r4,28(sp)
  80519c:	d9400617 	ldw	r5,24(sp)
  8051a0:	1023883a 	mov	r17,r2
  8051a4:	8dc00c04 	addi	r23,r17,48
  8051a8:	08068a00 	call	8068a0 <__mcmp>
  8051ac:	d9001617 	ldw	r4,88(sp)
  8051b0:	900b883a 	mov	r5,r18
  8051b4:	980d883a 	mov	r6,r19
  8051b8:	1029883a 	mov	r20,r2
  8051bc:	0806efc0 	call	806efc <__mdiff>
  8051c0:	102b883a 	mov	r21,r2
  8051c4:	10800317 	ldw	r2,12(r2)
  8051c8:	1001281e 	bne	r2,zero,80566c <_dtoa_r+0xe28>
  8051cc:	d9000717 	ldw	r4,28(sp)
  8051d0:	a80b883a 	mov	r5,r21
  8051d4:	08068a00 	call	8068a0 <__mcmp>
  8051d8:	d9001617 	ldw	r4,88(sp)
  8051dc:	1021883a 	mov	r16,r2
  8051e0:	a80b883a 	mov	r5,r21
  8051e4:	08067440 	call	806744 <_Bfree>
  8051e8:	8000041e 	bne	r16,zero,8051fc <_dtoa_r+0x9b8>
  8051ec:	d8801717 	ldw	r2,92(sp)
  8051f0:	1000021e 	bne	r2,zero,8051fc <_dtoa_r+0x9b8>
  8051f4:	e004c03a 	cmpne	r2,fp,zero
  8051f8:	10011726 	beq	r2,zero,805658 <_dtoa_r+0xe14>
  8051fc:	a0010616 	blt	r20,zero,805618 <_dtoa_r+0xdd4>
  805200:	a000041e 	bne	r20,zero,805214 <_dtoa_r+0x9d0>
  805204:	d8c01717 	ldw	r3,92(sp)
  805208:	1800021e 	bne	r3,zero,805214 <_dtoa_r+0x9d0>
  80520c:	e004c03a 	cmpne	r2,fp,zero
  805210:	10010126 	beq	r2,zero,805618 <_dtoa_r+0xdd4>
  805214:	04023d16 	blt	zero,r16,805b0c <_dtoa_r+0x12c8>
  805218:	b5c00005 	stb	r23,0(r22)
  80521c:	d9800517 	ldw	r6,20(sp)
  805220:	d9000f17 	ldw	r4,60(sp)
  805224:	b5800044 	addi	r22,r22,1
  805228:	3105883a 	add	r2,r6,r4
  80522c:	b0806526 	beq	r22,r2,8053c4 <_dtoa_r+0xb80>
  805230:	d9400717 	ldw	r5,28(sp)
  805234:	d9001617 	ldw	r4,88(sp)
  805238:	01800284 	movi	r6,10
  80523c:	000f883a 	mov	r7,zero
  805240:	08073f80 	call	8073f8 <__multadd>
  805244:	d8800715 	stw	r2,28(sp)
  805248:	d8800617 	ldw	r2,24(sp)
  80524c:	14c10c26 	beq	r2,r19,805680 <_dtoa_r+0xe3c>
  805250:	d9400617 	ldw	r5,24(sp)
  805254:	d9001617 	ldw	r4,88(sp)
  805258:	01800284 	movi	r6,10
  80525c:	000f883a 	mov	r7,zero
  805260:	08073f80 	call	8073f8 <__multadd>
  805264:	d9001617 	ldw	r4,88(sp)
  805268:	980b883a 	mov	r5,r19
  80526c:	01800284 	movi	r6,10
  805270:	000f883a 	mov	r7,zero
  805274:	d8800615 	stw	r2,24(sp)
  805278:	08073f80 	call	8073f8 <__multadd>
  80527c:	1027883a 	mov	r19,r2
  805280:	003fc206 	br	80518c <_dtoa_r+0x948>
  805284:	2445c83a 	sub	r2,r4,r17
  805288:	a088983a 	sll	r4,r20,r2
  80528c:	003e4b06 	br	804bbc <_dtoa_r+0x378>
  805290:	01bfffc4 	movi	r6,-1
  805294:	00800044 	movi	r2,1
  805298:	d9800e15 	stw	r6,56(sp)
  80529c:	d9800f15 	stw	r6,60(sp)
  8052a0:	d8800b15 	stw	r2,44(sp)
  8052a4:	d8c01617 	ldw	r3,88(sp)
  8052a8:	008005c4 	movi	r2,23
  8052ac:	18001115 	stw	zero,68(r3)
  8052b0:	1580082e 	bgeu	r2,r22,8052d4 <_dtoa_r+0xa90>
  8052b4:	00c00104 	movi	r3,4
  8052b8:	0009883a 	mov	r4,zero
  8052bc:	18c7883a 	add	r3,r3,r3
  8052c0:	18800504 	addi	r2,r3,20
  8052c4:	21000044 	addi	r4,r4,1
  8052c8:	b0bffc2e 	bgeu	r22,r2,8052bc <_dtoa_r+0xa78>
  8052cc:	d9801617 	ldw	r6,88(sp)
  8052d0:	31001115 	stw	r4,68(r6)
  8052d4:	dc000f17 	ldw	r16,60(sp)
  8052d8:	003e4b06 	br	804c08 <_dtoa_r+0x3c4>
  8052dc:	d9801717 	ldw	r6,92(sp)
  8052e0:	0023883a 	mov	r17,zero
  8052e4:	31bfff04 	addi	r6,r6,-4
  8052e8:	d9801715 	stw	r6,92(sp)
  8052ec:	003df806 	br	804ad0 <_dtoa_r+0x28c>
  8052f0:	00800804 	movi	r2,32
  8052f4:	10c9c83a 	sub	r4,r2,r3
  8052f8:	00c00104 	movi	r3,4
  8052fc:	19005a16 	blt	r3,r4,805468 <_dtoa_r+0xc24>
  805300:	008000c4 	movi	r2,3
  805304:	113f7e16 	blt	r2,r4,805100 <_dtoa_r+0x8bc>
  805308:	20800704 	addi	r2,r4,28
  80530c:	003f7506 	br	8050e4 <_dtoa_r+0x8a0>
  805310:	d9801717 	ldw	r6,92(sp)
  805314:	00800044 	movi	r2,1
  805318:	1180a10e 	bge	r2,r6,8055a0 <_dtoa_r+0xd5c>
  80531c:	d9800f17 	ldw	r6,60(sp)
  805320:	d8c01017 	ldw	r3,64(sp)
  805324:	30bfffc4 	addi	r2,r6,-1
  805328:	1881c616 	blt	r3,r2,805a44 <_dtoa_r+0x1200>
  80532c:	18a5c83a 	sub	r18,r3,r2
  805330:	d8800f17 	ldw	r2,60(sp)
  805334:	10026216 	blt	r2,zero,805cc0 <_dtoa_r+0x147c>
  805338:	dc001117 	ldw	r16,68(sp)
  80533c:	1007883a 	mov	r3,r2
  805340:	d9800a17 	ldw	r6,40(sp)
  805344:	d8801117 	ldw	r2,68(sp)
  805348:	d9001617 	ldw	r4,88(sp)
  80534c:	30cd883a 	add	r6,r6,r3
  805350:	10c5883a 	add	r2,r2,r3
  805354:	01400044 	movi	r5,1
  805358:	d9800a15 	stw	r6,40(sp)
  80535c:	d8801115 	stw	r2,68(sp)
  805360:	08073bc0 	call	8073bc <__i2b>
  805364:	1027883a 	mov	r19,r2
  805368:	003f2506 	br	805000 <_dtoa_r+0x7bc>
  80536c:	00c02074 	movhi	r3,129
  805370:	18fae104 	addi	r3,r3,-5244
  805374:	003d6706 	br	804914 <_dtoa_r+0xd0>
  805378:	dd800517 	ldw	r22,20(sp)
  80537c:	04000044 	movi	r16,1
  805380:	00000706 	br	8053a0 <_dtoa_r+0xb5c>
  805384:	d9400717 	ldw	r5,28(sp)
  805388:	d9001617 	ldw	r4,88(sp)
  80538c:	01800284 	movi	r6,10
  805390:	000f883a 	mov	r7,zero
  805394:	08073f80 	call	8073f8 <__multadd>
  805398:	d8800715 	stw	r2,28(sp)
  80539c:	84000044 	addi	r16,r16,1
  8053a0:	d9000717 	ldw	r4,28(sp)
  8053a4:	900b883a 	mov	r5,r18
  8053a8:	080462c0 	call	80462c <quorem>
  8053ac:	15c00c04 	addi	r23,r2,48
  8053b0:	b5c00005 	stb	r23,0(r22)
  8053b4:	d8c00f17 	ldw	r3,60(sp)
  8053b8:	b5800044 	addi	r22,r22,1
  8053bc:	80fff116 	blt	r16,r3,805384 <_dtoa_r+0xb40>
  8053c0:	d8000615 	stw	zero,24(sp)
  8053c4:	d9400717 	ldw	r5,28(sp)
  8053c8:	d9001617 	ldw	r4,88(sp)
  8053cc:	01800044 	movi	r6,1
  8053d0:	08070880 	call	807088 <__lshift>
  8053d4:	1009883a 	mov	r4,r2
  8053d8:	900b883a 	mov	r5,r18
  8053dc:	d8800715 	stw	r2,28(sp)
  8053e0:	08068a00 	call	8068a0 <__mcmp>
  8053e4:	00803c0e 	bge	zero,r2,8054d8 <_dtoa_r+0xc94>
  8053e8:	b009883a 	mov	r4,r22
  8053ec:	213fffc4 	addi	r4,r4,-1
  8053f0:	21400003 	ldbu	r5,0(r4)
  8053f4:	00800e44 	movi	r2,57
  8053f8:	28c03fcc 	andi	r3,r5,255
  8053fc:	18c0201c 	xori	r3,r3,128
  805400:	18ffe004 	addi	r3,r3,-128
  805404:	1881981e 	bne	r3,r2,805a68 <_dtoa_r+0x1224>
  805408:	d9800517 	ldw	r6,20(sp)
  80540c:	21bff71e 	bne	r4,r6,8053ec <_dtoa_r+0xba8>
  805410:	d8800d17 	ldw	r2,52(sp)
  805414:	37000044 	addi	fp,r6,1
  805418:	10800044 	addi	r2,r2,1
  80541c:	d8800d15 	stw	r2,52(sp)
  805420:	00800c44 	movi	r2,49
  805424:	30800005 	stb	r2,0(r6)
  805428:	d9001617 	ldw	r4,88(sp)
  80542c:	900b883a 	mov	r5,r18
  805430:	08067440 	call	806744 <_Bfree>
  805434:	983ecd26 	beq	r19,zero,804f6c <_dtoa_r+0x728>
  805438:	d8c00617 	ldw	r3,24(sp)
  80543c:	18000426 	beq	r3,zero,805450 <_dtoa_r+0xc0c>
  805440:	1cc00326 	beq	r3,r19,805450 <_dtoa_r+0xc0c>
  805444:	d9001617 	ldw	r4,88(sp)
  805448:	180b883a 	mov	r5,r3
  80544c:	08067440 	call	806744 <_Bfree>
  805450:	d9001617 	ldw	r4,88(sp)
  805454:	980b883a 	mov	r5,r19
  805458:	08067440 	call	806744 <_Bfree>
  80545c:	003ec306 	br	804f6c <_dtoa_r+0x728>
  805460:	1805883a 	mov	r2,r3
  805464:	003eeb06 	br	805014 <_dtoa_r+0x7d0>
  805468:	d9800a17 	ldw	r6,40(sp)
  80546c:	d8c01117 	ldw	r3,68(sp)
  805470:	20bfff04 	addi	r2,r4,-4
  805474:	308d883a 	add	r6,r6,r2
  805478:	1887883a 	add	r3,r3,r2
  80547c:	80a1883a 	add	r16,r16,r2
  805480:	d9800a15 	stw	r6,40(sp)
  805484:	d8c01115 	stw	r3,68(sp)
  805488:	003f1d06 	br	805100 <_dtoa_r+0x8bc>
  80548c:	a03f0c1e 	bne	r20,zero,8050c0 <_dtoa_r+0x87c>
  805490:	00800434 	movhi	r2,16
  805494:	10bfffc4 	addi	r2,r2,-1
  805498:	a884703a 	and	r2,r21,r2
  80549c:	103f081e 	bne	r2,zero,8050c0 <_dtoa_r+0x87c>
  8054a0:	a89ffc2c 	andhi	r2,r21,32752
  8054a4:	103f0626 	beq	r2,zero,8050c0 <_dtoa_r+0x87c>
  8054a8:	d8c01117 	ldw	r3,68(sp)
  8054ac:	d9000a17 	ldw	r4,40(sp)
  8054b0:	18c00044 	addi	r3,r3,1
  8054b4:	21000044 	addi	r4,r4,1
  8054b8:	d8c01115 	stw	r3,68(sp)
  8054bc:	d9000a15 	stw	r4,40(sp)
  8054c0:	003f0006 	br	8050c4 <_dtoa_r+0x880>
  8054c4:	d9400717 	ldw	r5,28(sp)
  8054c8:	d9001617 	ldw	r4,88(sp)
  8054cc:	08074f80 	call	8074f8 <__pow5mult>
  8054d0:	d8800715 	stw	r2,28(sp)
  8054d4:	003eed06 	br	80508c <_dtoa_r+0x848>
  8054d8:	1000021e 	bne	r2,zero,8054e4 <_dtoa_r+0xca0>
  8054dc:	b880004c 	andi	r2,r23,1
  8054e0:	103fc11e 	bne	r2,zero,8053e8 <_dtoa_r+0xba4>
  8054e4:	b5bfffc4 	addi	r22,r22,-1
  8054e8:	b0c00007 	ldb	r3,0(r22)
  8054ec:	00800c04 	movi	r2,48
  8054f0:	18bffc26 	beq	r3,r2,8054e4 <_dtoa_r+0xca0>
  8054f4:	b7000044 	addi	fp,r22,1
  8054f8:	003fcb06 	br	805428 <_dtoa_r+0xbe4>
  8054fc:	d9800d17 	ldw	r6,52(sp)
  805500:	018fc83a 	sub	r7,zero,r6
  805504:	3801f726 	beq	r7,zero,805ce4 <_dtoa_r+0x14a0>
  805508:	398003cc 	andi	r6,r7,15
  80550c:	300c90fa 	slli	r6,r6,3
  805510:	01402074 	movhi	r5,129
  805514:	297afe04 	addi	r5,r5,-5128
  805518:	d9001217 	ldw	r4,72(sp)
  80551c:	314d883a 	add	r6,r6,r5
  805520:	30c00117 	ldw	r3,4(r6)
  805524:	30800017 	ldw	r2,0(r6)
  805528:	d9401317 	ldw	r5,76(sp)
  80552c:	3821d13a 	srai	r16,r7,4
  805530:	100d883a 	mov	r6,r2
  805534:	180f883a 	mov	r7,r3
  805538:	08090140 	call	809014 <__muldf3>
  80553c:	1011883a 	mov	r8,r2
  805540:	1813883a 	mov	r9,r3
  805544:	1029883a 	mov	r20,r2
  805548:	182b883a 	mov	r21,r3
  80554c:	8001e526 	beq	r16,zero,805ce4 <_dtoa_r+0x14a0>
  805550:	05800084 	movi	r22,2
  805554:	04402074 	movhi	r17,129
  805558:	8c7b3004 	addi	r17,r17,-4928
  80555c:	8080004c 	andi	r2,r16,1
  805560:	1005003a 	cmpeq	r2,r2,zero
  805564:	1000081e 	bne	r2,zero,805588 <_dtoa_r+0xd44>
  805568:	89800017 	ldw	r6,0(r17)
  80556c:	89c00117 	ldw	r7,4(r17)
  805570:	480b883a 	mov	r5,r9
  805574:	4009883a 	mov	r4,r8
  805578:	08090140 	call	809014 <__muldf3>
  80557c:	1011883a 	mov	r8,r2
  805580:	b5800044 	addi	r22,r22,1
  805584:	1813883a 	mov	r9,r3
  805588:	8021d07a 	srai	r16,r16,1
  80558c:	8c400204 	addi	r17,r17,8
  805590:	803ff21e 	bne	r16,zero,80555c <_dtoa_r+0xd18>
  805594:	4029883a 	mov	r20,r8
  805598:	482b883a 	mov	r21,r9
  80559c:	003dca06 	br	804cc8 <_dtoa_r+0x484>
  8055a0:	d9000817 	ldw	r4,32(sp)
  8055a4:	2005003a 	cmpeq	r2,r4,zero
  8055a8:	1001f61e 	bne	r2,zero,805d84 <_dtoa_r+0x1540>
  8055ac:	dc001117 	ldw	r16,68(sp)
  8055b0:	dc801017 	ldw	r18,64(sp)
  8055b4:	18c10cc4 	addi	r3,r3,1075
  8055b8:	003f6106 	br	805340 <_dtoa_r+0xafc>
  8055bc:	d8000b15 	stw	zero,44(sp)
  8055c0:	d9802617 	ldw	r6,152(sp)
  8055c4:	d8c00d17 	ldw	r3,52(sp)
  8055c8:	30800044 	addi	r2,r6,1
  8055cc:	18ad883a 	add	r22,r3,r2
  8055d0:	b13fffc4 	addi	r4,r22,-1
  8055d4:	d9000e15 	stw	r4,56(sp)
  8055d8:	0581f60e 	bge	zero,r22,805db4 <_dtoa_r+0x1570>
  8055dc:	dd800f15 	stw	r22,60(sp)
  8055e0:	003f3006 	br	8052a4 <_dtoa_r+0xa60>
  8055e4:	d8000b15 	stw	zero,44(sp)
  8055e8:	d9002617 	ldw	r4,152(sp)
  8055ec:	0101eb0e 	bge	zero,r4,805d9c <_dtoa_r+0x1558>
  8055f0:	202d883a 	mov	r22,r4
  8055f4:	d9000e15 	stw	r4,56(sp)
  8055f8:	d9000f15 	stw	r4,60(sp)
  8055fc:	003f2906 	br	8052a4 <_dtoa_r+0xa60>
  805600:	01800044 	movi	r6,1
  805604:	d9800b15 	stw	r6,44(sp)
  805608:	003ff706 	br	8055e8 <_dtoa_r+0xda4>
  80560c:	01000044 	movi	r4,1
  805610:	d9000b15 	stw	r4,44(sp)
  805614:	003fea06 	br	8055c0 <_dtoa_r+0xd7c>
  805618:	04000c0e 	bge	zero,r16,80564c <_dtoa_r+0xe08>
  80561c:	d9400717 	ldw	r5,28(sp)
  805620:	d9001617 	ldw	r4,88(sp)
  805624:	01800044 	movi	r6,1
  805628:	08070880 	call	807088 <__lshift>
  80562c:	1009883a 	mov	r4,r2
  805630:	900b883a 	mov	r5,r18
  805634:	d8800715 	stw	r2,28(sp)
  805638:	08068a00 	call	8068a0 <__mcmp>
  80563c:	0081e00e 	bge	zero,r2,805dc0 <_dtoa_r+0x157c>
  805640:	bdc00044 	addi	r23,r23,1
  805644:	00800e84 	movi	r2,58
  805648:	b881a226 	beq	r23,r2,805cd4 <_dtoa_r+0x1490>
  80564c:	b7000044 	addi	fp,r22,1
  805650:	b5c00005 	stb	r23,0(r22)
  805654:	003f7406 	br	805428 <_dtoa_r+0xbe4>
  805658:	00800e44 	movi	r2,57
  80565c:	b8819d26 	beq	r23,r2,805cd4 <_dtoa_r+0x1490>
  805660:	053ffa0e 	bge	zero,r20,80564c <_dtoa_r+0xe08>
  805664:	8dc00c44 	addi	r23,r17,49
  805668:	003ff806 	br	80564c <_dtoa_r+0xe08>
  80566c:	d9001617 	ldw	r4,88(sp)
  805670:	a80b883a 	mov	r5,r21
  805674:	04000044 	movi	r16,1
  805678:	08067440 	call	806744 <_Bfree>
  80567c:	003edf06 	br	8051fc <_dtoa_r+0x9b8>
  805680:	d9001617 	ldw	r4,88(sp)
  805684:	980b883a 	mov	r5,r19
  805688:	01800284 	movi	r6,10
  80568c:	000f883a 	mov	r7,zero
  805690:	08073f80 	call	8073f8 <__multadd>
  805694:	1027883a 	mov	r19,r2
  805698:	d8800615 	stw	r2,24(sp)
  80569c:	003ebb06 	br	80518c <_dtoa_r+0x948>
  8056a0:	d9801117 	ldw	r6,68(sp)
  8056a4:	d8800d17 	ldw	r2,52(sp)
  8056a8:	d8000915 	stw	zero,36(sp)
  8056ac:	308dc83a 	sub	r6,r6,r2
  8056b0:	0087c83a 	sub	r3,zero,r2
  8056b4:	d9801115 	stw	r6,68(sp)
  8056b8:	d8c01015 	stw	r3,64(sp)
  8056bc:	003cfe06 	br	804ab8 <_dtoa_r+0x274>
  8056c0:	018dc83a 	sub	r6,zero,r6
  8056c4:	d9801115 	stw	r6,68(sp)
  8056c8:	d8000a15 	stw	zero,40(sp)
  8056cc:	003cf306 	br	804a9c <_dtoa_r+0x258>
  8056d0:	d9000d17 	ldw	r4,52(sp)
  8056d4:	08098d80 	call	8098d8 <__floatsidf>
  8056d8:	880b883a 	mov	r5,r17
  8056dc:	8009883a 	mov	r4,r16
  8056e0:	180f883a 	mov	r7,r3
  8056e4:	100d883a 	mov	r6,r2
  8056e8:	08096b80 	call	8096b8 <__nedf2>
  8056ec:	103ce126 	beq	r2,zero,804a74 <_dtoa_r+0x230>
  8056f0:	d9800d17 	ldw	r6,52(sp)
  8056f4:	31bfffc4 	addi	r6,r6,-1
  8056f8:	d9800d15 	stw	r6,52(sp)
  8056fc:	003cdd06 	br	804a74 <_dtoa_r+0x230>
  805700:	d9000717 	ldw	r4,28(sp)
  805704:	900b883a 	mov	r5,r18
  805708:	08068a00 	call	8068a0 <__mcmp>
  80570c:	103e8d0e 	bge	r2,zero,805144 <_dtoa_r+0x900>
  805710:	d9400717 	ldw	r5,28(sp)
  805714:	d9001617 	ldw	r4,88(sp)
  805718:	01800284 	movi	r6,10
  80571c:	000f883a 	mov	r7,zero
  805720:	08073f80 	call	8073f8 <__multadd>
  805724:	d9800d17 	ldw	r6,52(sp)
  805728:	d8800715 	stw	r2,28(sp)
  80572c:	31bfffc4 	addi	r6,r6,-1
  805730:	d9800d15 	stw	r6,52(sp)
  805734:	b001a71e 	bne	r22,zero,805dd4 <_dtoa_r+0x1590>
  805738:	d8800e17 	ldw	r2,56(sp)
  80573c:	d8800f15 	stw	r2,60(sp)
  805740:	003e8006 	br	805144 <_dtoa_r+0x900>
  805744:	90800417 	ldw	r2,16(r18)
  805748:	1085883a 	add	r2,r2,r2
  80574c:	1085883a 	add	r2,r2,r2
  805750:	1485883a 	add	r2,r2,r18
  805754:	11000417 	ldw	r4,16(r2)
  805758:	080676c0 	call	80676c <__hi0bits>
  80575c:	00c00804 	movi	r3,32
  805760:	1887c83a 	sub	r3,r3,r2
  805764:	003e5a06 	br	8050d0 <_dtoa_r+0x88c>
  805768:	d9400717 	ldw	r5,28(sp)
  80576c:	d9801017 	ldw	r6,64(sp)
  805770:	d9001617 	ldw	r4,88(sp)
  805774:	08074f80 	call	8074f8 <__pow5mult>
  805778:	d8800715 	stw	r2,28(sp)
  80577c:	003e4306 	br	80508c <_dtoa_r+0x848>
  805780:	d9800f17 	ldw	r6,60(sp)
  805784:	d8800d17 	ldw	r2,52(sp)
  805788:	d9800315 	stw	r6,12(sp)
  80578c:	d8800415 	stw	r2,16(sp)
  805790:	d8c00b17 	ldw	r3,44(sp)
  805794:	1805003a 	cmpeq	r2,r3,zero
  805798:	1000e21e 	bne	r2,zero,805b24 <_dtoa_r+0x12e0>
  80579c:	d9000317 	ldw	r4,12(sp)
  8057a0:	0005883a 	mov	r2,zero
  8057a4:	00cff834 	movhi	r3,16352
  8057a8:	200c90fa 	slli	r6,r4,3
  8057ac:	01002074 	movhi	r4,129
  8057b0:	213afe04 	addi	r4,r4,-5128
  8057b4:	180b883a 	mov	r5,r3
  8057b8:	310d883a 	add	r6,r6,r4
  8057bc:	327fff17 	ldw	r9,-4(r6)
  8057c0:	323ffe17 	ldw	r8,-8(r6)
  8057c4:	1009883a 	mov	r4,r2
  8057c8:	480f883a 	mov	r7,r9
  8057cc:	400d883a 	mov	r6,r8
  8057d0:	08093d80 	call	8093d8 <__divdf3>
  8057d4:	180b883a 	mov	r5,r3
  8057d8:	b00d883a 	mov	r6,r22
  8057dc:	b80f883a 	mov	r7,r23
  8057e0:	1009883a 	mov	r4,r2
  8057e4:	0808f200 	call	808f20 <__subdf3>
  8057e8:	a80b883a 	mov	r5,r21
  8057ec:	a009883a 	mov	r4,r20
  8057f0:	d8c01915 	stw	r3,100(sp)
  8057f4:	d8801815 	stw	r2,96(sp)
  8057f8:	08099d00 	call	8099d0 <__fixdfsi>
  8057fc:	1009883a 	mov	r4,r2
  805800:	1027883a 	mov	r19,r2
  805804:	08098d80 	call	8098d8 <__floatsidf>
  805808:	a80b883a 	mov	r5,r21
  80580c:	a009883a 	mov	r4,r20
  805810:	180f883a 	mov	r7,r3
  805814:	100d883a 	mov	r6,r2
  805818:	0808f200 	call	808f20 <__subdf3>
  80581c:	d9801817 	ldw	r6,96(sp)
  805820:	1823883a 	mov	r17,r3
  805824:	d8801415 	stw	r2,80(sp)
  805828:	302d883a 	mov	r22,r6
  80582c:	d9800517 	ldw	r6,20(sp)
  805830:	9cc00c04 	addi	r19,r19,48
  805834:	dc401515 	stw	r17,84(sp)
  805838:	d8c01917 	ldw	r3,100(sp)
  80583c:	34c00005 	stb	r19,0(r6)
  805840:	d8800517 	ldw	r2,20(sp)
  805844:	d9401917 	ldw	r5,100(sp)
  805848:	d9801417 	ldw	r6,80(sp)
  80584c:	b009883a 	mov	r4,r22
  805850:	880f883a 	mov	r7,r17
  805854:	182f883a 	mov	r23,r3
  805858:	17000044 	addi	fp,r2,1
  80585c:	08097400 	call	809740 <__gtdf2>
  805860:	00804e16 	blt	zero,r2,80599c <_dtoa_r+0x1158>
  805864:	d9801417 	ldw	r6,80(sp)
  805868:	0005883a 	mov	r2,zero
  80586c:	00cffc34 	movhi	r3,16368
  805870:	180b883a 	mov	r5,r3
  805874:	880f883a 	mov	r7,r17
  805878:	1009883a 	mov	r4,r2
  80587c:	0808f200 	call	808f20 <__subdf3>
  805880:	d9401917 	ldw	r5,100(sp)
  805884:	180f883a 	mov	r7,r3
  805888:	b009883a 	mov	r4,r22
  80588c:	100d883a 	mov	r6,r2
  805890:	08097400 	call	809740 <__gtdf2>
  805894:	00bda216 	blt	zero,r2,804f20 <_dtoa_r+0x6dc>
  805898:	d8c00317 	ldw	r3,12(sp)
  80589c:	00800044 	movi	r2,1
  8058a0:	10c01216 	blt	r2,r3,8058ec <_dtoa_r+0x10a8>
  8058a4:	003d4506 	br	804dbc <_dtoa_r+0x578>
  8058a8:	d9801417 	ldw	r6,80(sp)
  8058ac:	0005883a 	mov	r2,zero
  8058b0:	00cffc34 	movhi	r3,16368
  8058b4:	180b883a 	mov	r5,r3
  8058b8:	880f883a 	mov	r7,r17
  8058bc:	1009883a 	mov	r4,r2
  8058c0:	0808f200 	call	808f20 <__subdf3>
  8058c4:	d9c01b17 	ldw	r7,108(sp)
  8058c8:	180b883a 	mov	r5,r3
  8058cc:	1009883a 	mov	r4,r2
  8058d0:	b00d883a 	mov	r6,r22
  8058d4:	08098500 	call	809850 <__ltdf2>
  8058d8:	103d9116 	blt	r2,zero,804f20 <_dtoa_r+0x6dc>
  8058dc:	d9800517 	ldw	r6,20(sp)
  8058e0:	d9000317 	ldw	r4,12(sp)
  8058e4:	3105883a 	add	r2,r6,r4
  8058e8:	e0bd3426 	beq	fp,r2,804dbc <_dtoa_r+0x578>
  8058ec:	04500934 	movhi	r17,16420
  8058f0:	0021883a 	mov	r16,zero
  8058f4:	b80b883a 	mov	r5,r23
  8058f8:	b009883a 	mov	r4,r22
  8058fc:	800d883a 	mov	r6,r16
  805900:	880f883a 	mov	r7,r17
  805904:	08090140 	call	809014 <__muldf3>
  805908:	d9401517 	ldw	r5,84(sp)
  80590c:	d9001417 	ldw	r4,80(sp)
  805910:	880f883a 	mov	r7,r17
  805914:	000d883a 	mov	r6,zero
  805918:	d8801a15 	stw	r2,104(sp)
  80591c:	d8c01b15 	stw	r3,108(sp)
  805920:	08090140 	call	809014 <__muldf3>
  805924:	180b883a 	mov	r5,r3
  805928:	1009883a 	mov	r4,r2
  80592c:	1823883a 	mov	r17,r3
  805930:	1021883a 	mov	r16,r2
  805934:	08099d00 	call	8099d0 <__fixdfsi>
  805938:	1009883a 	mov	r4,r2
  80593c:	102b883a 	mov	r21,r2
  805940:	08098d80 	call	8098d8 <__floatsidf>
  805944:	880b883a 	mov	r5,r17
  805948:	8009883a 	mov	r4,r16
  80594c:	180f883a 	mov	r7,r3
  805950:	100d883a 	mov	r6,r2
  805954:	0808f200 	call	808f20 <__subdf3>
  805958:	1021883a 	mov	r16,r2
  80595c:	d9001b17 	ldw	r4,108(sp)
  805960:	1823883a 	mov	r17,r3
  805964:	dc001415 	stw	r16,80(sp)
  805968:	ad400c04 	addi	r21,r21,48
  80596c:	dc401515 	stw	r17,84(sp)
  805970:	d8801a17 	ldw	r2,104(sp)
  805974:	e5400005 	stb	r21,0(fp)
  805978:	202f883a 	mov	r23,r4
  80597c:	d9c01b17 	ldw	r7,108(sp)
  805980:	d9001417 	ldw	r4,80(sp)
  805984:	880b883a 	mov	r5,r17
  805988:	100d883a 	mov	r6,r2
  80598c:	102d883a 	mov	r22,r2
  805990:	e7000044 	addi	fp,fp,1
  805994:	08098500 	call	809850 <__ltdf2>
  805998:	103fc30e 	bge	r2,zero,8058a8 <_dtoa_r+0x1064>
  80599c:	d9000417 	ldw	r4,16(sp)
  8059a0:	d9000d15 	stw	r4,52(sp)
  8059a4:	003d7106 	br	804f6c <_dtoa_r+0x728>
  8059a8:	d9801717 	ldw	r6,92(sp)
  8059ac:	00800084 	movi	r2,2
  8059b0:	11bde60e 	bge	r2,r6,80514c <_dtoa_r+0x908>
  8059b4:	203cfb1e 	bne	r4,zero,804da4 <_dtoa_r+0x560>
  8059b8:	d9001617 	ldw	r4,88(sp)
  8059bc:	900b883a 	mov	r5,r18
  8059c0:	01800144 	movi	r6,5
  8059c4:	000f883a 	mov	r7,zero
  8059c8:	08073f80 	call	8073f8 <__multadd>
  8059cc:	d9000717 	ldw	r4,28(sp)
  8059d0:	100b883a 	mov	r5,r2
  8059d4:	1025883a 	mov	r18,r2
  8059d8:	08068a00 	call	8068a0 <__mcmp>
  8059dc:	00bcf10e 	bge	zero,r2,804da4 <_dtoa_r+0x560>
  8059e0:	d8c00d17 	ldw	r3,52(sp)
  8059e4:	d9000517 	ldw	r4,20(sp)
  8059e8:	d8000615 	stw	zero,24(sp)
  8059ec:	18c00044 	addi	r3,r3,1
  8059f0:	d8c00d15 	stw	r3,52(sp)
  8059f4:	00800c44 	movi	r2,49
  8059f8:	27000044 	addi	fp,r4,1
  8059fc:	20800005 	stb	r2,0(r4)
  805a00:	003e8906 	br	805428 <_dtoa_r+0xbe4>
  805a04:	d8c00517 	ldw	r3,20(sp)
  805a08:	003bc206 	br	804914 <_dtoa_r+0xd0>
  805a0c:	01802074 	movhi	r6,129
  805a10:	31bb3004 	addi	r6,r6,-4928
  805a14:	30c00917 	ldw	r3,36(r6)
  805a18:	30800817 	ldw	r2,32(r6)
  805a1c:	d9001217 	ldw	r4,72(sp)
  805a20:	d9401317 	ldw	r5,76(sp)
  805a24:	180f883a 	mov	r7,r3
  805a28:	100d883a 	mov	r6,r2
  805a2c:	08093d80 	call	8093d8 <__divdf3>
  805a30:	948003cc 	andi	r18,r18,15
  805a34:	058000c4 	movi	r22,3
  805a38:	1029883a 	mov	r20,r2
  805a3c:	182b883a 	mov	r21,r3
  805a40:	003c8906 	br	804c68 <_dtoa_r+0x424>
  805a44:	d9001017 	ldw	r4,64(sp)
  805a48:	d9800917 	ldw	r6,36(sp)
  805a4c:	0025883a 	mov	r18,zero
  805a50:	1105c83a 	sub	r2,r2,r4
  805a54:	2089883a 	add	r4,r4,r2
  805a58:	308d883a 	add	r6,r6,r2
  805a5c:	d9001015 	stw	r4,64(sp)
  805a60:	d9800915 	stw	r6,36(sp)
  805a64:	003e3206 	br	805330 <_dtoa_r+0xaec>
  805a68:	28800044 	addi	r2,r5,1
  805a6c:	27000044 	addi	fp,r4,1
  805a70:	20800005 	stb	r2,0(r4)
  805a74:	003e6c06 	br	805428 <_dtoa_r+0xbe4>
  805a78:	d8800f17 	ldw	r2,60(sp)
  805a7c:	00bce016 	blt	zero,r2,804e00 <_dtoa_r+0x5bc>
  805a80:	d9800f17 	ldw	r6,60(sp)
  805a84:	303cc51e 	bne	r6,zero,804d9c <_dtoa_r+0x558>
  805a88:	0005883a 	mov	r2,zero
  805a8c:	00d00534 	movhi	r3,16404
  805a90:	980b883a 	mov	r5,r19
  805a94:	180f883a 	mov	r7,r3
  805a98:	9009883a 	mov	r4,r18
  805a9c:	100d883a 	mov	r6,r2
  805aa0:	08090140 	call	809014 <__muldf3>
  805aa4:	180b883a 	mov	r5,r3
  805aa8:	a80f883a 	mov	r7,r21
  805aac:	1009883a 	mov	r4,r2
  805ab0:	a00d883a 	mov	r6,r20
  805ab4:	08097c80 	call	8097c8 <__gedf2>
  805ab8:	103cb80e 	bge	r2,zero,804d9c <_dtoa_r+0x558>
  805abc:	0027883a 	mov	r19,zero
  805ac0:	0025883a 	mov	r18,zero
  805ac4:	003fc606 	br	8059e0 <_dtoa_r+0x119c>
  805ac8:	99400117 	ldw	r5,4(r19)
  805acc:	d9001617 	ldw	r4,88(sp)
  805ad0:	0806cc40 	call	806cc4 <_Balloc>
  805ad4:	99800417 	ldw	r6,16(r19)
  805ad8:	11000304 	addi	r4,r2,12
  805adc:	99400304 	addi	r5,r19,12
  805ae0:	318d883a 	add	r6,r6,r6
  805ae4:	318d883a 	add	r6,r6,r6
  805ae8:	31800204 	addi	r6,r6,8
  805aec:	1023883a 	mov	r17,r2
  805af0:	08065c40 	call	8065c4 <memcpy>
  805af4:	d9001617 	ldw	r4,88(sp)
  805af8:	880b883a 	mov	r5,r17
  805afc:	01800044 	movi	r6,1
  805b00:	08070880 	call	807088 <__lshift>
  805b04:	100b883a 	mov	r5,r2
  805b08:	003d9c06 	br	80517c <_dtoa_r+0x938>
  805b0c:	00800e44 	movi	r2,57
  805b10:	b8807026 	beq	r23,r2,805cd4 <_dtoa_r+0x1490>
  805b14:	b8800044 	addi	r2,r23,1
  805b18:	b7000044 	addi	fp,r22,1
  805b1c:	b0800005 	stb	r2,0(r22)
  805b20:	003e4106 	br	805428 <_dtoa_r+0xbe4>
  805b24:	d8800317 	ldw	r2,12(sp)
  805b28:	01802074 	movhi	r6,129
  805b2c:	31bafe04 	addi	r6,r6,-5128
  805b30:	b009883a 	mov	r4,r22
  805b34:	100e90fa 	slli	r7,r2,3
  805b38:	b80b883a 	mov	r5,r23
  805b3c:	398f883a 	add	r7,r7,r6
  805b40:	38bffe17 	ldw	r2,-8(r7)
  805b44:	d9800517 	ldw	r6,20(sp)
  805b48:	38ffff17 	ldw	r3,-4(r7)
  805b4c:	37000044 	addi	fp,r6,1
  805b50:	180f883a 	mov	r7,r3
  805b54:	100d883a 	mov	r6,r2
  805b58:	08090140 	call	809014 <__muldf3>
  805b5c:	a80b883a 	mov	r5,r21
  805b60:	a009883a 	mov	r4,r20
  805b64:	182f883a 	mov	r23,r3
  805b68:	102d883a 	mov	r22,r2
  805b6c:	08099d00 	call	8099d0 <__fixdfsi>
  805b70:	1009883a 	mov	r4,r2
  805b74:	1027883a 	mov	r19,r2
  805b78:	08098d80 	call	8098d8 <__floatsidf>
  805b7c:	a80b883a 	mov	r5,r21
  805b80:	a009883a 	mov	r4,r20
  805b84:	180f883a 	mov	r7,r3
  805b88:	100d883a 	mov	r6,r2
  805b8c:	0808f200 	call	808f20 <__subdf3>
  805b90:	180b883a 	mov	r5,r3
  805b94:	d8c00517 	ldw	r3,20(sp)
  805b98:	9cc00c04 	addi	r19,r19,48
  805b9c:	1009883a 	mov	r4,r2
  805ba0:	1cc00005 	stb	r19,0(r3)
  805ba4:	2021883a 	mov	r16,r4
  805ba8:	d9000317 	ldw	r4,12(sp)
  805bac:	00800044 	movi	r2,1
  805bb0:	2823883a 	mov	r17,r5
  805bb4:	20802226 	beq	r4,r2,805c40 <_dtoa_r+0x13fc>
  805bb8:	1029883a 	mov	r20,r2
  805bbc:	0005883a 	mov	r2,zero
  805bc0:	00d00934 	movhi	r3,16420
  805bc4:	180f883a 	mov	r7,r3
  805bc8:	100d883a 	mov	r6,r2
  805bcc:	880b883a 	mov	r5,r17
  805bd0:	8009883a 	mov	r4,r16
  805bd4:	08090140 	call	809014 <__muldf3>
  805bd8:	180b883a 	mov	r5,r3
  805bdc:	1009883a 	mov	r4,r2
  805be0:	1823883a 	mov	r17,r3
  805be4:	1021883a 	mov	r16,r2
  805be8:	08099d00 	call	8099d0 <__fixdfsi>
  805bec:	1009883a 	mov	r4,r2
  805bf0:	102b883a 	mov	r21,r2
  805bf4:	08098d80 	call	8098d8 <__floatsidf>
  805bf8:	880b883a 	mov	r5,r17
  805bfc:	8009883a 	mov	r4,r16
  805c00:	180f883a 	mov	r7,r3
  805c04:	100d883a 	mov	r6,r2
  805c08:	0808f200 	call	808f20 <__subdf3>
  805c0c:	180b883a 	mov	r5,r3
  805c10:	d8c00517 	ldw	r3,20(sp)
  805c14:	1009883a 	mov	r4,r2
  805c18:	ad400c04 	addi	r21,r21,48
  805c1c:	1d05883a 	add	r2,r3,r20
  805c20:	15400005 	stb	r21,0(r2)
  805c24:	2021883a 	mov	r16,r4
  805c28:	d9000317 	ldw	r4,12(sp)
  805c2c:	a5000044 	addi	r20,r20,1
  805c30:	2823883a 	mov	r17,r5
  805c34:	a13fe11e 	bne	r20,r4,805bbc <_dtoa_r+0x1378>
  805c38:	e505883a 	add	r2,fp,r20
  805c3c:	173fffc4 	addi	fp,r2,-1
  805c40:	0025883a 	mov	r18,zero
  805c44:	04cff834 	movhi	r19,16352
  805c48:	b009883a 	mov	r4,r22
  805c4c:	b80b883a 	mov	r5,r23
  805c50:	900d883a 	mov	r6,r18
  805c54:	980f883a 	mov	r7,r19
  805c58:	0808fa00 	call	808fa0 <__adddf3>
  805c5c:	180b883a 	mov	r5,r3
  805c60:	1009883a 	mov	r4,r2
  805c64:	800d883a 	mov	r6,r16
  805c68:	880f883a 	mov	r7,r17
  805c6c:	08098500 	call	809850 <__ltdf2>
  805c70:	103cab16 	blt	r2,zero,804f20 <_dtoa_r+0x6dc>
  805c74:	0009883a 	mov	r4,zero
  805c78:	980b883a 	mov	r5,r19
  805c7c:	b80f883a 	mov	r7,r23
  805c80:	b00d883a 	mov	r6,r22
  805c84:	0808f200 	call	808f20 <__subdf3>
  805c88:	180b883a 	mov	r5,r3
  805c8c:	880f883a 	mov	r7,r17
  805c90:	1009883a 	mov	r4,r2
  805c94:	800d883a 	mov	r6,r16
  805c98:	08097400 	call	809740 <__gtdf2>
  805c9c:	00bc470e 	bge	zero,r2,804dbc <_dtoa_r+0x578>
  805ca0:	00c00c04 	movi	r3,48
  805ca4:	e73fffc4 	addi	fp,fp,-1
  805ca8:	e0800007 	ldb	r2,0(fp)
  805cac:	10fffd26 	beq	r2,r3,805ca4 <_dtoa_r+0x1460>
  805cb0:	d9800417 	ldw	r6,16(sp)
  805cb4:	e7000044 	addi	fp,fp,1
  805cb8:	d9800d15 	stw	r6,52(sp)
  805cbc:	003cab06 	br	804f6c <_dtoa_r+0x728>
  805cc0:	d8c00f17 	ldw	r3,60(sp)
  805cc4:	d9001117 	ldw	r4,68(sp)
  805cc8:	20e1c83a 	sub	r16,r4,r3
  805ccc:	0007883a 	mov	r3,zero
  805cd0:	003d9b06 	br	805340 <_dtoa_r+0xafc>
  805cd4:	00800e44 	movi	r2,57
  805cd8:	b0800005 	stb	r2,0(r22)
  805cdc:	b5800044 	addi	r22,r22,1
  805ce0:	003dc106 	br	8053e8 <_dtoa_r+0xba4>
  805ce4:	05800084 	movi	r22,2
  805ce8:	003bf706 	br	804cc8 <_dtoa_r+0x484>
  805cec:	d9000f17 	ldw	r4,60(sp)
  805cf0:	013c000e 	bge	zero,r4,804cf4 <_dtoa_r+0x4b0>
  805cf4:	d9800e17 	ldw	r6,56(sp)
  805cf8:	01bc300e 	bge	zero,r6,804dbc <_dtoa_r+0x578>
  805cfc:	0005883a 	mov	r2,zero
  805d00:	00d00934 	movhi	r3,16420
  805d04:	a80b883a 	mov	r5,r21
  805d08:	180f883a 	mov	r7,r3
  805d0c:	a009883a 	mov	r4,r20
  805d10:	100d883a 	mov	r6,r2
  805d14:	08090140 	call	809014 <__muldf3>
  805d18:	b1000044 	addi	r4,r22,1
  805d1c:	1021883a 	mov	r16,r2
  805d20:	1823883a 	mov	r17,r3
  805d24:	08098d80 	call	8098d8 <__floatsidf>
  805d28:	880b883a 	mov	r5,r17
  805d2c:	8009883a 	mov	r4,r16
  805d30:	180f883a 	mov	r7,r3
  805d34:	100d883a 	mov	r6,r2
  805d38:	08090140 	call	809014 <__muldf3>
  805d3c:	0011883a 	mov	r8,zero
  805d40:	02500734 	movhi	r9,16412
  805d44:	180b883a 	mov	r5,r3
  805d48:	480f883a 	mov	r7,r9
  805d4c:	1009883a 	mov	r4,r2
  805d50:	400d883a 	mov	r6,r8
  805d54:	0808fa00 	call	808fa0 <__adddf3>
  805d58:	102d883a 	mov	r22,r2
  805d5c:	00bf3034 	movhi	r2,64704
  805d60:	10ef883a 	add	r23,r2,r3
  805d64:	d8800d17 	ldw	r2,52(sp)
  805d68:	d8c00e17 	ldw	r3,56(sp)
  805d6c:	8029883a 	mov	r20,r16
  805d70:	10bfffc4 	addi	r2,r2,-1
  805d74:	882b883a 	mov	r21,r17
  805d78:	d8800415 	stw	r2,16(sp)
  805d7c:	d8c00315 	stw	r3,12(sp)
  805d80:	003e8306 	br	805790 <_dtoa_r+0xf4c>
  805d84:	d8800117 	ldw	r2,4(sp)
  805d88:	dc001117 	ldw	r16,68(sp)
  805d8c:	dc801017 	ldw	r18,64(sp)
  805d90:	00c00d84 	movi	r3,54
  805d94:	1887c83a 	sub	r3,r3,r2
  805d98:	003d6906 	br	805340 <_dtoa_r+0xafc>
  805d9c:	01800044 	movi	r6,1
  805da0:	3021883a 	mov	r16,r6
  805da4:	d9800f15 	stw	r6,60(sp)
  805da8:	d9802615 	stw	r6,152(sp)
  805dac:	d9800e15 	stw	r6,56(sp)
  805db0:	003b9306 	br	804c00 <_dtoa_r+0x3bc>
  805db4:	b021883a 	mov	r16,r22
  805db8:	dd800f15 	stw	r22,60(sp)
  805dbc:	003b9006 	br	804c00 <_dtoa_r+0x3bc>
  805dc0:	103e221e 	bne	r2,zero,80564c <_dtoa_r+0xe08>
  805dc4:	b880004c 	andi	r2,r23,1
  805dc8:	1005003a 	cmpeq	r2,r2,zero
  805dcc:	103e1f1e 	bne	r2,zero,80564c <_dtoa_r+0xe08>
  805dd0:	003e1b06 	br	805640 <_dtoa_r+0xdfc>
  805dd4:	d9001617 	ldw	r4,88(sp)
  805dd8:	980b883a 	mov	r5,r19
  805ddc:	01800284 	movi	r6,10
  805de0:	000f883a 	mov	r7,zero
  805de4:	08073f80 	call	8073f8 <__multadd>
  805de8:	d8c00e17 	ldw	r3,56(sp)
  805dec:	1027883a 	mov	r19,r2
  805df0:	d8c00f15 	stw	r3,60(sp)
  805df4:	003cd306 	br	805144 <_dtoa_r+0x900>

00805df8 <__sflags>:
  805df8:	28c00007 	ldb	r3,0(r5)
  805dfc:	00801c84 	movi	r2,114
  805e00:	18800926 	beq	r3,r2,805e28 <__sflags+0x30>
  805e04:	00801dc4 	movi	r2,119
  805e08:	18801426 	beq	r3,r2,805e5c <__sflags+0x64>
  805e0c:	00801844 	movi	r2,97
  805e10:	18801626 	beq	r3,r2,805e6c <__sflags+0x74>
  805e14:	0007883a 	mov	r3,zero
  805e18:	00800584 	movi	r2,22
  805e1c:	20800015 	stw	r2,0(r4)
  805e20:	1805883a 	mov	r2,r3
  805e24:	f800283a 	ret
  805e28:	000f883a 	mov	r7,zero
  805e2c:	0011883a 	mov	r8,zero
  805e30:	00c00104 	movi	r3,4
  805e34:	28800047 	ldb	r2,1(r5)
  805e38:	10000426 	beq	r2,zero,805e4c <__sflags+0x54>
  805e3c:	01000ac4 	movi	r4,43
  805e40:	11000e26 	beq	r2,r4,805e7c <__sflags+0x84>
  805e44:	28800087 	ldb	r2,2(r5)
  805e48:	11000c26 	beq	r2,r4,805e7c <__sflags+0x84>
  805e4c:	3a04b03a 	or	r2,r7,r8
  805e50:	30800015 	stw	r2,0(r6)
  805e54:	1805883a 	mov	r2,r3
  805e58:	f800283a 	ret
  805e5c:	01c00044 	movi	r7,1
  805e60:	02018004 	movi	r8,1536
  805e64:	00c00204 	movi	r3,8
  805e68:	003ff206 	br	805e34 <__sflags+0x3c>
  805e6c:	01c00044 	movi	r7,1
  805e70:	02008204 	movi	r8,520
  805e74:	00c04204 	movi	r3,264
  805e78:	003fee06 	br	805e34 <__sflags+0x3c>
  805e7c:	00bffcc4 	movi	r2,-13
  805e80:	1884703a 	and	r2,r3,r2
  805e84:	01c00084 	movi	r7,2
  805e88:	10c00414 	ori	r3,r2,16
  805e8c:	3a04b03a 	or	r2,r7,r8
  805e90:	30800015 	stw	r2,0(r6)
  805e94:	003fef06 	br	805e54 <__sflags+0x5c>

00805e98 <__sfvwrite_r>:
  805e98:	30800217 	ldw	r2,8(r6)
  805e9c:	defff504 	addi	sp,sp,-44
  805ea0:	df000915 	stw	fp,36(sp)
  805ea4:	dd800715 	stw	r22,28(sp)
  805ea8:	dc800315 	stw	r18,12(sp)
  805eac:	dfc00a15 	stw	ra,40(sp)
  805eb0:	ddc00815 	stw	r23,32(sp)
  805eb4:	dd400615 	stw	r21,24(sp)
  805eb8:	dd000515 	stw	r20,20(sp)
  805ebc:	dcc00415 	stw	r19,16(sp)
  805ec0:	dc400215 	stw	r17,8(sp)
  805ec4:	dc000115 	stw	r16,4(sp)
  805ec8:	302d883a 	mov	r22,r6
  805ecc:	2039883a 	mov	fp,r4
  805ed0:	2825883a 	mov	r18,r5
  805ed4:	10001c26 	beq	r2,zero,805f48 <__sfvwrite_r+0xb0>
  805ed8:	29c0030b 	ldhu	r7,12(r5)
  805edc:	3880020c 	andi	r2,r7,8
  805ee0:	10002726 	beq	r2,zero,805f80 <__sfvwrite_r+0xe8>
  805ee4:	28800417 	ldw	r2,16(r5)
  805ee8:	10002526 	beq	r2,zero,805f80 <__sfvwrite_r+0xe8>
  805eec:	3880008c 	andi	r2,r7,2
  805ef0:	b5400017 	ldw	r21,0(r22)
  805ef4:	10002826 	beq	r2,zero,805f98 <__sfvwrite_r+0x100>
  805ef8:	0021883a 	mov	r16,zero
  805efc:	0023883a 	mov	r17,zero
  805f00:	880d883a 	mov	r6,r17
  805f04:	e009883a 	mov	r4,fp
  805f08:	00810004 	movi	r2,1024
  805f0c:	80006e26 	beq	r16,zero,8060c8 <__sfvwrite_r+0x230>
  805f10:	800f883a 	mov	r7,r16
  805f14:	91400717 	ldw	r5,28(r18)
  805f18:	1400012e 	bgeu	r2,r16,805f20 <__sfvwrite_r+0x88>
  805f1c:	100f883a 	mov	r7,r2
  805f20:	90c00917 	ldw	r3,36(r18)
  805f24:	183ee83a 	callr	r3
  805f28:	1007883a 	mov	r3,r2
  805f2c:	80a1c83a 	sub	r16,r16,r2
  805f30:	88a3883a 	add	r17,r17,r2
  805f34:	00806d0e 	bge	zero,r2,8060ec <__sfvwrite_r+0x254>
  805f38:	b0800217 	ldw	r2,8(r22)
  805f3c:	10c5c83a 	sub	r2,r2,r3
  805f40:	b0800215 	stw	r2,8(r22)
  805f44:	103fee1e 	bne	r2,zero,805f00 <__sfvwrite_r+0x68>
  805f48:	0009883a 	mov	r4,zero
  805f4c:	2005883a 	mov	r2,r4
  805f50:	dfc00a17 	ldw	ra,40(sp)
  805f54:	df000917 	ldw	fp,36(sp)
  805f58:	ddc00817 	ldw	r23,32(sp)
  805f5c:	dd800717 	ldw	r22,28(sp)
  805f60:	dd400617 	ldw	r21,24(sp)
  805f64:	dd000517 	ldw	r20,20(sp)
  805f68:	dcc00417 	ldw	r19,16(sp)
  805f6c:	dc800317 	ldw	r18,12(sp)
  805f70:	dc400217 	ldw	r17,8(sp)
  805f74:	dc000117 	ldw	r16,4(sp)
  805f78:	dec00b04 	addi	sp,sp,44
  805f7c:	f800283a 	ret
  805f80:	08044800 	call	804480 <__swsetup_r>
  805f84:	1000e41e 	bne	r2,zero,806318 <__sfvwrite_r+0x480>
  805f88:	91c0030b 	ldhu	r7,12(r18)
  805f8c:	b5400017 	ldw	r21,0(r22)
  805f90:	3880008c 	andi	r2,r7,2
  805f94:	103fd81e 	bne	r2,zero,805ef8 <__sfvwrite_r+0x60>
  805f98:	3880004c 	andi	r2,r7,1
  805f9c:	1005003a 	cmpeq	r2,r2,zero
  805fa0:	10005726 	beq	r2,zero,806100 <__sfvwrite_r+0x268>
  805fa4:	0029883a 	mov	r20,zero
  805fa8:	002f883a 	mov	r23,zero
  805fac:	a0004226 	beq	r20,zero,8060b8 <__sfvwrite_r+0x220>
  805fb0:	3880800c 	andi	r2,r7,512
  805fb4:	94000217 	ldw	r16,8(r18)
  805fb8:	10008b26 	beq	r2,zero,8061e8 <__sfvwrite_r+0x350>
  805fbc:	800d883a 	mov	r6,r16
  805fc0:	a400a536 	bltu	r20,r16,806258 <__sfvwrite_r+0x3c0>
  805fc4:	3881200c 	andi	r2,r7,1152
  805fc8:	10002726 	beq	r2,zero,806068 <__sfvwrite_r+0x1d0>
  805fcc:	90800517 	ldw	r2,20(r18)
  805fd0:	92000417 	ldw	r8,16(r18)
  805fd4:	91400017 	ldw	r5,0(r18)
  805fd8:	1087883a 	add	r3,r2,r2
  805fdc:	1887883a 	add	r3,r3,r2
  805fe0:	1808d7fa 	srli	r4,r3,31
  805fe4:	2a21c83a 	sub	r16,r5,r8
  805fe8:	80800044 	addi	r2,r16,1
  805fec:	20c9883a 	add	r4,r4,r3
  805ff0:	2027d07a 	srai	r19,r4,1
  805ff4:	a085883a 	add	r2,r20,r2
  805ff8:	980d883a 	mov	r6,r19
  805ffc:	9880022e 	bgeu	r19,r2,806008 <__sfvwrite_r+0x170>
  806000:	1027883a 	mov	r19,r2
  806004:	100d883a 	mov	r6,r2
  806008:	3881000c 	andi	r2,r7,1024
  80600c:	1000b826 	beq	r2,zero,8062f0 <__sfvwrite_r+0x458>
  806010:	300b883a 	mov	r5,r6
  806014:	e009883a 	mov	r4,fp
  806018:	08017540 	call	801754 <_malloc_r>
  80601c:	10003126 	beq	r2,zero,8060e4 <__sfvwrite_r+0x24c>
  806020:	91400417 	ldw	r5,16(r18)
  806024:	1009883a 	mov	r4,r2
  806028:	800d883a 	mov	r6,r16
  80602c:	1023883a 	mov	r17,r2
  806030:	08065c40 	call	8065c4 <memcpy>
  806034:	90c0030b 	ldhu	r3,12(r18)
  806038:	00beffc4 	movi	r2,-1025
  80603c:	1886703a 	and	r3,r3,r2
  806040:	18c02014 	ori	r3,r3,128
  806044:	90c0030d 	sth	r3,12(r18)
  806048:	9c07c83a 	sub	r3,r19,r16
  80604c:	8c05883a 	add	r2,r17,r16
  806050:	a00d883a 	mov	r6,r20
  806054:	a021883a 	mov	r16,r20
  806058:	90800015 	stw	r2,0(r18)
  80605c:	90c00215 	stw	r3,8(r18)
  806060:	94400415 	stw	r17,16(r18)
  806064:	94c00515 	stw	r19,20(r18)
  806068:	91000017 	ldw	r4,0(r18)
  80606c:	b80b883a 	mov	r5,r23
  806070:	a023883a 	mov	r17,r20
  806074:	08066640 	call	806664 <memmove>
  806078:	90c00217 	ldw	r3,8(r18)
  80607c:	90800017 	ldw	r2,0(r18)
  806080:	a027883a 	mov	r19,r20
  806084:	1c07c83a 	sub	r3,r3,r16
  806088:	1405883a 	add	r2,r2,r16
  80608c:	90c00215 	stw	r3,8(r18)
  806090:	a021883a 	mov	r16,r20
  806094:	90800015 	stw	r2,0(r18)
  806098:	b0800217 	ldw	r2,8(r22)
  80609c:	1405c83a 	sub	r2,r2,r16
  8060a0:	b0800215 	stw	r2,8(r22)
  8060a4:	103fa826 	beq	r2,zero,805f48 <__sfvwrite_r+0xb0>
  8060a8:	a469c83a 	sub	r20,r20,r17
  8060ac:	91c0030b 	ldhu	r7,12(r18)
  8060b0:	bcef883a 	add	r23,r23,r19
  8060b4:	a03fbe1e 	bne	r20,zero,805fb0 <__sfvwrite_r+0x118>
  8060b8:	adc00017 	ldw	r23,0(r21)
  8060bc:	ad000117 	ldw	r20,4(r21)
  8060c0:	ad400204 	addi	r21,r21,8
  8060c4:	003fb906 	br	805fac <__sfvwrite_r+0x114>
  8060c8:	ac400017 	ldw	r17,0(r21)
  8060cc:	ac000117 	ldw	r16,4(r21)
  8060d0:	ad400204 	addi	r21,r21,8
  8060d4:	003f8a06 	br	805f00 <__sfvwrite_r+0x68>
  8060d8:	91400417 	ldw	r5,16(r18)
  8060dc:	e009883a 	mov	r4,fp
  8060e0:	0800c580 	call	800c58 <_free_r>
  8060e4:	00800304 	movi	r2,12
  8060e8:	e0800015 	stw	r2,0(fp)
  8060ec:	9080030b 	ldhu	r2,12(r18)
  8060f0:	013fffc4 	movi	r4,-1
  8060f4:	10801014 	ori	r2,r2,64
  8060f8:	9080030d 	sth	r2,12(r18)
  8060fc:	003f9306 	br	805f4c <__sfvwrite_r+0xb4>
  806100:	0027883a 	mov	r19,zero
  806104:	002f883a 	mov	r23,zero
  806108:	d8000015 	stw	zero,0(sp)
  80610c:	0029883a 	mov	r20,zero
  806110:	98001e26 	beq	r19,zero,80618c <__sfvwrite_r+0x2f4>
  806114:	d8c00017 	ldw	r3,0(sp)
  806118:	1804c03a 	cmpne	r2,r3,zero
  80611c:	10005e26 	beq	r2,zero,806298 <__sfvwrite_r+0x400>
  806120:	9821883a 	mov	r16,r19
  806124:	a4c0012e 	bgeu	r20,r19,80612c <__sfvwrite_r+0x294>
  806128:	a021883a 	mov	r16,r20
  80612c:	91000017 	ldw	r4,0(r18)
  806130:	90800417 	ldw	r2,16(r18)
  806134:	91800217 	ldw	r6,8(r18)
  806138:	91c00517 	ldw	r7,20(r18)
  80613c:	1100022e 	bgeu	r2,r4,806148 <__sfvwrite_r+0x2b0>
  806140:	31e3883a 	add	r17,r6,r7
  806144:	8c001616 	blt	r17,r16,8061a0 <__sfvwrite_r+0x308>
  806148:	81c03816 	blt	r16,r7,80622c <__sfvwrite_r+0x394>
  80614c:	90c00917 	ldw	r3,36(r18)
  806150:	91400717 	ldw	r5,28(r18)
  806154:	e009883a 	mov	r4,fp
  806158:	b80d883a 	mov	r6,r23
  80615c:	183ee83a 	callr	r3
  806160:	1023883a 	mov	r17,r2
  806164:	00bfe10e 	bge	zero,r2,8060ec <__sfvwrite_r+0x254>
  806168:	a469c83a 	sub	r20,r20,r17
  80616c:	a0001826 	beq	r20,zero,8061d0 <__sfvwrite_r+0x338>
  806170:	b0800217 	ldw	r2,8(r22)
  806174:	1445c83a 	sub	r2,r2,r17
  806178:	b0800215 	stw	r2,8(r22)
  80617c:	103f7226 	beq	r2,zero,805f48 <__sfvwrite_r+0xb0>
  806180:	9c67c83a 	sub	r19,r19,r17
  806184:	bc6f883a 	add	r23,r23,r17
  806188:	983fe21e 	bne	r19,zero,806114 <__sfvwrite_r+0x27c>
  80618c:	adc00017 	ldw	r23,0(r21)
  806190:	acc00117 	ldw	r19,4(r21)
  806194:	ad400204 	addi	r21,r21,8
  806198:	d8000015 	stw	zero,0(sp)
  80619c:	003fdc06 	br	806110 <__sfvwrite_r+0x278>
  8061a0:	b80b883a 	mov	r5,r23
  8061a4:	880d883a 	mov	r6,r17
  8061a8:	08066640 	call	806664 <memmove>
  8061ac:	90c00017 	ldw	r3,0(r18)
  8061b0:	e009883a 	mov	r4,fp
  8061b4:	900b883a 	mov	r5,r18
  8061b8:	1c47883a 	add	r3,r3,r17
  8061bc:	90c00015 	stw	r3,0(r18)
  8061c0:	08004cc0 	call	8004cc <_fflush_r>
  8061c4:	103fc91e 	bne	r2,zero,8060ec <__sfvwrite_r+0x254>
  8061c8:	a469c83a 	sub	r20,r20,r17
  8061cc:	a03fe81e 	bne	r20,zero,806170 <__sfvwrite_r+0x2d8>
  8061d0:	e009883a 	mov	r4,fp
  8061d4:	900b883a 	mov	r5,r18
  8061d8:	08004cc0 	call	8004cc <_fflush_r>
  8061dc:	103fc31e 	bne	r2,zero,8060ec <__sfvwrite_r+0x254>
  8061e0:	d8000015 	stw	zero,0(sp)
  8061e4:	003fe206 	br	806170 <__sfvwrite_r+0x2d8>
  8061e8:	91000017 	ldw	r4,0(r18)
  8061ec:	90800417 	ldw	r2,16(r18)
  8061f0:	1100022e 	bgeu	r2,r4,8061fc <__sfvwrite_r+0x364>
  8061f4:	8023883a 	mov	r17,r16
  8061f8:	85003136 	bltu	r16,r20,8062c0 <__sfvwrite_r+0x428>
  8061fc:	91c00517 	ldw	r7,20(r18)
  806200:	a1c01836 	bltu	r20,r7,806264 <__sfvwrite_r+0x3cc>
  806204:	90c00917 	ldw	r3,36(r18)
  806208:	91400717 	ldw	r5,28(r18)
  80620c:	e009883a 	mov	r4,fp
  806210:	b80d883a 	mov	r6,r23
  806214:	183ee83a 	callr	r3
  806218:	1021883a 	mov	r16,r2
  80621c:	00bfb30e 	bge	zero,r2,8060ec <__sfvwrite_r+0x254>
  806220:	1023883a 	mov	r17,r2
  806224:	1027883a 	mov	r19,r2
  806228:	003f9b06 	br	806098 <__sfvwrite_r+0x200>
  80622c:	b80b883a 	mov	r5,r23
  806230:	800d883a 	mov	r6,r16
  806234:	08066640 	call	806664 <memmove>
  806238:	90c00217 	ldw	r3,8(r18)
  80623c:	90800017 	ldw	r2,0(r18)
  806240:	8023883a 	mov	r17,r16
  806244:	1c07c83a 	sub	r3,r3,r16
  806248:	1405883a 	add	r2,r2,r16
  80624c:	90c00215 	stw	r3,8(r18)
  806250:	90800015 	stw	r2,0(r18)
  806254:	003fc406 	br	806168 <__sfvwrite_r+0x2d0>
  806258:	a00d883a 	mov	r6,r20
  80625c:	a021883a 	mov	r16,r20
  806260:	003f8106 	br	806068 <__sfvwrite_r+0x1d0>
  806264:	b80b883a 	mov	r5,r23
  806268:	a00d883a 	mov	r6,r20
  80626c:	08066640 	call	806664 <memmove>
  806270:	90c00217 	ldw	r3,8(r18)
  806274:	90800017 	ldw	r2,0(r18)
  806278:	a021883a 	mov	r16,r20
  80627c:	1d07c83a 	sub	r3,r3,r20
  806280:	1505883a 	add	r2,r2,r20
  806284:	a023883a 	mov	r17,r20
  806288:	a027883a 	mov	r19,r20
  80628c:	90c00215 	stw	r3,8(r18)
  806290:	90800015 	stw	r2,0(r18)
  806294:	003f8006 	br	806098 <__sfvwrite_r+0x200>
  806298:	b809883a 	mov	r4,r23
  80629c:	01400284 	movi	r5,10
  8062a0:	980d883a 	mov	r6,r19
  8062a4:	08064e00 	call	8064e0 <memchr>
  8062a8:	10001726 	beq	r2,zero,806308 <__sfvwrite_r+0x470>
  8062ac:	15c5c83a 	sub	r2,r2,r23
  8062b0:	15000044 	addi	r20,r2,1
  8062b4:	00800044 	movi	r2,1
  8062b8:	d8800015 	stw	r2,0(sp)
  8062bc:	003f9806 	br	806120 <__sfvwrite_r+0x288>
  8062c0:	b80b883a 	mov	r5,r23
  8062c4:	800d883a 	mov	r6,r16
  8062c8:	08066640 	call	806664 <memmove>
  8062cc:	90c00017 	ldw	r3,0(r18)
  8062d0:	e009883a 	mov	r4,fp
  8062d4:	900b883a 	mov	r5,r18
  8062d8:	1c07883a 	add	r3,r3,r16
  8062dc:	90c00015 	stw	r3,0(r18)
  8062e0:	8027883a 	mov	r19,r16
  8062e4:	08004cc0 	call	8004cc <_fflush_r>
  8062e8:	103f6b26 	beq	r2,zero,806098 <__sfvwrite_r+0x200>
  8062ec:	003f7f06 	br	8060ec <__sfvwrite_r+0x254>
  8062f0:	400b883a 	mov	r5,r8
  8062f4:	e009883a 	mov	r4,fp
  8062f8:	08077b00 	call	8077b0 <_realloc_r>
  8062fc:	103f7626 	beq	r2,zero,8060d8 <__sfvwrite_r+0x240>
  806300:	1023883a 	mov	r17,r2
  806304:	003f5006 	br	806048 <__sfvwrite_r+0x1b0>
  806308:	00c00044 	movi	r3,1
  80630c:	9d000044 	addi	r20,r19,1
  806310:	d8c00015 	stw	r3,0(sp)
  806314:	003f8206 	br	806120 <__sfvwrite_r+0x288>
  806318:	9080030b 	ldhu	r2,12(r18)
  80631c:	00c00244 	movi	r3,9
  806320:	013fffc4 	movi	r4,-1
  806324:	10801014 	ori	r2,r2,64
  806328:	9080030d 	sth	r2,12(r18)
  80632c:	e0c00015 	stw	r3,0(fp)
  806330:	003f0606 	br	805f4c <__sfvwrite_r+0xb4>

00806334 <_isatty_r>:
  806334:	defffd04 	addi	sp,sp,-12
  806338:	dc000015 	stw	r16,0(sp)
  80633c:	04002074 	movhi	r16,129
  806340:	840a6d04 	addi	r16,r16,10676
  806344:	dc400115 	stw	r17,4(sp)
  806348:	80000015 	stw	zero,0(r16)
  80634c:	2023883a 	mov	r17,r4
  806350:	2809883a 	mov	r4,r5
  806354:	dfc00215 	stw	ra,8(sp)
  806358:	080a8300 	call	80a830 <isatty>
  80635c:	1007883a 	mov	r3,r2
  806360:	00bfffc4 	movi	r2,-1
  806364:	18800626 	beq	r3,r2,806380 <_isatty_r+0x4c>
  806368:	1805883a 	mov	r2,r3
  80636c:	dfc00217 	ldw	ra,8(sp)
  806370:	dc400117 	ldw	r17,4(sp)
  806374:	dc000017 	ldw	r16,0(sp)
  806378:	dec00304 	addi	sp,sp,12
  80637c:	f800283a 	ret
  806380:	80800017 	ldw	r2,0(r16)
  806384:	103ff826 	beq	r2,zero,806368 <_isatty_r+0x34>
  806388:	88800015 	stw	r2,0(r17)
  80638c:	1805883a 	mov	r2,r3
  806390:	dfc00217 	ldw	ra,8(sp)
  806394:	dc400117 	ldw	r17,4(sp)
  806398:	dc000017 	ldw	r16,0(sp)
  80639c:	dec00304 	addi	sp,sp,12
  8063a0:	f800283a 	ret

008063a4 <__locale_charset>:
  8063a4:	d0a00517 	ldw	r2,-32748(gp)
  8063a8:	f800283a 	ret

008063ac <_localeconv_r>:
  8063ac:	00802074 	movhi	r2,129
  8063b0:	10baf204 	addi	r2,r2,-5176
  8063b4:	f800283a 	ret

008063b8 <localeconv>:
  8063b8:	00802074 	movhi	r2,129
  8063bc:	10834504 	addi	r2,r2,3348
  8063c0:	11000017 	ldw	r4,0(r2)
  8063c4:	08063ac1 	jmpi	8063ac <_localeconv_r>

008063c8 <_setlocale_r>:
  8063c8:	defffc04 	addi	sp,sp,-16
  8063cc:	00c02074 	movhi	r3,129
  8063d0:	18fac804 	addi	r3,r3,-5344
  8063d4:	dc800215 	stw	r18,8(sp)
  8063d8:	dc400115 	stw	r17,4(sp)
  8063dc:	dc000015 	stw	r16,0(sp)
  8063e0:	2023883a 	mov	r17,r4
  8063e4:	2825883a 	mov	r18,r5
  8063e8:	dfc00315 	stw	ra,12(sp)
  8063ec:	3021883a 	mov	r16,r6
  8063f0:	3009883a 	mov	r4,r6
  8063f4:	180b883a 	mov	r5,r3
  8063f8:	30000926 	beq	r6,zero,806420 <_setlocale_r+0x58>
  8063fc:	0807e140 	call	807e14 <strcmp>
  806400:	8009883a 	mov	r4,r16
  806404:	01402074 	movhi	r5,129
  806408:	297ad904 	addi	r5,r5,-5276
  80640c:	10000b1e 	bne	r2,zero,80643c <_setlocale_r+0x74>
  806410:	8c000d15 	stw	r16,52(r17)
  806414:	8c800c15 	stw	r18,48(r17)
  806418:	00c02074 	movhi	r3,129
  80641c:	18fac804 	addi	r3,r3,-5344
  806420:	1805883a 	mov	r2,r3
  806424:	dfc00317 	ldw	ra,12(sp)
  806428:	dc800217 	ldw	r18,8(sp)
  80642c:	dc400117 	ldw	r17,4(sp)
  806430:	dc000017 	ldw	r16,0(sp)
  806434:	dec00404 	addi	sp,sp,16
  806438:	f800283a 	ret
  80643c:	0807e140 	call	807e14 <strcmp>
  806440:	0007883a 	mov	r3,zero
  806444:	103ff226 	beq	r2,zero,806410 <_setlocale_r+0x48>
  806448:	003ff506 	br	806420 <_setlocale_r+0x58>

0080644c <setlocale>:
  80644c:	01802074 	movhi	r6,129
  806450:	31834504 	addi	r6,r6,3348
  806454:	2007883a 	mov	r3,r4
  806458:	31000017 	ldw	r4,0(r6)
  80645c:	280d883a 	mov	r6,r5
  806460:	180b883a 	mov	r5,r3
  806464:	08063c81 	jmpi	8063c8 <_setlocale_r>

00806468 <_lseek_r>:
  806468:	defffd04 	addi	sp,sp,-12
  80646c:	dc000015 	stw	r16,0(sp)
  806470:	04002074 	movhi	r16,129
  806474:	840a6d04 	addi	r16,r16,10676
  806478:	dc400115 	stw	r17,4(sp)
  80647c:	80000015 	stw	zero,0(r16)
  806480:	2023883a 	mov	r17,r4
  806484:	2809883a 	mov	r4,r5
  806488:	300b883a 	mov	r5,r6
  80648c:	380d883a 	mov	r6,r7
  806490:	dfc00215 	stw	ra,8(sp)
  806494:	080aa3c0 	call	80aa3c <lseek>
  806498:	1007883a 	mov	r3,r2
  80649c:	00bfffc4 	movi	r2,-1
  8064a0:	18800626 	beq	r3,r2,8064bc <_lseek_r+0x54>
  8064a4:	1805883a 	mov	r2,r3
  8064a8:	dfc00217 	ldw	ra,8(sp)
  8064ac:	dc400117 	ldw	r17,4(sp)
  8064b0:	dc000017 	ldw	r16,0(sp)
  8064b4:	dec00304 	addi	sp,sp,12
  8064b8:	f800283a 	ret
  8064bc:	80800017 	ldw	r2,0(r16)
  8064c0:	103ff826 	beq	r2,zero,8064a4 <_lseek_r+0x3c>
  8064c4:	88800015 	stw	r2,0(r17)
  8064c8:	1805883a 	mov	r2,r3
  8064cc:	dfc00217 	ldw	ra,8(sp)
  8064d0:	dc400117 	ldw	r17,4(sp)
  8064d4:	dc000017 	ldw	r16,0(sp)
  8064d8:	dec00304 	addi	sp,sp,12
  8064dc:	f800283a 	ret

008064e0 <memchr>:
  8064e0:	008000c4 	movi	r2,3
  8064e4:	29403fcc 	andi	r5,r5,255
  8064e8:	2007883a 	mov	r3,r4
  8064ec:	1180022e 	bgeu	r2,r6,8064f8 <memchr+0x18>
  8064f0:	2084703a 	and	r2,r4,r2
  8064f4:	10000b26 	beq	r2,zero,806524 <memchr+0x44>
  8064f8:	313fffc4 	addi	r4,r6,-1
  8064fc:	3000051e 	bne	r6,zero,806514 <memchr+0x34>
  806500:	00002c06 	br	8065b4 <memchr+0xd4>
  806504:	213fffc4 	addi	r4,r4,-1
  806508:	00bfffc4 	movi	r2,-1
  80650c:	18c00044 	addi	r3,r3,1
  806510:	20802826 	beq	r4,r2,8065b4 <memchr+0xd4>
  806514:	18800003 	ldbu	r2,0(r3)
  806518:	28bffa1e 	bne	r5,r2,806504 <memchr+0x24>
  80651c:	1805883a 	mov	r2,r3
  806520:	f800283a 	ret
  806524:	0011883a 	mov	r8,zero
  806528:	0007883a 	mov	r3,zero
  80652c:	01c00104 	movi	r7,4
  806530:	4004923a 	slli	r2,r8,8
  806534:	18c00044 	addi	r3,r3,1
  806538:	1151883a 	add	r8,r2,r5
  80653c:	19fffc1e 	bne	r3,r7,806530 <memchr+0x50>
  806540:	02bfbff4 	movhi	r10,65279
  806544:	52bfbfc4 	addi	r10,r10,-257
  806548:	02602074 	movhi	r9,32897
  80654c:	4a602004 	addi	r9,r9,-32640
  806550:	02c000c4 	movi	r11,3
  806554:	20800017 	ldw	r2,0(r4)
  806558:	31bfff04 	addi	r6,r6,-4
  80655c:	200f883a 	mov	r7,r4
  806560:	1204f03a 	xor	r2,r2,r8
  806564:	1287883a 	add	r3,r2,r10
  806568:	1a46703a 	and	r3,r3,r9
  80656c:	0084303a 	nor	r2,zero,r2
  806570:	10c4703a 	and	r2,r2,r3
  806574:	10000b26 	beq	r2,zero,8065a4 <memchr+0xc4>
  806578:	20800003 	ldbu	r2,0(r4)
  80657c:	28800f26 	beq	r5,r2,8065bc <memchr+0xdc>
  806580:	20800043 	ldbu	r2,1(r4)
  806584:	21c00044 	addi	r7,r4,1
  806588:	28800c26 	beq	r5,r2,8065bc <memchr+0xdc>
  80658c:	20800083 	ldbu	r2,2(r4)
  806590:	21c00084 	addi	r7,r4,2
  806594:	28800926 	beq	r5,r2,8065bc <memchr+0xdc>
  806598:	208000c3 	ldbu	r2,3(r4)
  80659c:	21c000c4 	addi	r7,r4,3
  8065a0:	28800626 	beq	r5,r2,8065bc <memchr+0xdc>
  8065a4:	21000104 	addi	r4,r4,4
  8065a8:	59bfea36 	bltu	r11,r6,806554 <memchr+0x74>
  8065ac:	2007883a 	mov	r3,r4
  8065b0:	003fd106 	br	8064f8 <memchr+0x18>
  8065b4:	0005883a 	mov	r2,zero
  8065b8:	f800283a 	ret
  8065bc:	3805883a 	mov	r2,r7
  8065c0:	f800283a 	ret

008065c4 <memcpy>:
  8065c4:	01c003c4 	movi	r7,15
  8065c8:	2007883a 	mov	r3,r4
  8065cc:	3980032e 	bgeu	r7,r6,8065dc <memcpy+0x18>
  8065d0:	2904b03a 	or	r2,r5,r4
  8065d4:	108000cc 	andi	r2,r2,3
  8065d8:	10000926 	beq	r2,zero,806600 <memcpy+0x3c>
  8065dc:	30000626 	beq	r6,zero,8065f8 <memcpy+0x34>
  8065e0:	30cd883a 	add	r6,r6,r3
  8065e4:	28800003 	ldbu	r2,0(r5)
  8065e8:	29400044 	addi	r5,r5,1
  8065ec:	18800005 	stb	r2,0(r3)
  8065f0:	18c00044 	addi	r3,r3,1
  8065f4:	30fffb1e 	bne	r6,r3,8065e4 <memcpy+0x20>
  8065f8:	2005883a 	mov	r2,r4
  8065fc:	f800283a 	ret
  806600:	3811883a 	mov	r8,r7
  806604:	200f883a 	mov	r7,r4
  806608:	28c00017 	ldw	r3,0(r5)
  80660c:	31bffc04 	addi	r6,r6,-16
  806610:	38c00015 	stw	r3,0(r7)
  806614:	28800117 	ldw	r2,4(r5)
  806618:	38800115 	stw	r2,4(r7)
  80661c:	28c00217 	ldw	r3,8(r5)
  806620:	38c00215 	stw	r3,8(r7)
  806624:	28800317 	ldw	r2,12(r5)
  806628:	29400404 	addi	r5,r5,16
  80662c:	38800315 	stw	r2,12(r7)
  806630:	39c00404 	addi	r7,r7,16
  806634:	41bff436 	bltu	r8,r6,806608 <memcpy+0x44>
  806638:	008000c4 	movi	r2,3
  80663c:	1180072e 	bgeu	r2,r6,80665c <memcpy+0x98>
  806640:	1007883a 	mov	r3,r2
  806644:	28800017 	ldw	r2,0(r5)
  806648:	31bfff04 	addi	r6,r6,-4
  80664c:	29400104 	addi	r5,r5,4
  806650:	38800015 	stw	r2,0(r7)
  806654:	39c00104 	addi	r7,r7,4
  806658:	19bffa36 	bltu	r3,r6,806644 <memcpy+0x80>
  80665c:	3807883a 	mov	r3,r7
  806660:	003fde06 	br	8065dc <memcpy+0x18>

00806664 <memmove>:
  806664:	2807883a 	mov	r3,r5
  806668:	2011883a 	mov	r8,r4
  80666c:	29000c2e 	bgeu	r5,r4,8066a0 <memmove+0x3c>
  806670:	298f883a 	add	r7,r5,r6
  806674:	21c00a2e 	bgeu	r4,r7,8066a0 <memmove+0x3c>
  806678:	30000726 	beq	r6,zero,806698 <memmove+0x34>
  80667c:	2187883a 	add	r3,r4,r6
  806680:	198dc83a 	sub	r6,r3,r6
  806684:	39ffffc4 	addi	r7,r7,-1
  806688:	38800003 	ldbu	r2,0(r7)
  80668c:	18ffffc4 	addi	r3,r3,-1
  806690:	18800005 	stb	r2,0(r3)
  806694:	19bffb1e 	bne	r3,r6,806684 <memmove+0x20>
  806698:	2005883a 	mov	r2,r4
  80669c:	f800283a 	ret
  8066a0:	01c003c4 	movi	r7,15
  8066a4:	39800a36 	bltu	r7,r6,8066d0 <memmove+0x6c>
  8066a8:	303ffb26 	beq	r6,zero,806698 <memmove+0x34>
  8066ac:	400f883a 	mov	r7,r8
  8066b0:	320d883a 	add	r6,r6,r8
  8066b4:	28800003 	ldbu	r2,0(r5)
  8066b8:	29400044 	addi	r5,r5,1
  8066bc:	38800005 	stb	r2,0(r7)
  8066c0:	39c00044 	addi	r7,r7,1
  8066c4:	39bffb1e 	bne	r7,r6,8066b4 <memmove+0x50>
  8066c8:	2005883a 	mov	r2,r4
  8066cc:	f800283a 	ret
  8066d0:	1904b03a 	or	r2,r3,r4
  8066d4:	108000cc 	andi	r2,r2,3
  8066d8:	103ff31e 	bne	r2,zero,8066a8 <memmove+0x44>
  8066dc:	3811883a 	mov	r8,r7
  8066e0:	180b883a 	mov	r5,r3
  8066e4:	200f883a 	mov	r7,r4
  8066e8:	28c00017 	ldw	r3,0(r5)
  8066ec:	31bffc04 	addi	r6,r6,-16
  8066f0:	38c00015 	stw	r3,0(r7)
  8066f4:	28800117 	ldw	r2,4(r5)
  8066f8:	38800115 	stw	r2,4(r7)
  8066fc:	28c00217 	ldw	r3,8(r5)
  806700:	38c00215 	stw	r3,8(r7)
  806704:	28800317 	ldw	r2,12(r5)
  806708:	29400404 	addi	r5,r5,16
  80670c:	38800315 	stw	r2,12(r7)
  806710:	39c00404 	addi	r7,r7,16
  806714:	41bff436 	bltu	r8,r6,8066e8 <memmove+0x84>
  806718:	008000c4 	movi	r2,3
  80671c:	1180072e 	bgeu	r2,r6,80673c <memmove+0xd8>
  806720:	1007883a 	mov	r3,r2
  806724:	28800017 	ldw	r2,0(r5)
  806728:	31bfff04 	addi	r6,r6,-4
  80672c:	29400104 	addi	r5,r5,4
  806730:	38800015 	stw	r2,0(r7)
  806734:	39c00104 	addi	r7,r7,4
  806738:	19bffa36 	bltu	r3,r6,806724 <memmove+0xc0>
  80673c:	3811883a 	mov	r8,r7
  806740:	003fd906 	br	8066a8 <memmove+0x44>

00806744 <_Bfree>:
  806744:	28000826 	beq	r5,zero,806768 <_Bfree+0x24>
  806748:	28800117 	ldw	r2,4(r5)
  80674c:	21001317 	ldw	r4,76(r4)
  806750:	1085883a 	add	r2,r2,r2
  806754:	1085883a 	add	r2,r2,r2
  806758:	1105883a 	add	r2,r2,r4
  80675c:	10c00017 	ldw	r3,0(r2)
  806760:	28c00015 	stw	r3,0(r5)
  806764:	11400015 	stw	r5,0(r2)
  806768:	f800283a 	ret

0080676c <__hi0bits>:
  80676c:	20bfffec 	andhi	r2,r4,65535
  806770:	10001426 	beq	r2,zero,8067c4 <__hi0bits+0x58>
  806774:	0007883a 	mov	r3,zero
  806778:	20bfc02c 	andhi	r2,r4,65280
  80677c:	1000021e 	bne	r2,zero,806788 <__hi0bits+0x1c>
  806780:	2008923a 	slli	r4,r4,8
  806784:	18c00204 	addi	r3,r3,8
  806788:	20bc002c 	andhi	r2,r4,61440
  80678c:	1000021e 	bne	r2,zero,806798 <__hi0bits+0x2c>
  806790:	2008913a 	slli	r4,r4,4
  806794:	18c00104 	addi	r3,r3,4
  806798:	20b0002c 	andhi	r2,r4,49152
  80679c:	1000031e 	bne	r2,zero,8067ac <__hi0bits+0x40>
  8067a0:	2105883a 	add	r2,r4,r4
  8067a4:	18c00084 	addi	r3,r3,2
  8067a8:	1089883a 	add	r4,r2,r2
  8067ac:	20000316 	blt	r4,zero,8067bc <__hi0bits+0x50>
  8067b0:	2090002c 	andhi	r2,r4,16384
  8067b4:	10000626 	beq	r2,zero,8067d0 <__hi0bits+0x64>
  8067b8:	18c00044 	addi	r3,r3,1
  8067bc:	1805883a 	mov	r2,r3
  8067c0:	f800283a 	ret
  8067c4:	2008943a 	slli	r4,r4,16
  8067c8:	00c00404 	movi	r3,16
  8067cc:	003fea06 	br	806778 <__hi0bits+0xc>
  8067d0:	00c00804 	movi	r3,32
  8067d4:	1805883a 	mov	r2,r3
  8067d8:	f800283a 	ret

008067dc <__lo0bits>:
  8067dc:	20c00017 	ldw	r3,0(r4)
  8067e0:	188001cc 	andi	r2,r3,7
  8067e4:	10000a26 	beq	r2,zero,806810 <__lo0bits+0x34>
  8067e8:	1880004c 	andi	r2,r3,1
  8067ec:	1005003a 	cmpeq	r2,r2,zero
  8067f0:	10002126 	beq	r2,zero,806878 <__lo0bits+0x9c>
  8067f4:	1880008c 	andi	r2,r3,2
  8067f8:	1000251e 	bne	r2,zero,806890 <__lo0bits+0xb4>
  8067fc:	1804d0ba 	srli	r2,r3,2
  806800:	01400084 	movi	r5,2
  806804:	20800015 	stw	r2,0(r4)
  806808:	2805883a 	mov	r2,r5
  80680c:	f800283a 	ret
  806810:	18bfffcc 	andi	r2,r3,65535
  806814:	10001526 	beq	r2,zero,80686c <__lo0bits+0x90>
  806818:	000b883a 	mov	r5,zero
  80681c:	18803fcc 	andi	r2,r3,255
  806820:	1000021e 	bne	r2,zero,80682c <__lo0bits+0x50>
  806824:	1806d23a 	srli	r3,r3,8
  806828:	29400204 	addi	r5,r5,8
  80682c:	188003cc 	andi	r2,r3,15
  806830:	1000021e 	bne	r2,zero,80683c <__lo0bits+0x60>
  806834:	1806d13a 	srli	r3,r3,4
  806838:	29400104 	addi	r5,r5,4
  80683c:	188000cc 	andi	r2,r3,3
  806840:	1000021e 	bne	r2,zero,80684c <__lo0bits+0x70>
  806844:	1806d0ba 	srli	r3,r3,2
  806848:	29400084 	addi	r5,r5,2
  80684c:	1880004c 	andi	r2,r3,1
  806850:	1000031e 	bne	r2,zero,806860 <__lo0bits+0x84>
  806854:	1806d07a 	srli	r3,r3,1
  806858:	18000a26 	beq	r3,zero,806884 <__lo0bits+0xa8>
  80685c:	29400044 	addi	r5,r5,1
  806860:	2805883a 	mov	r2,r5
  806864:	20c00015 	stw	r3,0(r4)
  806868:	f800283a 	ret
  80686c:	1806d43a 	srli	r3,r3,16
  806870:	01400404 	movi	r5,16
  806874:	003fe906 	br	80681c <__lo0bits+0x40>
  806878:	000b883a 	mov	r5,zero
  80687c:	2805883a 	mov	r2,r5
  806880:	f800283a 	ret
  806884:	01400804 	movi	r5,32
  806888:	2805883a 	mov	r2,r5
  80688c:	f800283a 	ret
  806890:	1804d07a 	srli	r2,r3,1
  806894:	01400044 	movi	r5,1
  806898:	20800015 	stw	r2,0(r4)
  80689c:	003fda06 	br	806808 <__lo0bits+0x2c>

008068a0 <__mcmp>:
  8068a0:	20800417 	ldw	r2,16(r4)
  8068a4:	28c00417 	ldw	r3,16(r5)
  8068a8:	10cfc83a 	sub	r7,r2,r3
  8068ac:	38000c1e 	bne	r7,zero,8068e0 <__mcmp+0x40>
  8068b0:	18c5883a 	add	r2,r3,r3
  8068b4:	1085883a 	add	r2,r2,r2
  8068b8:	10c00504 	addi	r3,r2,20
  8068bc:	21000504 	addi	r4,r4,20
  8068c0:	28cb883a 	add	r5,r5,r3
  8068c4:	2085883a 	add	r2,r4,r2
  8068c8:	10bfff04 	addi	r2,r2,-4
  8068cc:	297fff04 	addi	r5,r5,-4
  8068d0:	11800017 	ldw	r6,0(r2)
  8068d4:	28c00017 	ldw	r3,0(r5)
  8068d8:	30c0031e 	bne	r6,r3,8068e8 <__mcmp+0x48>
  8068dc:	20bffa36 	bltu	r4,r2,8068c8 <__mcmp+0x28>
  8068e0:	3805883a 	mov	r2,r7
  8068e4:	f800283a 	ret
  8068e8:	30c00336 	bltu	r6,r3,8068f8 <__mcmp+0x58>
  8068ec:	01c00044 	movi	r7,1
  8068f0:	3805883a 	mov	r2,r7
  8068f4:	f800283a 	ret
  8068f8:	01ffffc4 	movi	r7,-1
  8068fc:	003ff806 	br	8068e0 <__mcmp+0x40>

00806900 <__ulp>:
  806900:	295ffc2c 	andhi	r5,r5,32752
  806904:	013f3034 	movhi	r4,64704
  806908:	290b883a 	add	r5,r5,r4
  80690c:	0145c83a 	sub	r2,zero,r5
  806910:	1007d53a 	srai	r3,r2,20
  806914:	000d883a 	mov	r6,zero
  806918:	0140040e 	bge	zero,r5,80692c <__ulp+0x2c>
  80691c:	280f883a 	mov	r7,r5
  806920:	3807883a 	mov	r3,r7
  806924:	3005883a 	mov	r2,r6
  806928:	f800283a 	ret
  80692c:	008004c4 	movi	r2,19
  806930:	193ffb04 	addi	r4,r3,-20
  806934:	10c00c0e 	bge	r2,r3,806968 <__ulp+0x68>
  806938:	008007c4 	movi	r2,31
  80693c:	1107c83a 	sub	r3,r2,r4
  806940:	00800784 	movi	r2,30
  806944:	01400044 	movi	r5,1
  806948:	11000216 	blt	r2,r4,806954 <__ulp+0x54>
  80694c:	00800044 	movi	r2,1
  806950:	10ca983a 	sll	r5,r2,r3
  806954:	000f883a 	mov	r7,zero
  806958:	280d883a 	mov	r6,r5
  80695c:	3807883a 	mov	r3,r7
  806960:	3005883a 	mov	r2,r6
  806964:	f800283a 	ret
  806968:	00800234 	movhi	r2,8
  80696c:	10cfd83a 	sra	r7,r2,r3
  806970:	000d883a 	mov	r6,zero
  806974:	3005883a 	mov	r2,r6
  806978:	3807883a 	mov	r3,r7
  80697c:	f800283a 	ret

00806980 <__b2d>:
  806980:	20800417 	ldw	r2,16(r4)
  806984:	defff904 	addi	sp,sp,-28
  806988:	dd000415 	stw	r20,16(sp)
  80698c:	1085883a 	add	r2,r2,r2
  806990:	25000504 	addi	r20,r4,20
  806994:	1085883a 	add	r2,r2,r2
  806998:	dc000015 	stw	r16,0(sp)
  80699c:	a0a1883a 	add	r16,r20,r2
  8069a0:	dd400515 	stw	r21,20(sp)
  8069a4:	857fff17 	ldw	r21,-4(r16)
  8069a8:	dc400115 	stw	r17,4(sp)
  8069ac:	dfc00615 	stw	ra,24(sp)
  8069b0:	a809883a 	mov	r4,r21
  8069b4:	2823883a 	mov	r17,r5
  8069b8:	dcc00315 	stw	r19,12(sp)
  8069bc:	dc800215 	stw	r18,8(sp)
  8069c0:	080676c0 	call	80676c <__hi0bits>
  8069c4:	100b883a 	mov	r5,r2
  8069c8:	00800804 	movi	r2,32
  8069cc:	1145c83a 	sub	r2,r2,r5
  8069d0:	88800015 	stw	r2,0(r17)
  8069d4:	00800284 	movi	r2,10
  8069d8:	80ffff04 	addi	r3,r16,-4
  8069dc:	11401416 	blt	r2,r5,806a30 <__b2d+0xb0>
  8069e0:	008002c4 	movi	r2,11
  8069e4:	1149c83a 	sub	r4,r2,r5
  8069e8:	a0c02736 	bltu	r20,r3,806a88 <__b2d+0x108>
  8069ec:	000d883a 	mov	r6,zero
  8069f0:	28800544 	addi	r2,r5,21
  8069f4:	a906d83a 	srl	r3,r21,r4
  8069f8:	a884983a 	sll	r2,r21,r2
  8069fc:	1ccffc34 	orhi	r19,r3,16368
  806a00:	11a4b03a 	or	r18,r2,r6
  806a04:	9005883a 	mov	r2,r18
  806a08:	9807883a 	mov	r3,r19
  806a0c:	dfc00617 	ldw	ra,24(sp)
  806a10:	dd400517 	ldw	r21,20(sp)
  806a14:	dd000417 	ldw	r20,16(sp)
  806a18:	dcc00317 	ldw	r19,12(sp)
  806a1c:	dc800217 	ldw	r18,8(sp)
  806a20:	dc400117 	ldw	r17,4(sp)
  806a24:	dc000017 	ldw	r16,0(sp)
  806a28:	dec00704 	addi	sp,sp,28
  806a2c:	f800283a 	ret
  806a30:	a0c00e36 	bltu	r20,r3,806a6c <__b2d+0xec>
  806a34:	293ffd44 	addi	r4,r5,-11
  806a38:	000d883a 	mov	r6,zero
  806a3c:	20000f26 	beq	r4,zero,806a7c <__b2d+0xfc>
  806a40:	00800804 	movi	r2,32
  806a44:	110bc83a 	sub	r5,r2,r4
  806a48:	a0c01236 	bltu	r20,r3,806a94 <__b2d+0x114>
  806a4c:	000f883a 	mov	r7,zero
  806a50:	a904983a 	sll	r2,r21,r4
  806a54:	3146d83a 	srl	r3,r6,r5
  806a58:	3108983a 	sll	r4,r6,r4
  806a5c:	108ffc34 	orhi	r2,r2,16368
  806a60:	18a6b03a 	or	r19,r3,r2
  806a64:	3924b03a 	or	r18,r7,r4
  806a68:	003fe606 	br	806a04 <__b2d+0x84>
  806a6c:	293ffd44 	addi	r4,r5,-11
  806a70:	81bffe17 	ldw	r6,-8(r16)
  806a74:	80fffe04 	addi	r3,r16,-8
  806a78:	203ff11e 	bne	r4,zero,806a40 <__b2d+0xc0>
  806a7c:	accffc34 	orhi	r19,r21,16368
  806a80:	3025883a 	mov	r18,r6
  806a84:	003fdf06 	br	806a04 <__b2d+0x84>
  806a88:	18bfff17 	ldw	r2,-4(r3)
  806a8c:	110cd83a 	srl	r6,r2,r4
  806a90:	003fd706 	br	8069f0 <__b2d+0x70>
  806a94:	18bfff17 	ldw	r2,-4(r3)
  806a98:	114ed83a 	srl	r7,r2,r5
  806a9c:	003fec06 	br	806a50 <__b2d+0xd0>

00806aa0 <__ratio>:
  806aa0:	defff904 	addi	sp,sp,-28
  806aa4:	dc400215 	stw	r17,8(sp)
  806aa8:	2823883a 	mov	r17,r5
  806aac:	d80b883a 	mov	r5,sp
  806ab0:	dfc00615 	stw	ra,24(sp)
  806ab4:	dd000515 	stw	r20,20(sp)
  806ab8:	dcc00415 	stw	r19,16(sp)
  806abc:	dc800315 	stw	r18,12(sp)
  806ac0:	2025883a 	mov	r18,r4
  806ac4:	08069800 	call	806980 <__b2d>
  806ac8:	8809883a 	mov	r4,r17
  806acc:	d9400104 	addi	r5,sp,4
  806ad0:	1027883a 	mov	r19,r2
  806ad4:	1829883a 	mov	r20,r3
  806ad8:	08069800 	call	806980 <__b2d>
  806adc:	89000417 	ldw	r4,16(r17)
  806ae0:	91c00417 	ldw	r7,16(r18)
  806ae4:	d9800117 	ldw	r6,4(sp)
  806ae8:	180b883a 	mov	r5,r3
  806aec:	390fc83a 	sub	r7,r7,r4
  806af0:	1009883a 	mov	r4,r2
  806af4:	d8800017 	ldw	r2,0(sp)
  806af8:	380e917a 	slli	r7,r7,5
  806afc:	2011883a 	mov	r8,r4
  806b00:	1185c83a 	sub	r2,r2,r6
  806b04:	11c5883a 	add	r2,r2,r7
  806b08:	1006953a 	slli	r3,r2,20
  806b0c:	2813883a 	mov	r9,r5
  806b10:	00800d0e 	bge	zero,r2,806b48 <__ratio+0xa8>
  806b14:	1d29883a 	add	r20,r3,r20
  806b18:	a00b883a 	mov	r5,r20
  806b1c:	480f883a 	mov	r7,r9
  806b20:	9809883a 	mov	r4,r19
  806b24:	400d883a 	mov	r6,r8
  806b28:	08093d80 	call	8093d8 <__divdf3>
  806b2c:	dfc00617 	ldw	ra,24(sp)
  806b30:	dd000517 	ldw	r20,20(sp)
  806b34:	dcc00417 	ldw	r19,16(sp)
  806b38:	dc800317 	ldw	r18,12(sp)
  806b3c:	dc400217 	ldw	r17,8(sp)
  806b40:	dec00704 	addi	sp,sp,28
  806b44:	f800283a 	ret
  806b48:	28d3c83a 	sub	r9,r5,r3
  806b4c:	003ff206 	br	806b18 <__ratio+0x78>

00806b50 <_mprec_log10>:
  806b50:	defffe04 	addi	sp,sp,-8
  806b54:	008005c4 	movi	r2,23
  806b58:	dc000015 	stw	r16,0(sp)
  806b5c:	dfc00115 	stw	ra,4(sp)
  806b60:	2021883a 	mov	r16,r4
  806b64:	11000c16 	blt	r2,r4,806b98 <_mprec_log10+0x48>
  806b68:	200490fa 	slli	r2,r4,3
  806b6c:	00c02074 	movhi	r3,129
  806b70:	18fafe04 	addi	r3,r3,-5128
  806b74:	10c5883a 	add	r2,r2,r3
  806b78:	12400117 	ldw	r9,4(r2)
  806b7c:	12000017 	ldw	r8,0(r2)
  806b80:	4807883a 	mov	r3,r9
  806b84:	4005883a 	mov	r2,r8
  806b88:	dfc00117 	ldw	ra,4(sp)
  806b8c:	dc000017 	ldw	r16,0(sp)
  806b90:	dec00204 	addi	sp,sp,8
  806b94:	f800283a 	ret
  806b98:	0011883a 	mov	r8,zero
  806b9c:	024ffc34 	movhi	r9,16368
  806ba0:	0005883a 	mov	r2,zero
  806ba4:	00d00934 	movhi	r3,16420
  806ba8:	480b883a 	mov	r5,r9
  806bac:	4009883a 	mov	r4,r8
  806bb0:	180f883a 	mov	r7,r3
  806bb4:	100d883a 	mov	r6,r2
  806bb8:	08090140 	call	809014 <__muldf3>
  806bbc:	843fffc4 	addi	r16,r16,-1
  806bc0:	1011883a 	mov	r8,r2
  806bc4:	1813883a 	mov	r9,r3
  806bc8:	803ff51e 	bne	r16,zero,806ba0 <_mprec_log10+0x50>
  806bcc:	4005883a 	mov	r2,r8
  806bd0:	4807883a 	mov	r3,r9
  806bd4:	dfc00117 	ldw	ra,4(sp)
  806bd8:	dc000017 	ldw	r16,0(sp)
  806bdc:	dec00204 	addi	sp,sp,8
  806be0:	f800283a 	ret

00806be4 <__copybits>:
  806be4:	297fffc4 	addi	r5,r5,-1
  806be8:	30800417 	ldw	r2,16(r6)
  806bec:	280bd17a 	srai	r5,r5,5
  806bf0:	31800504 	addi	r6,r6,20
  806bf4:	1085883a 	add	r2,r2,r2
  806bf8:	294b883a 	add	r5,r5,r5
  806bfc:	294b883a 	add	r5,r5,r5
  806c00:	1085883a 	add	r2,r2,r2
  806c04:	290b883a 	add	r5,r5,r4
  806c08:	3087883a 	add	r3,r6,r2
  806c0c:	29400104 	addi	r5,r5,4
  806c10:	30c0052e 	bgeu	r6,r3,806c28 <__copybits+0x44>
  806c14:	30800017 	ldw	r2,0(r6)
  806c18:	31800104 	addi	r6,r6,4
  806c1c:	20800015 	stw	r2,0(r4)
  806c20:	21000104 	addi	r4,r4,4
  806c24:	30fffb36 	bltu	r6,r3,806c14 <__copybits+0x30>
  806c28:	2140032e 	bgeu	r4,r5,806c38 <__copybits+0x54>
  806c2c:	20000015 	stw	zero,0(r4)
  806c30:	21000104 	addi	r4,r4,4
  806c34:	217ffd36 	bltu	r4,r5,806c2c <__copybits+0x48>
  806c38:	f800283a 	ret

00806c3c <__any_on>:
  806c3c:	20800417 	ldw	r2,16(r4)
  806c40:	2807d17a 	srai	r3,r5,5
  806c44:	21000504 	addi	r4,r4,20
  806c48:	10c00d0e 	bge	r2,r3,806c80 <__any_on+0x44>
  806c4c:	1085883a 	add	r2,r2,r2
  806c50:	1085883a 	add	r2,r2,r2
  806c54:	208d883a 	add	r6,r4,r2
  806c58:	2180182e 	bgeu	r4,r6,806cbc <__any_on+0x80>
  806c5c:	30bfff17 	ldw	r2,-4(r6)
  806c60:	30ffff04 	addi	r3,r6,-4
  806c64:	1000041e 	bne	r2,zero,806c78 <__any_on+0x3c>
  806c68:	20c0142e 	bgeu	r4,r3,806cbc <__any_on+0x80>
  806c6c:	18ffff04 	addi	r3,r3,-4
  806c70:	18800017 	ldw	r2,0(r3)
  806c74:	103ffc26 	beq	r2,zero,806c68 <__any_on+0x2c>
  806c78:	00800044 	movi	r2,1
  806c7c:	f800283a 	ret
  806c80:	18800a0e 	bge	r3,r2,806cac <__any_on+0x70>
  806c84:	294007cc 	andi	r5,r5,31
  806c88:	28000826 	beq	r5,zero,806cac <__any_on+0x70>
  806c8c:	18c5883a 	add	r2,r3,r3
  806c90:	1085883a 	add	r2,r2,r2
  806c94:	208d883a 	add	r6,r4,r2
  806c98:	30c00017 	ldw	r3,0(r6)
  806c9c:	1944d83a 	srl	r2,r3,r5
  806ca0:	1144983a 	sll	r2,r2,r5
  806ca4:	18bff41e 	bne	r3,r2,806c78 <__any_on+0x3c>
  806ca8:	003feb06 	br	806c58 <__any_on+0x1c>
  806cac:	18c5883a 	add	r2,r3,r3
  806cb0:	1085883a 	add	r2,r2,r2
  806cb4:	208d883a 	add	r6,r4,r2
  806cb8:	003fe706 	br	806c58 <__any_on+0x1c>
  806cbc:	0005883a 	mov	r2,zero
  806cc0:	f800283a 	ret

00806cc4 <_Balloc>:
  806cc4:	20c01317 	ldw	r3,76(r4)
  806cc8:	defffb04 	addi	sp,sp,-20
  806ccc:	dcc00315 	stw	r19,12(sp)
  806cd0:	dc800215 	stw	r18,8(sp)
  806cd4:	dfc00415 	stw	ra,16(sp)
  806cd8:	2825883a 	mov	r18,r5
  806cdc:	dc400115 	stw	r17,4(sp)
  806ce0:	dc000015 	stw	r16,0(sp)
  806ce4:	2027883a 	mov	r19,r4
  806ce8:	01800404 	movi	r6,16
  806cec:	01400104 	movi	r5,4
  806cf0:	18001726 	beq	r3,zero,806d50 <_Balloc+0x8c>
  806cf4:	01400044 	movi	r5,1
  806cf8:	9485883a 	add	r2,r18,r18
  806cfc:	2ca2983a 	sll	r17,r5,r18
  806d00:	1085883a 	add	r2,r2,r2
  806d04:	10c7883a 	add	r3,r2,r3
  806d08:	1c000017 	ldw	r16,0(r3)
  806d0c:	8c4d883a 	add	r6,r17,r17
  806d10:	318d883a 	add	r6,r6,r6
  806d14:	9809883a 	mov	r4,r19
  806d18:	31800504 	addi	r6,r6,20
  806d1c:	80001226 	beq	r16,zero,806d68 <_Balloc+0xa4>
  806d20:	80800017 	ldw	r2,0(r16)
  806d24:	18800015 	stw	r2,0(r3)
  806d28:	80000415 	stw	zero,16(r16)
  806d2c:	80000315 	stw	zero,12(r16)
  806d30:	8005883a 	mov	r2,r16
  806d34:	dfc00417 	ldw	ra,16(sp)
  806d38:	dcc00317 	ldw	r19,12(sp)
  806d3c:	dc800217 	ldw	r18,8(sp)
  806d40:	dc400117 	ldw	r17,4(sp)
  806d44:	dc000017 	ldw	r16,0(sp)
  806d48:	dec00504 	addi	sp,sp,20
  806d4c:	f800283a 	ret
  806d50:	0807ed00 	call	807ed0 <_calloc_r>
  806d54:	1007883a 	mov	r3,r2
  806d58:	0021883a 	mov	r16,zero
  806d5c:	98801315 	stw	r2,76(r19)
  806d60:	103fe41e 	bne	r2,zero,806cf4 <_Balloc+0x30>
  806d64:	003ff206 	br	806d30 <_Balloc+0x6c>
  806d68:	0807ed00 	call	807ed0 <_calloc_r>
  806d6c:	103ff026 	beq	r2,zero,806d30 <_Balloc+0x6c>
  806d70:	1021883a 	mov	r16,r2
  806d74:	14800115 	stw	r18,4(r2)
  806d78:	14400215 	stw	r17,8(r2)
  806d7c:	003fea06 	br	806d28 <_Balloc+0x64>

00806d80 <__d2b>:
  806d80:	defff504 	addi	sp,sp,-44
  806d84:	dcc00515 	stw	r19,20(sp)
  806d88:	04c00044 	movi	r19,1
  806d8c:	dc000215 	stw	r16,8(sp)
  806d90:	2821883a 	mov	r16,r5
  806d94:	980b883a 	mov	r5,r19
  806d98:	ddc00915 	stw	r23,36(sp)
  806d9c:	dd800815 	stw	r22,32(sp)
  806da0:	dd400715 	stw	r21,28(sp)
  806da4:	dd000615 	stw	r20,24(sp)
  806da8:	dc800415 	stw	r18,16(sp)
  806dac:	dc400315 	stw	r17,12(sp)
  806db0:	dfc00a15 	stw	ra,40(sp)
  806db4:	3023883a 	mov	r17,r6
  806db8:	382d883a 	mov	r22,r7
  806dbc:	ddc00b17 	ldw	r23,44(sp)
  806dc0:	0806cc40 	call	806cc4 <_Balloc>
  806dc4:	1025883a 	mov	r18,r2
  806dc8:	00a00034 	movhi	r2,32768
  806dcc:	10bfffc4 	addi	r2,r2,-1
  806dd0:	8888703a 	and	r4,r17,r2
  806dd4:	202ad53a 	srli	r21,r4,20
  806dd8:	00800434 	movhi	r2,16
  806ddc:	10bfffc4 	addi	r2,r2,-1
  806de0:	8886703a 	and	r3,r17,r2
  806de4:	a829003a 	cmpeq	r20,r21,zero
  806de8:	800b883a 	mov	r5,r16
  806dec:	d8c00115 	stw	r3,4(sp)
  806df0:	94000504 	addi	r16,r18,20
  806df4:	a000021e 	bne	r20,zero,806e00 <__d2b+0x80>
  806df8:	18c00434 	orhi	r3,r3,16
  806dfc:	d8c00115 	stw	r3,4(sp)
  806e00:	28002726 	beq	r5,zero,806ea0 <__d2b+0x120>
  806e04:	d809883a 	mov	r4,sp
  806e08:	d9400015 	stw	r5,0(sp)
  806e0c:	08067dc0 	call	8067dc <__lo0bits>
  806e10:	100d883a 	mov	r6,r2
  806e14:	10003526 	beq	r2,zero,806eec <__d2b+0x16c>
  806e18:	d8c00117 	ldw	r3,4(sp)
  806e1c:	00800804 	movi	r2,32
  806e20:	1185c83a 	sub	r2,r2,r6
  806e24:	d9000017 	ldw	r4,0(sp)
  806e28:	1886983a 	sll	r3,r3,r2
  806e2c:	1906b03a 	or	r3,r3,r4
  806e30:	90c00515 	stw	r3,20(r18)
  806e34:	d8c00117 	ldw	r3,4(sp)
  806e38:	1986d83a 	srl	r3,r3,r6
  806e3c:	d8c00115 	stw	r3,4(sp)
  806e40:	180b003a 	cmpeq	r5,r3,zero
  806e44:	00800084 	movi	r2,2
  806e48:	114bc83a 	sub	r5,r2,r5
  806e4c:	80c00115 	stw	r3,4(r16)
  806e50:	91400415 	stw	r5,16(r18)
  806e54:	a0001a1e 	bne	r20,zero,806ec0 <__d2b+0x140>
  806e58:	3545883a 	add	r2,r6,r21
  806e5c:	10bef344 	addi	r2,r2,-1075
  806e60:	00c00d44 	movi	r3,53
  806e64:	b0800015 	stw	r2,0(r22)
  806e68:	1987c83a 	sub	r3,r3,r6
  806e6c:	b8c00015 	stw	r3,0(r23)
  806e70:	9005883a 	mov	r2,r18
  806e74:	dfc00a17 	ldw	ra,40(sp)
  806e78:	ddc00917 	ldw	r23,36(sp)
  806e7c:	dd800817 	ldw	r22,32(sp)
  806e80:	dd400717 	ldw	r21,28(sp)
  806e84:	dd000617 	ldw	r20,24(sp)
  806e88:	dcc00517 	ldw	r19,20(sp)
  806e8c:	dc800417 	ldw	r18,16(sp)
  806e90:	dc400317 	ldw	r17,12(sp)
  806e94:	dc000217 	ldw	r16,8(sp)
  806e98:	dec00b04 	addi	sp,sp,44
  806e9c:	f800283a 	ret
  806ea0:	d9000104 	addi	r4,sp,4
  806ea4:	08067dc0 	call	8067dc <__lo0bits>
  806ea8:	11800804 	addi	r6,r2,32
  806eac:	d8800117 	ldw	r2,4(sp)
  806eb0:	94c00415 	stw	r19,16(r18)
  806eb4:	980b883a 	mov	r5,r19
  806eb8:	90800515 	stw	r2,20(r18)
  806ebc:	a03fe626 	beq	r20,zero,806e58 <__d2b+0xd8>
  806ec0:	2945883a 	add	r2,r5,r5
  806ec4:	1085883a 	add	r2,r2,r2
  806ec8:	1405883a 	add	r2,r2,r16
  806ecc:	113fff17 	ldw	r4,-4(r2)
  806ed0:	30fef384 	addi	r3,r6,-1074
  806ed4:	2820917a 	slli	r16,r5,5
  806ed8:	b0c00015 	stw	r3,0(r22)
  806edc:	080676c0 	call	80676c <__hi0bits>
  806ee0:	80a1c83a 	sub	r16,r16,r2
  806ee4:	bc000015 	stw	r16,0(r23)
  806ee8:	003fe106 	br	806e70 <__d2b+0xf0>
  806eec:	d8800017 	ldw	r2,0(sp)
  806ef0:	90800515 	stw	r2,20(r18)
  806ef4:	d8c00117 	ldw	r3,4(sp)
  806ef8:	003fd106 	br	806e40 <__d2b+0xc0>

00806efc <__mdiff>:
  806efc:	defffb04 	addi	sp,sp,-20
  806f00:	dc000015 	stw	r16,0(sp)
  806f04:	2821883a 	mov	r16,r5
  806f08:	dc800215 	stw	r18,8(sp)
  806f0c:	300b883a 	mov	r5,r6
  806f10:	2025883a 	mov	r18,r4
  806f14:	8009883a 	mov	r4,r16
  806f18:	dc400115 	stw	r17,4(sp)
  806f1c:	dfc00415 	stw	ra,16(sp)
  806f20:	dcc00315 	stw	r19,12(sp)
  806f24:	3023883a 	mov	r17,r6
  806f28:	08068a00 	call	8068a0 <__mcmp>
  806f2c:	10004226 	beq	r2,zero,807038 <__mdiff+0x13c>
  806f30:	10005016 	blt	r2,zero,807074 <__mdiff+0x178>
  806f34:	0027883a 	mov	r19,zero
  806f38:	81400117 	ldw	r5,4(r16)
  806f3c:	9009883a 	mov	r4,r18
  806f40:	0806cc40 	call	806cc4 <_Balloc>
  806f44:	1019883a 	mov	r12,r2
  806f48:	82800417 	ldw	r10,16(r16)
  806f4c:	88800417 	ldw	r2,16(r17)
  806f50:	81800504 	addi	r6,r16,20
  806f54:	5287883a 	add	r3,r10,r10
  806f58:	1085883a 	add	r2,r2,r2
  806f5c:	18c7883a 	add	r3,r3,r3
  806f60:	1085883a 	add	r2,r2,r2
  806f64:	8a000504 	addi	r8,r17,20
  806f68:	64c00315 	stw	r19,12(r12)
  806f6c:	30db883a 	add	r13,r6,r3
  806f70:	4097883a 	add	r11,r8,r2
  806f74:	61c00504 	addi	r7,r12,20
  806f78:	0013883a 	mov	r9,zero
  806f7c:	31000017 	ldw	r4,0(r6)
  806f80:	41400017 	ldw	r5,0(r8)
  806f84:	42000104 	addi	r8,r8,4
  806f88:	20bfffcc 	andi	r2,r4,65535
  806f8c:	28ffffcc 	andi	r3,r5,65535
  806f90:	10c5c83a 	sub	r2,r2,r3
  806f94:	1245883a 	add	r2,r2,r9
  806f98:	2008d43a 	srli	r4,r4,16
  806f9c:	280ad43a 	srli	r5,r5,16
  806fa0:	1007d43a 	srai	r3,r2,16
  806fa4:	3880000d 	sth	r2,0(r7)
  806fa8:	2149c83a 	sub	r4,r4,r5
  806fac:	20c9883a 	add	r4,r4,r3
  806fb0:	3900008d 	sth	r4,2(r7)
  806fb4:	31800104 	addi	r6,r6,4
  806fb8:	39c00104 	addi	r7,r7,4
  806fbc:	2013d43a 	srai	r9,r4,16
  806fc0:	42ffee36 	bltu	r8,r11,806f7c <__mdiff+0x80>
  806fc4:	33400c2e 	bgeu	r6,r13,806ff8 <__mdiff+0xfc>
  806fc8:	30800017 	ldw	r2,0(r6)
  806fcc:	31800104 	addi	r6,r6,4
  806fd0:	10ffffcc 	andi	r3,r2,65535
  806fd4:	1a47883a 	add	r3,r3,r9
  806fd8:	1004d43a 	srli	r2,r2,16
  806fdc:	1809d43a 	srai	r4,r3,16
  806fe0:	38c0000d 	sth	r3,0(r7)
  806fe4:	1105883a 	add	r2,r2,r4
  806fe8:	3880008d 	sth	r2,2(r7)
  806fec:	1013d43a 	srai	r9,r2,16
  806ff0:	39c00104 	addi	r7,r7,4
  806ff4:	337ff436 	bltu	r6,r13,806fc8 <__mdiff+0xcc>
  806ff8:	38bfff17 	ldw	r2,-4(r7)
  806ffc:	38ffff04 	addi	r3,r7,-4
  807000:	1000041e 	bne	r2,zero,807014 <__mdiff+0x118>
  807004:	18ffff04 	addi	r3,r3,-4
  807008:	18800017 	ldw	r2,0(r3)
  80700c:	52bfffc4 	addi	r10,r10,-1
  807010:	103ffc26 	beq	r2,zero,807004 <__mdiff+0x108>
  807014:	6005883a 	mov	r2,r12
  807018:	62800415 	stw	r10,16(r12)
  80701c:	dfc00417 	ldw	ra,16(sp)
  807020:	dcc00317 	ldw	r19,12(sp)
  807024:	dc800217 	ldw	r18,8(sp)
  807028:	dc400117 	ldw	r17,4(sp)
  80702c:	dc000017 	ldw	r16,0(sp)
  807030:	dec00504 	addi	sp,sp,20
  807034:	f800283a 	ret
  807038:	9009883a 	mov	r4,r18
  80703c:	000b883a 	mov	r5,zero
  807040:	0806cc40 	call	806cc4 <_Balloc>
  807044:	1019883a 	mov	r12,r2
  807048:	00800044 	movi	r2,1
  80704c:	60800415 	stw	r2,16(r12)
  807050:	6005883a 	mov	r2,r12
  807054:	60000515 	stw	zero,20(r12)
  807058:	dfc00417 	ldw	ra,16(sp)
  80705c:	dcc00317 	ldw	r19,12(sp)
  807060:	dc800217 	ldw	r18,8(sp)
  807064:	dc400117 	ldw	r17,4(sp)
  807068:	dc000017 	ldw	r16,0(sp)
  80706c:	dec00504 	addi	sp,sp,20
  807070:	f800283a 	ret
  807074:	880d883a 	mov	r6,r17
  807078:	04c00044 	movi	r19,1
  80707c:	8023883a 	mov	r17,r16
  807080:	3021883a 	mov	r16,r6
  807084:	003fac06 	br	806f38 <__mdiff+0x3c>

00807088 <__lshift>:
  807088:	defff904 	addi	sp,sp,-28
  80708c:	28800417 	ldw	r2,16(r5)
  807090:	dc000015 	stw	r16,0(sp)
  807094:	3021d17a 	srai	r16,r6,5
  807098:	28c00217 	ldw	r3,8(r5)
  80709c:	10800044 	addi	r2,r2,1
  8070a0:	dc400115 	stw	r17,4(sp)
  8070a4:	80a3883a 	add	r17,r16,r2
  8070a8:	dd400515 	stw	r21,20(sp)
  8070ac:	dd000415 	stw	r20,16(sp)
  8070b0:	dc800215 	stw	r18,8(sp)
  8070b4:	dfc00615 	stw	ra,24(sp)
  8070b8:	2825883a 	mov	r18,r5
  8070bc:	dcc00315 	stw	r19,12(sp)
  8070c0:	3029883a 	mov	r20,r6
  8070c4:	202b883a 	mov	r21,r4
  8070c8:	29400117 	ldw	r5,4(r5)
  8070cc:	1c40030e 	bge	r3,r17,8070dc <__lshift+0x54>
  8070d0:	18c7883a 	add	r3,r3,r3
  8070d4:	29400044 	addi	r5,r5,1
  8070d8:	1c7ffd16 	blt	r3,r17,8070d0 <__lshift+0x48>
  8070dc:	a809883a 	mov	r4,r21
  8070e0:	0806cc40 	call	806cc4 <_Balloc>
  8070e4:	1027883a 	mov	r19,r2
  8070e8:	11400504 	addi	r5,r2,20
  8070ec:	0400090e 	bge	zero,r16,807114 <__lshift+0x8c>
  8070f0:	2805883a 	mov	r2,r5
  8070f4:	0007883a 	mov	r3,zero
  8070f8:	18c00044 	addi	r3,r3,1
  8070fc:	10000015 	stw	zero,0(r2)
  807100:	10800104 	addi	r2,r2,4
  807104:	80fffc1e 	bne	r16,r3,8070f8 <__lshift+0x70>
  807108:	8405883a 	add	r2,r16,r16
  80710c:	1085883a 	add	r2,r2,r2
  807110:	288b883a 	add	r5,r5,r2
  807114:	90800417 	ldw	r2,16(r18)
  807118:	91000504 	addi	r4,r18,20
  80711c:	a18007cc 	andi	r6,r20,31
  807120:	1085883a 	add	r2,r2,r2
  807124:	1085883a 	add	r2,r2,r2
  807128:	208f883a 	add	r7,r4,r2
  80712c:	30001e26 	beq	r6,zero,8071a8 <__lshift+0x120>
  807130:	00800804 	movi	r2,32
  807134:	1191c83a 	sub	r8,r2,r6
  807138:	0007883a 	mov	r3,zero
  80713c:	20800017 	ldw	r2,0(r4)
  807140:	1184983a 	sll	r2,r2,r6
  807144:	1884b03a 	or	r2,r3,r2
  807148:	28800015 	stw	r2,0(r5)
  80714c:	20c00017 	ldw	r3,0(r4)
  807150:	21000104 	addi	r4,r4,4
  807154:	29400104 	addi	r5,r5,4
  807158:	1a06d83a 	srl	r3,r3,r8
  80715c:	21fff736 	bltu	r4,r7,80713c <__lshift+0xb4>
  807160:	28c00015 	stw	r3,0(r5)
  807164:	18000126 	beq	r3,zero,80716c <__lshift+0xe4>
  807168:	8c400044 	addi	r17,r17,1
  80716c:	88bfffc4 	addi	r2,r17,-1
  807170:	98800415 	stw	r2,16(r19)
  807174:	a809883a 	mov	r4,r21
  807178:	900b883a 	mov	r5,r18
  80717c:	08067440 	call	806744 <_Bfree>
  807180:	9805883a 	mov	r2,r19
  807184:	dfc00617 	ldw	ra,24(sp)
  807188:	dd400517 	ldw	r21,20(sp)
  80718c:	dd000417 	ldw	r20,16(sp)
  807190:	dcc00317 	ldw	r19,12(sp)
  807194:	dc800217 	ldw	r18,8(sp)
  807198:	dc400117 	ldw	r17,4(sp)
  80719c:	dc000017 	ldw	r16,0(sp)
  8071a0:	dec00704 	addi	sp,sp,28
  8071a4:	f800283a 	ret
  8071a8:	20800017 	ldw	r2,0(r4)
  8071ac:	21000104 	addi	r4,r4,4
  8071b0:	28800015 	stw	r2,0(r5)
  8071b4:	29400104 	addi	r5,r5,4
  8071b8:	21ffec2e 	bgeu	r4,r7,80716c <__lshift+0xe4>
  8071bc:	20800017 	ldw	r2,0(r4)
  8071c0:	21000104 	addi	r4,r4,4
  8071c4:	28800015 	stw	r2,0(r5)
  8071c8:	29400104 	addi	r5,r5,4
  8071cc:	21fff636 	bltu	r4,r7,8071a8 <__lshift+0x120>
  8071d0:	003fe606 	br	80716c <__lshift+0xe4>

008071d4 <__multiply>:
  8071d4:	defff904 	addi	sp,sp,-28
  8071d8:	dcc00315 	stw	r19,12(sp)
  8071dc:	dc800215 	stw	r18,8(sp)
  8071e0:	2cc00417 	ldw	r19,16(r5)
  8071e4:	34800417 	ldw	r18,16(r6)
  8071e8:	dd000415 	stw	r20,16(sp)
  8071ec:	dc400115 	stw	r17,4(sp)
  8071f0:	dfc00615 	stw	ra,24(sp)
  8071f4:	dd400515 	stw	r21,20(sp)
  8071f8:	dc000015 	stw	r16,0(sp)
  8071fc:	2823883a 	mov	r17,r5
  807200:	3029883a 	mov	r20,r6
  807204:	9c80040e 	bge	r19,r18,807218 <__multiply+0x44>
  807208:	9027883a 	mov	r19,r18
  80720c:	2c800417 	ldw	r18,16(r5)
  807210:	2829883a 	mov	r20,r5
  807214:	3023883a 	mov	r17,r6
  807218:	88800217 	ldw	r2,8(r17)
  80721c:	9ca1883a 	add	r16,r19,r18
  807220:	89400117 	ldw	r5,4(r17)
  807224:	1400010e 	bge	r2,r16,80722c <__multiply+0x58>
  807228:	29400044 	addi	r5,r5,1
  80722c:	0806cc40 	call	806cc4 <_Balloc>
  807230:	102b883a 	mov	r21,r2
  807234:	8405883a 	add	r2,r16,r16
  807238:	1085883a 	add	r2,r2,r2
  80723c:	a9000504 	addi	r4,r21,20
  807240:	209d883a 	add	r14,r4,r2
  807244:	2380042e 	bgeu	r4,r14,807258 <__multiply+0x84>
  807248:	2005883a 	mov	r2,r4
  80724c:	10000015 	stw	zero,0(r2)
  807250:	10800104 	addi	r2,r2,4
  807254:	13bffd36 	bltu	r2,r14,80724c <__multiply+0x78>
  807258:	9485883a 	add	r2,r18,r18
  80725c:	9cc7883a 	add	r3,r19,r19
  807260:	a1800504 	addi	r6,r20,20
  807264:	1085883a 	add	r2,r2,r2
  807268:	8b400504 	addi	r13,r17,20
  80726c:	18c7883a 	add	r3,r3,r3
  807270:	309f883a 	add	r15,r6,r2
  807274:	68d7883a 	add	r11,r13,r3
  807278:	33c03b2e 	bgeu	r6,r15,807368 <__multiply+0x194>
  80727c:	2019883a 	mov	r12,r4
  807280:	30800017 	ldw	r2,0(r6)
  807284:	127fffcc 	andi	r9,r2,65535
  807288:	48001826 	beq	r9,zero,8072ec <__multiply+0x118>
  80728c:	6811883a 	mov	r8,r13
  807290:	600f883a 	mov	r7,r12
  807294:	0015883a 	mov	r10,zero
  807298:	40c00017 	ldw	r3,0(r8)
  80729c:	39400017 	ldw	r5,0(r7)
  8072a0:	42000104 	addi	r8,r8,4
  8072a4:	193fffcc 	andi	r4,r3,65535
  8072a8:	4909383a 	mul	r4,r9,r4
  8072ac:	1806d43a 	srli	r3,r3,16
  8072b0:	28bfffcc 	andi	r2,r5,65535
  8072b4:	5085883a 	add	r2,r10,r2
  8072b8:	2089883a 	add	r4,r4,r2
  8072bc:	48c7383a 	mul	r3,r9,r3
  8072c0:	280ad43a 	srli	r5,r5,16
  8072c4:	2004d43a 	srli	r2,r4,16
  8072c8:	3900000d 	sth	r4,0(r7)
  8072cc:	1947883a 	add	r3,r3,r5
  8072d0:	10c5883a 	add	r2,r2,r3
  8072d4:	3880008d 	sth	r2,2(r7)
  8072d8:	1014d43a 	srli	r10,r2,16
  8072dc:	39c00104 	addi	r7,r7,4
  8072e0:	42ffed36 	bltu	r8,r11,807298 <__multiply+0xc4>
  8072e4:	3a800015 	stw	r10,0(r7)
  8072e8:	30800017 	ldw	r2,0(r6)
  8072ec:	1012d43a 	srli	r9,r2,16
  8072f0:	48001926 	beq	r9,zero,807358 <__multiply+0x184>
  8072f4:	60800017 	ldw	r2,0(r12)
  8072f8:	6811883a 	mov	r8,r13
  8072fc:	600f883a 	mov	r7,r12
  807300:	0015883a 	mov	r10,zero
  807304:	100b883a 	mov	r5,r2
  807308:	41000017 	ldw	r4,0(r8)
  80730c:	2806d43a 	srli	r3,r5,16
  807310:	3880000d 	sth	r2,0(r7)
  807314:	20bfffcc 	andi	r2,r4,65535
  807318:	4885383a 	mul	r2,r9,r2
  80731c:	50c7883a 	add	r3,r10,r3
  807320:	2008d43a 	srli	r4,r4,16
  807324:	10c5883a 	add	r2,r2,r3
  807328:	3880008d 	sth	r2,2(r7)
  80732c:	39c00104 	addi	r7,r7,4
  807330:	39400017 	ldw	r5,0(r7)
  807334:	4909383a 	mul	r4,r9,r4
  807338:	1004d43a 	srli	r2,r2,16
  80733c:	28ffffcc 	andi	r3,r5,65535
  807340:	20c9883a 	add	r4,r4,r3
  807344:	1105883a 	add	r2,r2,r4
  807348:	42000104 	addi	r8,r8,4
  80734c:	1014d43a 	srli	r10,r2,16
  807350:	42ffed36 	bltu	r8,r11,807308 <__multiply+0x134>
  807354:	38800015 	stw	r2,0(r7)
  807358:	31800104 	addi	r6,r6,4
  80735c:	33c0022e 	bgeu	r6,r15,807368 <__multiply+0x194>
  807360:	63000104 	addi	r12,r12,4
  807364:	003fc606 	br	807280 <__multiply+0xac>
  807368:	0400090e 	bge	zero,r16,807390 <__multiply+0x1bc>
  80736c:	70bfff17 	ldw	r2,-4(r14)
  807370:	70ffff04 	addi	r3,r14,-4
  807374:	10000326 	beq	r2,zero,807384 <__multiply+0x1b0>
  807378:	00000506 	br	807390 <__multiply+0x1bc>
  80737c:	18800017 	ldw	r2,0(r3)
  807380:	1000031e 	bne	r2,zero,807390 <__multiply+0x1bc>
  807384:	843fffc4 	addi	r16,r16,-1
  807388:	18ffff04 	addi	r3,r3,-4
  80738c:	803ffb1e 	bne	r16,zero,80737c <__multiply+0x1a8>
  807390:	a805883a 	mov	r2,r21
  807394:	ac000415 	stw	r16,16(r21)
  807398:	dfc00617 	ldw	ra,24(sp)
  80739c:	dd400517 	ldw	r21,20(sp)
  8073a0:	dd000417 	ldw	r20,16(sp)
  8073a4:	dcc00317 	ldw	r19,12(sp)
  8073a8:	dc800217 	ldw	r18,8(sp)
  8073ac:	dc400117 	ldw	r17,4(sp)
  8073b0:	dc000017 	ldw	r16,0(sp)
  8073b4:	dec00704 	addi	sp,sp,28
  8073b8:	f800283a 	ret

008073bc <__i2b>:
  8073bc:	defffd04 	addi	sp,sp,-12
  8073c0:	dc000015 	stw	r16,0(sp)
  8073c4:	04000044 	movi	r16,1
  8073c8:	dc800115 	stw	r18,4(sp)
  8073cc:	2825883a 	mov	r18,r5
  8073d0:	800b883a 	mov	r5,r16
  8073d4:	dfc00215 	stw	ra,8(sp)
  8073d8:	0806cc40 	call	806cc4 <_Balloc>
  8073dc:	14000415 	stw	r16,16(r2)
  8073e0:	14800515 	stw	r18,20(r2)
  8073e4:	dfc00217 	ldw	ra,8(sp)
  8073e8:	dc800117 	ldw	r18,4(sp)
  8073ec:	dc000017 	ldw	r16,0(sp)
  8073f0:	dec00304 	addi	sp,sp,12
  8073f4:	f800283a 	ret

008073f8 <__multadd>:
  8073f8:	defffa04 	addi	sp,sp,-24
  8073fc:	dc800215 	stw	r18,8(sp)
  807400:	2c800417 	ldw	r18,16(r5)
  807404:	dd000415 	stw	r20,16(sp)
  807408:	dcc00315 	stw	r19,12(sp)
  80740c:	dc000015 	stw	r16,0(sp)
  807410:	dfc00515 	stw	ra,20(sp)
  807414:	3821883a 	mov	r16,r7
  807418:	dc400115 	stw	r17,4(sp)
  80741c:	2827883a 	mov	r19,r5
  807420:	2029883a 	mov	r20,r4
  807424:	2a000504 	addi	r8,r5,20
  807428:	000f883a 	mov	r7,zero
  80742c:	40800017 	ldw	r2,0(r8)
  807430:	39c00044 	addi	r7,r7,1
  807434:	10ffffcc 	andi	r3,r2,65535
  807438:	1987383a 	mul	r3,r3,r6
  80743c:	1004d43a 	srli	r2,r2,16
  807440:	1c07883a 	add	r3,r3,r16
  807444:	180ad43a 	srli	r5,r3,16
  807448:	1185383a 	mul	r2,r2,r6
  80744c:	18ffffcc 	andi	r3,r3,65535
  807450:	1145883a 	add	r2,r2,r5
  807454:	1008943a 	slli	r4,r2,16
  807458:	1020d43a 	srli	r16,r2,16
  80745c:	20c9883a 	add	r4,r4,r3
  807460:	41000015 	stw	r4,0(r8)
  807464:	42000104 	addi	r8,r8,4
  807468:	3cbff016 	blt	r7,r18,80742c <__multadd+0x34>
  80746c:	80000826 	beq	r16,zero,807490 <__multadd+0x98>
  807470:	98800217 	ldw	r2,8(r19)
  807474:	90800f0e 	bge	r18,r2,8074b4 <__multadd+0xbc>
  807478:	9485883a 	add	r2,r18,r18
  80747c:	1085883a 	add	r2,r2,r2
  807480:	14c5883a 	add	r2,r2,r19
  807484:	90c00044 	addi	r3,r18,1
  807488:	14000515 	stw	r16,20(r2)
  80748c:	98c00415 	stw	r3,16(r19)
  807490:	9805883a 	mov	r2,r19
  807494:	dfc00517 	ldw	ra,20(sp)
  807498:	dd000417 	ldw	r20,16(sp)
  80749c:	dcc00317 	ldw	r19,12(sp)
  8074a0:	dc800217 	ldw	r18,8(sp)
  8074a4:	dc400117 	ldw	r17,4(sp)
  8074a8:	dc000017 	ldw	r16,0(sp)
  8074ac:	dec00604 	addi	sp,sp,24
  8074b0:	f800283a 	ret
  8074b4:	99400117 	ldw	r5,4(r19)
  8074b8:	a009883a 	mov	r4,r20
  8074bc:	29400044 	addi	r5,r5,1
  8074c0:	0806cc40 	call	806cc4 <_Balloc>
  8074c4:	99800417 	ldw	r6,16(r19)
  8074c8:	99400304 	addi	r5,r19,12
  8074cc:	11000304 	addi	r4,r2,12
  8074d0:	318d883a 	add	r6,r6,r6
  8074d4:	318d883a 	add	r6,r6,r6
  8074d8:	31800204 	addi	r6,r6,8
  8074dc:	1023883a 	mov	r17,r2
  8074e0:	08065c40 	call	8065c4 <memcpy>
  8074e4:	980b883a 	mov	r5,r19
  8074e8:	a009883a 	mov	r4,r20
  8074ec:	08067440 	call	806744 <_Bfree>
  8074f0:	8827883a 	mov	r19,r17
  8074f4:	003fe006 	br	807478 <__multadd+0x80>

008074f8 <__pow5mult>:
  8074f8:	defffa04 	addi	sp,sp,-24
  8074fc:	308000cc 	andi	r2,r6,3
  807500:	dd000415 	stw	r20,16(sp)
  807504:	dcc00315 	stw	r19,12(sp)
  807508:	dc000015 	stw	r16,0(sp)
  80750c:	dfc00515 	stw	ra,20(sp)
  807510:	dc800215 	stw	r18,8(sp)
  807514:	dc400115 	stw	r17,4(sp)
  807518:	3021883a 	mov	r16,r6
  80751c:	2027883a 	mov	r19,r4
  807520:	2829883a 	mov	r20,r5
  807524:	10002b1e 	bne	r2,zero,8075d4 <__pow5mult+0xdc>
  807528:	8025d0ba 	srai	r18,r16,2
  80752c:	90001b26 	beq	r18,zero,80759c <__pow5mult+0xa4>
  807530:	9c001217 	ldw	r16,72(r19)
  807534:	8000081e 	bne	r16,zero,807558 <__pow5mult+0x60>
  807538:	00003006 	br	8075fc <__pow5mult+0x104>
  80753c:	800b883a 	mov	r5,r16
  807540:	800d883a 	mov	r6,r16
  807544:	9809883a 	mov	r4,r19
  807548:	90001426 	beq	r18,zero,80759c <__pow5mult+0xa4>
  80754c:	80800017 	ldw	r2,0(r16)
  807550:	10001b26 	beq	r2,zero,8075c0 <__pow5mult+0xc8>
  807554:	1021883a 	mov	r16,r2
  807558:	9080004c 	andi	r2,r18,1
  80755c:	1005003a 	cmpeq	r2,r2,zero
  807560:	9025d07a 	srai	r18,r18,1
  807564:	800d883a 	mov	r6,r16
  807568:	9809883a 	mov	r4,r19
  80756c:	a00b883a 	mov	r5,r20
  807570:	103ff21e 	bne	r2,zero,80753c <__pow5mult+0x44>
  807574:	08071d40 	call	8071d4 <__multiply>
  807578:	a00b883a 	mov	r5,r20
  80757c:	9809883a 	mov	r4,r19
  807580:	1023883a 	mov	r17,r2
  807584:	08067440 	call	806744 <_Bfree>
  807588:	8829883a 	mov	r20,r17
  80758c:	800b883a 	mov	r5,r16
  807590:	800d883a 	mov	r6,r16
  807594:	9809883a 	mov	r4,r19
  807598:	903fec1e 	bne	r18,zero,80754c <__pow5mult+0x54>
  80759c:	a005883a 	mov	r2,r20
  8075a0:	dfc00517 	ldw	ra,20(sp)
  8075a4:	dd000417 	ldw	r20,16(sp)
  8075a8:	dcc00317 	ldw	r19,12(sp)
  8075ac:	dc800217 	ldw	r18,8(sp)
  8075b0:	dc400117 	ldw	r17,4(sp)
  8075b4:	dc000017 	ldw	r16,0(sp)
  8075b8:	dec00604 	addi	sp,sp,24
  8075bc:	f800283a 	ret
  8075c0:	08071d40 	call	8071d4 <__multiply>
  8075c4:	80800015 	stw	r2,0(r16)
  8075c8:	1021883a 	mov	r16,r2
  8075cc:	10000015 	stw	zero,0(r2)
  8075d0:	003fe106 	br	807558 <__pow5mult+0x60>
  8075d4:	1085883a 	add	r2,r2,r2
  8075d8:	00c02074 	movhi	r3,129
  8075dc:	18fb4404 	addi	r3,r3,-4848
  8075e0:	1085883a 	add	r2,r2,r2
  8075e4:	10c5883a 	add	r2,r2,r3
  8075e8:	11bfff17 	ldw	r6,-4(r2)
  8075ec:	000f883a 	mov	r7,zero
  8075f0:	08073f80 	call	8073f8 <__multadd>
  8075f4:	1029883a 	mov	r20,r2
  8075f8:	003fcb06 	br	807528 <__pow5mult+0x30>
  8075fc:	9809883a 	mov	r4,r19
  807600:	01409c44 	movi	r5,625
  807604:	08073bc0 	call	8073bc <__i2b>
  807608:	98801215 	stw	r2,72(r19)
  80760c:	1021883a 	mov	r16,r2
  807610:	10000015 	stw	zero,0(r2)
  807614:	003fd006 	br	807558 <__pow5mult+0x60>

00807618 <__s2b>:
  807618:	defff904 	addi	sp,sp,-28
  80761c:	dcc00315 	stw	r19,12(sp)
  807620:	dc800215 	stw	r18,8(sp)
  807624:	2827883a 	mov	r19,r5
  807628:	2025883a 	mov	r18,r4
  80762c:	01400244 	movi	r5,9
  807630:	39000204 	addi	r4,r7,8
  807634:	dd000415 	stw	r20,16(sp)
  807638:	dc400115 	stw	r17,4(sp)
  80763c:	dfc00615 	stw	ra,24(sp)
  807640:	dd400515 	stw	r21,20(sp)
  807644:	dc000015 	stw	r16,0(sp)
  807648:	3829883a 	mov	r20,r7
  80764c:	3023883a 	mov	r17,r6
  807650:	0809cb80 	call	809cb8 <__divsi3>
  807654:	00c00044 	movi	r3,1
  807658:	1880350e 	bge	r3,r2,807730 <__s2b+0x118>
  80765c:	000b883a 	mov	r5,zero
  807660:	18c7883a 	add	r3,r3,r3
  807664:	29400044 	addi	r5,r5,1
  807668:	18bffd16 	blt	r3,r2,807660 <__s2b+0x48>
  80766c:	9009883a 	mov	r4,r18
  807670:	0806cc40 	call	806cc4 <_Balloc>
  807674:	1011883a 	mov	r8,r2
  807678:	d8800717 	ldw	r2,28(sp)
  80767c:	00c00044 	movi	r3,1
  807680:	01800244 	movi	r6,9
  807684:	40800515 	stw	r2,20(r8)
  807688:	40c00415 	stw	r3,16(r8)
  80768c:	3440260e 	bge	r6,r17,807728 <__s2b+0x110>
  807690:	3021883a 	mov	r16,r6
  807694:	99ab883a 	add	r21,r19,r6
  807698:	9c05883a 	add	r2,r19,r16
  80769c:	11c00007 	ldb	r7,0(r2)
  8076a0:	400b883a 	mov	r5,r8
  8076a4:	9009883a 	mov	r4,r18
  8076a8:	39fff404 	addi	r7,r7,-48
  8076ac:	01800284 	movi	r6,10
  8076b0:	08073f80 	call	8073f8 <__multadd>
  8076b4:	84000044 	addi	r16,r16,1
  8076b8:	1011883a 	mov	r8,r2
  8076bc:	8c3ff61e 	bne	r17,r16,807698 <__s2b+0x80>
  8076c0:	ac45883a 	add	r2,r21,r17
  8076c4:	117ffe04 	addi	r5,r2,-8
  8076c8:	880d883a 	mov	r6,r17
  8076cc:	35000c0e 	bge	r6,r20,807700 <__s2b+0xe8>
  8076d0:	a185c83a 	sub	r2,r20,r6
  8076d4:	2821883a 	mov	r16,r5
  8076d8:	28a3883a 	add	r17,r5,r2
  8076dc:	81c00007 	ldb	r7,0(r16)
  8076e0:	400b883a 	mov	r5,r8
  8076e4:	9009883a 	mov	r4,r18
  8076e8:	39fff404 	addi	r7,r7,-48
  8076ec:	01800284 	movi	r6,10
  8076f0:	08073f80 	call	8073f8 <__multadd>
  8076f4:	84000044 	addi	r16,r16,1
  8076f8:	1011883a 	mov	r8,r2
  8076fc:	847ff71e 	bne	r16,r17,8076dc <__s2b+0xc4>
  807700:	4005883a 	mov	r2,r8
  807704:	dfc00617 	ldw	ra,24(sp)
  807708:	dd400517 	ldw	r21,20(sp)
  80770c:	dd000417 	ldw	r20,16(sp)
  807710:	dcc00317 	ldw	r19,12(sp)
  807714:	dc800217 	ldw	r18,8(sp)
  807718:	dc400117 	ldw	r17,4(sp)
  80771c:	dc000017 	ldw	r16,0(sp)
  807720:	dec00704 	addi	sp,sp,28
  807724:	f800283a 	ret
  807728:	99400284 	addi	r5,r19,10
  80772c:	003fe706 	br	8076cc <__s2b+0xb4>
  807730:	000b883a 	mov	r5,zero
  807734:	003fcd06 	br	80766c <__s2b+0x54>

00807738 <_read_r>:
  807738:	defffd04 	addi	sp,sp,-12
  80773c:	dc000015 	stw	r16,0(sp)
  807740:	04002074 	movhi	r16,129
  807744:	840a6d04 	addi	r16,r16,10676
  807748:	dc400115 	stw	r17,4(sp)
  80774c:	80000015 	stw	zero,0(r16)
  807750:	2023883a 	mov	r17,r4
  807754:	2809883a 	mov	r4,r5
  807758:	300b883a 	mov	r5,r6
  80775c:	380d883a 	mov	r6,r7
  807760:	dfc00215 	stw	ra,8(sp)
  807764:	080aefc0 	call	80aefc <read>
  807768:	1007883a 	mov	r3,r2
  80776c:	00bfffc4 	movi	r2,-1
  807770:	18800626 	beq	r3,r2,80778c <_read_r+0x54>
  807774:	1805883a 	mov	r2,r3
  807778:	dfc00217 	ldw	ra,8(sp)
  80777c:	dc400117 	ldw	r17,4(sp)
  807780:	dc000017 	ldw	r16,0(sp)
  807784:	dec00304 	addi	sp,sp,12
  807788:	f800283a 	ret
  80778c:	80800017 	ldw	r2,0(r16)
  807790:	103ff826 	beq	r2,zero,807774 <_read_r+0x3c>
  807794:	88800015 	stw	r2,0(r17)
  807798:	1805883a 	mov	r2,r3
  80779c:	dfc00217 	ldw	ra,8(sp)
  8077a0:	dc400117 	ldw	r17,4(sp)
  8077a4:	dc000017 	ldw	r16,0(sp)
  8077a8:	dec00304 	addi	sp,sp,12
  8077ac:	f800283a 	ret

008077b0 <_realloc_r>:
  8077b0:	defff404 	addi	sp,sp,-48
  8077b4:	dd800815 	stw	r22,32(sp)
  8077b8:	dc800415 	stw	r18,16(sp)
  8077bc:	dc400315 	stw	r17,12(sp)
  8077c0:	dfc00b15 	stw	ra,44(sp)
  8077c4:	df000a15 	stw	fp,40(sp)
  8077c8:	ddc00915 	stw	r23,36(sp)
  8077cc:	dd400715 	stw	r21,28(sp)
  8077d0:	dd000615 	stw	r20,24(sp)
  8077d4:	dcc00515 	stw	r19,20(sp)
  8077d8:	dc000215 	stw	r16,8(sp)
  8077dc:	2825883a 	mov	r18,r5
  8077e0:	3023883a 	mov	r17,r6
  8077e4:	202d883a 	mov	r22,r4
  8077e8:	2800c926 	beq	r5,zero,807b10 <_realloc_r+0x360>
  8077ec:	080abf80 	call	80abf8 <__malloc_lock>
  8077f0:	943ffe04 	addi	r16,r18,-8
  8077f4:	88c002c4 	addi	r3,r17,11
  8077f8:	00800584 	movi	r2,22
  8077fc:	82000117 	ldw	r8,4(r16)
  807800:	10c01b2e 	bgeu	r2,r3,807870 <_realloc_r+0xc0>
  807804:	00bffe04 	movi	r2,-8
  807808:	188e703a 	and	r7,r3,r2
  80780c:	3839883a 	mov	fp,r7
  807810:	38001a16 	blt	r7,zero,80787c <_realloc_r+0xcc>
  807814:	e4401936 	bltu	fp,r17,80787c <_realloc_r+0xcc>
  807818:	013fff04 	movi	r4,-4
  80781c:	4126703a 	and	r19,r8,r4
  807820:	99c02616 	blt	r19,r7,8078bc <_realloc_r+0x10c>
  807824:	802b883a 	mov	r21,r16
  807828:	9829883a 	mov	r20,r19
  80782c:	84000204 	addi	r16,r16,8
  807830:	a80f883a 	mov	r7,r21
  807834:	a70dc83a 	sub	r6,r20,fp
  807838:	008003c4 	movi	r2,15
  80783c:	1180c136 	bltu	r2,r6,807b44 <_realloc_r+0x394>
  807840:	38800117 	ldw	r2,4(r7)
  807844:	a549883a 	add	r4,r20,r21
  807848:	1080004c 	andi	r2,r2,1
  80784c:	a084b03a 	or	r2,r20,r2
  807850:	38800115 	stw	r2,4(r7)
  807854:	20c00117 	ldw	r3,4(r4)
  807858:	18c00054 	ori	r3,r3,1
  80785c:	20c00115 	stw	r3,4(r4)
  807860:	b009883a 	mov	r4,r22
  807864:	080ac180 	call	80ac18 <__malloc_unlock>
  807868:	8023883a 	mov	r17,r16
  80786c:	00000606 	br	807888 <_realloc_r+0xd8>
  807870:	01c00404 	movi	r7,16
  807874:	3839883a 	mov	fp,r7
  807878:	e47fe72e 	bgeu	fp,r17,807818 <_realloc_r+0x68>
  80787c:	00800304 	movi	r2,12
  807880:	0023883a 	mov	r17,zero
  807884:	b0800015 	stw	r2,0(r22)
  807888:	8805883a 	mov	r2,r17
  80788c:	dfc00b17 	ldw	ra,44(sp)
  807890:	df000a17 	ldw	fp,40(sp)
  807894:	ddc00917 	ldw	r23,36(sp)
  807898:	dd800817 	ldw	r22,32(sp)
  80789c:	dd400717 	ldw	r21,28(sp)
  8078a0:	dd000617 	ldw	r20,24(sp)
  8078a4:	dcc00517 	ldw	r19,20(sp)
  8078a8:	dc800417 	ldw	r18,16(sp)
  8078ac:	dc400317 	ldw	r17,12(sp)
  8078b0:	dc000217 	ldw	r16,8(sp)
  8078b4:	dec00c04 	addi	sp,sp,48
  8078b8:	f800283a 	ret
  8078bc:	00802074 	movhi	r2,129
  8078c0:	10bd4504 	addi	r2,r2,-2796
  8078c4:	12400217 	ldw	r9,8(r2)
  8078c8:	84cd883a 	add	r6,r16,r19
  8078cc:	802b883a 	mov	r21,r16
  8078d0:	3240b926 	beq	r6,r9,807bb8 <_realloc_r+0x408>
  8078d4:	31400117 	ldw	r5,4(r6)
  8078d8:	00bfff84 	movi	r2,-2
  8078dc:	2884703a 	and	r2,r5,r2
  8078e0:	1185883a 	add	r2,r2,r6
  8078e4:	10c00117 	ldw	r3,4(r2)
  8078e8:	18c0004c 	andi	r3,r3,1
  8078ec:	1807003a 	cmpeq	r3,r3,zero
  8078f0:	1800a326 	beq	r3,zero,807b80 <_realloc_r+0x3d0>
  8078f4:	2908703a 	and	r4,r5,r4
  8078f8:	9929883a 	add	r20,r19,r4
  8078fc:	a1c0a30e 	bge	r20,r7,807b8c <_realloc_r+0x3dc>
  807900:	4080004c 	andi	r2,r8,1
  807904:	1000551e 	bne	r2,zero,807a5c <_realloc_r+0x2ac>
  807908:	80800017 	ldw	r2,0(r16)
  80790c:	80afc83a 	sub	r23,r16,r2
  807910:	b8c00117 	ldw	r3,4(r23)
  807914:	00bfff04 	movi	r2,-4
  807918:	1884703a 	and	r2,r3,r2
  80791c:	30002e26 	beq	r6,zero,8079d8 <_realloc_r+0x228>
  807920:	3240b926 	beq	r6,r9,807c08 <_realloc_r+0x458>
  807924:	98a9883a 	add	r20,r19,r2
  807928:	2509883a 	add	r4,r4,r20
  80792c:	d9000015 	stw	r4,0(sp)
  807930:	21c02a16 	blt	r4,r7,8079dc <_realloc_r+0x22c>
  807934:	30800317 	ldw	r2,12(r6)
  807938:	30c00217 	ldw	r3,8(r6)
  80793c:	01400904 	movi	r5,36
  807940:	99bfff04 	addi	r6,r19,-4
  807944:	18800315 	stw	r2,12(r3)
  807948:	10c00215 	stw	r3,8(r2)
  80794c:	b9000317 	ldw	r4,12(r23)
  807950:	b8800217 	ldw	r2,8(r23)
  807954:	b82b883a 	mov	r21,r23
  807958:	bc000204 	addi	r16,r23,8
  80795c:	20800215 	stw	r2,8(r4)
  807960:	11000315 	stw	r4,12(r2)
  807964:	2980e436 	bltu	r5,r6,807cf8 <_realloc_r+0x548>
  807968:	008004c4 	movi	r2,19
  80796c:	9009883a 	mov	r4,r18
  807970:	8011883a 	mov	r8,r16
  807974:	11800f2e 	bgeu	r2,r6,8079b4 <_realloc_r+0x204>
  807978:	90800017 	ldw	r2,0(r18)
  80797c:	ba000404 	addi	r8,r23,16
  807980:	91000204 	addi	r4,r18,8
  807984:	b8800215 	stw	r2,8(r23)
  807988:	90c00117 	ldw	r3,4(r18)
  80798c:	008006c4 	movi	r2,27
  807990:	b8c00315 	stw	r3,12(r23)
  807994:	1180072e 	bgeu	r2,r6,8079b4 <_realloc_r+0x204>
  807998:	90c00217 	ldw	r3,8(r18)
  80799c:	ba000604 	addi	r8,r23,24
  8079a0:	91000404 	addi	r4,r18,16
  8079a4:	b8c00415 	stw	r3,16(r23)
  8079a8:	90800317 	ldw	r2,12(r18)
  8079ac:	b8800515 	stw	r2,20(r23)
  8079b0:	3140e726 	beq	r6,r5,807d50 <_realloc_r+0x5a0>
  8079b4:	20800017 	ldw	r2,0(r4)
  8079b8:	dd000017 	ldw	r20,0(sp)
  8079bc:	b80f883a 	mov	r7,r23
  8079c0:	40800015 	stw	r2,0(r8)
  8079c4:	20c00117 	ldw	r3,4(r4)
  8079c8:	40c00115 	stw	r3,4(r8)
  8079cc:	20800217 	ldw	r2,8(r4)
  8079d0:	40800215 	stw	r2,8(r8)
  8079d4:	003f9706 	br	807834 <_realloc_r+0x84>
  8079d8:	98a9883a 	add	r20,r19,r2
  8079dc:	a1c01f16 	blt	r20,r7,807a5c <_realloc_r+0x2ac>
  8079e0:	b8c00317 	ldw	r3,12(r23)
  8079e4:	b8800217 	ldw	r2,8(r23)
  8079e8:	99bfff04 	addi	r6,r19,-4
  8079ec:	01400904 	movi	r5,36
  8079f0:	b82b883a 	mov	r21,r23
  8079f4:	18800215 	stw	r2,8(r3)
  8079f8:	10c00315 	stw	r3,12(r2)
  8079fc:	bc000204 	addi	r16,r23,8
  807a00:	2980c336 	bltu	r5,r6,807d10 <_realloc_r+0x560>
  807a04:	008004c4 	movi	r2,19
  807a08:	9009883a 	mov	r4,r18
  807a0c:	8011883a 	mov	r8,r16
  807a10:	11800f2e 	bgeu	r2,r6,807a50 <_realloc_r+0x2a0>
  807a14:	90800017 	ldw	r2,0(r18)
  807a18:	ba000404 	addi	r8,r23,16
  807a1c:	91000204 	addi	r4,r18,8
  807a20:	b8800215 	stw	r2,8(r23)
  807a24:	90c00117 	ldw	r3,4(r18)
  807a28:	008006c4 	movi	r2,27
  807a2c:	b8c00315 	stw	r3,12(r23)
  807a30:	1180072e 	bgeu	r2,r6,807a50 <_realloc_r+0x2a0>
  807a34:	90c00217 	ldw	r3,8(r18)
  807a38:	ba000604 	addi	r8,r23,24
  807a3c:	91000404 	addi	r4,r18,16
  807a40:	b8c00415 	stw	r3,16(r23)
  807a44:	90800317 	ldw	r2,12(r18)
  807a48:	b8800515 	stw	r2,20(r23)
  807a4c:	3140c726 	beq	r6,r5,807d6c <_realloc_r+0x5bc>
  807a50:	20800017 	ldw	r2,0(r4)
  807a54:	b80f883a 	mov	r7,r23
  807a58:	003fd906 	br	8079c0 <_realloc_r+0x210>
  807a5c:	880b883a 	mov	r5,r17
  807a60:	b009883a 	mov	r4,r22
  807a64:	08017540 	call	801754 <_malloc_r>
  807a68:	1023883a 	mov	r17,r2
  807a6c:	10002526 	beq	r2,zero,807b04 <_realloc_r+0x354>
  807a70:	80800117 	ldw	r2,4(r16)
  807a74:	00ffff84 	movi	r3,-2
  807a78:	893ffe04 	addi	r4,r17,-8
  807a7c:	10c4703a 	and	r2,r2,r3
  807a80:	8085883a 	add	r2,r16,r2
  807a84:	20809526 	beq	r4,r2,807cdc <_realloc_r+0x52c>
  807a88:	99bfff04 	addi	r6,r19,-4
  807a8c:	01c00904 	movi	r7,36
  807a90:	39804536 	bltu	r7,r6,807ba8 <_realloc_r+0x3f8>
  807a94:	008004c4 	movi	r2,19
  807a98:	9009883a 	mov	r4,r18
  807a9c:	880b883a 	mov	r5,r17
  807aa0:	11800f2e 	bgeu	r2,r6,807ae0 <_realloc_r+0x330>
  807aa4:	90800017 	ldw	r2,0(r18)
  807aa8:	89400204 	addi	r5,r17,8
  807aac:	91000204 	addi	r4,r18,8
  807ab0:	88800015 	stw	r2,0(r17)
  807ab4:	90c00117 	ldw	r3,4(r18)
  807ab8:	008006c4 	movi	r2,27
  807abc:	88c00115 	stw	r3,4(r17)
  807ac0:	1180072e 	bgeu	r2,r6,807ae0 <_realloc_r+0x330>
  807ac4:	90c00217 	ldw	r3,8(r18)
  807ac8:	89400404 	addi	r5,r17,16
  807acc:	91000404 	addi	r4,r18,16
  807ad0:	88c00215 	stw	r3,8(r17)
  807ad4:	90800317 	ldw	r2,12(r18)
  807ad8:	88800315 	stw	r2,12(r17)
  807adc:	31c09126 	beq	r6,r7,807d24 <_realloc_r+0x574>
  807ae0:	20800017 	ldw	r2,0(r4)
  807ae4:	28800015 	stw	r2,0(r5)
  807ae8:	20c00117 	ldw	r3,4(r4)
  807aec:	28c00115 	stw	r3,4(r5)
  807af0:	20800217 	ldw	r2,8(r4)
  807af4:	28800215 	stw	r2,8(r5)
  807af8:	900b883a 	mov	r5,r18
  807afc:	b009883a 	mov	r4,r22
  807b00:	0800c580 	call	800c58 <_free_r>
  807b04:	b009883a 	mov	r4,r22
  807b08:	080ac180 	call	80ac18 <__malloc_unlock>
  807b0c:	003f5e06 	br	807888 <_realloc_r+0xd8>
  807b10:	300b883a 	mov	r5,r6
  807b14:	dfc00b17 	ldw	ra,44(sp)
  807b18:	df000a17 	ldw	fp,40(sp)
  807b1c:	ddc00917 	ldw	r23,36(sp)
  807b20:	dd800817 	ldw	r22,32(sp)
  807b24:	dd400717 	ldw	r21,28(sp)
  807b28:	dd000617 	ldw	r20,24(sp)
  807b2c:	dcc00517 	ldw	r19,20(sp)
  807b30:	dc800417 	ldw	r18,16(sp)
  807b34:	dc400317 	ldw	r17,12(sp)
  807b38:	dc000217 	ldw	r16,8(sp)
  807b3c:	dec00c04 	addi	sp,sp,48
  807b40:	08017541 	jmpi	801754 <_malloc_r>
  807b44:	38800117 	ldw	r2,4(r7)
  807b48:	e54b883a 	add	r5,fp,r21
  807b4c:	31000054 	ori	r4,r6,1
  807b50:	1080004c 	andi	r2,r2,1
  807b54:	1704b03a 	or	r2,r2,fp
  807b58:	38800115 	stw	r2,4(r7)
  807b5c:	29000115 	stw	r4,4(r5)
  807b60:	2987883a 	add	r3,r5,r6
  807b64:	18800117 	ldw	r2,4(r3)
  807b68:	29400204 	addi	r5,r5,8
  807b6c:	b009883a 	mov	r4,r22
  807b70:	10800054 	ori	r2,r2,1
  807b74:	18800115 	stw	r2,4(r3)
  807b78:	0800c580 	call	800c58 <_free_r>
  807b7c:	003f3806 	br	807860 <_realloc_r+0xb0>
  807b80:	000d883a 	mov	r6,zero
  807b84:	0009883a 	mov	r4,zero
  807b88:	003f5d06 	br	807900 <_realloc_r+0x150>
  807b8c:	30c00217 	ldw	r3,8(r6)
  807b90:	30800317 	ldw	r2,12(r6)
  807b94:	800f883a 	mov	r7,r16
  807b98:	84000204 	addi	r16,r16,8
  807b9c:	10c00215 	stw	r3,8(r2)
  807ba0:	18800315 	stw	r2,12(r3)
  807ba4:	003f2306 	br	807834 <_realloc_r+0x84>
  807ba8:	8809883a 	mov	r4,r17
  807bac:	900b883a 	mov	r5,r18
  807bb0:	08066640 	call	806664 <memmove>
  807bb4:	003fd006 	br	807af8 <_realloc_r+0x348>
  807bb8:	30800117 	ldw	r2,4(r6)
  807bbc:	e0c00404 	addi	r3,fp,16
  807bc0:	1108703a 	and	r4,r2,r4
  807bc4:	9905883a 	add	r2,r19,r4
  807bc8:	10ff4d16 	blt	r2,r3,807900 <_realloc_r+0x150>
  807bcc:	1705c83a 	sub	r2,r2,fp
  807bd0:	870b883a 	add	r5,r16,fp
  807bd4:	10800054 	ori	r2,r2,1
  807bd8:	28800115 	stw	r2,4(r5)
  807bdc:	80c00117 	ldw	r3,4(r16)
  807be0:	00802074 	movhi	r2,129
  807be4:	10bd4504 	addi	r2,r2,-2796
  807be8:	b009883a 	mov	r4,r22
  807bec:	18c0004c 	andi	r3,r3,1
  807bf0:	e0c6b03a 	or	r3,fp,r3
  807bf4:	11400215 	stw	r5,8(r2)
  807bf8:	80c00115 	stw	r3,4(r16)
  807bfc:	080ac180 	call	80ac18 <__malloc_unlock>
  807c00:	84400204 	addi	r17,r16,8
  807c04:	003f2006 	br	807888 <_realloc_r+0xd8>
  807c08:	98a9883a 	add	r20,r19,r2
  807c0c:	2509883a 	add	r4,r4,r20
  807c10:	e0800404 	addi	r2,fp,16
  807c14:	d9000115 	stw	r4,4(sp)
  807c18:	20bf7016 	blt	r4,r2,8079dc <_realloc_r+0x22c>
  807c1c:	b8c00317 	ldw	r3,12(r23)
  807c20:	b8800217 	ldw	r2,8(r23)
  807c24:	99bfff04 	addi	r6,r19,-4
  807c28:	01400904 	movi	r5,36
  807c2c:	18800215 	stw	r2,8(r3)
  807c30:	10c00315 	stw	r3,12(r2)
  807c34:	bc400204 	addi	r17,r23,8
  807c38:	29804136 	bltu	r5,r6,807d40 <_realloc_r+0x590>
  807c3c:	008004c4 	movi	r2,19
  807c40:	9009883a 	mov	r4,r18
  807c44:	880f883a 	mov	r7,r17
  807c48:	11800f2e 	bgeu	r2,r6,807c88 <_realloc_r+0x4d8>
  807c4c:	90800017 	ldw	r2,0(r18)
  807c50:	b9c00404 	addi	r7,r23,16
  807c54:	91000204 	addi	r4,r18,8
  807c58:	b8800215 	stw	r2,8(r23)
  807c5c:	90c00117 	ldw	r3,4(r18)
  807c60:	008006c4 	movi	r2,27
  807c64:	b8c00315 	stw	r3,12(r23)
  807c68:	1180072e 	bgeu	r2,r6,807c88 <_realloc_r+0x4d8>
  807c6c:	90c00217 	ldw	r3,8(r18)
  807c70:	b9c00604 	addi	r7,r23,24
  807c74:	91000404 	addi	r4,r18,16
  807c78:	b8c00415 	stw	r3,16(r23)
  807c7c:	90800317 	ldw	r2,12(r18)
  807c80:	b8800515 	stw	r2,20(r23)
  807c84:	31404026 	beq	r6,r5,807d88 <_realloc_r+0x5d8>
  807c88:	20800017 	ldw	r2,0(r4)
  807c8c:	38800015 	stw	r2,0(r7)
  807c90:	20c00117 	ldw	r3,4(r4)
  807c94:	38c00115 	stw	r3,4(r7)
  807c98:	20800217 	ldw	r2,8(r4)
  807c9c:	38800215 	stw	r2,8(r7)
  807ca0:	d8c00117 	ldw	r3,4(sp)
  807ca4:	bf0b883a 	add	r5,r23,fp
  807ca8:	b009883a 	mov	r4,r22
  807cac:	1f05c83a 	sub	r2,r3,fp
  807cb0:	10800054 	ori	r2,r2,1
  807cb4:	28800115 	stw	r2,4(r5)
  807cb8:	b8c00117 	ldw	r3,4(r23)
  807cbc:	00802074 	movhi	r2,129
  807cc0:	10bd4504 	addi	r2,r2,-2796
  807cc4:	11400215 	stw	r5,8(r2)
  807cc8:	18c0004c 	andi	r3,r3,1
  807ccc:	e0c6b03a 	or	r3,fp,r3
  807cd0:	b8c00115 	stw	r3,4(r23)
  807cd4:	080ac180 	call	80ac18 <__malloc_unlock>
  807cd8:	003eeb06 	br	807888 <_realloc_r+0xd8>
  807cdc:	20800117 	ldw	r2,4(r4)
  807ce0:	00ffff04 	movi	r3,-4
  807ce4:	800f883a 	mov	r7,r16
  807ce8:	10c4703a 	and	r2,r2,r3
  807cec:	98a9883a 	add	r20,r19,r2
  807cf0:	84000204 	addi	r16,r16,8
  807cf4:	003ecf06 	br	807834 <_realloc_r+0x84>
  807cf8:	900b883a 	mov	r5,r18
  807cfc:	8009883a 	mov	r4,r16
  807d00:	08066640 	call	806664 <memmove>
  807d04:	dd000017 	ldw	r20,0(sp)
  807d08:	b80f883a 	mov	r7,r23
  807d0c:	003ec906 	br	807834 <_realloc_r+0x84>
  807d10:	900b883a 	mov	r5,r18
  807d14:	8009883a 	mov	r4,r16
  807d18:	08066640 	call	806664 <memmove>
  807d1c:	b80f883a 	mov	r7,r23
  807d20:	003ec406 	br	807834 <_realloc_r+0x84>
  807d24:	90c00417 	ldw	r3,16(r18)
  807d28:	89400604 	addi	r5,r17,24
  807d2c:	91000604 	addi	r4,r18,24
  807d30:	88c00415 	stw	r3,16(r17)
  807d34:	90800517 	ldw	r2,20(r18)
  807d38:	88800515 	stw	r2,20(r17)
  807d3c:	003f6806 	br	807ae0 <_realloc_r+0x330>
  807d40:	900b883a 	mov	r5,r18
  807d44:	8809883a 	mov	r4,r17
  807d48:	08066640 	call	806664 <memmove>
  807d4c:	003fd406 	br	807ca0 <_realloc_r+0x4f0>
  807d50:	90c00417 	ldw	r3,16(r18)
  807d54:	91000604 	addi	r4,r18,24
  807d58:	ba000804 	addi	r8,r23,32
  807d5c:	b8c00615 	stw	r3,24(r23)
  807d60:	90800517 	ldw	r2,20(r18)
  807d64:	b8800715 	stw	r2,28(r23)
  807d68:	003f1206 	br	8079b4 <_realloc_r+0x204>
  807d6c:	90c00417 	ldw	r3,16(r18)
  807d70:	91000604 	addi	r4,r18,24
  807d74:	ba000804 	addi	r8,r23,32
  807d78:	b8c00615 	stw	r3,24(r23)
  807d7c:	90800517 	ldw	r2,20(r18)
  807d80:	b8800715 	stw	r2,28(r23)
  807d84:	003f3206 	br	807a50 <_realloc_r+0x2a0>
  807d88:	90c00417 	ldw	r3,16(r18)
  807d8c:	91000604 	addi	r4,r18,24
  807d90:	b9c00804 	addi	r7,r23,32
  807d94:	b8c00615 	stw	r3,24(r23)
  807d98:	90800517 	ldw	r2,20(r18)
  807d9c:	b8800715 	stw	r2,28(r23)
  807da0:	003fb906 	br	807c88 <_realloc_r+0x4d8>

00807da4 <__isinfd>:
  807da4:	200d883a 	mov	r6,r4
  807da8:	0109c83a 	sub	r4,zero,r4
  807dac:	2188b03a 	or	r4,r4,r6
  807db0:	2008d7fa 	srli	r4,r4,31
  807db4:	00a00034 	movhi	r2,32768
  807db8:	10bfffc4 	addi	r2,r2,-1
  807dbc:	1144703a 	and	r2,r2,r5
  807dc0:	2088b03a 	or	r4,r4,r2
  807dc4:	009ffc34 	movhi	r2,32752
  807dc8:	1105c83a 	sub	r2,r2,r4
  807dcc:	0087c83a 	sub	r3,zero,r2
  807dd0:	10c4b03a 	or	r2,r2,r3
  807dd4:	1004d7fa 	srli	r2,r2,31
  807dd8:	00c00044 	movi	r3,1
  807ddc:	1885c83a 	sub	r2,r3,r2
  807de0:	f800283a 	ret

00807de4 <__isnand>:
  807de4:	200d883a 	mov	r6,r4
  807de8:	0109c83a 	sub	r4,zero,r4
  807dec:	2188b03a 	or	r4,r4,r6
  807df0:	2008d7fa 	srli	r4,r4,31
  807df4:	00a00034 	movhi	r2,32768
  807df8:	10bfffc4 	addi	r2,r2,-1
  807dfc:	1144703a 	and	r2,r2,r5
  807e00:	2088b03a 	or	r4,r4,r2
  807e04:	009ffc34 	movhi	r2,32752
  807e08:	1105c83a 	sub	r2,r2,r4
  807e0c:	1004d7fa 	srli	r2,r2,31
  807e10:	f800283a 	ret

00807e14 <strcmp>:
  807e14:	2144b03a 	or	r2,r4,r5
  807e18:	108000cc 	andi	r2,r2,3
  807e1c:	10001d1e 	bne	r2,zero,807e94 <strcmp+0x80>
  807e20:	200f883a 	mov	r7,r4
  807e24:	28800017 	ldw	r2,0(r5)
  807e28:	21000017 	ldw	r4,0(r4)
  807e2c:	280d883a 	mov	r6,r5
  807e30:	2080161e 	bne	r4,r2,807e8c <strcmp+0x78>
  807e34:	023fbff4 	movhi	r8,65279
  807e38:	423fbfc4 	addi	r8,r8,-257
  807e3c:	2207883a 	add	r3,r4,r8
  807e40:	01602074 	movhi	r5,32897
  807e44:	29602004 	addi	r5,r5,-32640
  807e48:	1946703a 	and	r3,r3,r5
  807e4c:	0104303a 	nor	r2,zero,r4
  807e50:	10c4703a 	and	r2,r2,r3
  807e54:	10001c1e 	bne	r2,zero,807ec8 <strcmp+0xb4>
  807e58:	4013883a 	mov	r9,r8
  807e5c:	2811883a 	mov	r8,r5
  807e60:	00000106 	br	807e68 <strcmp+0x54>
  807e64:	1800181e 	bne	r3,zero,807ec8 <strcmp+0xb4>
  807e68:	39c00104 	addi	r7,r7,4
  807e6c:	39000017 	ldw	r4,0(r7)
  807e70:	31800104 	addi	r6,r6,4
  807e74:	31400017 	ldw	r5,0(r6)
  807e78:	2245883a 	add	r2,r4,r9
  807e7c:	1204703a 	and	r2,r2,r8
  807e80:	0106303a 	nor	r3,zero,r4
  807e84:	1886703a 	and	r3,r3,r2
  807e88:	217ff626 	beq	r4,r5,807e64 <strcmp+0x50>
  807e8c:	3809883a 	mov	r4,r7
  807e90:	300b883a 	mov	r5,r6
  807e94:	20c00007 	ldb	r3,0(r4)
  807e98:	1800051e 	bne	r3,zero,807eb0 <strcmp+0x9c>
  807e9c:	00000606 	br	807eb8 <strcmp+0xa4>
  807ea0:	21000044 	addi	r4,r4,1
  807ea4:	20c00007 	ldb	r3,0(r4)
  807ea8:	29400044 	addi	r5,r5,1
  807eac:	18000226 	beq	r3,zero,807eb8 <strcmp+0xa4>
  807eb0:	28800007 	ldb	r2,0(r5)
  807eb4:	18bffa26 	beq	r3,r2,807ea0 <strcmp+0x8c>
  807eb8:	20c00003 	ldbu	r3,0(r4)
  807ebc:	28800003 	ldbu	r2,0(r5)
  807ec0:	1885c83a 	sub	r2,r3,r2
  807ec4:	f800283a 	ret
  807ec8:	0005883a 	mov	r2,zero
  807ecc:	f800283a 	ret

00807ed0 <_calloc_r>:
  807ed0:	298b383a 	mul	r5,r5,r6
  807ed4:	defffe04 	addi	sp,sp,-8
  807ed8:	dc000015 	stw	r16,0(sp)
  807edc:	dfc00115 	stw	ra,4(sp)
  807ee0:	08017540 	call	801754 <_malloc_r>
  807ee4:	1021883a 	mov	r16,r2
  807ee8:	01c00904 	movi	r7,36
  807eec:	10000d26 	beq	r2,zero,807f24 <_calloc_r+0x54>
  807ef0:	10ffff17 	ldw	r3,-4(r2)
  807ef4:	1009883a 	mov	r4,r2
  807ef8:	00bfff04 	movi	r2,-4
  807efc:	1886703a 	and	r3,r3,r2
  807f00:	1887883a 	add	r3,r3,r2
  807f04:	180d883a 	mov	r6,r3
  807f08:	000b883a 	mov	r5,zero
  807f0c:	38c01736 	bltu	r7,r3,807f6c <_calloc_r+0x9c>
  807f10:	008004c4 	movi	r2,19
  807f14:	10c00836 	bltu	r2,r3,807f38 <_calloc_r+0x68>
  807f18:	20000215 	stw	zero,8(r4)
  807f1c:	20000015 	stw	zero,0(r4)
  807f20:	20000115 	stw	zero,4(r4)
  807f24:	8005883a 	mov	r2,r16
  807f28:	dfc00117 	ldw	ra,4(sp)
  807f2c:	dc000017 	ldw	r16,0(sp)
  807f30:	dec00204 	addi	sp,sp,8
  807f34:	f800283a 	ret
  807f38:	008006c4 	movi	r2,27
  807f3c:	80000015 	stw	zero,0(r16)
  807f40:	80000115 	stw	zero,4(r16)
  807f44:	81000204 	addi	r4,r16,8
  807f48:	10fff32e 	bgeu	r2,r3,807f18 <_calloc_r+0x48>
  807f4c:	80000215 	stw	zero,8(r16)
  807f50:	80000315 	stw	zero,12(r16)
  807f54:	81000404 	addi	r4,r16,16
  807f58:	19ffef1e 	bne	r3,r7,807f18 <_calloc_r+0x48>
  807f5c:	81000604 	addi	r4,r16,24
  807f60:	80000415 	stw	zero,16(r16)
  807f64:	80000515 	stw	zero,20(r16)
  807f68:	003feb06 	br	807f18 <_calloc_r+0x48>
  807f6c:	0801e940 	call	801e94 <memset>
  807f70:	8005883a 	mov	r2,r16
  807f74:	dfc00117 	ldw	ra,4(sp)
  807f78:	dc000017 	ldw	r16,0(sp)
  807f7c:	dec00204 	addi	sp,sp,8
  807f80:	f800283a 	ret

00807f84 <__udivdi3>:
  807f84:	defff004 	addi	sp,sp,-64
  807f88:	2005883a 	mov	r2,r4
  807f8c:	3011883a 	mov	r8,r6
  807f90:	df000e15 	stw	fp,56(sp)
  807f94:	dd000a15 	stw	r20,40(sp)
  807f98:	dc000615 	stw	r16,24(sp)
  807f9c:	dfc00f15 	stw	ra,60(sp)
  807fa0:	ddc00d15 	stw	r23,52(sp)
  807fa4:	dd800c15 	stw	r22,48(sp)
  807fa8:	dd400b15 	stw	r21,44(sp)
  807fac:	dcc00915 	stw	r19,36(sp)
  807fb0:	dc800815 	stw	r18,32(sp)
  807fb4:	dc400715 	stw	r17,28(sp)
  807fb8:	4021883a 	mov	r16,r8
  807fbc:	1039883a 	mov	fp,r2
  807fc0:	2829883a 	mov	r20,r5
  807fc4:	38003b1e 	bne	r7,zero,8080b4 <__udivdi3+0x130>
  807fc8:	2a005c36 	bltu	r5,r8,80813c <__udivdi3+0x1b8>
  807fcc:	4000a626 	beq	r8,zero,808268 <__udivdi3+0x2e4>
  807fd0:	00bfffd4 	movui	r2,65535
  807fd4:	14009e36 	bltu	r2,r16,808250 <__udivdi3+0x2cc>
  807fd8:	00803fc4 	movi	r2,255
  807fdc:	14013d36 	bltu	r2,r16,8084d4 <__udivdi3+0x550>
  807fe0:	000b883a 	mov	r5,zero
  807fe4:	0005883a 	mov	r2,zero
  807fe8:	8084d83a 	srl	r2,r16,r2
  807fec:	01002074 	movhi	r4,129
  807ff0:	213b4c04 	addi	r4,r4,-4816
  807ff4:	01800804 	movi	r6,32
  807ff8:	1105883a 	add	r2,r2,r4
  807ffc:	10c00003 	ldbu	r3,0(r2)
  808000:	28c7883a 	add	r3,r5,r3
  808004:	30edc83a 	sub	r22,r6,r3
  808008:	b000ee1e 	bne	r22,zero,8083c4 <__udivdi3+0x440>
  80800c:	802ad43a 	srli	r21,r16,16
  808010:	00800044 	movi	r2,1
  808014:	a423c83a 	sub	r17,r20,r16
  808018:	85ffffcc 	andi	r23,r16,65535
  80801c:	d8800315 	stw	r2,12(sp)
  808020:	8809883a 	mov	r4,r17
  808024:	a80b883a 	mov	r5,r21
  808028:	0809d780 	call	809d78 <__udivsi3>
  80802c:	8809883a 	mov	r4,r17
  808030:	a80b883a 	mov	r5,r21
  808034:	102d883a 	mov	r22,r2
  808038:	0809d800 	call	809d80 <__umodsi3>
  80803c:	1004943a 	slli	r2,r2,16
  808040:	e006d43a 	srli	r3,fp,16
  808044:	bda3383a 	mul	r17,r23,r22
  808048:	10c4b03a 	or	r2,r2,r3
  80804c:	1440042e 	bgeu	r2,r17,808060 <__udivdi3+0xdc>
  808050:	1405883a 	add	r2,r2,r16
  808054:	b5bfffc4 	addi	r22,r22,-1
  808058:	14000136 	bltu	r2,r16,808060 <__udivdi3+0xdc>
  80805c:	14413d36 	bltu	r2,r17,808554 <__udivdi3+0x5d0>
  808060:	1463c83a 	sub	r17,r2,r17
  808064:	8809883a 	mov	r4,r17
  808068:	a80b883a 	mov	r5,r21
  80806c:	0809d780 	call	809d78 <__udivsi3>
  808070:	8809883a 	mov	r4,r17
  808074:	a80b883a 	mov	r5,r21
  808078:	1029883a 	mov	r20,r2
  80807c:	0809d800 	call	809d80 <__umodsi3>
  808080:	1004943a 	slli	r2,r2,16
  808084:	bd09383a 	mul	r4,r23,r20
  808088:	e0ffffcc 	andi	r3,fp,65535
  80808c:	10c4b03a 	or	r2,r2,r3
  808090:	1100042e 	bgeu	r2,r4,8080a4 <__udivdi3+0x120>
  808094:	8085883a 	add	r2,r16,r2
  808098:	a53fffc4 	addi	r20,r20,-1
  80809c:	14000136 	bltu	r2,r16,8080a4 <__udivdi3+0x120>
  8080a0:	11012036 	bltu	r2,r4,808524 <__udivdi3+0x5a0>
  8080a4:	b004943a 	slli	r2,r22,16
  8080a8:	d9000317 	ldw	r4,12(sp)
  8080ac:	a084b03a 	or	r2,r20,r2
  8080b0:	00001506 	br	808108 <__udivdi3+0x184>
  8080b4:	380d883a 	mov	r6,r7
  8080b8:	29c06236 	bltu	r5,r7,808244 <__udivdi3+0x2c0>
  8080bc:	00bfffd4 	movui	r2,65535
  8080c0:	11c05a36 	bltu	r2,r7,80822c <__udivdi3+0x2a8>
  8080c4:	00803fc4 	movi	r2,255
  8080c8:	11c0fc36 	bltu	r2,r7,8084bc <__udivdi3+0x538>
  8080cc:	000b883a 	mov	r5,zero
  8080d0:	0005883a 	mov	r2,zero
  8080d4:	3084d83a 	srl	r2,r6,r2
  8080d8:	01002074 	movhi	r4,129
  8080dc:	213b4c04 	addi	r4,r4,-4816
  8080e0:	01c00804 	movi	r7,32
  8080e4:	1105883a 	add	r2,r2,r4
  8080e8:	10c00003 	ldbu	r3,0(r2)
  8080ec:	28c7883a 	add	r3,r5,r3
  8080f0:	38efc83a 	sub	r23,r7,r3
  8080f4:	b800691e 	bne	r23,zero,80829c <__udivdi3+0x318>
  8080f8:	35000136 	bltu	r6,r20,808100 <__udivdi3+0x17c>
  8080fc:	e4005136 	bltu	fp,r16,808244 <__udivdi3+0x2c0>
  808100:	00800044 	movi	r2,1
  808104:	0009883a 	mov	r4,zero
  808108:	2007883a 	mov	r3,r4
  80810c:	dfc00f17 	ldw	ra,60(sp)
  808110:	df000e17 	ldw	fp,56(sp)
  808114:	ddc00d17 	ldw	r23,52(sp)
  808118:	dd800c17 	ldw	r22,48(sp)
  80811c:	dd400b17 	ldw	r21,44(sp)
  808120:	dd000a17 	ldw	r20,40(sp)
  808124:	dcc00917 	ldw	r19,36(sp)
  808128:	dc800817 	ldw	r18,32(sp)
  80812c:	dc400717 	ldw	r17,28(sp)
  808130:	dc000617 	ldw	r16,24(sp)
  808134:	dec01004 	addi	sp,sp,64
  808138:	f800283a 	ret
  80813c:	00bfffd4 	movui	r2,65535
  808140:	12005036 	bltu	r2,r8,808284 <__udivdi3+0x300>
  808144:	00803fc4 	movi	r2,255
  808148:	1200e836 	bltu	r2,r8,8084ec <__udivdi3+0x568>
  80814c:	000b883a 	mov	r5,zero
  808150:	0005883a 	mov	r2,zero
  808154:	8084d83a 	srl	r2,r16,r2
  808158:	01002074 	movhi	r4,129
  80815c:	213b4c04 	addi	r4,r4,-4816
  808160:	01800804 	movi	r6,32
  808164:	1105883a 	add	r2,r2,r4
  808168:	10c00003 	ldbu	r3,0(r2)
  80816c:	28c7883a 	add	r3,r5,r3
  808170:	30cbc83a 	sub	r5,r6,r3
  808174:	28000626 	beq	r5,zero,808190 <__udivdi3+0x20c>
  808178:	3145c83a 	sub	r2,r6,r5
  80817c:	e084d83a 	srl	r2,fp,r2
  808180:	a146983a 	sll	r3,r20,r5
  808184:	e178983a 	sll	fp,fp,r5
  808188:	8160983a 	sll	r16,r16,r5
  80818c:	18a8b03a 	or	r20,r3,r2
  808190:	802ad43a 	srli	r21,r16,16
  808194:	a009883a 	mov	r4,r20
  808198:	85ffffcc 	andi	r23,r16,65535
  80819c:	a80b883a 	mov	r5,r21
  8081a0:	0809d780 	call	809d78 <__udivsi3>
  8081a4:	a009883a 	mov	r4,r20
  8081a8:	a80b883a 	mov	r5,r21
  8081ac:	102d883a 	mov	r22,r2
  8081b0:	0809d800 	call	809d80 <__umodsi3>
  8081b4:	1004943a 	slli	r2,r2,16
  8081b8:	e006d43a 	srli	r3,fp,16
  8081bc:	bda3383a 	mul	r17,r23,r22
  8081c0:	10c4b03a 	or	r2,r2,r3
  8081c4:	1440042e 	bgeu	r2,r17,8081d8 <__udivdi3+0x254>
  8081c8:	1405883a 	add	r2,r2,r16
  8081cc:	b5bfffc4 	addi	r22,r22,-1
  8081d0:	14000136 	bltu	r2,r16,8081d8 <__udivdi3+0x254>
  8081d4:	1440d536 	bltu	r2,r17,80852c <__udivdi3+0x5a8>
  8081d8:	1463c83a 	sub	r17,r2,r17
  8081dc:	8809883a 	mov	r4,r17
  8081e0:	a80b883a 	mov	r5,r21
  8081e4:	0809d780 	call	809d78 <__udivsi3>
  8081e8:	8809883a 	mov	r4,r17
  8081ec:	a80b883a 	mov	r5,r21
  8081f0:	1029883a 	mov	r20,r2
  8081f4:	0809d800 	call	809d80 <__umodsi3>
  8081f8:	1004943a 	slli	r2,r2,16
  8081fc:	bd09383a 	mul	r4,r23,r20
  808200:	e0ffffcc 	andi	r3,fp,65535
  808204:	10c4b03a 	or	r2,r2,r3
  808208:	1100042e 	bgeu	r2,r4,80821c <__udivdi3+0x298>
  80820c:	8085883a 	add	r2,r16,r2
  808210:	a53fffc4 	addi	r20,r20,-1
  808214:	14000136 	bltu	r2,r16,80821c <__udivdi3+0x298>
  808218:	1100c736 	bltu	r2,r4,808538 <__udivdi3+0x5b4>
  80821c:	b004943a 	slli	r2,r22,16
  808220:	0009883a 	mov	r4,zero
  808224:	a084b03a 	or	r2,r20,r2
  808228:	003fb706 	br	808108 <__udivdi3+0x184>
  80822c:	00804034 	movhi	r2,256
  808230:	10bfffc4 	addi	r2,r2,-1
  808234:	11c0a436 	bltu	r2,r7,8084c8 <__udivdi3+0x544>
  808238:	01400404 	movi	r5,16
  80823c:	2805883a 	mov	r2,r5
  808240:	003fa406 	br	8080d4 <__udivdi3+0x150>
  808244:	0005883a 	mov	r2,zero
  808248:	0009883a 	mov	r4,zero
  80824c:	003fae06 	br	808108 <__udivdi3+0x184>
  808250:	00804034 	movhi	r2,256
  808254:	10bfffc4 	addi	r2,r2,-1
  808258:	1400a136 	bltu	r2,r16,8084e0 <__udivdi3+0x55c>
  80825c:	01400404 	movi	r5,16
  808260:	2805883a 	mov	r2,r5
  808264:	003f6006 	br	807fe8 <__udivdi3+0x64>
  808268:	01000044 	movi	r4,1
  80826c:	000b883a 	mov	r5,zero
  808270:	0809d780 	call	809d78 <__udivsi3>
  808274:	1021883a 	mov	r16,r2
  808278:	00bfffd4 	movui	r2,65535
  80827c:	143ff436 	bltu	r2,r16,808250 <__udivdi3+0x2cc>
  808280:	003f5506 	br	807fd8 <__udivdi3+0x54>
  808284:	00804034 	movhi	r2,256
  808288:	10bfffc4 	addi	r2,r2,-1
  80828c:	12009a36 	bltu	r2,r8,8084f8 <__udivdi3+0x574>
  808290:	01400404 	movi	r5,16
  808294:	2805883a 	mov	r2,r5
  808298:	003fae06 	br	808154 <__udivdi3+0x1d0>
  80829c:	3dc5c83a 	sub	r2,r7,r23
  8082a0:	35c8983a 	sll	r4,r6,r23
  8082a4:	8086d83a 	srl	r3,r16,r2
  8082a8:	a0a2d83a 	srl	r17,r20,r2
  8082ac:	e084d83a 	srl	r2,fp,r2
  8082b0:	20eab03a 	or	r21,r4,r3
  8082b4:	a82cd43a 	srli	r22,r21,16
  8082b8:	a5c6983a 	sll	r3,r20,r23
  8082bc:	8809883a 	mov	r4,r17
  8082c0:	b00b883a 	mov	r5,r22
  8082c4:	1886b03a 	or	r3,r3,r2
  8082c8:	d8c00215 	stw	r3,8(sp)
  8082cc:	0809d780 	call	809d78 <__udivsi3>
  8082d0:	8809883a 	mov	r4,r17
  8082d4:	b00b883a 	mov	r5,r22
  8082d8:	1029883a 	mov	r20,r2
  8082dc:	0809d800 	call	809d80 <__umodsi3>
  8082e0:	a8ffffcc 	andi	r3,r21,65535
  8082e4:	d8c00515 	stw	r3,20(sp)
  8082e8:	d9000217 	ldw	r4,8(sp)
  8082ec:	d9400517 	ldw	r5,20(sp)
  8082f0:	1004943a 	slli	r2,r2,16
  8082f4:	2006d43a 	srli	r3,r4,16
  8082f8:	85e0983a 	sll	r16,r16,r23
  8082fc:	2d23383a 	mul	r17,r5,r20
  808300:	10c4b03a 	or	r2,r2,r3
  808304:	dc000015 	stw	r16,0(sp)
  808308:	1440032e 	bgeu	r2,r17,808318 <__udivdi3+0x394>
  80830c:	1545883a 	add	r2,r2,r21
  808310:	a53fffc4 	addi	r20,r20,-1
  808314:	15407f2e 	bgeu	r2,r21,808514 <__udivdi3+0x590>
  808318:	1463c83a 	sub	r17,r2,r17
  80831c:	8809883a 	mov	r4,r17
  808320:	b00b883a 	mov	r5,r22
  808324:	0809d780 	call	809d78 <__udivsi3>
  808328:	8809883a 	mov	r4,r17
  80832c:	b00b883a 	mov	r5,r22
  808330:	1021883a 	mov	r16,r2
  808334:	0809d800 	call	809d80 <__umodsi3>
  808338:	d8c00517 	ldw	r3,20(sp)
  80833c:	d9000217 	ldw	r4,8(sp)
  808340:	1004943a 	slli	r2,r2,16
  808344:	1c0f383a 	mul	r7,r3,r16
  808348:	20ffffcc 	andi	r3,r4,65535
  80834c:	10e2b03a 	or	r17,r2,r3
  808350:	89c0032e 	bgeu	r17,r7,808360 <__udivdi3+0x3dc>
  808354:	8d63883a 	add	r17,r17,r21
  808358:	843fffc4 	addi	r16,r16,-1
  80835c:	8d40692e 	bgeu	r17,r21,808504 <__udivdi3+0x580>
  808360:	a008943a 	slli	r4,r20,16
  808364:	d9400017 	ldw	r5,0(sp)
  808368:	89e3c83a 	sub	r17,r17,r7
  80836c:	8110b03a 	or	r8,r16,r4
  808370:	280cd43a 	srli	r6,r5,16
  808374:	28ffffcc 	andi	r3,r5,65535
  808378:	40bfffcc 	andi	r2,r8,65535
  80837c:	400ad43a 	srli	r5,r8,16
  808380:	10d3383a 	mul	r9,r2,r3
  808384:	1185383a 	mul	r2,r2,r6
  808388:	28c7383a 	mul	r3,r5,r3
  80838c:	4808d43a 	srli	r4,r9,16
  808390:	298b383a 	mul	r5,r5,r6
  808394:	10c5883a 	add	r2,r2,r3
  808398:	2089883a 	add	r4,r4,r2
  80839c:	20c0022e 	bgeu	r4,r3,8083a8 <__udivdi3+0x424>
  8083a0:	00800074 	movhi	r2,1
  8083a4:	288b883a 	add	r5,r5,r2
  8083a8:	2004d43a 	srli	r2,r4,16
  8083ac:	288b883a 	add	r5,r5,r2
  8083b0:	89403f36 	bltu	r17,r5,8084b0 <__udivdi3+0x52c>
  8083b4:	89403926 	beq	r17,r5,80849c <__udivdi3+0x518>
  8083b8:	4005883a 	mov	r2,r8
  8083bc:	0009883a 	mov	r4,zero
  8083c0:	003f5106 	br	808108 <__udivdi3+0x184>
  8083c4:	85a0983a 	sll	r16,r16,r22
  8083c8:	3585c83a 	sub	r2,r6,r22
  8083cc:	a0a2d83a 	srl	r17,r20,r2
  8083d0:	802ad43a 	srli	r21,r16,16
  8083d4:	e084d83a 	srl	r2,fp,r2
  8083d8:	a586983a 	sll	r3,r20,r22
  8083dc:	8809883a 	mov	r4,r17
  8083e0:	a80b883a 	mov	r5,r21
  8083e4:	1886b03a 	or	r3,r3,r2
  8083e8:	d8c00115 	stw	r3,4(sp)
  8083ec:	0809d780 	call	809d78 <__udivsi3>
  8083f0:	8809883a 	mov	r4,r17
  8083f4:	a80b883a 	mov	r5,r21
  8083f8:	d8800415 	stw	r2,16(sp)
  8083fc:	0809d800 	call	809d80 <__umodsi3>
  808400:	d9000117 	ldw	r4,4(sp)
  808404:	d9400417 	ldw	r5,16(sp)
  808408:	1004943a 	slli	r2,r2,16
  80840c:	85ffffcc 	andi	r23,r16,65535
  808410:	2006d43a 	srli	r3,r4,16
  808414:	b963383a 	mul	r17,r23,r5
  808418:	10c4b03a 	or	r2,r2,r3
  80841c:	1440042e 	bgeu	r2,r17,808430 <__udivdi3+0x4ac>
  808420:	297fffc4 	addi	r5,r5,-1
  808424:	1405883a 	add	r2,r2,r16
  808428:	d9400415 	stw	r5,16(sp)
  80842c:	1400442e 	bgeu	r2,r16,808540 <__udivdi3+0x5bc>
  808430:	1463c83a 	sub	r17,r2,r17
  808434:	8809883a 	mov	r4,r17
  808438:	a80b883a 	mov	r5,r21
  80843c:	0809d780 	call	809d78 <__udivsi3>
  808440:	8809883a 	mov	r4,r17
  808444:	a80b883a 	mov	r5,r21
  808448:	1029883a 	mov	r20,r2
  80844c:	0809d800 	call	809d80 <__umodsi3>
  808450:	d9400117 	ldw	r5,4(sp)
  808454:	1004943a 	slli	r2,r2,16
  808458:	bd09383a 	mul	r4,r23,r20
  80845c:	28ffffcc 	andi	r3,r5,65535
  808460:	10c6b03a 	or	r3,r2,r3
  808464:	1900062e 	bgeu	r3,r4,808480 <__udivdi3+0x4fc>
  808468:	1c07883a 	add	r3,r3,r16
  80846c:	a53fffc4 	addi	r20,r20,-1
  808470:	1c000336 	bltu	r3,r16,808480 <__udivdi3+0x4fc>
  808474:	1900022e 	bgeu	r3,r4,808480 <__udivdi3+0x4fc>
  808478:	a53fffc4 	addi	r20,r20,-1
  80847c:	1c07883a 	add	r3,r3,r16
  808480:	d9400417 	ldw	r5,16(sp)
  808484:	e5b8983a 	sll	fp,fp,r22
  808488:	1923c83a 	sub	r17,r3,r4
  80848c:	2804943a 	slli	r2,r5,16
  808490:	a0a8b03a 	or	r20,r20,r2
  808494:	dd000315 	stw	r20,12(sp)
  808498:	003ee106 	br	808020 <__udivdi3+0x9c>
  80849c:	2004943a 	slli	r2,r4,16
  8084a0:	e5c8983a 	sll	r4,fp,r23
  8084a4:	48ffffcc 	andi	r3,r9,65535
  8084a8:	10c5883a 	add	r2,r2,r3
  8084ac:	20bfc22e 	bgeu	r4,r2,8083b8 <__udivdi3+0x434>
  8084b0:	40bfffc4 	addi	r2,r8,-1
  8084b4:	0009883a 	mov	r4,zero
  8084b8:	003f1306 	br	808108 <__udivdi3+0x184>
  8084bc:	01400204 	movi	r5,8
  8084c0:	2805883a 	mov	r2,r5
  8084c4:	003f0306 	br	8080d4 <__udivdi3+0x150>
  8084c8:	01400604 	movi	r5,24
  8084cc:	2805883a 	mov	r2,r5
  8084d0:	003f0006 	br	8080d4 <__udivdi3+0x150>
  8084d4:	01400204 	movi	r5,8
  8084d8:	2805883a 	mov	r2,r5
  8084dc:	003ec206 	br	807fe8 <__udivdi3+0x64>
  8084e0:	01400604 	movi	r5,24
  8084e4:	2805883a 	mov	r2,r5
  8084e8:	003ebf06 	br	807fe8 <__udivdi3+0x64>
  8084ec:	01400204 	movi	r5,8
  8084f0:	2805883a 	mov	r2,r5
  8084f4:	003f1706 	br	808154 <__udivdi3+0x1d0>
  8084f8:	01400604 	movi	r5,24
  8084fc:	2805883a 	mov	r2,r5
  808500:	003f1406 	br	808154 <__udivdi3+0x1d0>
  808504:	89ff962e 	bgeu	r17,r7,808360 <__udivdi3+0x3dc>
  808508:	8d63883a 	add	r17,r17,r21
  80850c:	843fffc4 	addi	r16,r16,-1
  808510:	003f9306 	br	808360 <__udivdi3+0x3dc>
  808514:	147f802e 	bgeu	r2,r17,808318 <__udivdi3+0x394>
  808518:	a53fffc4 	addi	r20,r20,-1
  80851c:	1545883a 	add	r2,r2,r21
  808520:	003f7d06 	br	808318 <__udivdi3+0x394>
  808524:	a53fffc4 	addi	r20,r20,-1
  808528:	003ede06 	br	8080a4 <__udivdi3+0x120>
  80852c:	b5bfffc4 	addi	r22,r22,-1
  808530:	1405883a 	add	r2,r2,r16
  808534:	003f2806 	br	8081d8 <__udivdi3+0x254>
  808538:	a53fffc4 	addi	r20,r20,-1
  80853c:	003f3706 	br	80821c <__udivdi3+0x298>
  808540:	147fbb2e 	bgeu	r2,r17,808430 <__udivdi3+0x4ac>
  808544:	297fffc4 	addi	r5,r5,-1
  808548:	1405883a 	add	r2,r2,r16
  80854c:	d9400415 	stw	r5,16(sp)
  808550:	003fb706 	br	808430 <__udivdi3+0x4ac>
  808554:	b5bfffc4 	addi	r22,r22,-1
  808558:	1405883a 	add	r2,r2,r16
  80855c:	003ec006 	br	808060 <__udivdi3+0xdc>

00808560 <__umoddi3>:
  808560:	defff104 	addi	sp,sp,-60
  808564:	dd800b15 	stw	r22,44(sp)
  808568:	dd000915 	stw	r20,36(sp)
  80856c:	dc000515 	stw	r16,20(sp)
  808570:	dfc00e15 	stw	ra,56(sp)
  808574:	df000d15 	stw	fp,52(sp)
  808578:	ddc00c15 	stw	r23,48(sp)
  80857c:	dd400a15 	stw	r21,40(sp)
  808580:	dcc00815 	stw	r19,32(sp)
  808584:	dc800715 	stw	r18,28(sp)
  808588:	dc400615 	stw	r17,24(sp)
  80858c:	3021883a 	mov	r16,r6
  808590:	202d883a 	mov	r22,r4
  808594:	2829883a 	mov	r20,r5
  808598:	38002b1e 	bne	r7,zero,808648 <__umoddi3+0xe8>
  80859c:	29805036 	bltu	r5,r6,8086e0 <__umoddi3+0x180>
  8085a0:	30008a26 	beq	r6,zero,8087cc <__umoddi3+0x26c>
  8085a4:	00bfffd4 	movui	r2,65535
  8085a8:	14008236 	bltu	r2,r16,8087b4 <__umoddi3+0x254>
  8085ac:	00803fc4 	movi	r2,255
  8085b0:	14013636 	bltu	r2,r16,808a8c <__umoddi3+0x52c>
  8085b4:	000b883a 	mov	r5,zero
  8085b8:	0005883a 	mov	r2,zero
  8085bc:	8084d83a 	srl	r2,r16,r2
  8085c0:	01002074 	movhi	r4,129
  8085c4:	213b4c04 	addi	r4,r4,-4816
  8085c8:	01800804 	movi	r6,32
  8085cc:	1105883a 	add	r2,r2,r4
  8085d0:	10c00003 	ldbu	r3,0(r2)
  8085d4:	28c7883a 	add	r3,r5,r3
  8085d8:	30efc83a 	sub	r23,r6,r3
  8085dc:	b800941e 	bne	r23,zero,808830 <__umoddi3+0x2d0>
  8085e0:	802ad43a 	srli	r21,r16,16
  8085e4:	a423c83a 	sub	r17,r20,r16
  8085e8:	0039883a 	mov	fp,zero
  8085ec:	853fffcc 	andi	r20,r16,65535
  8085f0:	8809883a 	mov	r4,r17
  8085f4:	a80b883a 	mov	r5,r21
  8085f8:	0809d780 	call	809d78 <__udivsi3>
  8085fc:	8809883a 	mov	r4,r17
  808600:	a80b883a 	mov	r5,r21
  808604:	a0a3383a 	mul	r17,r20,r2
  808608:	0809d800 	call	809d80 <__umodsi3>
  80860c:	1004943a 	slli	r2,r2,16
  808610:	b006d43a 	srli	r3,r22,16
  808614:	10c4b03a 	or	r2,r2,r3
  808618:	1440032e 	bgeu	r2,r17,808628 <__umoddi3+0xc8>
  80861c:	1405883a 	add	r2,r2,r16
  808620:	14000136 	bltu	r2,r16,808628 <__umoddi3+0xc8>
  808624:	14413536 	bltu	r2,r17,808afc <__umoddi3+0x59c>
  808628:	1463c83a 	sub	r17,r2,r17
  80862c:	8809883a 	mov	r4,r17
  808630:	a80b883a 	mov	r5,r21
  808634:	0809d780 	call	809d78 <__udivsi3>
  808638:	8809883a 	mov	r4,r17
  80863c:	a0a3383a 	mul	r17,r20,r2
  808640:	a80b883a 	mov	r5,r21
  808644:	00004d06 	br	80877c <__umoddi3+0x21c>
  808648:	380d883a 	mov	r6,r7
  80864c:	29c0102e 	bgeu	r5,r7,808690 <__umoddi3+0x130>
  808650:	2011883a 	mov	r8,r4
  808654:	2813883a 	mov	r9,r5
  808658:	4005883a 	mov	r2,r8
  80865c:	4807883a 	mov	r3,r9
  808660:	dfc00e17 	ldw	ra,56(sp)
  808664:	df000d17 	ldw	fp,52(sp)
  808668:	ddc00c17 	ldw	r23,48(sp)
  80866c:	dd800b17 	ldw	r22,44(sp)
  808670:	dd400a17 	ldw	r21,40(sp)
  808674:	dd000917 	ldw	r20,36(sp)
  808678:	dcc00817 	ldw	r19,32(sp)
  80867c:	dc800717 	ldw	r18,28(sp)
  808680:	dc400617 	ldw	r17,24(sp)
  808684:	dc000517 	ldw	r16,20(sp)
  808688:	dec00f04 	addi	sp,sp,60
  80868c:	f800283a 	ret
  808690:	00bfffd4 	movui	r2,65535
  808694:	11c05a36 	bltu	r2,r7,808800 <__umoddi3+0x2a0>
  808698:	00803fc4 	movi	r2,255
  80869c:	11c0fe36 	bltu	r2,r7,808a98 <__umoddi3+0x538>
  8086a0:	000b883a 	mov	r5,zero
  8086a4:	0005883a 	mov	r2,zero
  8086a8:	3084d83a 	srl	r2,r6,r2
  8086ac:	01002074 	movhi	r4,129
  8086b0:	213b4c04 	addi	r4,r4,-4816
  8086b4:	01c00804 	movi	r7,32
  8086b8:	1105883a 	add	r2,r2,r4
  8086bc:	10c00003 	ldbu	r3,0(r2)
  8086c0:	28c7883a 	add	r3,r5,r3
  8086c4:	38ebc83a 	sub	r21,r7,r3
  8086c8:	a800851e 	bne	r21,zero,8088e0 <__umoddi3+0x380>
  8086cc:	35005236 	bltu	r6,r20,808818 <__umoddi3+0x2b8>
  8086d0:	b400512e 	bgeu	r22,r16,808818 <__umoddi3+0x2b8>
  8086d4:	b011883a 	mov	r8,r22
  8086d8:	a013883a 	mov	r9,r20
  8086dc:	003fde06 	br	808658 <__umoddi3+0xf8>
  8086e0:	00bfffd4 	movui	r2,65535
  8086e4:	11804036 	bltu	r2,r6,8087e8 <__umoddi3+0x288>
  8086e8:	00803fc4 	movi	r2,255
  8086ec:	1180ed36 	bltu	r2,r6,808aa4 <__umoddi3+0x544>
  8086f0:	000b883a 	mov	r5,zero
  8086f4:	0005883a 	mov	r2,zero
  8086f8:	8084d83a 	srl	r2,r16,r2
  8086fc:	01002074 	movhi	r4,129
  808700:	213b4c04 	addi	r4,r4,-4816
  808704:	01800804 	movi	r6,32
  808708:	1105883a 	add	r2,r2,r4
  80870c:	10c00003 	ldbu	r3,0(r2)
  808710:	28c7883a 	add	r3,r5,r3
  808714:	30c7c83a 	sub	r3,r6,r3
  808718:	1800bf1e 	bne	r3,zero,808a18 <__umoddi3+0x4b8>
  80871c:	0039883a 	mov	fp,zero
  808720:	802ad43a 	srli	r21,r16,16
  808724:	a009883a 	mov	r4,r20
  808728:	85ffffcc 	andi	r23,r16,65535
  80872c:	a80b883a 	mov	r5,r21
  808730:	0809d780 	call	809d78 <__udivsi3>
  808734:	a009883a 	mov	r4,r20
  808738:	a80b883a 	mov	r5,r21
  80873c:	b8a3383a 	mul	r17,r23,r2
  808740:	0809d800 	call	809d80 <__umodsi3>
  808744:	1004943a 	slli	r2,r2,16
  808748:	b006d43a 	srli	r3,r22,16
  80874c:	10c4b03a 	or	r2,r2,r3
  808750:	1440032e 	bgeu	r2,r17,808760 <__umoddi3+0x200>
  808754:	1405883a 	add	r2,r2,r16
  808758:	14000136 	bltu	r2,r16,808760 <__umoddi3+0x200>
  80875c:	1440e536 	bltu	r2,r17,808af4 <__umoddi3+0x594>
  808760:	1463c83a 	sub	r17,r2,r17
  808764:	8809883a 	mov	r4,r17
  808768:	a80b883a 	mov	r5,r21
  80876c:	0809d780 	call	809d78 <__udivsi3>
  808770:	8809883a 	mov	r4,r17
  808774:	b8a3383a 	mul	r17,r23,r2
  808778:	a80b883a 	mov	r5,r21
  80877c:	0809d800 	call	809d80 <__umodsi3>
  808780:	1004943a 	slli	r2,r2,16
  808784:	b0ffffcc 	andi	r3,r22,65535
  808788:	10c4b03a 	or	r2,r2,r3
  80878c:	1440042e 	bgeu	r2,r17,8087a0 <__umoddi3+0x240>
  808790:	1405883a 	add	r2,r2,r16
  808794:	14000236 	bltu	r2,r16,8087a0 <__umoddi3+0x240>
  808798:	1440012e 	bgeu	r2,r17,8087a0 <__umoddi3+0x240>
  80879c:	1405883a 	add	r2,r2,r16
  8087a0:	1445c83a 	sub	r2,r2,r17
  8087a4:	1724d83a 	srl	r18,r2,fp
  8087a8:	0013883a 	mov	r9,zero
  8087ac:	9011883a 	mov	r8,r18
  8087b0:	003fa906 	br	808658 <__umoddi3+0xf8>
  8087b4:	00804034 	movhi	r2,256
  8087b8:	10bfffc4 	addi	r2,r2,-1
  8087bc:	1400b036 	bltu	r2,r16,808a80 <__umoddi3+0x520>
  8087c0:	01400404 	movi	r5,16
  8087c4:	2805883a 	mov	r2,r5
  8087c8:	003f7c06 	br	8085bc <__umoddi3+0x5c>
  8087cc:	01000044 	movi	r4,1
  8087d0:	000b883a 	mov	r5,zero
  8087d4:	0809d780 	call	809d78 <__udivsi3>
  8087d8:	1021883a 	mov	r16,r2
  8087dc:	00bfffd4 	movui	r2,65535
  8087e0:	143ff436 	bltu	r2,r16,8087b4 <__umoddi3+0x254>
  8087e4:	003f7106 	br	8085ac <__umoddi3+0x4c>
  8087e8:	00804034 	movhi	r2,256
  8087ec:	10bfffc4 	addi	r2,r2,-1
  8087f0:	1180af36 	bltu	r2,r6,808ab0 <__umoddi3+0x550>
  8087f4:	01400404 	movi	r5,16
  8087f8:	2805883a 	mov	r2,r5
  8087fc:	003fbe06 	br	8086f8 <__umoddi3+0x198>
  808800:	00804034 	movhi	r2,256
  808804:	10bfffc4 	addi	r2,r2,-1
  808808:	11c0ac36 	bltu	r2,r7,808abc <__umoddi3+0x55c>
  80880c:	01400404 	movi	r5,16
  808810:	2805883a 	mov	r2,r5
  808814:	003fa406 	br	8086a8 <__umoddi3+0x148>
  808818:	b409c83a 	sub	r4,r22,r16
  80881c:	b105803a 	cmpltu	r2,r22,r4
  808820:	a187c83a 	sub	r3,r20,r6
  808824:	18a9c83a 	sub	r20,r3,r2
  808828:	202d883a 	mov	r22,r4
  80882c:	003fa906 	br	8086d4 <__umoddi3+0x174>
  808830:	85e0983a 	sll	r16,r16,r23
  808834:	35c5c83a 	sub	r2,r6,r23
  808838:	a0a2d83a 	srl	r17,r20,r2
  80883c:	802ad43a 	srli	r21,r16,16
  808840:	b084d83a 	srl	r2,r22,r2
  808844:	a5c6983a 	sll	r3,r20,r23
  808848:	8809883a 	mov	r4,r17
  80884c:	a80b883a 	mov	r5,r21
  808850:	1886b03a 	or	r3,r3,r2
  808854:	d8c00115 	stw	r3,4(sp)
  808858:	853fffcc 	andi	r20,r16,65535
  80885c:	0809d780 	call	809d78 <__udivsi3>
  808860:	8809883a 	mov	r4,r17
  808864:	a80b883a 	mov	r5,r21
  808868:	a0a3383a 	mul	r17,r20,r2
  80886c:	0809d800 	call	809d80 <__umodsi3>
  808870:	d9000117 	ldw	r4,4(sp)
  808874:	1004943a 	slli	r2,r2,16
  808878:	b839883a 	mov	fp,r23
  80887c:	2006d43a 	srli	r3,r4,16
  808880:	10c4b03a 	or	r2,r2,r3
  808884:	1440022e 	bgeu	r2,r17,808890 <__umoddi3+0x330>
  808888:	1405883a 	add	r2,r2,r16
  80888c:	1400962e 	bgeu	r2,r16,808ae8 <__umoddi3+0x588>
  808890:	1463c83a 	sub	r17,r2,r17
  808894:	8809883a 	mov	r4,r17
  808898:	a80b883a 	mov	r5,r21
  80889c:	0809d780 	call	809d78 <__udivsi3>
  8088a0:	8809883a 	mov	r4,r17
  8088a4:	a80b883a 	mov	r5,r21
  8088a8:	a0a3383a 	mul	r17,r20,r2
  8088ac:	0809d800 	call	809d80 <__umodsi3>
  8088b0:	d9400117 	ldw	r5,4(sp)
  8088b4:	1004943a 	slli	r2,r2,16
  8088b8:	28ffffcc 	andi	r3,r5,65535
  8088bc:	10c4b03a 	or	r2,r2,r3
  8088c0:	1440042e 	bgeu	r2,r17,8088d4 <__umoddi3+0x374>
  8088c4:	1405883a 	add	r2,r2,r16
  8088c8:	14000236 	bltu	r2,r16,8088d4 <__umoddi3+0x374>
  8088cc:	1440012e 	bgeu	r2,r17,8088d4 <__umoddi3+0x374>
  8088d0:	1405883a 	add	r2,r2,r16
  8088d4:	b5ec983a 	sll	r22,r22,r23
  8088d8:	1463c83a 	sub	r17,r2,r17
  8088dc:	003f4406 	br	8085f0 <__umoddi3+0x90>
  8088e0:	3d4fc83a 	sub	r7,r7,r21
  8088e4:	3546983a 	sll	r3,r6,r21
  8088e8:	81c4d83a 	srl	r2,r16,r7
  8088ec:	a1e2d83a 	srl	r17,r20,r7
  8088f0:	a54c983a 	sll	r6,r20,r21
  8088f4:	18aeb03a 	or	r23,r3,r2
  8088f8:	b828d43a 	srli	r20,r23,16
  8088fc:	b1c4d83a 	srl	r2,r22,r7
  808900:	8809883a 	mov	r4,r17
  808904:	a00b883a 	mov	r5,r20
  808908:	308cb03a 	or	r6,r6,r2
  80890c:	d9c00315 	stw	r7,12(sp)
  808910:	d9800215 	stw	r6,8(sp)
  808914:	0809d780 	call	809d78 <__udivsi3>
  808918:	8809883a 	mov	r4,r17
  80891c:	a00b883a 	mov	r5,r20
  808920:	1039883a 	mov	fp,r2
  808924:	0809d800 	call	809d80 <__umodsi3>
  808928:	b8ffffcc 	andi	r3,r23,65535
  80892c:	d8c00415 	stw	r3,16(sp)
  808930:	d9000217 	ldw	r4,8(sp)
  808934:	d9400417 	ldw	r5,16(sp)
  808938:	1004943a 	slli	r2,r2,16
  80893c:	2006d43a 	srli	r3,r4,16
  808940:	8560983a 	sll	r16,r16,r21
  808944:	2f23383a 	mul	r17,r5,fp
  808948:	10c4b03a 	or	r2,r2,r3
  80894c:	dc000015 	stw	r16,0(sp)
  808950:	b56c983a 	sll	r22,r22,r21
  808954:	1440032e 	bgeu	r2,r17,808964 <__umoddi3+0x404>
  808958:	15c5883a 	add	r2,r2,r23
  80895c:	e73fffc4 	addi	fp,fp,-1
  808960:	15c05d2e 	bgeu	r2,r23,808ad8 <__umoddi3+0x578>
  808964:	1463c83a 	sub	r17,r2,r17
  808968:	8809883a 	mov	r4,r17
  80896c:	a00b883a 	mov	r5,r20
  808970:	0809d780 	call	809d78 <__udivsi3>
  808974:	8809883a 	mov	r4,r17
  808978:	a00b883a 	mov	r5,r20
  80897c:	1021883a 	mov	r16,r2
  808980:	0809d800 	call	809d80 <__umodsi3>
  808984:	d8c00417 	ldw	r3,16(sp)
  808988:	d9000217 	ldw	r4,8(sp)
  80898c:	1004943a 	slli	r2,r2,16
  808990:	1c23383a 	mul	r17,r3,r16
  808994:	20ffffcc 	andi	r3,r4,65535
  808998:	10ceb03a 	or	r7,r2,r3
  80899c:	3c40032e 	bgeu	r7,r17,8089ac <__umoddi3+0x44c>
  8089a0:	3dcf883a 	add	r7,r7,r23
  8089a4:	843fffc4 	addi	r16,r16,-1
  8089a8:	3dc0472e 	bgeu	r7,r23,808ac8 <__umoddi3+0x568>
  8089ac:	e004943a 	slli	r2,fp,16
  8089b0:	d9400017 	ldw	r5,0(sp)
  8089b4:	3c4fc83a 	sub	r7,r7,r17
  8089b8:	8084b03a 	or	r2,r16,r2
  8089bc:	28ffffcc 	andi	r3,r5,65535
  8089c0:	280cd43a 	srli	r6,r5,16
  8089c4:	100ad43a 	srli	r5,r2,16
  8089c8:	10bfffcc 	andi	r2,r2,65535
  8089cc:	10d1383a 	mul	r8,r2,r3
  8089d0:	28c7383a 	mul	r3,r5,r3
  8089d4:	1185383a 	mul	r2,r2,r6
  8089d8:	4008d43a 	srli	r4,r8,16
  8089dc:	298b383a 	mul	r5,r5,r6
  8089e0:	10c5883a 	add	r2,r2,r3
  8089e4:	2089883a 	add	r4,r4,r2
  8089e8:	20c0022e 	bgeu	r4,r3,8089f4 <__umoddi3+0x494>
  8089ec:	00800074 	movhi	r2,1
  8089f0:	288b883a 	add	r5,r5,r2
  8089f4:	2004d43a 	srli	r2,r4,16
  8089f8:	2008943a 	slli	r4,r4,16
  8089fc:	40ffffcc 	andi	r3,r8,65535
  808a00:	288b883a 	add	r5,r5,r2
  808a04:	20c9883a 	add	r4,r4,r3
  808a08:	39400b36 	bltu	r7,r5,808a38 <__umoddi3+0x4d8>
  808a0c:	39403d26 	beq	r7,r5,808b04 <__umoddi3+0x5a4>
  808a10:	394bc83a 	sub	r5,r7,r5
  808a14:	00000f06 	br	808a54 <__umoddi3+0x4f4>
  808a18:	30c5c83a 	sub	r2,r6,r3
  808a1c:	1839883a 	mov	fp,r3
  808a20:	b084d83a 	srl	r2,r22,r2
  808a24:	a0c6983a 	sll	r3,r20,r3
  808a28:	8720983a 	sll	r16,r16,fp
  808a2c:	b72c983a 	sll	r22,r22,fp
  808a30:	18a8b03a 	or	r20,r3,r2
  808a34:	003f3a06 	br	808720 <__umoddi3+0x1c0>
  808a38:	d8c00017 	ldw	r3,0(sp)
  808a3c:	20c5c83a 	sub	r2,r4,r3
  808a40:	2089803a 	cmpltu	r4,r4,r2
  808a44:	2dc7c83a 	sub	r3,r5,r23
  808a48:	1907c83a 	sub	r3,r3,r4
  808a4c:	38cbc83a 	sub	r5,r7,r3
  808a50:	1009883a 	mov	r4,r2
  808a54:	b105c83a 	sub	r2,r22,r4
  808a58:	b087803a 	cmpltu	r3,r22,r2
  808a5c:	28c7c83a 	sub	r3,r5,r3
  808a60:	d9400317 	ldw	r5,12(sp)
  808a64:	1544d83a 	srl	r2,r2,r21
  808a68:	1948983a 	sll	r4,r3,r5
  808a6c:	1d46d83a 	srl	r3,r3,r21
  808a70:	20a4b03a 	or	r18,r4,r2
  808a74:	9011883a 	mov	r8,r18
  808a78:	1813883a 	mov	r9,r3
  808a7c:	003ef606 	br	808658 <__umoddi3+0xf8>
  808a80:	01400604 	movi	r5,24
  808a84:	2805883a 	mov	r2,r5
  808a88:	003ecc06 	br	8085bc <__umoddi3+0x5c>
  808a8c:	01400204 	movi	r5,8
  808a90:	2805883a 	mov	r2,r5
  808a94:	003ec906 	br	8085bc <__umoddi3+0x5c>
  808a98:	01400204 	movi	r5,8
  808a9c:	2805883a 	mov	r2,r5
  808aa0:	003f0106 	br	8086a8 <__umoddi3+0x148>
  808aa4:	01400204 	movi	r5,8
  808aa8:	2805883a 	mov	r2,r5
  808aac:	003f1206 	br	8086f8 <__umoddi3+0x198>
  808ab0:	01400604 	movi	r5,24
  808ab4:	2805883a 	mov	r2,r5
  808ab8:	003f0f06 	br	8086f8 <__umoddi3+0x198>
  808abc:	01400604 	movi	r5,24
  808ac0:	2805883a 	mov	r2,r5
  808ac4:	003ef806 	br	8086a8 <__umoddi3+0x148>
  808ac8:	3c7fb82e 	bgeu	r7,r17,8089ac <__umoddi3+0x44c>
  808acc:	843fffc4 	addi	r16,r16,-1
  808ad0:	3dcf883a 	add	r7,r7,r23
  808ad4:	003fb506 	br	8089ac <__umoddi3+0x44c>
  808ad8:	147fa22e 	bgeu	r2,r17,808964 <__umoddi3+0x404>
  808adc:	e73fffc4 	addi	fp,fp,-1
  808ae0:	15c5883a 	add	r2,r2,r23
  808ae4:	003f9f06 	br	808964 <__umoddi3+0x404>
  808ae8:	147f692e 	bgeu	r2,r17,808890 <__umoddi3+0x330>
  808aec:	1405883a 	add	r2,r2,r16
  808af0:	003f6706 	br	808890 <__umoddi3+0x330>
  808af4:	1405883a 	add	r2,r2,r16
  808af8:	003f1906 	br	808760 <__umoddi3+0x200>
  808afc:	1405883a 	add	r2,r2,r16
  808b00:	003ec906 	br	808628 <__umoddi3+0xc8>
  808b04:	b13fcc36 	bltu	r22,r4,808a38 <__umoddi3+0x4d8>
  808b08:	000b883a 	mov	r5,zero
  808b0c:	003fd106 	br	808a54 <__umoddi3+0x4f4>

00808b10 <_fpadd_parts>:
  808b10:	defff804 	addi	sp,sp,-32
  808b14:	dcc00315 	stw	r19,12(sp)
  808b18:	2027883a 	mov	r19,r4
  808b1c:	21000017 	ldw	r4,0(r4)
  808b20:	00c00044 	movi	r3,1
  808b24:	dd400515 	stw	r21,20(sp)
  808b28:	dd000415 	stw	r20,16(sp)
  808b2c:	ddc00715 	stw	r23,28(sp)
  808b30:	dd800615 	stw	r22,24(sp)
  808b34:	dc800215 	stw	r18,8(sp)
  808b38:	dc400115 	stw	r17,4(sp)
  808b3c:	dc000015 	stw	r16,0(sp)
  808b40:	282b883a 	mov	r21,r5
  808b44:	3029883a 	mov	r20,r6
  808b48:	1900632e 	bgeu	r3,r4,808cd8 <_fpadd_parts+0x1c8>
  808b4c:	28800017 	ldw	r2,0(r5)
  808b50:	1880812e 	bgeu	r3,r2,808d58 <_fpadd_parts+0x248>
  808b54:	00c00104 	movi	r3,4
  808b58:	20c0dc26 	beq	r4,r3,808ecc <_fpadd_parts+0x3bc>
  808b5c:	10c07e26 	beq	r2,r3,808d58 <_fpadd_parts+0x248>
  808b60:	00c00084 	movi	r3,2
  808b64:	10c06726 	beq	r2,r3,808d04 <_fpadd_parts+0x1f4>
  808b68:	20c07b26 	beq	r4,r3,808d58 <_fpadd_parts+0x248>
  808b6c:	9dc00217 	ldw	r23,8(r19)
  808b70:	28c00217 	ldw	r3,8(r5)
  808b74:	9c400317 	ldw	r17,12(r19)
  808b78:	2bc00317 	ldw	r15,12(r5)
  808b7c:	b8cdc83a 	sub	r6,r23,r3
  808b80:	9c800417 	ldw	r18,16(r19)
  808b84:	2c000417 	ldw	r16,16(r5)
  808b88:	3009883a 	mov	r4,r6
  808b8c:	30009716 	blt	r6,zero,808dec <_fpadd_parts+0x2dc>
  808b90:	00800fc4 	movi	r2,63
  808b94:	11806b16 	blt	r2,r6,808d44 <_fpadd_parts+0x234>
  808b98:	0100a40e 	bge	zero,r4,808e2c <_fpadd_parts+0x31c>
  808b9c:	35bff804 	addi	r22,r6,-32
  808ba0:	b000bc16 	blt	r22,zero,808e94 <_fpadd_parts+0x384>
  808ba4:	8596d83a 	srl	r11,r16,r22
  808ba8:	0019883a 	mov	r12,zero
  808bac:	0013883a 	mov	r9,zero
  808bb0:	01000044 	movi	r4,1
  808bb4:	0015883a 	mov	r10,zero
  808bb8:	b000be16 	blt	r22,zero,808eb4 <_fpadd_parts+0x3a4>
  808bbc:	2590983a 	sll	r8,r4,r22
  808bc0:	000f883a 	mov	r7,zero
  808bc4:	00bfffc4 	movi	r2,-1
  808bc8:	3889883a 	add	r4,r7,r2
  808bcc:	408b883a 	add	r5,r8,r2
  808bd0:	21cd803a 	cmpltu	r6,r4,r7
  808bd4:	314b883a 	add	r5,r6,r5
  808bd8:	7904703a 	and	r2,r15,r4
  808bdc:	8146703a 	and	r3,r16,r5
  808be0:	10c4b03a 	or	r2,r2,r3
  808be4:	10000226 	beq	r2,zero,808bf0 <_fpadd_parts+0xe0>
  808be8:	02400044 	movi	r9,1
  808bec:	0015883a 	mov	r10,zero
  808bf0:	5a5eb03a 	or	r15,r11,r9
  808bf4:	62a0b03a 	or	r16,r12,r10
  808bf8:	99400117 	ldw	r5,4(r19)
  808bfc:	a8800117 	ldw	r2,4(r21)
  808c00:	28806e26 	beq	r5,r2,808dbc <_fpadd_parts+0x2ac>
  808c04:	28006626 	beq	r5,zero,808da0 <_fpadd_parts+0x290>
  808c08:	7c45c83a 	sub	r2,r15,r17
  808c0c:	7889803a 	cmpltu	r4,r15,r2
  808c10:	8487c83a 	sub	r3,r16,r18
  808c14:	1909c83a 	sub	r4,r3,r4
  808c18:	100d883a 	mov	r6,r2
  808c1c:	200f883a 	mov	r7,r4
  808c20:	38007716 	blt	r7,zero,808e00 <_fpadd_parts+0x2f0>
  808c24:	a5c00215 	stw	r23,8(r20)
  808c28:	a1c00415 	stw	r7,16(r20)
  808c2c:	a0000115 	stw	zero,4(r20)
  808c30:	a1800315 	stw	r6,12(r20)
  808c34:	a2000317 	ldw	r8,12(r20)
  808c38:	a2400417 	ldw	r9,16(r20)
  808c3c:	00bfffc4 	movi	r2,-1
  808c40:	408b883a 	add	r5,r8,r2
  808c44:	2a09803a 	cmpltu	r4,r5,r8
  808c48:	488d883a 	add	r6,r9,r2
  808c4c:	01c40034 	movhi	r7,4096
  808c50:	39ffffc4 	addi	r7,r7,-1
  808c54:	218d883a 	add	r6,r4,r6
  808c58:	39801736 	bltu	r7,r6,808cb8 <_fpadd_parts+0x1a8>
  808c5c:	31c06526 	beq	r6,r7,808df4 <_fpadd_parts+0x2e4>
  808c60:	a3000217 	ldw	r12,8(r20)
  808c64:	4209883a 	add	r4,r8,r8
  808c68:	00bfffc4 	movi	r2,-1
  808c6c:	220f803a 	cmpltu	r7,r4,r8
  808c70:	4a4b883a 	add	r5,r9,r9
  808c74:	394f883a 	add	r7,r7,r5
  808c78:	2095883a 	add	r10,r4,r2
  808c7c:	3897883a 	add	r11,r7,r2
  808c80:	510d803a 	cmpltu	r6,r10,r4
  808c84:	6099883a 	add	r12,r12,r2
  808c88:	32d7883a 	add	r11,r6,r11
  808c8c:	00840034 	movhi	r2,4096
  808c90:	10bfffc4 	addi	r2,r2,-1
  808c94:	2011883a 	mov	r8,r4
  808c98:	3813883a 	mov	r9,r7
  808c9c:	a1000315 	stw	r4,12(r20)
  808ca0:	a1c00415 	stw	r7,16(r20)
  808ca4:	a3000215 	stw	r12,8(r20)
  808ca8:	12c00336 	bltu	r2,r11,808cb8 <_fpadd_parts+0x1a8>
  808cac:	58bfed1e 	bne	r11,r2,808c64 <_fpadd_parts+0x154>
  808cb0:	00bfff84 	movi	r2,-2
  808cb4:	12bfeb2e 	bgeu	r2,r10,808c64 <_fpadd_parts+0x154>
  808cb8:	a2800417 	ldw	r10,16(r20)
  808cbc:	008000c4 	movi	r2,3
  808cc0:	00c80034 	movhi	r3,8192
  808cc4:	18ffffc4 	addi	r3,r3,-1
  808cc8:	a2400317 	ldw	r9,12(r20)
  808ccc:	a0800015 	stw	r2,0(r20)
  808cd0:	1a802336 	bltu	r3,r10,808d60 <_fpadd_parts+0x250>
  808cd4:	a027883a 	mov	r19,r20
  808cd8:	9805883a 	mov	r2,r19
  808cdc:	ddc00717 	ldw	r23,28(sp)
  808ce0:	dd800617 	ldw	r22,24(sp)
  808ce4:	dd400517 	ldw	r21,20(sp)
  808ce8:	dd000417 	ldw	r20,16(sp)
  808cec:	dcc00317 	ldw	r19,12(sp)
  808cf0:	dc800217 	ldw	r18,8(sp)
  808cf4:	dc400117 	ldw	r17,4(sp)
  808cf8:	dc000017 	ldw	r16,0(sp)
  808cfc:	dec00804 	addi	sp,sp,32
  808d00:	f800283a 	ret
  808d04:	20fff41e 	bne	r4,r3,808cd8 <_fpadd_parts+0x1c8>
  808d08:	31000015 	stw	r4,0(r6)
  808d0c:	98800117 	ldw	r2,4(r19)
  808d10:	30800115 	stw	r2,4(r6)
  808d14:	98c00217 	ldw	r3,8(r19)
  808d18:	30c00215 	stw	r3,8(r6)
  808d1c:	98800317 	ldw	r2,12(r19)
  808d20:	30800315 	stw	r2,12(r6)
  808d24:	98c00417 	ldw	r3,16(r19)
  808d28:	30c00415 	stw	r3,16(r6)
  808d2c:	98800117 	ldw	r2,4(r19)
  808d30:	28c00117 	ldw	r3,4(r5)
  808d34:	3027883a 	mov	r19,r6
  808d38:	10c4703a 	and	r2,r2,r3
  808d3c:	30800115 	stw	r2,4(r6)
  808d40:	003fe506 	br	808cd8 <_fpadd_parts+0x1c8>
  808d44:	1dc02616 	blt	r3,r23,808de0 <_fpadd_parts+0x2d0>
  808d48:	0023883a 	mov	r17,zero
  808d4c:	182f883a 	mov	r23,r3
  808d50:	0025883a 	mov	r18,zero
  808d54:	003fa806 	br	808bf8 <_fpadd_parts+0xe8>
  808d58:	a827883a 	mov	r19,r21
  808d5c:	003fde06 	br	808cd8 <_fpadd_parts+0x1c8>
  808d60:	01800044 	movi	r6,1
  808d64:	500497fa 	slli	r2,r10,31
  808d68:	4808d07a 	srli	r4,r9,1
  808d6c:	518ad83a 	srl	r5,r10,r6
  808d70:	a2000217 	ldw	r8,8(r20)
  808d74:	1108b03a 	or	r4,r2,r4
  808d78:	0007883a 	mov	r3,zero
  808d7c:	4984703a 	and	r2,r9,r6
  808d80:	208cb03a 	or	r6,r4,r2
  808d84:	28ceb03a 	or	r7,r5,r3
  808d88:	42000044 	addi	r8,r8,1
  808d8c:	a027883a 	mov	r19,r20
  808d90:	a1c00415 	stw	r7,16(r20)
  808d94:	a2000215 	stw	r8,8(r20)
  808d98:	a1800315 	stw	r6,12(r20)
  808d9c:	003fce06 	br	808cd8 <_fpadd_parts+0x1c8>
  808da0:	8bc5c83a 	sub	r2,r17,r15
  808da4:	8889803a 	cmpltu	r4,r17,r2
  808da8:	9407c83a 	sub	r3,r18,r16
  808dac:	1909c83a 	sub	r4,r3,r4
  808db0:	100d883a 	mov	r6,r2
  808db4:	200f883a 	mov	r7,r4
  808db8:	003f9906 	br	808c20 <_fpadd_parts+0x110>
  808dbc:	8bc5883a 	add	r2,r17,r15
  808dc0:	1449803a 	cmpltu	r4,r2,r17
  808dc4:	9407883a 	add	r3,r18,r16
  808dc8:	20c9883a 	add	r4,r4,r3
  808dcc:	a1400115 	stw	r5,4(r20)
  808dd0:	a5c00215 	stw	r23,8(r20)
  808dd4:	a0800315 	stw	r2,12(r20)
  808dd8:	a1000415 	stw	r4,16(r20)
  808ddc:	003fb606 	br	808cb8 <_fpadd_parts+0x1a8>
  808de0:	001f883a 	mov	r15,zero
  808de4:	0021883a 	mov	r16,zero
  808de8:	003f8306 	br	808bf8 <_fpadd_parts+0xe8>
  808dec:	018dc83a 	sub	r6,zero,r6
  808df0:	003f6706 	br	808b90 <_fpadd_parts+0x80>
  808df4:	00bfff84 	movi	r2,-2
  808df8:	117faf36 	bltu	r2,r5,808cb8 <_fpadd_parts+0x1a8>
  808dfc:	003f9806 	br	808c60 <_fpadd_parts+0x150>
  808e00:	0005883a 	mov	r2,zero
  808e04:	1189c83a 	sub	r4,r2,r6
  808e08:	1105803a 	cmpltu	r2,r2,r4
  808e0c:	01cbc83a 	sub	r5,zero,r7
  808e10:	2885c83a 	sub	r2,r5,r2
  808e14:	01800044 	movi	r6,1
  808e18:	a1800115 	stw	r6,4(r20)
  808e1c:	a5c00215 	stw	r23,8(r20)
  808e20:	a1000315 	stw	r4,12(r20)
  808e24:	a0800415 	stw	r2,16(r20)
  808e28:	003f8206 	br	808c34 <_fpadd_parts+0x124>
  808e2c:	203f7226 	beq	r4,zero,808bf8 <_fpadd_parts+0xe8>
  808e30:	35bff804 	addi	r22,r6,-32
  808e34:	b9af883a 	add	r23,r23,r6
  808e38:	b0003116 	blt	r22,zero,808f00 <_fpadd_parts+0x3f0>
  808e3c:	959ad83a 	srl	r13,r18,r22
  808e40:	001d883a 	mov	r14,zero
  808e44:	000f883a 	mov	r7,zero
  808e48:	01000044 	movi	r4,1
  808e4c:	0011883a 	mov	r8,zero
  808e50:	b0002516 	blt	r22,zero,808ee8 <_fpadd_parts+0x3d8>
  808e54:	2594983a 	sll	r10,r4,r22
  808e58:	0013883a 	mov	r9,zero
  808e5c:	00bfffc4 	movi	r2,-1
  808e60:	4889883a 	add	r4,r9,r2
  808e64:	508b883a 	add	r5,r10,r2
  808e68:	224d803a 	cmpltu	r6,r4,r9
  808e6c:	314b883a 	add	r5,r6,r5
  808e70:	8904703a 	and	r2,r17,r4
  808e74:	9146703a 	and	r3,r18,r5
  808e78:	10c4b03a 	or	r2,r2,r3
  808e7c:	10000226 	beq	r2,zero,808e88 <_fpadd_parts+0x378>
  808e80:	01c00044 	movi	r7,1
  808e84:	0011883a 	mov	r8,zero
  808e88:	69e2b03a 	or	r17,r13,r7
  808e8c:	7224b03a 	or	r18,r14,r8
  808e90:	003f5906 	br	808bf8 <_fpadd_parts+0xe8>
  808e94:	8407883a 	add	r3,r16,r16
  808e98:	008007c4 	movi	r2,31
  808e9c:	1185c83a 	sub	r2,r2,r6
  808ea0:	1886983a 	sll	r3,r3,r2
  808ea4:	7996d83a 	srl	r11,r15,r6
  808ea8:	8198d83a 	srl	r12,r16,r6
  808eac:	1ad6b03a 	or	r11,r3,r11
  808eb0:	003f3e06 	br	808bac <_fpadd_parts+0x9c>
  808eb4:	2006d07a 	srli	r3,r4,1
  808eb8:	008007c4 	movi	r2,31
  808ebc:	1185c83a 	sub	r2,r2,r6
  808ec0:	1890d83a 	srl	r8,r3,r2
  808ec4:	218e983a 	sll	r7,r4,r6
  808ec8:	003f3e06 	br	808bc4 <_fpadd_parts+0xb4>
  808ecc:	113f821e 	bne	r2,r4,808cd8 <_fpadd_parts+0x1c8>
  808ed0:	28c00117 	ldw	r3,4(r5)
  808ed4:	98800117 	ldw	r2,4(r19)
  808ed8:	10ff7f26 	beq	r2,r3,808cd8 <_fpadd_parts+0x1c8>
  808edc:	04c02074 	movhi	r19,129
  808ee0:	9cfb4704 	addi	r19,r19,-4836
  808ee4:	003f7c06 	br	808cd8 <_fpadd_parts+0x1c8>
  808ee8:	2006d07a 	srli	r3,r4,1
  808eec:	008007c4 	movi	r2,31
  808ef0:	1185c83a 	sub	r2,r2,r6
  808ef4:	1894d83a 	srl	r10,r3,r2
  808ef8:	2192983a 	sll	r9,r4,r6
  808efc:	003fd706 	br	808e5c <_fpadd_parts+0x34c>
  808f00:	9487883a 	add	r3,r18,r18
  808f04:	008007c4 	movi	r2,31
  808f08:	1185c83a 	sub	r2,r2,r6
  808f0c:	1886983a 	sll	r3,r3,r2
  808f10:	899ad83a 	srl	r13,r17,r6
  808f14:	919cd83a 	srl	r14,r18,r6
  808f18:	1b5ab03a 	or	r13,r3,r13
  808f1c:	003fc906 	br	808e44 <_fpadd_parts+0x334>

00808f20 <__subdf3>:
  808f20:	deffea04 	addi	sp,sp,-88
  808f24:	dcc01415 	stw	r19,80(sp)
  808f28:	dcc00404 	addi	r19,sp,16
  808f2c:	2011883a 	mov	r8,r4
  808f30:	2813883a 	mov	r9,r5
  808f34:	dc401315 	stw	r17,76(sp)
  808f38:	d809883a 	mov	r4,sp
  808f3c:	980b883a 	mov	r5,r19
  808f40:	dc400904 	addi	r17,sp,36
  808f44:	dfc01515 	stw	ra,84(sp)
  808f48:	da400115 	stw	r9,4(sp)
  808f4c:	d9c00315 	stw	r7,12(sp)
  808f50:	da000015 	stw	r8,0(sp)
  808f54:	d9800215 	stw	r6,8(sp)
  808f58:	080a1b40 	call	80a1b4 <__unpack_d>
  808f5c:	d9000204 	addi	r4,sp,8
  808f60:	880b883a 	mov	r5,r17
  808f64:	080a1b40 	call	80a1b4 <__unpack_d>
  808f68:	d8800a17 	ldw	r2,40(sp)
  808f6c:	880b883a 	mov	r5,r17
  808f70:	9809883a 	mov	r4,r19
  808f74:	d9800e04 	addi	r6,sp,56
  808f78:	1080005c 	xori	r2,r2,1
  808f7c:	d8800a15 	stw	r2,40(sp)
  808f80:	0808b100 	call	808b10 <_fpadd_parts>
  808f84:	1009883a 	mov	r4,r2
  808f88:	0809ea00 	call	809ea0 <__pack_d>
  808f8c:	dfc01517 	ldw	ra,84(sp)
  808f90:	dcc01417 	ldw	r19,80(sp)
  808f94:	dc401317 	ldw	r17,76(sp)
  808f98:	dec01604 	addi	sp,sp,88
  808f9c:	f800283a 	ret

00808fa0 <__adddf3>:
  808fa0:	deffea04 	addi	sp,sp,-88
  808fa4:	dcc01415 	stw	r19,80(sp)
  808fa8:	dcc00404 	addi	r19,sp,16
  808fac:	2011883a 	mov	r8,r4
  808fb0:	2813883a 	mov	r9,r5
  808fb4:	dc401315 	stw	r17,76(sp)
  808fb8:	d809883a 	mov	r4,sp
  808fbc:	980b883a 	mov	r5,r19
  808fc0:	dc400904 	addi	r17,sp,36
  808fc4:	dfc01515 	stw	ra,84(sp)
  808fc8:	da400115 	stw	r9,4(sp)
  808fcc:	d9c00315 	stw	r7,12(sp)
  808fd0:	da000015 	stw	r8,0(sp)
  808fd4:	d9800215 	stw	r6,8(sp)
  808fd8:	080a1b40 	call	80a1b4 <__unpack_d>
  808fdc:	d9000204 	addi	r4,sp,8
  808fe0:	880b883a 	mov	r5,r17
  808fe4:	080a1b40 	call	80a1b4 <__unpack_d>
  808fe8:	d9800e04 	addi	r6,sp,56
  808fec:	9809883a 	mov	r4,r19
  808ff0:	880b883a 	mov	r5,r17
  808ff4:	0808b100 	call	808b10 <_fpadd_parts>
  808ff8:	1009883a 	mov	r4,r2
  808ffc:	0809ea00 	call	809ea0 <__pack_d>
  809000:	dfc01517 	ldw	ra,84(sp)
  809004:	dcc01417 	ldw	r19,80(sp)
  809008:	dc401317 	ldw	r17,76(sp)
  80900c:	dec01604 	addi	sp,sp,88
  809010:	f800283a 	ret

00809014 <__muldf3>:
  809014:	deffe004 	addi	sp,sp,-128
  809018:	dc401815 	stw	r17,96(sp)
  80901c:	dc400404 	addi	r17,sp,16
  809020:	2011883a 	mov	r8,r4
  809024:	2813883a 	mov	r9,r5
  809028:	dc001715 	stw	r16,92(sp)
  80902c:	d809883a 	mov	r4,sp
  809030:	880b883a 	mov	r5,r17
  809034:	dc000904 	addi	r16,sp,36
  809038:	dfc01f15 	stw	ra,124(sp)
  80903c:	da400115 	stw	r9,4(sp)
  809040:	d9c00315 	stw	r7,12(sp)
  809044:	da000015 	stw	r8,0(sp)
  809048:	d9800215 	stw	r6,8(sp)
  80904c:	ddc01e15 	stw	r23,120(sp)
  809050:	dd801d15 	stw	r22,116(sp)
  809054:	dd401c15 	stw	r21,112(sp)
  809058:	dd001b15 	stw	r20,108(sp)
  80905c:	dcc01a15 	stw	r19,104(sp)
  809060:	dc801915 	stw	r18,100(sp)
  809064:	080a1b40 	call	80a1b4 <__unpack_d>
  809068:	d9000204 	addi	r4,sp,8
  80906c:	800b883a 	mov	r5,r16
  809070:	080a1b40 	call	80a1b4 <__unpack_d>
  809074:	d9000417 	ldw	r4,16(sp)
  809078:	00800044 	movi	r2,1
  80907c:	1100102e 	bgeu	r2,r4,8090c0 <__muldf3+0xac>
  809080:	d8c00917 	ldw	r3,36(sp)
  809084:	10c0062e 	bgeu	r2,r3,8090a0 <__muldf3+0x8c>
  809088:	00800104 	movi	r2,4
  80908c:	20800a26 	beq	r4,r2,8090b8 <__muldf3+0xa4>
  809090:	1880cc26 	beq	r3,r2,8093c4 <__muldf3+0x3b0>
  809094:	00800084 	movi	r2,2
  809098:	20800926 	beq	r4,r2,8090c0 <__muldf3+0xac>
  80909c:	1880191e 	bne	r3,r2,809104 <__muldf3+0xf0>
  8090a0:	d8c00a17 	ldw	r3,40(sp)
  8090a4:	d8800517 	ldw	r2,20(sp)
  8090a8:	8009883a 	mov	r4,r16
  8090ac:	10c4c03a 	cmpne	r2,r2,r3
  8090b0:	d8800a15 	stw	r2,40(sp)
  8090b4:	00000706 	br	8090d4 <__muldf3+0xc0>
  8090b8:	00800084 	movi	r2,2
  8090bc:	1880c326 	beq	r3,r2,8093cc <__muldf3+0x3b8>
  8090c0:	d8800517 	ldw	r2,20(sp)
  8090c4:	d8c00a17 	ldw	r3,40(sp)
  8090c8:	8809883a 	mov	r4,r17
  8090cc:	10c4c03a 	cmpne	r2,r2,r3
  8090d0:	d8800515 	stw	r2,20(sp)
  8090d4:	0809ea00 	call	809ea0 <__pack_d>
  8090d8:	dfc01f17 	ldw	ra,124(sp)
  8090dc:	ddc01e17 	ldw	r23,120(sp)
  8090e0:	dd801d17 	ldw	r22,116(sp)
  8090e4:	dd401c17 	ldw	r21,112(sp)
  8090e8:	dd001b17 	ldw	r20,108(sp)
  8090ec:	dcc01a17 	ldw	r19,104(sp)
  8090f0:	dc801917 	ldw	r18,100(sp)
  8090f4:	dc401817 	ldw	r17,96(sp)
  8090f8:	dc001717 	ldw	r16,92(sp)
  8090fc:	dec02004 	addi	sp,sp,128
  809100:	f800283a 	ret
  809104:	dd800717 	ldw	r22,28(sp)
  809108:	dc800c17 	ldw	r18,48(sp)
  80910c:	002b883a 	mov	r21,zero
  809110:	0023883a 	mov	r17,zero
  809114:	a80b883a 	mov	r5,r21
  809118:	b00d883a 	mov	r6,r22
  80911c:	880f883a 	mov	r7,r17
  809120:	ddc00817 	ldw	r23,32(sp)
  809124:	dcc00d17 	ldw	r19,52(sp)
  809128:	9009883a 	mov	r4,r18
  80912c:	0809d880 	call	809d88 <__muldi3>
  809130:	001b883a 	mov	r13,zero
  809134:	680f883a 	mov	r7,r13
  809138:	b009883a 	mov	r4,r22
  80913c:	000b883a 	mov	r5,zero
  809140:	980d883a 	mov	r6,r19
  809144:	b82d883a 	mov	r22,r23
  809148:	002f883a 	mov	r23,zero
  80914c:	db401615 	stw	r13,88(sp)
  809150:	d8801315 	stw	r2,76(sp)
  809154:	d8c01415 	stw	r3,80(sp)
  809158:	dcc01515 	stw	r19,84(sp)
  80915c:	0809d880 	call	809d88 <__muldi3>
  809160:	b00d883a 	mov	r6,r22
  809164:	000b883a 	mov	r5,zero
  809168:	9009883a 	mov	r4,r18
  80916c:	b80f883a 	mov	r7,r23
  809170:	1021883a 	mov	r16,r2
  809174:	1823883a 	mov	r17,r3
  809178:	0809d880 	call	809d88 <__muldi3>
  80917c:	8085883a 	add	r2,r16,r2
  809180:	140d803a 	cmpltu	r6,r2,r16
  809184:	88c7883a 	add	r3,r17,r3
  809188:	30cd883a 	add	r6,r6,r3
  80918c:	1029883a 	mov	r20,r2
  809190:	302b883a 	mov	r21,r6
  809194:	da801317 	ldw	r10,76(sp)
  809198:	dac01417 	ldw	r11,80(sp)
  80919c:	db001517 	ldw	r12,84(sp)
  8091a0:	db401617 	ldw	r13,88(sp)
  8091a4:	3440612e 	bgeu	r6,r17,80932c <__muldf3+0x318>
  8091a8:	0009883a 	mov	r4,zero
  8091ac:	5105883a 	add	r2,r10,r4
  8091b0:	128d803a 	cmpltu	r6,r2,r10
  8091b4:	5d07883a 	add	r3,r11,r20
  8091b8:	30cd883a 	add	r6,r6,r3
  8091bc:	0021883a 	mov	r16,zero
  8091c0:	04400044 	movi	r17,1
  8091c4:	1025883a 	mov	r18,r2
  8091c8:	3027883a 	mov	r19,r6
  8091cc:	32c06236 	bltu	r6,r11,809358 <__muldf3+0x344>
  8091d0:	59807a26 	beq	r11,r6,8093bc <__muldf3+0x3a8>
  8091d4:	680b883a 	mov	r5,r13
  8091d8:	b80f883a 	mov	r7,r23
  8091dc:	6009883a 	mov	r4,r12
  8091e0:	b00d883a 	mov	r6,r22
  8091e4:	0809d880 	call	809d88 <__muldi3>
  8091e8:	1009883a 	mov	r4,r2
  8091ec:	000f883a 	mov	r7,zero
  8091f0:	1545883a 	add	r2,r2,r21
  8091f4:	1111803a 	cmpltu	r8,r2,r4
  8091f8:	19c7883a 	add	r3,r3,r7
  8091fc:	40c7883a 	add	r3,r8,r3
  809200:	88cb883a 	add	r5,r17,r3
  809204:	d8c00617 	ldw	r3,24(sp)
  809208:	8089883a 	add	r4,r16,r2
  80920c:	d8800b17 	ldw	r2,44(sp)
  809210:	18c00104 	addi	r3,r3,4
  809214:	240d803a 	cmpltu	r6,r4,r16
  809218:	10c7883a 	add	r3,r2,r3
  80921c:	2013883a 	mov	r9,r4
  809220:	d8800a17 	ldw	r2,40(sp)
  809224:	d9000517 	ldw	r4,20(sp)
  809228:	314d883a 	add	r6,r6,r5
  80922c:	3015883a 	mov	r10,r6
  809230:	2088c03a 	cmpne	r4,r4,r2
  809234:	00880034 	movhi	r2,8192
  809238:	10bfffc4 	addi	r2,r2,-1
  80923c:	d9000f15 	stw	r4,60(sp)
  809240:	d8c01015 	stw	r3,64(sp)
  809244:	1180162e 	bgeu	r2,r6,8092a0 <__muldf3+0x28c>
  809248:	1811883a 	mov	r8,r3
  80924c:	101f883a 	mov	r15,r2
  809250:	980497fa 	slli	r2,r19,31
  809254:	9016d07a 	srli	r11,r18,1
  809258:	500697fa 	slli	r3,r10,31
  80925c:	480cd07a 	srli	r6,r9,1
  809260:	500ed07a 	srli	r7,r10,1
  809264:	12d6b03a 	or	r11,r2,r11
  809268:	00800044 	movi	r2,1
  80926c:	198cb03a 	or	r6,r3,r6
  809270:	4888703a 	and	r4,r9,r2
  809274:	9818d07a 	srli	r12,r19,1
  809278:	001b883a 	mov	r13,zero
  80927c:	03a00034 	movhi	r14,32768
  809280:	3013883a 	mov	r9,r6
  809284:	3815883a 	mov	r10,r7
  809288:	4091883a 	add	r8,r8,r2
  80928c:	20000226 	beq	r4,zero,809298 <__muldf3+0x284>
  809290:	5b64b03a 	or	r18,r11,r13
  809294:	63a6b03a 	or	r19,r12,r14
  809298:	7abfed36 	bltu	r15,r10,809250 <__muldf3+0x23c>
  80929c:	da001015 	stw	r8,64(sp)
  8092a0:	00840034 	movhi	r2,4096
  8092a4:	10bfffc4 	addi	r2,r2,-1
  8092a8:	12801436 	bltu	r2,r10,8092fc <__muldf3+0x2e8>
  8092ac:	da001017 	ldw	r8,64(sp)
  8092b0:	101f883a 	mov	r15,r2
  8092b4:	4a45883a 	add	r2,r9,r9
  8092b8:	124d803a 	cmpltu	r6,r2,r9
  8092bc:	5287883a 	add	r3,r10,r10
  8092c0:	9497883a 	add	r11,r18,r18
  8092c4:	5c8f803a 	cmpltu	r7,r11,r18
  8092c8:	9cd9883a 	add	r12,r19,r19
  8092cc:	01000044 	movi	r4,1
  8092d0:	30cd883a 	add	r6,r6,r3
  8092d4:	3b0f883a 	add	r7,r7,r12
  8092d8:	423fffc4 	addi	r8,r8,-1
  8092dc:	1013883a 	mov	r9,r2
  8092e0:	3015883a 	mov	r10,r6
  8092e4:	111ab03a 	or	r13,r2,r4
  8092e8:	98003016 	blt	r19,zero,8093ac <__muldf3+0x398>
  8092ec:	5825883a 	mov	r18,r11
  8092f0:	3827883a 	mov	r19,r7
  8092f4:	7abfef2e 	bgeu	r15,r10,8092b4 <__muldf3+0x2a0>
  8092f8:	da001015 	stw	r8,64(sp)
  8092fc:	00803fc4 	movi	r2,255
  809300:	488e703a 	and	r7,r9,r2
  809304:	00802004 	movi	r2,128
  809308:	0007883a 	mov	r3,zero
  80930c:	0011883a 	mov	r8,zero
  809310:	38801826 	beq	r7,r2,809374 <__muldf3+0x360>
  809314:	008000c4 	movi	r2,3
  809318:	d9000e04 	addi	r4,sp,56
  80931c:	da801215 	stw	r10,72(sp)
  809320:	d8800e15 	stw	r2,56(sp)
  809324:	da401115 	stw	r9,68(sp)
  809328:	003f6a06 	br	8090d4 <__muldf3+0xc0>
  80932c:	89802126 	beq	r17,r6,8093b4 <__muldf3+0x3a0>
  809330:	0009883a 	mov	r4,zero
  809334:	5105883a 	add	r2,r10,r4
  809338:	128d803a 	cmpltu	r6,r2,r10
  80933c:	5d07883a 	add	r3,r11,r20
  809340:	30cd883a 	add	r6,r6,r3
  809344:	0021883a 	mov	r16,zero
  809348:	0023883a 	mov	r17,zero
  80934c:	1025883a 	mov	r18,r2
  809350:	3027883a 	mov	r19,r6
  809354:	32ff9e2e 	bgeu	r6,r11,8091d0 <__muldf3+0x1bc>
  809358:	00800044 	movi	r2,1
  80935c:	8089883a 	add	r4,r16,r2
  809360:	240d803a 	cmpltu	r6,r4,r16
  809364:	344d883a 	add	r6,r6,r17
  809368:	2021883a 	mov	r16,r4
  80936c:	3023883a 	mov	r17,r6
  809370:	003f9806 	br	8091d4 <__muldf3+0x1c0>
  809374:	403fe71e 	bne	r8,zero,809314 <__muldf3+0x300>
  809378:	01004004 	movi	r4,256
  80937c:	4904703a 	and	r2,r9,r4
  809380:	10c4b03a 	or	r2,r2,r3
  809384:	103fe31e 	bne	r2,zero,809314 <__muldf3+0x300>
  809388:	94c4b03a 	or	r2,r18,r19
  80938c:	103fe126 	beq	r2,zero,809314 <__muldf3+0x300>
  809390:	49c5883a 	add	r2,r9,r7
  809394:	1251803a 	cmpltu	r8,r2,r9
  809398:	4291883a 	add	r8,r8,r10
  80939c:	013fc004 	movi	r4,-256
  8093a0:	1112703a 	and	r9,r2,r4
  8093a4:	4015883a 	mov	r10,r8
  8093a8:	003fda06 	br	809314 <__muldf3+0x300>
  8093ac:	6813883a 	mov	r9,r13
  8093b0:	003fce06 	br	8092ec <__muldf3+0x2d8>
  8093b4:	143f7c36 	bltu	r2,r16,8091a8 <__muldf3+0x194>
  8093b8:	003fdd06 	br	809330 <__muldf3+0x31c>
  8093bc:	12bf852e 	bgeu	r2,r10,8091d4 <__muldf3+0x1c0>
  8093c0:	003fe506 	br	809358 <__muldf3+0x344>
  8093c4:	00800084 	movi	r2,2
  8093c8:	20bf351e 	bne	r4,r2,8090a0 <__muldf3+0x8c>
  8093cc:	01002074 	movhi	r4,129
  8093d0:	213b4704 	addi	r4,r4,-4836
  8093d4:	003f3f06 	br	8090d4 <__muldf3+0xc0>

008093d8 <__divdf3>:
  8093d8:	deffed04 	addi	sp,sp,-76
  8093dc:	dcc01115 	stw	r19,68(sp)
  8093e0:	dcc00404 	addi	r19,sp,16
  8093e4:	2011883a 	mov	r8,r4
  8093e8:	2813883a 	mov	r9,r5
  8093ec:	dc000e15 	stw	r16,56(sp)
  8093f0:	d809883a 	mov	r4,sp
  8093f4:	980b883a 	mov	r5,r19
  8093f8:	dc000904 	addi	r16,sp,36
  8093fc:	dfc01215 	stw	ra,72(sp)
  809400:	da400115 	stw	r9,4(sp)
  809404:	d9c00315 	stw	r7,12(sp)
  809408:	da000015 	stw	r8,0(sp)
  80940c:	d9800215 	stw	r6,8(sp)
  809410:	dc801015 	stw	r18,64(sp)
  809414:	dc400f15 	stw	r17,60(sp)
  809418:	080a1b40 	call	80a1b4 <__unpack_d>
  80941c:	d9000204 	addi	r4,sp,8
  809420:	800b883a 	mov	r5,r16
  809424:	080a1b40 	call	80a1b4 <__unpack_d>
  809428:	d9000417 	ldw	r4,16(sp)
  80942c:	00800044 	movi	r2,1
  809430:	11000b2e 	bgeu	r2,r4,809460 <__divdf3+0x88>
  809434:	d9400917 	ldw	r5,36(sp)
  809438:	1140762e 	bgeu	r2,r5,809614 <__divdf3+0x23c>
  80943c:	d8800517 	ldw	r2,20(sp)
  809440:	d8c00a17 	ldw	r3,40(sp)
  809444:	01800104 	movi	r6,4
  809448:	10c4f03a 	xor	r2,r2,r3
  80944c:	d8800515 	stw	r2,20(sp)
  809450:	21800226 	beq	r4,r6,80945c <__divdf3+0x84>
  809454:	00800084 	movi	r2,2
  809458:	2080141e 	bne	r4,r2,8094ac <__divdf3+0xd4>
  80945c:	29000926 	beq	r5,r4,809484 <__divdf3+0xac>
  809460:	9809883a 	mov	r4,r19
  809464:	0809ea00 	call	809ea0 <__pack_d>
  809468:	dfc01217 	ldw	ra,72(sp)
  80946c:	dcc01117 	ldw	r19,68(sp)
  809470:	dc801017 	ldw	r18,64(sp)
  809474:	dc400f17 	ldw	r17,60(sp)
  809478:	dc000e17 	ldw	r16,56(sp)
  80947c:	dec01304 	addi	sp,sp,76
  809480:	f800283a 	ret
  809484:	01002074 	movhi	r4,129
  809488:	213b4704 	addi	r4,r4,-4836
  80948c:	0809ea00 	call	809ea0 <__pack_d>
  809490:	dfc01217 	ldw	ra,72(sp)
  809494:	dcc01117 	ldw	r19,68(sp)
  809498:	dc801017 	ldw	r18,64(sp)
  80949c:	dc400f17 	ldw	r17,60(sp)
  8094a0:	dc000e17 	ldw	r16,56(sp)
  8094a4:	dec01304 	addi	sp,sp,76
  8094a8:	f800283a 	ret
  8094ac:	29805b26 	beq	r5,r6,80961c <__divdf3+0x244>
  8094b0:	28802d26 	beq	r5,r2,809568 <__divdf3+0x190>
  8094b4:	d8c00617 	ldw	r3,24(sp)
  8094b8:	d8800b17 	ldw	r2,44(sp)
  8094bc:	d9c00817 	ldw	r7,32(sp)
  8094c0:	dc400d17 	ldw	r17,52(sp)
  8094c4:	188bc83a 	sub	r5,r3,r2
  8094c8:	d9800717 	ldw	r6,28(sp)
  8094cc:	dc000c17 	ldw	r16,48(sp)
  8094d0:	d9400615 	stw	r5,24(sp)
  8094d4:	3c403836 	bltu	r7,r17,8095b8 <__divdf3+0x1e0>
  8094d8:	89c03626 	beq	r17,r7,8095b4 <__divdf3+0x1dc>
  8094dc:	0015883a 	mov	r10,zero
  8094e0:	001d883a 	mov	r14,zero
  8094e4:	02c40034 	movhi	r11,4096
  8094e8:	001f883a 	mov	r15,zero
  8094ec:	003f883a 	mov	ra,zero
  8094f0:	04800f44 	movi	r18,61
  8094f4:	00000f06 	br	809534 <__divdf3+0x15c>
  8094f8:	601d883a 	mov	r14,r12
  8094fc:	681f883a 	mov	r15,r13
  809500:	400d883a 	mov	r6,r8
  809504:	100f883a 	mov	r7,r2
  809508:	3191883a 	add	r8,r6,r6
  80950c:	5808d07a 	srli	r4,r11,1
  809510:	4185803a 	cmpltu	r2,r8,r6
  809514:	39d3883a 	add	r9,r7,r7
  809518:	28c6b03a 	or	r3,r5,r3
  80951c:	1245883a 	add	r2,r2,r9
  809520:	1815883a 	mov	r10,r3
  809524:	2017883a 	mov	r11,r4
  809528:	400d883a 	mov	r6,r8
  80952c:	100f883a 	mov	r7,r2
  809530:	fc801726 	beq	ra,r18,809590 <__divdf3+0x1b8>
  809534:	580a97fa 	slli	r5,r11,31
  809538:	5006d07a 	srli	r3,r10,1
  80953c:	ffc00044 	addi	ra,ra,1
  809540:	3c7ff136 	bltu	r7,r17,809508 <__divdf3+0x130>
  809544:	3411c83a 	sub	r8,r6,r16
  809548:	3205803a 	cmpltu	r2,r6,r8
  80954c:	3c53c83a 	sub	r9,r7,r17
  809550:	7298b03a 	or	r12,r14,r10
  809554:	7adab03a 	or	r13,r15,r11
  809558:	4885c83a 	sub	r2,r9,r2
  80955c:	89ffe61e 	bne	r17,r7,8094f8 <__divdf3+0x120>
  809560:	343fe936 	bltu	r6,r16,809508 <__divdf3+0x130>
  809564:	003fe406 	br	8094f8 <__divdf3+0x120>
  809568:	9809883a 	mov	r4,r19
  80956c:	d9800415 	stw	r6,16(sp)
  809570:	0809ea00 	call	809ea0 <__pack_d>
  809574:	dfc01217 	ldw	ra,72(sp)
  809578:	dcc01117 	ldw	r19,68(sp)
  80957c:	dc801017 	ldw	r18,64(sp)
  809580:	dc400f17 	ldw	r17,60(sp)
  809584:	dc000e17 	ldw	r16,56(sp)
  809588:	dec01304 	addi	sp,sp,76
  80958c:	f800283a 	ret
  809590:	00803fc4 	movi	r2,255
  809594:	7090703a 	and	r8,r14,r2
  809598:	00802004 	movi	r2,128
  80959c:	0007883a 	mov	r3,zero
  8095a0:	0013883a 	mov	r9,zero
  8095a4:	40800d26 	beq	r8,r2,8095dc <__divdf3+0x204>
  8095a8:	dbc00815 	stw	r15,32(sp)
  8095ac:	db800715 	stw	r14,28(sp)
  8095b0:	003fab06 	br	809460 <__divdf3+0x88>
  8095b4:	343fc92e 	bgeu	r6,r16,8094dc <__divdf3+0x104>
  8095b8:	3185883a 	add	r2,r6,r6
  8095bc:	1189803a 	cmpltu	r4,r2,r6
  8095c0:	39c7883a 	add	r3,r7,r7
  8095c4:	20c9883a 	add	r4,r4,r3
  8095c8:	297fffc4 	addi	r5,r5,-1
  8095cc:	100d883a 	mov	r6,r2
  8095d0:	200f883a 	mov	r7,r4
  8095d4:	d9400615 	stw	r5,24(sp)
  8095d8:	003fc006 	br	8094dc <__divdf3+0x104>
  8095dc:	483ff21e 	bne	r9,zero,8095a8 <__divdf3+0x1d0>
  8095e0:	01004004 	movi	r4,256
  8095e4:	7104703a 	and	r2,r14,r4
  8095e8:	10c4b03a 	or	r2,r2,r3
  8095ec:	103fee1e 	bne	r2,zero,8095a8 <__divdf3+0x1d0>
  8095f0:	31c4b03a 	or	r2,r6,r7
  8095f4:	103fec26 	beq	r2,zero,8095a8 <__divdf3+0x1d0>
  8095f8:	7205883a 	add	r2,r14,r8
  8095fc:	1391803a 	cmpltu	r8,r2,r14
  809600:	43d1883a 	add	r8,r8,r15
  809604:	013fc004 	movi	r4,-256
  809608:	111c703a 	and	r14,r2,r4
  80960c:	401f883a 	mov	r15,r8
  809610:	003fe506 	br	8095a8 <__divdf3+0x1d0>
  809614:	8009883a 	mov	r4,r16
  809618:	003f9206 	br	809464 <__divdf3+0x8c>
  80961c:	9809883a 	mov	r4,r19
  809620:	d8000715 	stw	zero,28(sp)
  809624:	d8000815 	stw	zero,32(sp)
  809628:	d8000615 	stw	zero,24(sp)
  80962c:	003f8d06 	br	809464 <__divdf3+0x8c>

00809630 <__eqdf2>:
  809630:	deffef04 	addi	sp,sp,-68
  809634:	dc400f15 	stw	r17,60(sp)
  809638:	dc400404 	addi	r17,sp,16
  80963c:	2005883a 	mov	r2,r4
  809640:	2807883a 	mov	r3,r5
  809644:	dc000e15 	stw	r16,56(sp)
  809648:	d809883a 	mov	r4,sp
  80964c:	880b883a 	mov	r5,r17
  809650:	dc000904 	addi	r16,sp,36
  809654:	d8c00115 	stw	r3,4(sp)
  809658:	d8800015 	stw	r2,0(sp)
  80965c:	d9800215 	stw	r6,8(sp)
  809660:	dfc01015 	stw	ra,64(sp)
  809664:	d9c00315 	stw	r7,12(sp)
  809668:	080a1b40 	call	80a1b4 <__unpack_d>
  80966c:	d9000204 	addi	r4,sp,8
  809670:	800b883a 	mov	r5,r16
  809674:	080a1b40 	call	80a1b4 <__unpack_d>
  809678:	d8800417 	ldw	r2,16(sp)
  80967c:	00c00044 	movi	r3,1
  809680:	180d883a 	mov	r6,r3
  809684:	1880062e 	bgeu	r3,r2,8096a0 <__eqdf2+0x70>
  809688:	d8800917 	ldw	r2,36(sp)
  80968c:	8809883a 	mov	r4,r17
  809690:	800b883a 	mov	r5,r16
  809694:	1880022e 	bgeu	r3,r2,8096a0 <__eqdf2+0x70>
  809698:	080a2ec0 	call	80a2ec <__fpcmp_parts_d>
  80969c:	100d883a 	mov	r6,r2
  8096a0:	3005883a 	mov	r2,r6
  8096a4:	dfc01017 	ldw	ra,64(sp)
  8096a8:	dc400f17 	ldw	r17,60(sp)
  8096ac:	dc000e17 	ldw	r16,56(sp)
  8096b0:	dec01104 	addi	sp,sp,68
  8096b4:	f800283a 	ret

008096b8 <__nedf2>:
  8096b8:	deffef04 	addi	sp,sp,-68
  8096bc:	dc400f15 	stw	r17,60(sp)
  8096c0:	dc400404 	addi	r17,sp,16
  8096c4:	2005883a 	mov	r2,r4
  8096c8:	2807883a 	mov	r3,r5
  8096cc:	dc000e15 	stw	r16,56(sp)
  8096d0:	d809883a 	mov	r4,sp
  8096d4:	880b883a 	mov	r5,r17
  8096d8:	dc000904 	addi	r16,sp,36
  8096dc:	d8c00115 	stw	r3,4(sp)
  8096e0:	d8800015 	stw	r2,0(sp)
  8096e4:	d9800215 	stw	r6,8(sp)
  8096e8:	dfc01015 	stw	ra,64(sp)
  8096ec:	d9c00315 	stw	r7,12(sp)
  8096f0:	080a1b40 	call	80a1b4 <__unpack_d>
  8096f4:	d9000204 	addi	r4,sp,8
  8096f8:	800b883a 	mov	r5,r16
  8096fc:	080a1b40 	call	80a1b4 <__unpack_d>
  809700:	d8800417 	ldw	r2,16(sp)
  809704:	00c00044 	movi	r3,1
  809708:	180d883a 	mov	r6,r3
  80970c:	1880062e 	bgeu	r3,r2,809728 <__nedf2+0x70>
  809710:	d8800917 	ldw	r2,36(sp)
  809714:	8809883a 	mov	r4,r17
  809718:	800b883a 	mov	r5,r16
  80971c:	1880022e 	bgeu	r3,r2,809728 <__nedf2+0x70>
  809720:	080a2ec0 	call	80a2ec <__fpcmp_parts_d>
  809724:	100d883a 	mov	r6,r2
  809728:	3005883a 	mov	r2,r6
  80972c:	dfc01017 	ldw	ra,64(sp)
  809730:	dc400f17 	ldw	r17,60(sp)
  809734:	dc000e17 	ldw	r16,56(sp)
  809738:	dec01104 	addi	sp,sp,68
  80973c:	f800283a 	ret

00809740 <__gtdf2>:
  809740:	deffef04 	addi	sp,sp,-68
  809744:	dc400f15 	stw	r17,60(sp)
  809748:	dc400404 	addi	r17,sp,16
  80974c:	2005883a 	mov	r2,r4
  809750:	2807883a 	mov	r3,r5
  809754:	dc000e15 	stw	r16,56(sp)
  809758:	d809883a 	mov	r4,sp
  80975c:	880b883a 	mov	r5,r17
  809760:	dc000904 	addi	r16,sp,36
  809764:	d8c00115 	stw	r3,4(sp)
  809768:	d8800015 	stw	r2,0(sp)
  80976c:	d9800215 	stw	r6,8(sp)
  809770:	dfc01015 	stw	ra,64(sp)
  809774:	d9c00315 	stw	r7,12(sp)
  809778:	080a1b40 	call	80a1b4 <__unpack_d>
  80977c:	d9000204 	addi	r4,sp,8
  809780:	800b883a 	mov	r5,r16
  809784:	080a1b40 	call	80a1b4 <__unpack_d>
  809788:	d8800417 	ldw	r2,16(sp)
  80978c:	00c00044 	movi	r3,1
  809790:	01bfffc4 	movi	r6,-1
  809794:	1880062e 	bgeu	r3,r2,8097b0 <__gtdf2+0x70>
  809798:	d8800917 	ldw	r2,36(sp)
  80979c:	8809883a 	mov	r4,r17
  8097a0:	800b883a 	mov	r5,r16
  8097a4:	1880022e 	bgeu	r3,r2,8097b0 <__gtdf2+0x70>
  8097a8:	080a2ec0 	call	80a2ec <__fpcmp_parts_d>
  8097ac:	100d883a 	mov	r6,r2
  8097b0:	3005883a 	mov	r2,r6
  8097b4:	dfc01017 	ldw	ra,64(sp)
  8097b8:	dc400f17 	ldw	r17,60(sp)
  8097bc:	dc000e17 	ldw	r16,56(sp)
  8097c0:	dec01104 	addi	sp,sp,68
  8097c4:	f800283a 	ret

008097c8 <__gedf2>:
  8097c8:	deffef04 	addi	sp,sp,-68
  8097cc:	dc400f15 	stw	r17,60(sp)
  8097d0:	dc400404 	addi	r17,sp,16
  8097d4:	2005883a 	mov	r2,r4
  8097d8:	2807883a 	mov	r3,r5
  8097dc:	dc000e15 	stw	r16,56(sp)
  8097e0:	d809883a 	mov	r4,sp
  8097e4:	880b883a 	mov	r5,r17
  8097e8:	dc000904 	addi	r16,sp,36
  8097ec:	d8c00115 	stw	r3,4(sp)
  8097f0:	d8800015 	stw	r2,0(sp)
  8097f4:	d9800215 	stw	r6,8(sp)
  8097f8:	dfc01015 	stw	ra,64(sp)
  8097fc:	d9c00315 	stw	r7,12(sp)
  809800:	080a1b40 	call	80a1b4 <__unpack_d>
  809804:	d9000204 	addi	r4,sp,8
  809808:	800b883a 	mov	r5,r16
  80980c:	080a1b40 	call	80a1b4 <__unpack_d>
  809810:	d8800417 	ldw	r2,16(sp)
  809814:	00c00044 	movi	r3,1
  809818:	01bfffc4 	movi	r6,-1
  80981c:	1880062e 	bgeu	r3,r2,809838 <__gedf2+0x70>
  809820:	d8800917 	ldw	r2,36(sp)
  809824:	8809883a 	mov	r4,r17
  809828:	800b883a 	mov	r5,r16
  80982c:	1880022e 	bgeu	r3,r2,809838 <__gedf2+0x70>
  809830:	080a2ec0 	call	80a2ec <__fpcmp_parts_d>
  809834:	100d883a 	mov	r6,r2
  809838:	3005883a 	mov	r2,r6
  80983c:	dfc01017 	ldw	ra,64(sp)
  809840:	dc400f17 	ldw	r17,60(sp)
  809844:	dc000e17 	ldw	r16,56(sp)
  809848:	dec01104 	addi	sp,sp,68
  80984c:	f800283a 	ret

00809850 <__ltdf2>:
  809850:	deffef04 	addi	sp,sp,-68
  809854:	dc400f15 	stw	r17,60(sp)
  809858:	dc400404 	addi	r17,sp,16
  80985c:	2005883a 	mov	r2,r4
  809860:	2807883a 	mov	r3,r5
  809864:	dc000e15 	stw	r16,56(sp)
  809868:	d809883a 	mov	r4,sp
  80986c:	880b883a 	mov	r5,r17
  809870:	dc000904 	addi	r16,sp,36
  809874:	d8c00115 	stw	r3,4(sp)
  809878:	d8800015 	stw	r2,0(sp)
  80987c:	d9800215 	stw	r6,8(sp)
  809880:	dfc01015 	stw	ra,64(sp)
  809884:	d9c00315 	stw	r7,12(sp)
  809888:	080a1b40 	call	80a1b4 <__unpack_d>
  80988c:	d9000204 	addi	r4,sp,8
  809890:	800b883a 	mov	r5,r16
  809894:	080a1b40 	call	80a1b4 <__unpack_d>
  809898:	d8800417 	ldw	r2,16(sp)
  80989c:	00c00044 	movi	r3,1
  8098a0:	180d883a 	mov	r6,r3
  8098a4:	1880062e 	bgeu	r3,r2,8098c0 <__ltdf2+0x70>
  8098a8:	d8800917 	ldw	r2,36(sp)
  8098ac:	8809883a 	mov	r4,r17
  8098b0:	800b883a 	mov	r5,r16
  8098b4:	1880022e 	bgeu	r3,r2,8098c0 <__ltdf2+0x70>
  8098b8:	080a2ec0 	call	80a2ec <__fpcmp_parts_d>
  8098bc:	100d883a 	mov	r6,r2
  8098c0:	3005883a 	mov	r2,r6
  8098c4:	dfc01017 	ldw	ra,64(sp)
  8098c8:	dc400f17 	ldw	r17,60(sp)
  8098cc:	dc000e17 	ldw	r16,56(sp)
  8098d0:	dec01104 	addi	sp,sp,68
  8098d4:	f800283a 	ret

008098d8 <__floatsidf>:
  8098d8:	2006d7fa 	srli	r3,r4,31
  8098dc:	defff604 	addi	sp,sp,-40
  8098e0:	008000c4 	movi	r2,3
  8098e4:	dfc00915 	stw	ra,36(sp)
  8098e8:	dcc00815 	stw	r19,32(sp)
  8098ec:	dc800715 	stw	r18,28(sp)
  8098f0:	dc400615 	stw	r17,24(sp)
  8098f4:	dc000515 	stw	r16,20(sp)
  8098f8:	d8800015 	stw	r2,0(sp)
  8098fc:	d8c00115 	stw	r3,4(sp)
  809900:	20000f1e 	bne	r4,zero,809940 <__floatsidf+0x68>
  809904:	00800084 	movi	r2,2
  809908:	d8800015 	stw	r2,0(sp)
  80990c:	d809883a 	mov	r4,sp
  809910:	0809ea00 	call	809ea0 <__pack_d>
  809914:	1009883a 	mov	r4,r2
  809918:	180b883a 	mov	r5,r3
  80991c:	2005883a 	mov	r2,r4
  809920:	2807883a 	mov	r3,r5
  809924:	dfc00917 	ldw	ra,36(sp)
  809928:	dcc00817 	ldw	r19,32(sp)
  80992c:	dc800717 	ldw	r18,28(sp)
  809930:	dc400617 	ldw	r17,24(sp)
  809934:	dc000517 	ldw	r16,20(sp)
  809938:	dec00a04 	addi	sp,sp,40
  80993c:	f800283a 	ret
  809940:	00800f04 	movi	r2,60
  809944:	1807003a 	cmpeq	r3,r3,zero
  809948:	d8800215 	stw	r2,8(sp)
  80994c:	18001126 	beq	r3,zero,809994 <__floatsidf+0xbc>
  809950:	0027883a 	mov	r19,zero
  809954:	2025883a 	mov	r18,r4
  809958:	d9000315 	stw	r4,12(sp)
  80995c:	dcc00415 	stw	r19,16(sp)
  809960:	0809e200 	call	809e20 <__clzsi2>
  809964:	11000744 	addi	r4,r2,29
  809968:	013fe80e 	bge	zero,r4,80990c <__floatsidf+0x34>
  80996c:	10bfff44 	addi	r2,r2,-3
  809970:	10000c16 	blt	r2,zero,8099a4 <__floatsidf+0xcc>
  809974:	90a2983a 	sll	r17,r18,r2
  809978:	0021883a 	mov	r16,zero
  80997c:	d8800217 	ldw	r2,8(sp)
  809980:	dc400415 	stw	r17,16(sp)
  809984:	dc000315 	stw	r16,12(sp)
  809988:	1105c83a 	sub	r2,r2,r4
  80998c:	d8800215 	stw	r2,8(sp)
  809990:	003fde06 	br	80990c <__floatsidf+0x34>
  809994:	00a00034 	movhi	r2,32768
  809998:	20800a26 	beq	r4,r2,8099c4 <__floatsidf+0xec>
  80999c:	0109c83a 	sub	r4,zero,r4
  8099a0:	003feb06 	br	809950 <__floatsidf+0x78>
  8099a4:	9006d07a 	srli	r3,r18,1
  8099a8:	008007c4 	movi	r2,31
  8099ac:	1105c83a 	sub	r2,r2,r4
  8099b0:	1886d83a 	srl	r3,r3,r2
  8099b4:	9922983a 	sll	r17,r19,r4
  8099b8:	9120983a 	sll	r16,r18,r4
  8099bc:	1c62b03a 	or	r17,r3,r17
  8099c0:	003fee06 	br	80997c <__floatsidf+0xa4>
  8099c4:	0009883a 	mov	r4,zero
  8099c8:	01707834 	movhi	r5,49632
  8099cc:	003fd306 	br	80991c <__floatsidf+0x44>

008099d0 <__fixdfsi>:
  8099d0:	defff804 	addi	sp,sp,-32
  8099d4:	2005883a 	mov	r2,r4
  8099d8:	2807883a 	mov	r3,r5
  8099dc:	d809883a 	mov	r4,sp
  8099e0:	d9400204 	addi	r5,sp,8
  8099e4:	d8c00115 	stw	r3,4(sp)
  8099e8:	d8800015 	stw	r2,0(sp)
  8099ec:	dfc00715 	stw	ra,28(sp)
  8099f0:	080a1b40 	call	80a1b4 <__unpack_d>
  8099f4:	d8c00217 	ldw	r3,8(sp)
  8099f8:	00800084 	movi	r2,2
  8099fc:	1880051e 	bne	r3,r2,809a14 <__fixdfsi+0x44>
  809a00:	0007883a 	mov	r3,zero
  809a04:	1805883a 	mov	r2,r3
  809a08:	dfc00717 	ldw	ra,28(sp)
  809a0c:	dec00804 	addi	sp,sp,32
  809a10:	f800283a 	ret
  809a14:	00800044 	movi	r2,1
  809a18:	10fff92e 	bgeu	r2,r3,809a00 <__fixdfsi+0x30>
  809a1c:	00800104 	movi	r2,4
  809a20:	18800426 	beq	r3,r2,809a34 <__fixdfsi+0x64>
  809a24:	d8c00417 	ldw	r3,16(sp)
  809a28:	183ff516 	blt	r3,zero,809a00 <__fixdfsi+0x30>
  809a2c:	00800784 	movi	r2,30
  809a30:	10c0080e 	bge	r2,r3,809a54 <__fixdfsi+0x84>
  809a34:	d8800317 	ldw	r2,12(sp)
  809a38:	1000121e 	bne	r2,zero,809a84 <__fixdfsi+0xb4>
  809a3c:	00e00034 	movhi	r3,32768
  809a40:	18ffffc4 	addi	r3,r3,-1
  809a44:	1805883a 	mov	r2,r3
  809a48:	dfc00717 	ldw	ra,28(sp)
  809a4c:	dec00804 	addi	sp,sp,32
  809a50:	f800283a 	ret
  809a54:	00800f04 	movi	r2,60
  809a58:	10d1c83a 	sub	r8,r2,r3
  809a5c:	40bff804 	addi	r2,r8,-32
  809a60:	d9800517 	ldw	r6,20(sp)
  809a64:	d9c00617 	ldw	r7,24(sp)
  809a68:	10000816 	blt	r2,zero,809a8c <__fixdfsi+0xbc>
  809a6c:	3888d83a 	srl	r4,r7,r2
  809a70:	d8800317 	ldw	r2,12(sp)
  809a74:	2007883a 	mov	r3,r4
  809a78:	103fe226 	beq	r2,zero,809a04 <__fixdfsi+0x34>
  809a7c:	0107c83a 	sub	r3,zero,r4
  809a80:	003fe006 	br	809a04 <__fixdfsi+0x34>
  809a84:	00e00034 	movhi	r3,32768
  809a88:	003fde06 	br	809a04 <__fixdfsi+0x34>
  809a8c:	39c7883a 	add	r3,r7,r7
  809a90:	008007c4 	movi	r2,31
  809a94:	1205c83a 	sub	r2,r2,r8
  809a98:	1886983a 	sll	r3,r3,r2
  809a9c:	3208d83a 	srl	r4,r6,r8
  809aa0:	1908b03a 	or	r4,r3,r4
  809aa4:	003ff206 	br	809a70 <__fixdfsi+0xa0>

00809aa8 <__floatunsidf>:
  809aa8:	defff204 	addi	sp,sp,-56
  809aac:	dfc00d15 	stw	ra,52(sp)
  809ab0:	ddc00c15 	stw	r23,48(sp)
  809ab4:	dd800b15 	stw	r22,44(sp)
  809ab8:	dd400a15 	stw	r21,40(sp)
  809abc:	dd000915 	stw	r20,36(sp)
  809ac0:	dcc00815 	stw	r19,32(sp)
  809ac4:	dc800715 	stw	r18,28(sp)
  809ac8:	dc400615 	stw	r17,24(sp)
  809acc:	dc000515 	stw	r16,20(sp)
  809ad0:	d8000115 	stw	zero,4(sp)
  809ad4:	20000f1e 	bne	r4,zero,809b14 <__floatunsidf+0x6c>
  809ad8:	00800084 	movi	r2,2
  809adc:	d8800015 	stw	r2,0(sp)
  809ae0:	d809883a 	mov	r4,sp
  809ae4:	0809ea00 	call	809ea0 <__pack_d>
  809ae8:	dfc00d17 	ldw	ra,52(sp)
  809aec:	ddc00c17 	ldw	r23,48(sp)
  809af0:	dd800b17 	ldw	r22,44(sp)
  809af4:	dd400a17 	ldw	r21,40(sp)
  809af8:	dd000917 	ldw	r20,36(sp)
  809afc:	dcc00817 	ldw	r19,32(sp)
  809b00:	dc800717 	ldw	r18,28(sp)
  809b04:	dc400617 	ldw	r17,24(sp)
  809b08:	dc000517 	ldw	r16,20(sp)
  809b0c:	dec00e04 	addi	sp,sp,56
  809b10:	f800283a 	ret
  809b14:	008000c4 	movi	r2,3
  809b18:	00c00f04 	movi	r3,60
  809b1c:	002f883a 	mov	r23,zero
  809b20:	202d883a 	mov	r22,r4
  809b24:	d8800015 	stw	r2,0(sp)
  809b28:	d8c00215 	stw	r3,8(sp)
  809b2c:	d9000315 	stw	r4,12(sp)
  809b30:	ddc00415 	stw	r23,16(sp)
  809b34:	0809e200 	call	809e20 <__clzsi2>
  809b38:	12400744 	addi	r9,r2,29
  809b3c:	48000b16 	blt	r9,zero,809b6c <__floatunsidf+0xc4>
  809b40:	483fe726 	beq	r9,zero,809ae0 <__floatunsidf+0x38>
  809b44:	10bfff44 	addi	r2,r2,-3
  809b48:	10002e16 	blt	r2,zero,809c04 <__floatunsidf+0x15c>
  809b4c:	b0a2983a 	sll	r17,r22,r2
  809b50:	0021883a 	mov	r16,zero
  809b54:	d8800217 	ldw	r2,8(sp)
  809b58:	dc400415 	stw	r17,16(sp)
  809b5c:	dc000315 	stw	r16,12(sp)
  809b60:	1245c83a 	sub	r2,r2,r9
  809b64:	d8800215 	stw	r2,8(sp)
  809b68:	003fdd06 	br	809ae0 <__floatunsidf+0x38>
  809b6c:	0255c83a 	sub	r10,zero,r9
  809b70:	51bff804 	addi	r6,r10,-32
  809b74:	30001b16 	blt	r6,zero,809be4 <__floatunsidf+0x13c>
  809b78:	b9a8d83a 	srl	r20,r23,r6
  809b7c:	002b883a 	mov	r21,zero
  809b80:	000f883a 	mov	r7,zero
  809b84:	01000044 	movi	r4,1
  809b88:	0011883a 	mov	r8,zero
  809b8c:	30002516 	blt	r6,zero,809c24 <__floatunsidf+0x17c>
  809b90:	21a6983a 	sll	r19,r4,r6
  809b94:	0025883a 	mov	r18,zero
  809b98:	00bfffc4 	movi	r2,-1
  809b9c:	9089883a 	add	r4,r18,r2
  809ba0:	988b883a 	add	r5,r19,r2
  809ba4:	248d803a 	cmpltu	r6,r4,r18
  809ba8:	314b883a 	add	r5,r6,r5
  809bac:	b104703a 	and	r2,r22,r4
  809bb0:	b946703a 	and	r3,r23,r5
  809bb4:	10c4b03a 	or	r2,r2,r3
  809bb8:	10000226 	beq	r2,zero,809bc4 <__floatunsidf+0x11c>
  809bbc:	01c00044 	movi	r7,1
  809bc0:	0011883a 	mov	r8,zero
  809bc4:	d9000217 	ldw	r4,8(sp)
  809bc8:	a1c4b03a 	or	r2,r20,r7
  809bcc:	aa06b03a 	or	r3,r21,r8
  809bd0:	2249c83a 	sub	r4,r4,r9
  809bd4:	d8c00415 	stw	r3,16(sp)
  809bd8:	d9000215 	stw	r4,8(sp)
  809bdc:	d8800315 	stw	r2,12(sp)
  809be0:	003fbf06 	br	809ae0 <__floatunsidf+0x38>
  809be4:	bdc7883a 	add	r3,r23,r23
  809be8:	008007c4 	movi	r2,31
  809bec:	1285c83a 	sub	r2,r2,r10
  809bf0:	1886983a 	sll	r3,r3,r2
  809bf4:	b2a8d83a 	srl	r20,r22,r10
  809bf8:	baaad83a 	srl	r21,r23,r10
  809bfc:	1d28b03a 	or	r20,r3,r20
  809c00:	003fdf06 	br	809b80 <__floatunsidf+0xd8>
  809c04:	b006d07a 	srli	r3,r22,1
  809c08:	008007c4 	movi	r2,31
  809c0c:	1245c83a 	sub	r2,r2,r9
  809c10:	1886d83a 	srl	r3,r3,r2
  809c14:	ba62983a 	sll	r17,r23,r9
  809c18:	b260983a 	sll	r16,r22,r9
  809c1c:	1c62b03a 	or	r17,r3,r17
  809c20:	003fcc06 	br	809b54 <__floatunsidf+0xac>
  809c24:	2006d07a 	srli	r3,r4,1
  809c28:	008007c4 	movi	r2,31
  809c2c:	1285c83a 	sub	r2,r2,r10
  809c30:	18a6d83a 	srl	r19,r3,r2
  809c34:	22a4983a 	sll	r18,r4,r10
  809c38:	003fd706 	br	809b98 <__floatunsidf+0xf0>

00809c3c <udivmodsi4>:
  809c3c:	29001b2e 	bgeu	r5,r4,809cac <udivmodsi4+0x70>
  809c40:	28001a16 	blt	r5,zero,809cac <udivmodsi4+0x70>
  809c44:	00800044 	movi	r2,1
  809c48:	0007883a 	mov	r3,zero
  809c4c:	01c007c4 	movi	r7,31
  809c50:	00000306 	br	809c60 <udivmodsi4+0x24>
  809c54:	19c01326 	beq	r3,r7,809ca4 <udivmodsi4+0x68>
  809c58:	18c00044 	addi	r3,r3,1
  809c5c:	28000416 	blt	r5,zero,809c70 <udivmodsi4+0x34>
  809c60:	294b883a 	add	r5,r5,r5
  809c64:	1085883a 	add	r2,r2,r2
  809c68:	293ffa36 	bltu	r5,r4,809c54 <udivmodsi4+0x18>
  809c6c:	10000d26 	beq	r2,zero,809ca4 <udivmodsi4+0x68>
  809c70:	0007883a 	mov	r3,zero
  809c74:	21400236 	bltu	r4,r5,809c80 <udivmodsi4+0x44>
  809c78:	2149c83a 	sub	r4,r4,r5
  809c7c:	1886b03a 	or	r3,r3,r2
  809c80:	1004d07a 	srli	r2,r2,1
  809c84:	280ad07a 	srli	r5,r5,1
  809c88:	103ffa1e 	bne	r2,zero,809c74 <udivmodsi4+0x38>
  809c8c:	30000226 	beq	r6,zero,809c98 <udivmodsi4+0x5c>
  809c90:	2005883a 	mov	r2,r4
  809c94:	f800283a 	ret
  809c98:	1809883a 	mov	r4,r3
  809c9c:	2005883a 	mov	r2,r4
  809ca0:	f800283a 	ret
  809ca4:	0007883a 	mov	r3,zero
  809ca8:	003ff806 	br	809c8c <udivmodsi4+0x50>
  809cac:	00800044 	movi	r2,1
  809cb0:	0007883a 	mov	r3,zero
  809cb4:	003fef06 	br	809c74 <udivmodsi4+0x38>

00809cb8 <__divsi3>:
  809cb8:	defffe04 	addi	sp,sp,-8
  809cbc:	dc000015 	stw	r16,0(sp)
  809cc0:	dfc00115 	stw	ra,4(sp)
  809cc4:	0021883a 	mov	r16,zero
  809cc8:	20000c16 	blt	r4,zero,809cfc <__divsi3+0x44>
  809ccc:	000d883a 	mov	r6,zero
  809cd0:	28000e16 	blt	r5,zero,809d0c <__divsi3+0x54>
  809cd4:	0809c3c0 	call	809c3c <udivmodsi4>
  809cd8:	1007883a 	mov	r3,r2
  809cdc:	8005003a 	cmpeq	r2,r16,zero
  809ce0:	1000011e 	bne	r2,zero,809ce8 <__divsi3+0x30>
  809ce4:	00c7c83a 	sub	r3,zero,r3
  809ce8:	1805883a 	mov	r2,r3
  809cec:	dfc00117 	ldw	ra,4(sp)
  809cf0:	dc000017 	ldw	r16,0(sp)
  809cf4:	dec00204 	addi	sp,sp,8
  809cf8:	f800283a 	ret
  809cfc:	0109c83a 	sub	r4,zero,r4
  809d00:	04000044 	movi	r16,1
  809d04:	000d883a 	mov	r6,zero
  809d08:	283ff20e 	bge	r5,zero,809cd4 <__divsi3+0x1c>
  809d0c:	014bc83a 	sub	r5,zero,r5
  809d10:	8021003a 	cmpeq	r16,r16,zero
  809d14:	003fef06 	br	809cd4 <__divsi3+0x1c>

00809d18 <__modsi3>:
  809d18:	deffff04 	addi	sp,sp,-4
  809d1c:	dfc00015 	stw	ra,0(sp)
  809d20:	01800044 	movi	r6,1
  809d24:	2807883a 	mov	r3,r5
  809d28:	20000416 	blt	r4,zero,809d3c <__modsi3+0x24>
  809d2c:	28000c16 	blt	r5,zero,809d60 <__modsi3+0x48>
  809d30:	dfc00017 	ldw	ra,0(sp)
  809d34:	dec00104 	addi	sp,sp,4
  809d38:	0809c3c1 	jmpi	809c3c <udivmodsi4>
  809d3c:	0109c83a 	sub	r4,zero,r4
  809d40:	28000b16 	blt	r5,zero,809d70 <__modsi3+0x58>
  809d44:	180b883a 	mov	r5,r3
  809d48:	01800044 	movi	r6,1
  809d4c:	0809c3c0 	call	809c3c <udivmodsi4>
  809d50:	0085c83a 	sub	r2,zero,r2
  809d54:	dfc00017 	ldw	ra,0(sp)
  809d58:	dec00104 	addi	sp,sp,4
  809d5c:	f800283a 	ret
  809d60:	014bc83a 	sub	r5,zero,r5
  809d64:	dfc00017 	ldw	ra,0(sp)
  809d68:	dec00104 	addi	sp,sp,4
  809d6c:	0809c3c1 	jmpi	809c3c <udivmodsi4>
  809d70:	0147c83a 	sub	r3,zero,r5
  809d74:	003ff306 	br	809d44 <__modsi3+0x2c>

00809d78 <__udivsi3>:
  809d78:	000d883a 	mov	r6,zero
  809d7c:	0809c3c1 	jmpi	809c3c <udivmodsi4>

00809d80 <__umodsi3>:
  809d80:	01800044 	movi	r6,1
  809d84:	0809c3c1 	jmpi	809c3c <udivmodsi4>

00809d88 <__muldi3>:
  809d88:	2011883a 	mov	r8,r4
  809d8c:	427fffcc 	andi	r9,r8,65535
  809d90:	4018d43a 	srli	r12,r8,16
  809d94:	32bfffcc 	andi	r10,r6,65535
  809d98:	3016d43a 	srli	r11,r6,16
  809d9c:	4a85383a 	mul	r2,r9,r10
  809da0:	6295383a 	mul	r10,r12,r10
  809da4:	4ad3383a 	mul	r9,r9,r11
  809da8:	113fffcc 	andi	r4,r2,65535
  809dac:	1004d43a 	srli	r2,r2,16
  809db0:	4a93883a 	add	r9,r9,r10
  809db4:	3807883a 	mov	r3,r7
  809db8:	1245883a 	add	r2,r2,r9
  809dbc:	280f883a 	mov	r7,r5
  809dc0:	180b883a 	mov	r5,r3
  809dc4:	1006943a 	slli	r3,r2,16
  809dc8:	defffd04 	addi	sp,sp,-12
  809dcc:	dc800215 	stw	r18,8(sp)
  809dd0:	1907883a 	add	r3,r3,r4
  809dd4:	dc400115 	stw	r17,4(sp)
  809dd8:	dc000015 	stw	r16,0(sp)
  809ddc:	4165383a 	mul	r18,r8,r5
  809de0:	31e3383a 	mul	r17,r6,r7
  809de4:	1012d43a 	srli	r9,r2,16
  809de8:	62d9383a 	mul	r12,r12,r11
  809dec:	181f883a 	mov	r15,r3
  809df0:	1280022e 	bgeu	r2,r10,809dfc <__muldi3+0x74>
  809df4:	00800074 	movhi	r2,1
  809df8:	6099883a 	add	r12,r12,r2
  809dfc:	624d883a 	add	r6,r12,r9
  809e00:	9187883a 	add	r3,r18,r6
  809e04:	88c7883a 	add	r3,r17,r3
  809e08:	7805883a 	mov	r2,r15
  809e0c:	dc800217 	ldw	r18,8(sp)
  809e10:	dc400117 	ldw	r17,4(sp)
  809e14:	dc000017 	ldw	r16,0(sp)
  809e18:	dec00304 	addi	sp,sp,12
  809e1c:	f800283a 	ret

00809e20 <__clzsi2>:
  809e20:	00bfffd4 	movui	r2,65535
  809e24:	11000e36 	bltu	r2,r4,809e60 <__clzsi2+0x40>
  809e28:	00803fc4 	movi	r2,255
  809e2c:	01400204 	movi	r5,8
  809e30:	0007883a 	mov	r3,zero
  809e34:	11001036 	bltu	r2,r4,809e78 <__clzsi2+0x58>
  809e38:	000b883a 	mov	r5,zero
  809e3c:	20c6d83a 	srl	r3,r4,r3
  809e40:	00802074 	movhi	r2,129
  809e44:	10bb4c04 	addi	r2,r2,-4816
  809e48:	1887883a 	add	r3,r3,r2
  809e4c:	18800003 	ldbu	r2,0(r3)
  809e50:	00c00804 	movi	r3,32
  809e54:	2885883a 	add	r2,r5,r2
  809e58:	1885c83a 	sub	r2,r3,r2
  809e5c:	f800283a 	ret
  809e60:	01400404 	movi	r5,16
  809e64:	00804034 	movhi	r2,256
  809e68:	10bfffc4 	addi	r2,r2,-1
  809e6c:	2807883a 	mov	r3,r5
  809e70:	113ff22e 	bgeu	r2,r4,809e3c <__clzsi2+0x1c>
  809e74:	01400604 	movi	r5,24
  809e78:	2807883a 	mov	r3,r5
  809e7c:	20c6d83a 	srl	r3,r4,r3
  809e80:	00802074 	movhi	r2,129
  809e84:	10bb4c04 	addi	r2,r2,-4816
  809e88:	1887883a 	add	r3,r3,r2
  809e8c:	18800003 	ldbu	r2,0(r3)
  809e90:	00c00804 	movi	r3,32
  809e94:	2885883a 	add	r2,r5,r2
  809e98:	1885c83a 	sub	r2,r3,r2
  809e9c:	f800283a 	ret

00809ea0 <__pack_d>:
  809ea0:	20c00017 	ldw	r3,0(r4)
  809ea4:	defffd04 	addi	sp,sp,-12
  809ea8:	dc000015 	stw	r16,0(sp)
  809eac:	dc800215 	stw	r18,8(sp)
  809eb0:	dc400115 	stw	r17,4(sp)
  809eb4:	00800044 	movi	r2,1
  809eb8:	22000317 	ldw	r8,12(r4)
  809ebc:	001f883a 	mov	r15,zero
  809ec0:	22400417 	ldw	r9,16(r4)
  809ec4:	24000117 	ldw	r16,4(r4)
  809ec8:	10c0552e 	bgeu	r2,r3,80a020 <__pack_d+0x180>
  809ecc:	00800104 	movi	r2,4
  809ed0:	18804f26 	beq	r3,r2,80a010 <__pack_d+0x170>
  809ed4:	00800084 	movi	r2,2
  809ed8:	18800226 	beq	r3,r2,809ee4 <__pack_d+0x44>
  809edc:	4244b03a 	or	r2,r8,r9
  809ee0:	10001a1e 	bne	r2,zero,809f4c <__pack_d+0xac>
  809ee4:	000d883a 	mov	r6,zero
  809ee8:	000f883a 	mov	r7,zero
  809eec:	0011883a 	mov	r8,zero
  809ef0:	00800434 	movhi	r2,16
  809ef4:	10bfffc4 	addi	r2,r2,-1
  809ef8:	301d883a 	mov	r14,r6
  809efc:	3884703a 	and	r2,r7,r2
  809f00:	400a953a 	slli	r5,r8,20
  809f04:	79bffc2c 	andhi	r6,r15,65520
  809f08:	308cb03a 	or	r6,r6,r2
  809f0c:	00e00434 	movhi	r3,32784
  809f10:	18ffffc4 	addi	r3,r3,-1
  809f14:	800497fa 	slli	r2,r16,31
  809f18:	30c6703a 	and	r3,r6,r3
  809f1c:	1946b03a 	or	r3,r3,r5
  809f20:	01600034 	movhi	r5,32768
  809f24:	297fffc4 	addi	r5,r5,-1
  809f28:	194a703a 	and	r5,r3,r5
  809f2c:	288ab03a 	or	r5,r5,r2
  809f30:	2807883a 	mov	r3,r5
  809f34:	7005883a 	mov	r2,r14
  809f38:	dc800217 	ldw	r18,8(sp)
  809f3c:	dc400117 	ldw	r17,4(sp)
  809f40:	dc000017 	ldw	r16,0(sp)
  809f44:	dec00304 	addi	sp,sp,12
  809f48:	f800283a 	ret
  809f4c:	21000217 	ldw	r4,8(r4)
  809f50:	00bf0084 	movi	r2,-1022
  809f54:	20803f16 	blt	r4,r2,80a054 <__pack_d+0x1b4>
  809f58:	0080ffc4 	movi	r2,1023
  809f5c:	11002c16 	blt	r2,r4,80a010 <__pack_d+0x170>
  809f60:	00803fc4 	movi	r2,255
  809f64:	408c703a 	and	r6,r8,r2
  809f68:	00802004 	movi	r2,128
  809f6c:	0007883a 	mov	r3,zero
  809f70:	000f883a 	mov	r7,zero
  809f74:	2280ffc4 	addi	r10,r4,1023
  809f78:	30801e26 	beq	r6,r2,809ff4 <__pack_d+0x154>
  809f7c:	00801fc4 	movi	r2,127
  809f80:	4089883a 	add	r4,r8,r2
  809f84:	220d803a 	cmpltu	r6,r4,r8
  809f88:	324d883a 	add	r6,r6,r9
  809f8c:	2011883a 	mov	r8,r4
  809f90:	3013883a 	mov	r9,r6
  809f94:	00880034 	movhi	r2,8192
  809f98:	10bfffc4 	addi	r2,r2,-1
  809f9c:	12400d36 	bltu	r2,r9,809fd4 <__pack_d+0x134>
  809fa0:	4804963a 	slli	r2,r9,24
  809fa4:	400cd23a 	srli	r6,r8,8
  809fa8:	480ed23a 	srli	r7,r9,8
  809fac:	013fffc4 	movi	r4,-1
  809fb0:	118cb03a 	or	r6,r2,r6
  809fb4:	01400434 	movhi	r5,16
  809fb8:	297fffc4 	addi	r5,r5,-1
  809fbc:	3104703a 	and	r2,r6,r4
  809fc0:	3946703a 	and	r3,r7,r5
  809fc4:	5201ffcc 	andi	r8,r10,2047
  809fc8:	100d883a 	mov	r6,r2
  809fcc:	180f883a 	mov	r7,r3
  809fd0:	003fc706 	br	809ef0 <__pack_d+0x50>
  809fd4:	480897fa 	slli	r4,r9,31
  809fd8:	4004d07a 	srli	r2,r8,1
  809fdc:	4806d07a 	srli	r3,r9,1
  809fe0:	52800044 	addi	r10,r10,1
  809fe4:	2084b03a 	or	r2,r4,r2
  809fe8:	1011883a 	mov	r8,r2
  809fec:	1813883a 	mov	r9,r3
  809ff0:	003feb06 	br	809fa0 <__pack_d+0x100>
  809ff4:	383fe11e 	bne	r7,zero,809f7c <__pack_d+0xdc>
  809ff8:	01004004 	movi	r4,256
  809ffc:	4104703a 	and	r2,r8,r4
  80a000:	10c4b03a 	or	r2,r2,r3
  80a004:	103fe326 	beq	r2,zero,809f94 <__pack_d+0xf4>
  80a008:	3005883a 	mov	r2,r6
  80a00c:	003fdc06 	br	809f80 <__pack_d+0xe0>
  80a010:	000d883a 	mov	r6,zero
  80a014:	000f883a 	mov	r7,zero
  80a018:	0201ffc4 	movi	r8,2047
  80a01c:	003fb406 	br	809ef0 <__pack_d+0x50>
  80a020:	0005883a 	mov	r2,zero
  80a024:	00c00234 	movhi	r3,8
  80a028:	408cb03a 	or	r6,r8,r2
  80a02c:	48ceb03a 	or	r7,r9,r3
  80a030:	013fffc4 	movi	r4,-1
  80a034:	01400434 	movhi	r5,16
  80a038:	297fffc4 	addi	r5,r5,-1
  80a03c:	3104703a 	and	r2,r6,r4
  80a040:	3946703a 	and	r3,r7,r5
  80a044:	100d883a 	mov	r6,r2
  80a048:	180f883a 	mov	r7,r3
  80a04c:	0201ffc4 	movi	r8,2047
  80a050:	003fa706 	br	809ef0 <__pack_d+0x50>
  80a054:	1109c83a 	sub	r4,r2,r4
  80a058:	00800e04 	movi	r2,56
  80a05c:	11004316 	blt	r2,r4,80a16c <__pack_d+0x2cc>
  80a060:	21fff804 	addi	r7,r4,-32
  80a064:	38004516 	blt	r7,zero,80a17c <__pack_d+0x2dc>
  80a068:	49d8d83a 	srl	r12,r9,r7
  80a06c:	001b883a 	mov	r13,zero
  80a070:	0023883a 	mov	r17,zero
  80a074:	01400044 	movi	r5,1
  80a078:	0025883a 	mov	r18,zero
  80a07c:	38004716 	blt	r7,zero,80a19c <__pack_d+0x2fc>
  80a080:	29d6983a 	sll	r11,r5,r7
  80a084:	0015883a 	mov	r10,zero
  80a088:	00bfffc4 	movi	r2,-1
  80a08c:	5089883a 	add	r4,r10,r2
  80a090:	588b883a 	add	r5,r11,r2
  80a094:	228d803a 	cmpltu	r6,r4,r10
  80a098:	314b883a 	add	r5,r6,r5
  80a09c:	4104703a 	and	r2,r8,r4
  80a0a0:	4946703a 	and	r3,r9,r5
  80a0a4:	10c4b03a 	or	r2,r2,r3
  80a0a8:	10000226 	beq	r2,zero,80a0b4 <__pack_d+0x214>
  80a0ac:	04400044 	movi	r17,1
  80a0b0:	0025883a 	mov	r18,zero
  80a0b4:	00803fc4 	movi	r2,255
  80a0b8:	644eb03a 	or	r7,r12,r17
  80a0bc:	3892703a 	and	r9,r7,r2
  80a0c0:	00802004 	movi	r2,128
  80a0c4:	6c90b03a 	or	r8,r13,r18
  80a0c8:	0015883a 	mov	r10,zero
  80a0cc:	48801626 	beq	r9,r2,80a128 <__pack_d+0x288>
  80a0d0:	01001fc4 	movi	r4,127
  80a0d4:	3905883a 	add	r2,r7,r4
  80a0d8:	11cd803a 	cmpltu	r6,r2,r7
  80a0dc:	320d883a 	add	r6,r6,r8
  80a0e0:	100f883a 	mov	r7,r2
  80a0e4:	00840034 	movhi	r2,4096
  80a0e8:	10bfffc4 	addi	r2,r2,-1
  80a0ec:	3011883a 	mov	r8,r6
  80a0f0:	0007883a 	mov	r3,zero
  80a0f4:	11801b36 	bltu	r2,r6,80a164 <__pack_d+0x2c4>
  80a0f8:	4004963a 	slli	r2,r8,24
  80a0fc:	3808d23a 	srli	r4,r7,8
  80a100:	400ad23a 	srli	r5,r8,8
  80a104:	1813883a 	mov	r9,r3
  80a108:	1108b03a 	or	r4,r2,r4
  80a10c:	00bfffc4 	movi	r2,-1
  80a110:	00c00434 	movhi	r3,16
  80a114:	18ffffc4 	addi	r3,r3,-1
  80a118:	208c703a 	and	r6,r4,r2
  80a11c:	28ce703a 	and	r7,r5,r3
  80a120:	4a01ffcc 	andi	r8,r9,2047
  80a124:	003f7206 	br	809ef0 <__pack_d+0x50>
  80a128:	503fe91e 	bne	r10,zero,80a0d0 <__pack_d+0x230>
  80a12c:	01004004 	movi	r4,256
  80a130:	3904703a 	and	r2,r7,r4
  80a134:	0007883a 	mov	r3,zero
  80a138:	10c4b03a 	or	r2,r2,r3
  80a13c:	10000626 	beq	r2,zero,80a158 <__pack_d+0x2b8>
  80a140:	3a45883a 	add	r2,r7,r9
  80a144:	11cd803a 	cmpltu	r6,r2,r7
  80a148:	320d883a 	add	r6,r6,r8
  80a14c:	100f883a 	mov	r7,r2
  80a150:	3011883a 	mov	r8,r6
  80a154:	0007883a 	mov	r3,zero
  80a158:	00840034 	movhi	r2,4096
  80a15c:	10bfffc4 	addi	r2,r2,-1
  80a160:	123fe52e 	bgeu	r2,r8,80a0f8 <__pack_d+0x258>
  80a164:	00c00044 	movi	r3,1
  80a168:	003fe306 	br	80a0f8 <__pack_d+0x258>
  80a16c:	0009883a 	mov	r4,zero
  80a170:	0013883a 	mov	r9,zero
  80a174:	000b883a 	mov	r5,zero
  80a178:	003fe406 	br	80a10c <__pack_d+0x26c>
  80a17c:	4a47883a 	add	r3,r9,r9
  80a180:	008007c4 	movi	r2,31
  80a184:	1105c83a 	sub	r2,r2,r4
  80a188:	1886983a 	sll	r3,r3,r2
  80a18c:	4118d83a 	srl	r12,r8,r4
  80a190:	491ad83a 	srl	r13,r9,r4
  80a194:	1b18b03a 	or	r12,r3,r12
  80a198:	003fb506 	br	80a070 <__pack_d+0x1d0>
  80a19c:	2806d07a 	srli	r3,r5,1
  80a1a0:	008007c4 	movi	r2,31
  80a1a4:	1105c83a 	sub	r2,r2,r4
  80a1a8:	1896d83a 	srl	r11,r3,r2
  80a1ac:	2914983a 	sll	r10,r5,r4
  80a1b0:	003fb506 	br	80a088 <__pack_d+0x1e8>

0080a1b4 <__unpack_d>:
  80a1b4:	20c00117 	ldw	r3,4(r4)
  80a1b8:	22400017 	ldw	r9,0(r4)
  80a1bc:	00800434 	movhi	r2,16
  80a1c0:	10bfffc4 	addi	r2,r2,-1
  80a1c4:	1808d53a 	srli	r4,r3,20
  80a1c8:	180cd7fa 	srli	r6,r3,31
  80a1cc:	1894703a 	and	r10,r3,r2
  80a1d0:	2201ffcc 	andi	r8,r4,2047
  80a1d4:	281b883a 	mov	r13,r5
  80a1d8:	4817883a 	mov	r11,r9
  80a1dc:	29800115 	stw	r6,4(r5)
  80a1e0:	5019883a 	mov	r12,r10
  80a1e4:	40001e1e 	bne	r8,zero,80a260 <__unpack_d+0xac>
  80a1e8:	4a84b03a 	or	r2,r9,r10
  80a1ec:	10001926 	beq	r2,zero,80a254 <__unpack_d+0xa0>
  80a1f0:	4804d63a 	srli	r2,r9,24
  80a1f4:	500c923a 	slli	r6,r10,8
  80a1f8:	013f0084 	movi	r4,-1022
  80a1fc:	00c40034 	movhi	r3,4096
  80a200:	18ffffc4 	addi	r3,r3,-1
  80a204:	118cb03a 	or	r6,r2,r6
  80a208:	008000c4 	movi	r2,3
  80a20c:	480a923a 	slli	r5,r9,8
  80a210:	68800015 	stw	r2,0(r13)
  80a214:	69000215 	stw	r4,8(r13)
  80a218:	19800b36 	bltu	r3,r6,80a248 <__unpack_d+0x94>
  80a21c:	200f883a 	mov	r7,r4
  80a220:	1811883a 	mov	r8,r3
  80a224:	2945883a 	add	r2,r5,r5
  80a228:	1149803a 	cmpltu	r4,r2,r5
  80a22c:	3187883a 	add	r3,r6,r6
  80a230:	20c9883a 	add	r4,r4,r3
  80a234:	100b883a 	mov	r5,r2
  80a238:	200d883a 	mov	r6,r4
  80a23c:	39ffffc4 	addi	r7,r7,-1
  80a240:	413ff82e 	bgeu	r8,r4,80a224 <__unpack_d+0x70>
  80a244:	69c00215 	stw	r7,8(r13)
  80a248:	69800415 	stw	r6,16(r13)
  80a24c:	69400315 	stw	r5,12(r13)
  80a250:	f800283a 	ret
  80a254:	00800084 	movi	r2,2
  80a258:	28800015 	stw	r2,0(r5)
  80a25c:	f800283a 	ret
  80a260:	0081ffc4 	movi	r2,2047
  80a264:	40800f26 	beq	r8,r2,80a2a4 <__unpack_d+0xf0>
  80a268:	480cd63a 	srli	r6,r9,24
  80a26c:	5006923a 	slli	r3,r10,8
  80a270:	4804923a 	slli	r2,r9,8
  80a274:	0009883a 	mov	r4,zero
  80a278:	30c6b03a 	or	r3,r6,r3
  80a27c:	01440034 	movhi	r5,4096
  80a280:	110cb03a 	or	r6,r2,r4
  80a284:	423f0044 	addi	r8,r8,-1023
  80a288:	194eb03a 	or	r7,r3,r5
  80a28c:	008000c4 	movi	r2,3
  80a290:	69c00415 	stw	r7,16(r13)
  80a294:	6a000215 	stw	r8,8(r13)
  80a298:	68800015 	stw	r2,0(r13)
  80a29c:	69800315 	stw	r6,12(r13)
  80a2a0:	f800283a 	ret
  80a2a4:	4a84b03a 	or	r2,r9,r10
  80a2a8:	1000031e 	bne	r2,zero,80a2b8 <__unpack_d+0x104>
  80a2ac:	00800104 	movi	r2,4
  80a2b0:	28800015 	stw	r2,0(r5)
  80a2b4:	f800283a 	ret
  80a2b8:	0009883a 	mov	r4,zero
  80a2bc:	01400234 	movhi	r5,8
  80a2c0:	4904703a 	and	r2,r9,r4
  80a2c4:	5146703a 	and	r3,r10,r5
  80a2c8:	10c4b03a 	or	r2,r2,r3
  80a2cc:	10000526 	beq	r2,zero,80a2e4 <__unpack_d+0x130>
  80a2d0:	00800044 	movi	r2,1
  80a2d4:	68800015 	stw	r2,0(r13)
  80a2d8:	6b000415 	stw	r12,16(r13)
  80a2dc:	6ac00315 	stw	r11,12(r13)
  80a2e0:	f800283a 	ret
  80a2e4:	68000015 	stw	zero,0(r13)
  80a2e8:	003ffb06 	br	80a2d8 <__unpack_d+0x124>

0080a2ec <__fpcmp_parts_d>:
  80a2ec:	21800017 	ldw	r6,0(r4)
  80a2f0:	00c00044 	movi	r3,1
  80a2f4:	19800a2e 	bgeu	r3,r6,80a320 <__fpcmp_parts_d+0x34>
  80a2f8:	28800017 	ldw	r2,0(r5)
  80a2fc:	1880082e 	bgeu	r3,r2,80a320 <__fpcmp_parts_d+0x34>
  80a300:	00c00104 	movi	r3,4
  80a304:	30c02626 	beq	r6,r3,80a3a0 <__fpcmp_parts_d+0xb4>
  80a308:	10c02226 	beq	r2,r3,80a394 <__fpcmp_parts_d+0xa8>
  80a30c:	00c00084 	movi	r3,2
  80a310:	30c00526 	beq	r6,r3,80a328 <__fpcmp_parts_d+0x3c>
  80a314:	10c0071e 	bne	r2,r3,80a334 <__fpcmp_parts_d+0x48>
  80a318:	20800117 	ldw	r2,4(r4)
  80a31c:	1000091e 	bne	r2,zero,80a344 <__fpcmp_parts_d+0x58>
  80a320:	00800044 	movi	r2,1
  80a324:	f800283a 	ret
  80a328:	10c01a1e 	bne	r2,r3,80a394 <__fpcmp_parts_d+0xa8>
  80a32c:	0005883a 	mov	r2,zero
  80a330:	f800283a 	ret
  80a334:	22000117 	ldw	r8,4(r4)
  80a338:	28800117 	ldw	r2,4(r5)
  80a33c:	40800326 	beq	r8,r2,80a34c <__fpcmp_parts_d+0x60>
  80a340:	403ff726 	beq	r8,zero,80a320 <__fpcmp_parts_d+0x34>
  80a344:	00bfffc4 	movi	r2,-1
  80a348:	f800283a 	ret
  80a34c:	20c00217 	ldw	r3,8(r4)
  80a350:	28800217 	ldw	r2,8(r5)
  80a354:	10fffa16 	blt	r2,r3,80a340 <__fpcmp_parts_d+0x54>
  80a358:	18800916 	blt	r3,r2,80a380 <__fpcmp_parts_d+0x94>
  80a35c:	21c00417 	ldw	r7,16(r4)
  80a360:	28c00417 	ldw	r3,16(r5)
  80a364:	21800317 	ldw	r6,12(r4)
  80a368:	28800317 	ldw	r2,12(r5)
  80a36c:	19fff436 	bltu	r3,r7,80a340 <__fpcmp_parts_d+0x54>
  80a370:	38c00526 	beq	r7,r3,80a388 <__fpcmp_parts_d+0x9c>
  80a374:	38c00236 	bltu	r7,r3,80a380 <__fpcmp_parts_d+0x94>
  80a378:	19ffec1e 	bne	r3,r7,80a32c <__fpcmp_parts_d+0x40>
  80a37c:	30bfeb2e 	bgeu	r6,r2,80a32c <__fpcmp_parts_d+0x40>
  80a380:	403fe71e 	bne	r8,zero,80a320 <__fpcmp_parts_d+0x34>
  80a384:	003fef06 	br	80a344 <__fpcmp_parts_d+0x58>
  80a388:	11bffa2e 	bgeu	r2,r6,80a374 <__fpcmp_parts_d+0x88>
  80a38c:	403fe426 	beq	r8,zero,80a320 <__fpcmp_parts_d+0x34>
  80a390:	003fec06 	br	80a344 <__fpcmp_parts_d+0x58>
  80a394:	28800117 	ldw	r2,4(r5)
  80a398:	103fe11e 	bne	r2,zero,80a320 <__fpcmp_parts_d+0x34>
  80a39c:	003fe906 	br	80a344 <__fpcmp_parts_d+0x58>
  80a3a0:	11bfdd1e 	bne	r2,r6,80a318 <__fpcmp_parts_d+0x2c>
  80a3a4:	28c00117 	ldw	r3,4(r5)
  80a3a8:	20800117 	ldw	r2,4(r4)
  80a3ac:	1885c83a 	sub	r2,r3,r2
  80a3b0:	f800283a 	ret

0080a3b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a3b4:	defff804 	addi	sp,sp,-32
  80a3b8:	dfc00715 	stw	ra,28(sp)
  80a3bc:	df000615 	stw	fp,24(sp)
  80a3c0:	df000604 	addi	fp,sp,24
  80a3c4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a3c8:	e0bffc17 	ldw	r2,-16(fp)
  80a3cc:	1004803a 	cmplt	r2,r2,zero
  80a3d0:	1000081e 	bne	r2,zero,80a3f4 <close+0x40>
  80a3d4:	e0bffc17 	ldw	r2,-16(fp)
  80a3d8:	10800324 	muli	r2,r2,12
  80a3dc:	1007883a 	mov	r3,r2
  80a3e0:	00802074 	movhi	r2,129
  80a3e4:	10be5404 	addi	r2,r2,-1712
  80a3e8:	1887883a 	add	r3,r3,r2
  80a3ec:	e0ffff15 	stw	r3,-4(fp)
  80a3f0:	00000106 	br	80a3f8 <close+0x44>
  80a3f4:	e03fff15 	stw	zero,-4(fp)
  80a3f8:	e0bfff17 	ldw	r2,-4(fp)
  80a3fc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a400:	e0bffb17 	ldw	r2,-20(fp)
  80a404:	1005003a 	cmpeq	r2,r2,zero
  80a408:	10001d1e 	bne	r2,zero,80a480 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a40c:	e0bffb17 	ldw	r2,-20(fp)
  80a410:	10800017 	ldw	r2,0(r2)
  80a414:	10800417 	ldw	r2,16(r2)
  80a418:	1005003a 	cmpeq	r2,r2,zero
  80a41c:	1000071e 	bne	r2,zero,80a43c <close+0x88>
  80a420:	e0bffb17 	ldw	r2,-20(fp)
  80a424:	10800017 	ldw	r2,0(r2)
  80a428:	10800417 	ldw	r2,16(r2)
  80a42c:	e13ffb17 	ldw	r4,-20(fp)
  80a430:	103ee83a 	callr	r2
  80a434:	e0bffe15 	stw	r2,-8(fp)
  80a438:	00000106 	br	80a440 <close+0x8c>
  80a43c:	e03ffe15 	stw	zero,-8(fp)
  80a440:	e0bffe17 	ldw	r2,-8(fp)
  80a444:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a448:	e13ffc17 	ldw	r4,-16(fp)
  80a44c:	080b07c0 	call	80b07c <alt_release_fd>
    if (rval < 0)
  80a450:	e0bffa17 	ldw	r2,-24(fp)
  80a454:	1004403a 	cmpge	r2,r2,zero
  80a458:	1000071e 	bne	r2,zero,80a478 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80a45c:	080a4b00 	call	80a4b0 <alt_get_errno>
  80a460:	e0fffa17 	ldw	r3,-24(fp)
  80a464:	00c7c83a 	sub	r3,zero,r3
  80a468:	10c00015 	stw	r3,0(r2)
      return -1;
  80a46c:	00bfffc4 	movi	r2,-1
  80a470:	e0bffd15 	stw	r2,-12(fp)
  80a474:	00000806 	br	80a498 <close+0xe4>
    }
    return 0;
  80a478:	e03ffd15 	stw	zero,-12(fp)
  80a47c:	00000606 	br	80a498 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a480:	080a4b00 	call	80a4b0 <alt_get_errno>
  80a484:	1007883a 	mov	r3,r2
  80a488:	00801444 	movi	r2,81
  80a48c:	18800015 	stw	r2,0(r3)
    return -1;
  80a490:	00bfffc4 	movi	r2,-1
  80a494:	e0bffd15 	stw	r2,-12(fp)
  80a498:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a49c:	e037883a 	mov	sp,fp
  80a4a0:	dfc00117 	ldw	ra,4(sp)
  80a4a4:	df000017 	ldw	fp,0(sp)
  80a4a8:	dec00204 	addi	sp,sp,8
  80a4ac:	f800283a 	ret

0080a4b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a4b0:	defffd04 	addi	sp,sp,-12
  80a4b4:	dfc00215 	stw	ra,8(sp)
  80a4b8:	df000115 	stw	fp,4(sp)
  80a4bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a4c0:	00802074 	movhi	r2,129
  80a4c4:	10835004 	addi	r2,r2,3392
  80a4c8:	10800017 	ldw	r2,0(r2)
  80a4cc:	1005003a 	cmpeq	r2,r2,zero
  80a4d0:	1000061e 	bne	r2,zero,80a4ec <alt_get_errno+0x3c>
  80a4d4:	00802074 	movhi	r2,129
  80a4d8:	10835004 	addi	r2,r2,3392
  80a4dc:	10800017 	ldw	r2,0(r2)
  80a4e0:	103ee83a 	callr	r2
  80a4e4:	e0bfff15 	stw	r2,-4(fp)
  80a4e8:	00000306 	br	80a4f8 <alt_get_errno+0x48>
  80a4ec:	00802074 	movhi	r2,129
  80a4f0:	108a6d04 	addi	r2,r2,10676
  80a4f4:	e0bfff15 	stw	r2,-4(fp)
  80a4f8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a4fc:	e037883a 	mov	sp,fp
  80a500:	dfc00117 	ldw	ra,4(sp)
  80a504:	df000017 	ldw	fp,0(sp)
  80a508:	dec00204 	addi	sp,sp,8
  80a50c:	f800283a 	ret

0080a510 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a510:	defffc04 	addi	sp,sp,-16
  80a514:	df000315 	stw	fp,12(sp)
  80a518:	df000304 	addi	fp,sp,12
  80a51c:	e13ffd15 	stw	r4,-12(fp)
  80a520:	e17ffe15 	stw	r5,-8(fp)
  80a524:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a528:	e0bfff17 	ldw	r2,-4(fp)
}
  80a52c:	e037883a 	mov	sp,fp
  80a530:	df000017 	ldw	fp,0(sp)
  80a534:	dec00104 	addi	sp,sp,4
  80a538:	f800283a 	ret

0080a53c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a53c:	defff904 	addi	sp,sp,-28
  80a540:	dfc00615 	stw	ra,24(sp)
  80a544:	df000515 	stw	fp,20(sp)
  80a548:	df000504 	addi	fp,sp,20
  80a54c:	e13ffc15 	stw	r4,-16(fp)
  80a550:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a554:	e0bffc17 	ldw	r2,-16(fp)
  80a558:	1004803a 	cmplt	r2,r2,zero
  80a55c:	1000081e 	bne	r2,zero,80a580 <fstat+0x44>
  80a560:	e0bffc17 	ldw	r2,-16(fp)
  80a564:	10800324 	muli	r2,r2,12
  80a568:	1007883a 	mov	r3,r2
  80a56c:	00802074 	movhi	r2,129
  80a570:	10be5404 	addi	r2,r2,-1712
  80a574:	1887883a 	add	r3,r3,r2
  80a578:	e0ffff15 	stw	r3,-4(fp)
  80a57c:	00000106 	br	80a584 <fstat+0x48>
  80a580:	e03fff15 	stw	zero,-4(fp)
  80a584:	e0bfff17 	ldw	r2,-4(fp)
  80a588:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a58c:	e0bffb17 	ldw	r2,-20(fp)
  80a590:	1005003a 	cmpeq	r2,r2,zero
  80a594:	1000121e 	bne	r2,zero,80a5e0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a598:	e0bffb17 	ldw	r2,-20(fp)
  80a59c:	10800017 	ldw	r2,0(r2)
  80a5a0:	10800817 	ldw	r2,32(r2)
  80a5a4:	1005003a 	cmpeq	r2,r2,zero
  80a5a8:	1000081e 	bne	r2,zero,80a5cc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80a5ac:	e0bffb17 	ldw	r2,-20(fp)
  80a5b0:	10800017 	ldw	r2,0(r2)
  80a5b4:	10800817 	ldw	r2,32(r2)
  80a5b8:	e13ffb17 	ldw	r4,-20(fp)
  80a5bc:	e17ffd17 	ldw	r5,-12(fp)
  80a5c0:	103ee83a 	callr	r2
  80a5c4:	e0bffe15 	stw	r2,-8(fp)
  80a5c8:	00000b06 	br	80a5f8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a5cc:	e0fffd17 	ldw	r3,-12(fp)
  80a5d0:	00880004 	movi	r2,8192
  80a5d4:	18800115 	stw	r2,4(r3)
      return 0;
  80a5d8:	e03ffe15 	stw	zero,-8(fp)
  80a5dc:	00000606 	br	80a5f8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a5e0:	080a6100 	call	80a610 <alt_get_errno>
  80a5e4:	1007883a 	mov	r3,r2
  80a5e8:	00801444 	movi	r2,81
  80a5ec:	18800015 	stw	r2,0(r3)
    return -1;
  80a5f0:	00bfffc4 	movi	r2,-1
  80a5f4:	e0bffe15 	stw	r2,-8(fp)
  80a5f8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a5fc:	e037883a 	mov	sp,fp
  80a600:	dfc00117 	ldw	ra,4(sp)
  80a604:	df000017 	ldw	fp,0(sp)
  80a608:	dec00204 	addi	sp,sp,8
  80a60c:	f800283a 	ret

0080a610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a610:	defffd04 	addi	sp,sp,-12
  80a614:	dfc00215 	stw	ra,8(sp)
  80a618:	df000115 	stw	fp,4(sp)
  80a61c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a620:	00802074 	movhi	r2,129
  80a624:	10835004 	addi	r2,r2,3392
  80a628:	10800017 	ldw	r2,0(r2)
  80a62c:	1005003a 	cmpeq	r2,r2,zero
  80a630:	1000061e 	bne	r2,zero,80a64c <alt_get_errno+0x3c>
  80a634:	00802074 	movhi	r2,129
  80a638:	10835004 	addi	r2,r2,3392
  80a63c:	10800017 	ldw	r2,0(r2)
  80a640:	103ee83a 	callr	r2
  80a644:	e0bfff15 	stw	r2,-4(fp)
  80a648:	00000306 	br	80a658 <alt_get_errno+0x48>
  80a64c:	00802074 	movhi	r2,129
  80a650:	108a6d04 	addi	r2,r2,10676
  80a654:	e0bfff15 	stw	r2,-4(fp)
  80a658:	e0bfff17 	ldw	r2,-4(fp)
}
  80a65c:	e037883a 	mov	sp,fp
  80a660:	dfc00117 	ldw	ra,4(sp)
  80a664:	df000017 	ldw	fp,0(sp)
  80a668:	dec00204 	addi	sp,sp,8
  80a66c:	f800283a 	ret

0080a670 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80a670:	deffef04 	addi	sp,sp,-68
  80a674:	df001015 	stw	fp,64(sp)
  80a678:	df001004 	addi	fp,sp,64
  80a67c:	e13ffc15 	stw	r4,-16(fp)
  80a680:	e17ffd15 	stw	r5,-12(fp)
  80a684:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80a688:	00bffa84 	movi	r2,-22
  80a68c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80a690:	e0bffc17 	ldw	r2,-16(fp)
  80a694:	10800828 	cmpgeui	r2,r2,32
  80a698:	1000601e 	bne	r2,zero,80a81c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a69c:	0005303a 	rdctl	r2,status
  80a6a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a6a4:	e0fff917 	ldw	r3,-28(fp)
  80a6a8:	00bfff84 	movi	r2,-2
  80a6ac:	1884703a 	and	r2,r3,r2
  80a6b0:	1001703a 	wrctl	status,r2
  
  return context;
  80a6b4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80a6b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80a6bc:	e0bffc17 	ldw	r2,-16(fp)
  80a6c0:	00c02074 	movhi	r3,129
  80a6c4:	18cb0b04 	addi	r3,r3,11308
  80a6c8:	100490fa 	slli	r2,r2,3
  80a6cc:	10c7883a 	add	r3,r2,r3
  80a6d0:	e0bffe17 	ldw	r2,-8(fp)
  80a6d4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80a6d8:	e0bffc17 	ldw	r2,-16(fp)
  80a6dc:	00c02074 	movhi	r3,129
  80a6e0:	18cb0b04 	addi	r3,r3,11308
  80a6e4:	100490fa 	slli	r2,r2,3
  80a6e8:	10c5883a 	add	r2,r2,r3
  80a6ec:	10c00104 	addi	r3,r2,4
  80a6f0:	e0bffd17 	ldw	r2,-12(fp)
  80a6f4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80a6f8:	e0bffe17 	ldw	r2,-8(fp)
  80a6fc:	1005003a 	cmpeq	r2,r2,zero
  80a700:	1000201e 	bne	r2,zero,80a784 <alt_irq_register+0x114>
  80a704:	e0bffc17 	ldw	r2,-16(fp)
  80a708:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a70c:	0005303a 	rdctl	r2,status
  80a710:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a714:	e0fff617 	ldw	r3,-40(fp)
  80a718:	00bfff84 	movi	r2,-2
  80a71c:	1884703a 	and	r2,r3,r2
  80a720:	1001703a 	wrctl	status,r2
  
  return context;
  80a724:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80a728:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80a72c:	e0fff717 	ldw	r3,-36(fp)
  80a730:	00800044 	movi	r2,1
  80a734:	10c4983a 	sll	r2,r2,r3
  80a738:	1007883a 	mov	r3,r2
  80a73c:	00802074 	movhi	r2,129
  80a740:	108a7404 	addi	r2,r2,10704
  80a744:	10800017 	ldw	r2,0(r2)
  80a748:	1886b03a 	or	r3,r3,r2
  80a74c:	00802074 	movhi	r2,129
  80a750:	108a7404 	addi	r2,r2,10704
  80a754:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80a758:	00802074 	movhi	r2,129
  80a75c:	108a7404 	addi	r2,r2,10704
  80a760:	10800017 	ldw	r2,0(r2)
  80a764:	100170fa 	wrctl	ienable,r2
  80a768:	e0bff817 	ldw	r2,-32(fp)
  80a76c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a770:	e0bff517 	ldw	r2,-44(fp)
  80a774:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80a778:	0005883a 	mov	r2,zero
  80a77c:	e0bfff15 	stw	r2,-4(fp)
  80a780:	00002006 	br	80a804 <alt_irq_register+0x194>
  80a784:	e0bffc17 	ldw	r2,-16(fp)
  80a788:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a78c:	0005303a 	rdctl	r2,status
  80a790:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a794:	e0fff217 	ldw	r3,-56(fp)
  80a798:	00bfff84 	movi	r2,-2
  80a79c:	1884703a 	and	r2,r3,r2
  80a7a0:	1001703a 	wrctl	status,r2
  
  return context;
  80a7a4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80a7a8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80a7ac:	e0fff317 	ldw	r3,-52(fp)
  80a7b0:	00800044 	movi	r2,1
  80a7b4:	10c4983a 	sll	r2,r2,r3
  80a7b8:	0084303a 	nor	r2,zero,r2
  80a7bc:	1007883a 	mov	r3,r2
  80a7c0:	00802074 	movhi	r2,129
  80a7c4:	108a7404 	addi	r2,r2,10704
  80a7c8:	10800017 	ldw	r2,0(r2)
  80a7cc:	1886703a 	and	r3,r3,r2
  80a7d0:	00802074 	movhi	r2,129
  80a7d4:	108a7404 	addi	r2,r2,10704
  80a7d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80a7dc:	00802074 	movhi	r2,129
  80a7e0:	108a7404 	addi	r2,r2,10704
  80a7e4:	10800017 	ldw	r2,0(r2)
  80a7e8:	100170fa 	wrctl	ienable,r2
  80a7ec:	e0bff417 	ldw	r2,-48(fp)
  80a7f0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a7f4:	e0bff117 	ldw	r2,-60(fp)
  80a7f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80a7fc:	0005883a 	mov	r2,zero
  80a800:	e0bfff15 	stw	r2,-4(fp)
  80a804:	e0bfff17 	ldw	r2,-4(fp)
  80a808:	e0bffb15 	stw	r2,-20(fp)
  80a80c:	e0bffa17 	ldw	r2,-24(fp)
  80a810:	e0bff015 	stw	r2,-64(fp)
  80a814:	e0bff017 	ldw	r2,-64(fp)
  80a818:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80a81c:	e0bffb17 	ldw	r2,-20(fp)
}
  80a820:	e037883a 	mov	sp,fp
  80a824:	df000017 	ldw	fp,0(sp)
  80a828:	dec00104 	addi	sp,sp,4
  80a82c:	f800283a 	ret

0080a830 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a830:	deffeb04 	addi	sp,sp,-84
  80a834:	dfc01415 	stw	ra,80(sp)
  80a838:	df001315 	stw	fp,76(sp)
  80a83c:	df001304 	addi	fp,sp,76
  80a840:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a844:	e0bffd17 	ldw	r2,-12(fp)
  80a848:	1004803a 	cmplt	r2,r2,zero
  80a84c:	1000081e 	bne	r2,zero,80a870 <isatty+0x40>
  80a850:	e0bffd17 	ldw	r2,-12(fp)
  80a854:	10800324 	muli	r2,r2,12
  80a858:	1007883a 	mov	r3,r2
  80a85c:	00802074 	movhi	r2,129
  80a860:	10be5404 	addi	r2,r2,-1712
  80a864:	1887883a 	add	r3,r3,r2
  80a868:	e0ffff15 	stw	r3,-4(fp)
  80a86c:	00000106 	br	80a874 <isatty+0x44>
  80a870:	e03fff15 	stw	zero,-4(fp)
  80a874:	e0bfff17 	ldw	r2,-4(fp)
  80a878:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a87c:	e0bfed17 	ldw	r2,-76(fp)
  80a880:	1005003a 	cmpeq	r2,r2,zero
  80a884:	10000f1e 	bne	r2,zero,80a8c4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a888:	e0bfed17 	ldw	r2,-76(fp)
  80a88c:	10800017 	ldw	r2,0(r2)
  80a890:	10800817 	ldw	r2,32(r2)
  80a894:	1004c03a 	cmpne	r2,r2,zero
  80a898:	1000031e 	bne	r2,zero,80a8a8 <isatty+0x78>
    {
      return 1;
  80a89c:	00800044 	movi	r2,1
  80a8a0:	e0bffe15 	stw	r2,-8(fp)
  80a8a4:	00000c06 	br	80a8d8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a8a8:	e17fee04 	addi	r5,fp,-72
  80a8ac:	e13ffd17 	ldw	r4,-12(fp)
  80a8b0:	080a53c0 	call	80a53c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a8b4:	e0bfef17 	ldw	r2,-68(fp)
  80a8b8:	10880020 	cmpeqi	r2,r2,8192
  80a8bc:	e0bffe15 	stw	r2,-8(fp)
  80a8c0:	00000506 	br	80a8d8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a8c4:	080a8f00 	call	80a8f0 <alt_get_errno>
  80a8c8:	1007883a 	mov	r3,r2
  80a8cc:	00801444 	movi	r2,81
  80a8d0:	18800015 	stw	r2,0(r3)
    return 0;
  80a8d4:	e03ffe15 	stw	zero,-8(fp)
  80a8d8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a8dc:	e037883a 	mov	sp,fp
  80a8e0:	dfc00117 	ldw	ra,4(sp)
  80a8e4:	df000017 	ldw	fp,0(sp)
  80a8e8:	dec00204 	addi	sp,sp,8
  80a8ec:	f800283a 	ret

0080a8f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a8f0:	defffd04 	addi	sp,sp,-12
  80a8f4:	dfc00215 	stw	ra,8(sp)
  80a8f8:	df000115 	stw	fp,4(sp)
  80a8fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a900:	00802074 	movhi	r2,129
  80a904:	10835004 	addi	r2,r2,3392
  80a908:	10800017 	ldw	r2,0(r2)
  80a90c:	1005003a 	cmpeq	r2,r2,zero
  80a910:	1000061e 	bne	r2,zero,80a92c <alt_get_errno+0x3c>
  80a914:	00802074 	movhi	r2,129
  80a918:	10835004 	addi	r2,r2,3392
  80a91c:	10800017 	ldw	r2,0(r2)
  80a920:	103ee83a 	callr	r2
  80a924:	e0bfff15 	stw	r2,-4(fp)
  80a928:	00000306 	br	80a938 <alt_get_errno+0x48>
  80a92c:	00802074 	movhi	r2,129
  80a930:	108a6d04 	addi	r2,r2,10676
  80a934:	e0bfff15 	stw	r2,-4(fp)
  80a938:	e0bfff17 	ldw	r2,-4(fp)
}
  80a93c:	e037883a 	mov	sp,fp
  80a940:	dfc00117 	ldw	ra,4(sp)
  80a944:	df000017 	ldw	fp,0(sp)
  80a948:	dec00204 	addi	sp,sp,8
  80a94c:	f800283a 	ret

0080a950 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a950:	defffe04 	addi	sp,sp,-8
  80a954:	dfc00115 	stw	ra,4(sp)
  80a958:	df000015 	stw	fp,0(sp)
  80a95c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a960:	01002074 	movhi	r4,129
  80a964:	21035704 	addi	r4,r4,3420
  80a968:	01402074 	movhi	r5,129
  80a96c:	297c4504 	addi	r5,r5,-3820
  80a970:	01802074 	movhi	r6,129
  80a974:	31835704 	addi	r6,r6,3420
  80a978:	080a9d00 	call	80a9d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a97c:	01002034 	movhi	r4,128
  80a980:	21000804 	addi	r4,r4,32
  80a984:	01402034 	movhi	r5,128
  80a988:	29400804 	addi	r5,r5,32
  80a98c:	01802034 	movhi	r6,128
  80a990:	31806d04 	addi	r6,r6,436
  80a994:	080a9d00 	call	80a9d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a998:	01002074 	movhi	r4,129
  80a99c:	213abb04 	addi	r4,r4,-5396
  80a9a0:	01402074 	movhi	r5,129
  80a9a4:	297abb04 	addi	r5,r5,-5396
  80a9a8:	01802074 	movhi	r6,129
  80a9ac:	31bc4504 	addi	r6,r6,-3820
  80a9b0:	080a9d00 	call	80a9d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a9b4:	080db840 	call	80db84 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a9b8:	080dfe80 	call	80dfe8 <alt_icache_flush_all>
}
  80a9bc:	e037883a 	mov	sp,fp
  80a9c0:	dfc00117 	ldw	ra,4(sp)
  80a9c4:	df000017 	ldw	fp,0(sp)
  80a9c8:	dec00204 	addi	sp,sp,8
  80a9cc:	f800283a 	ret

0080a9d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a9d0:	defffc04 	addi	sp,sp,-16
  80a9d4:	df000315 	stw	fp,12(sp)
  80a9d8:	df000304 	addi	fp,sp,12
  80a9dc:	e13ffd15 	stw	r4,-12(fp)
  80a9e0:	e17ffe15 	stw	r5,-8(fp)
  80a9e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a9e8:	e0fffe17 	ldw	r3,-8(fp)
  80a9ec:	e0bffd17 	ldw	r2,-12(fp)
  80a9f0:	18800e26 	beq	r3,r2,80aa2c <alt_load_section+0x5c>
  {
    while( to != end )
  80a9f4:	00000a06 	br	80aa20 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a9f8:	e0bffd17 	ldw	r2,-12(fp)
  80a9fc:	10c00017 	ldw	r3,0(r2)
  80aa00:	e0bffe17 	ldw	r2,-8(fp)
  80aa04:	10c00015 	stw	r3,0(r2)
  80aa08:	e0bffe17 	ldw	r2,-8(fp)
  80aa0c:	10800104 	addi	r2,r2,4
  80aa10:	e0bffe15 	stw	r2,-8(fp)
  80aa14:	e0bffd17 	ldw	r2,-12(fp)
  80aa18:	10800104 	addi	r2,r2,4
  80aa1c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80aa20:	e0fffe17 	ldw	r3,-8(fp)
  80aa24:	e0bfff17 	ldw	r2,-4(fp)
  80aa28:	18bff31e 	bne	r3,r2,80a9f8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80aa2c:	e037883a 	mov	sp,fp
  80aa30:	df000017 	ldw	fp,0(sp)
  80aa34:	dec00104 	addi	sp,sp,4
  80aa38:	f800283a 	ret

0080aa3c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80aa3c:	defff804 	addi	sp,sp,-32
  80aa40:	dfc00715 	stw	ra,28(sp)
  80aa44:	df000615 	stw	fp,24(sp)
  80aa48:	df000604 	addi	fp,sp,24
  80aa4c:	e13ffc15 	stw	r4,-16(fp)
  80aa50:	e17ffd15 	stw	r5,-12(fp)
  80aa54:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80aa58:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aa5c:	e0bffc17 	ldw	r2,-16(fp)
  80aa60:	1004803a 	cmplt	r2,r2,zero
  80aa64:	1000081e 	bne	r2,zero,80aa88 <lseek+0x4c>
  80aa68:	e0bffc17 	ldw	r2,-16(fp)
  80aa6c:	10800324 	muli	r2,r2,12
  80aa70:	1007883a 	mov	r3,r2
  80aa74:	00802074 	movhi	r2,129
  80aa78:	10be5404 	addi	r2,r2,-1712
  80aa7c:	1887883a 	add	r3,r3,r2
  80aa80:	e0ffff15 	stw	r3,-4(fp)
  80aa84:	00000106 	br	80aa8c <lseek+0x50>
  80aa88:	e03fff15 	stw	zero,-4(fp)
  80aa8c:	e0bfff17 	ldw	r2,-4(fp)
  80aa90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80aa94:	e0bffb17 	ldw	r2,-20(fp)
  80aa98:	1005003a 	cmpeq	r2,r2,zero
  80aa9c:	1000111e 	bne	r2,zero,80aae4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80aaa0:	e0bffb17 	ldw	r2,-20(fp)
  80aaa4:	10800017 	ldw	r2,0(r2)
  80aaa8:	10800717 	ldw	r2,28(r2)
  80aaac:	1005003a 	cmpeq	r2,r2,zero
  80aab0:	1000091e 	bne	r2,zero,80aad8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80aab4:	e0bffb17 	ldw	r2,-20(fp)
  80aab8:	10800017 	ldw	r2,0(r2)
  80aabc:	10800717 	ldw	r2,28(r2)
  80aac0:	e13ffb17 	ldw	r4,-20(fp)
  80aac4:	e17ffd17 	ldw	r5,-12(fp)
  80aac8:	e1bffe17 	ldw	r6,-8(fp)
  80aacc:	103ee83a 	callr	r2
  80aad0:	e0bffa15 	stw	r2,-24(fp)
  80aad4:	00000506 	br	80aaec <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80aad8:	00bfde84 	movi	r2,-134
  80aadc:	e0bffa15 	stw	r2,-24(fp)
  80aae0:	00000206 	br	80aaec <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80aae4:	00bfebc4 	movi	r2,-81
  80aae8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80aaec:	e0bffa17 	ldw	r2,-24(fp)
  80aaf0:	1004403a 	cmpge	r2,r2,zero
  80aaf4:	1000071e 	bne	r2,zero,80ab14 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80aaf8:	080ab2c0 	call	80ab2c <alt_get_errno>
  80aafc:	1007883a 	mov	r3,r2
  80ab00:	e0bffa17 	ldw	r2,-24(fp)
  80ab04:	0085c83a 	sub	r2,zero,r2
  80ab08:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ab0c:	00bfffc4 	movi	r2,-1
  80ab10:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ab14:	e0bffa17 	ldw	r2,-24(fp)
}
  80ab18:	e037883a 	mov	sp,fp
  80ab1c:	dfc00117 	ldw	ra,4(sp)
  80ab20:	df000017 	ldw	fp,0(sp)
  80ab24:	dec00204 	addi	sp,sp,8
  80ab28:	f800283a 	ret

0080ab2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab2c:	defffd04 	addi	sp,sp,-12
  80ab30:	dfc00215 	stw	ra,8(sp)
  80ab34:	df000115 	stw	fp,4(sp)
  80ab38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ab3c:	00802074 	movhi	r2,129
  80ab40:	10835004 	addi	r2,r2,3392
  80ab44:	10800017 	ldw	r2,0(r2)
  80ab48:	1005003a 	cmpeq	r2,r2,zero
  80ab4c:	1000061e 	bne	r2,zero,80ab68 <alt_get_errno+0x3c>
  80ab50:	00802074 	movhi	r2,129
  80ab54:	10835004 	addi	r2,r2,3392
  80ab58:	10800017 	ldw	r2,0(r2)
  80ab5c:	103ee83a 	callr	r2
  80ab60:	e0bfff15 	stw	r2,-4(fp)
  80ab64:	00000306 	br	80ab74 <alt_get_errno+0x48>
  80ab68:	00802074 	movhi	r2,129
  80ab6c:	108a6d04 	addi	r2,r2,10676
  80ab70:	e0bfff15 	stw	r2,-4(fp)
  80ab74:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab78:	e037883a 	mov	sp,fp
  80ab7c:	dfc00117 	ldw	ra,4(sp)
  80ab80:	df000017 	ldw	fp,0(sp)
  80ab84:	dec00204 	addi	sp,sp,8
  80ab88:	f800283a 	ret

0080ab8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ab8c:	defffd04 	addi	sp,sp,-12
  80ab90:	dfc00215 	stw	ra,8(sp)
  80ab94:	df000115 	stw	fp,4(sp)
  80ab98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ab9c:	0009883a 	mov	r4,zero
  80aba0:	080b3480 	call	80b348 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80aba4:	080b37c0 	call	80b37c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80aba8:	01002074 	movhi	r4,129
  80abac:	213b8f04 	addi	r4,r4,-4548
  80abb0:	01402074 	movhi	r5,129
  80abb4:	297b9404 	addi	r5,r5,-4528
  80abb8:	01802074 	movhi	r6,129
  80abbc:	31bb8f04 	addi	r6,r6,-4548
  80abc0:	080e3a80 	call	80e3a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80abc4:	080dcb40 	call	80dcb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80abc8:	01002074 	movhi	r4,129
  80abcc:	21374604 	addi	r4,r4,-8936
  80abd0:	080e6740 	call	80e674 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80abd4:	d1273017 	ldw	r4,-25408(gp)
  80abd8:	d1673117 	ldw	r5,-25404(gp)
  80abdc:	d1a73217 	ldw	r6,-25400(gp)
  80abe0:	080035c0 	call	80035c <main>
  80abe4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80abe8:	01000044 	movi	r4,1
  80abec:	080a3b40 	call	80a3b4 <close>
  exit (result);
  80abf0:	e13fff17 	ldw	r4,-4(fp)
  80abf4:	080e6880 	call	80e688 <exit>

0080abf8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80abf8:	defffe04 	addi	sp,sp,-8
  80abfc:	df000115 	stw	fp,4(sp)
  80ac00:	df000104 	addi	fp,sp,4
  80ac04:	e13fff15 	stw	r4,-4(fp)
}
  80ac08:	e037883a 	mov	sp,fp
  80ac0c:	df000017 	ldw	fp,0(sp)
  80ac10:	dec00104 	addi	sp,sp,4
  80ac14:	f800283a 	ret

0080ac18 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ac18:	defffe04 	addi	sp,sp,-8
  80ac1c:	df000115 	stw	fp,4(sp)
  80ac20:	df000104 	addi	fp,sp,4
  80ac24:	e13fff15 	stw	r4,-4(fp)
}
  80ac28:	e037883a 	mov	sp,fp
  80ac2c:	df000017 	ldw	fp,0(sp)
  80ac30:	dec00104 	addi	sp,sp,4
  80ac34:	f800283a 	ret

0080ac38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80ac38:	defffc04 	addi	sp,sp,-16
  80ac3c:	df000315 	stw	fp,12(sp)
  80ac40:	df000304 	addi	fp,sp,12
  80ac44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80ac48:	e0bffe17 	ldw	r2,-8(fp)
  80ac4c:	10800217 	ldw	r2,8(r2)
  80ac50:	10d00034 	orhi	r3,r2,16384
  80ac54:	e0bffe17 	ldw	r2,-8(fp)
  80ac58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ac5c:	e03ffd15 	stw	zero,-12(fp)
  80ac60:	00002006 	br	80ace4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80ac64:	e0bffd17 	ldw	r2,-12(fp)
  80ac68:	00c02074 	movhi	r3,129
  80ac6c:	18fe5404 	addi	r3,r3,-1712
  80ac70:	10800324 	muli	r2,r2,12
  80ac74:	10c5883a 	add	r2,r2,r3
  80ac78:	10c00017 	ldw	r3,0(r2)
  80ac7c:	e0bffe17 	ldw	r2,-8(fp)
  80ac80:	10800017 	ldw	r2,0(r2)
  80ac84:	1880141e 	bne	r3,r2,80acd8 <alt_file_locked+0xa0>
  80ac88:	e0bffd17 	ldw	r2,-12(fp)
  80ac8c:	00c02074 	movhi	r3,129
  80ac90:	18fe5404 	addi	r3,r3,-1712
  80ac94:	10800324 	muli	r2,r2,12
  80ac98:	10c5883a 	add	r2,r2,r3
  80ac9c:	10800204 	addi	r2,r2,8
  80aca0:	10800017 	ldw	r2,0(r2)
  80aca4:	1004403a 	cmpge	r2,r2,zero
  80aca8:	10000b1e 	bne	r2,zero,80acd8 <alt_file_locked+0xa0>
  80acac:	e0bffd17 	ldw	r2,-12(fp)
  80acb0:	10800324 	muli	r2,r2,12
  80acb4:	1007883a 	mov	r3,r2
  80acb8:	00802074 	movhi	r2,129
  80acbc:	10be5404 	addi	r2,r2,-1712
  80acc0:	1887883a 	add	r3,r3,r2
  80acc4:	e0bffe17 	ldw	r2,-8(fp)
  80acc8:	18800326 	beq	r3,r2,80acd8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80accc:	00bffcc4 	movi	r2,-13
  80acd0:	e0bfff15 	stw	r2,-4(fp)
  80acd4:	00000a06 	br	80ad00 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80acd8:	e0bffd17 	ldw	r2,-12(fp)
  80acdc:	10800044 	addi	r2,r2,1
  80ace0:	e0bffd15 	stw	r2,-12(fp)
  80ace4:	00802074 	movhi	r2,129
  80ace8:	10834f04 	addi	r2,r2,3388
  80acec:	10800017 	ldw	r2,0(r2)
  80acf0:	1007883a 	mov	r3,r2
  80acf4:	e0bffd17 	ldw	r2,-12(fp)
  80acf8:	18bfda2e 	bgeu	r3,r2,80ac64 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80acfc:	e03fff15 	stw	zero,-4(fp)
  80ad00:	e0bfff17 	ldw	r2,-4(fp)
}
  80ad04:	e037883a 	mov	sp,fp
  80ad08:	df000017 	ldw	fp,0(sp)
  80ad0c:	dec00104 	addi	sp,sp,4
  80ad10:	f800283a 	ret

0080ad14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80ad14:	defff404 	addi	sp,sp,-48
  80ad18:	dfc00b15 	stw	ra,44(sp)
  80ad1c:	df000a15 	stw	fp,40(sp)
  80ad20:	df000a04 	addi	fp,sp,40
  80ad24:	e13ffb15 	stw	r4,-20(fp)
  80ad28:	e17ffc15 	stw	r5,-16(fp)
  80ad2c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80ad30:	00bfffc4 	movi	r2,-1
  80ad34:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80ad38:	00bffb44 	movi	r2,-19
  80ad3c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80ad40:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80ad44:	e13ffb17 	ldw	r4,-20(fp)
  80ad48:	01402074 	movhi	r5,129
  80ad4c:	29434d04 	addi	r5,r5,3380
  80ad50:	080dd7c0 	call	80dd7c <alt_find_dev>
  80ad54:	e0bffa15 	stw	r2,-24(fp)
  80ad58:	e0bffa17 	ldw	r2,-24(fp)
  80ad5c:	1004c03a 	cmpne	r2,r2,zero
  80ad60:	1000051e 	bne	r2,zero,80ad78 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80ad64:	e13ffb17 	ldw	r4,-20(fp)
  80ad68:	080de100 	call	80de10 <alt_find_file>
  80ad6c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80ad70:	00800044 	movi	r2,1
  80ad74:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80ad78:	e0bffa17 	ldw	r2,-24(fp)
  80ad7c:	1005003a 	cmpeq	r2,r2,zero
  80ad80:	1000301e 	bne	r2,zero,80ae44 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80ad84:	e13ffa17 	ldw	r4,-24(fp)
  80ad88:	080df300 	call	80df30 <alt_get_fd>
  80ad8c:	e0bff815 	stw	r2,-32(fp)
  80ad90:	e0bff817 	ldw	r2,-32(fp)
  80ad94:	1004403a 	cmpge	r2,r2,zero
  80ad98:	1000031e 	bne	r2,zero,80ada8 <open+0x94>
    {
      status = index;
  80ad9c:	e0bff817 	ldw	r2,-32(fp)
  80ada0:	e0bff715 	stw	r2,-36(fp)
  80ada4:	00002906 	br	80ae4c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80ada8:	e0bff817 	ldw	r2,-32(fp)
  80adac:	10800324 	muli	r2,r2,12
  80adb0:	1007883a 	mov	r3,r2
  80adb4:	00802074 	movhi	r2,129
  80adb8:	10be5404 	addi	r2,r2,-1712
  80adbc:	1885883a 	add	r2,r3,r2
  80adc0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80adc4:	e0fffc17 	ldw	r3,-16(fp)
  80adc8:	00900034 	movhi	r2,16384
  80adcc:	10bfffc4 	addi	r2,r2,-1
  80add0:	1886703a 	and	r3,r3,r2
  80add4:	e0bff917 	ldw	r2,-28(fp)
  80add8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80addc:	e0bff617 	ldw	r2,-40(fp)
  80ade0:	1004c03a 	cmpne	r2,r2,zero
  80ade4:	1000061e 	bne	r2,zero,80ae00 <open+0xec>
  80ade8:	e13ff917 	ldw	r4,-28(fp)
  80adec:	080ac380 	call	80ac38 <alt_file_locked>
  80adf0:	e0bff715 	stw	r2,-36(fp)
  80adf4:	e0bff717 	ldw	r2,-36(fp)
  80adf8:	1004803a 	cmplt	r2,r2,zero
  80adfc:	1000131e 	bne	r2,zero,80ae4c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80ae00:	e0bffa17 	ldw	r2,-24(fp)
  80ae04:	10800317 	ldw	r2,12(r2)
  80ae08:	1005003a 	cmpeq	r2,r2,zero
  80ae0c:	1000091e 	bne	r2,zero,80ae34 <open+0x120>
  80ae10:	e0bffa17 	ldw	r2,-24(fp)
  80ae14:	10800317 	ldw	r2,12(r2)
  80ae18:	e13ff917 	ldw	r4,-28(fp)
  80ae1c:	e17ffb17 	ldw	r5,-20(fp)
  80ae20:	e1bffc17 	ldw	r6,-16(fp)
  80ae24:	e1fffd17 	ldw	r7,-12(fp)
  80ae28:	103ee83a 	callr	r2
  80ae2c:	e0bfff15 	stw	r2,-4(fp)
  80ae30:	00000106 	br	80ae38 <open+0x124>
  80ae34:	e03fff15 	stw	zero,-4(fp)
  80ae38:	e0bfff17 	ldw	r2,-4(fp)
  80ae3c:	e0bff715 	stw	r2,-36(fp)
  80ae40:	00000206 	br	80ae4c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80ae44:	00bffb44 	movi	r2,-19
  80ae48:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80ae4c:	e0bff717 	ldw	r2,-36(fp)
  80ae50:	1004403a 	cmpge	r2,r2,zero
  80ae54:	1000091e 	bne	r2,zero,80ae7c <open+0x168>
  {
    alt_release_fd (index);  
  80ae58:	e13ff817 	ldw	r4,-32(fp)
  80ae5c:	080b07c0 	call	80b07c <alt_release_fd>
    ALT_ERRNO = -status;
  80ae60:	080ae9c0 	call	80ae9c <alt_get_errno>
  80ae64:	e0fff717 	ldw	r3,-36(fp)
  80ae68:	00c7c83a 	sub	r3,zero,r3
  80ae6c:	10c00015 	stw	r3,0(r2)
    return -1;
  80ae70:	00bfffc4 	movi	r2,-1
  80ae74:	e0bffe15 	stw	r2,-8(fp)
  80ae78:	00000206 	br	80ae84 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80ae7c:	e0bff817 	ldw	r2,-32(fp)
  80ae80:	e0bffe15 	stw	r2,-8(fp)
  80ae84:	e0bffe17 	ldw	r2,-8(fp)
}
  80ae88:	e037883a 	mov	sp,fp
  80ae8c:	dfc00117 	ldw	ra,4(sp)
  80ae90:	df000017 	ldw	fp,0(sp)
  80ae94:	dec00204 	addi	sp,sp,8
  80ae98:	f800283a 	ret

0080ae9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ae9c:	defffd04 	addi	sp,sp,-12
  80aea0:	dfc00215 	stw	ra,8(sp)
  80aea4:	df000115 	stw	fp,4(sp)
  80aea8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80aeac:	00802074 	movhi	r2,129
  80aeb0:	10835004 	addi	r2,r2,3392
  80aeb4:	10800017 	ldw	r2,0(r2)
  80aeb8:	1005003a 	cmpeq	r2,r2,zero
  80aebc:	1000061e 	bne	r2,zero,80aed8 <alt_get_errno+0x3c>
  80aec0:	00802074 	movhi	r2,129
  80aec4:	10835004 	addi	r2,r2,3392
  80aec8:	10800017 	ldw	r2,0(r2)
  80aecc:	103ee83a 	callr	r2
  80aed0:	e0bfff15 	stw	r2,-4(fp)
  80aed4:	00000306 	br	80aee4 <alt_get_errno+0x48>
  80aed8:	00802074 	movhi	r2,129
  80aedc:	108a6d04 	addi	r2,r2,10676
  80aee0:	e0bfff15 	stw	r2,-4(fp)
  80aee4:	e0bfff17 	ldw	r2,-4(fp)
}
  80aee8:	e037883a 	mov	sp,fp
  80aeec:	dfc00117 	ldw	ra,4(sp)
  80aef0:	df000017 	ldw	fp,0(sp)
  80aef4:	dec00204 	addi	sp,sp,8
  80aef8:	f800283a 	ret

0080aefc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80aefc:	defff704 	addi	sp,sp,-36
  80af00:	dfc00815 	stw	ra,32(sp)
  80af04:	df000715 	stw	fp,28(sp)
  80af08:	df000704 	addi	fp,sp,28
  80af0c:	e13ffb15 	stw	r4,-20(fp)
  80af10:	e17ffc15 	stw	r5,-16(fp)
  80af14:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80af18:	e0bffb17 	ldw	r2,-20(fp)
  80af1c:	1004803a 	cmplt	r2,r2,zero
  80af20:	1000081e 	bne	r2,zero,80af44 <read+0x48>
  80af24:	e0bffb17 	ldw	r2,-20(fp)
  80af28:	10800324 	muli	r2,r2,12
  80af2c:	1007883a 	mov	r3,r2
  80af30:	00802074 	movhi	r2,129
  80af34:	10be5404 	addi	r2,r2,-1712
  80af38:	1887883a 	add	r3,r3,r2
  80af3c:	e0ffff15 	stw	r3,-4(fp)
  80af40:	00000106 	br	80af48 <read+0x4c>
  80af44:	e03fff15 	stw	zero,-4(fp)
  80af48:	e0bfff17 	ldw	r2,-4(fp)
  80af4c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80af50:	e0bffa17 	ldw	r2,-24(fp)
  80af54:	1005003a 	cmpeq	r2,r2,zero
  80af58:	1000241e 	bne	r2,zero,80afec <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80af5c:	e0bffa17 	ldw	r2,-24(fp)
  80af60:	10800217 	ldw	r2,8(r2)
  80af64:	108000cc 	andi	r2,r2,3
  80af68:	10800060 	cmpeqi	r2,r2,1
  80af6c:	10001a1e 	bne	r2,zero,80afd8 <read+0xdc>
  80af70:	e0bffa17 	ldw	r2,-24(fp)
  80af74:	10800017 	ldw	r2,0(r2)
  80af78:	10800517 	ldw	r2,20(r2)
  80af7c:	1005003a 	cmpeq	r2,r2,zero
  80af80:	1000151e 	bne	r2,zero,80afd8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80af84:	e0bffa17 	ldw	r2,-24(fp)
  80af88:	10800017 	ldw	r2,0(r2)
  80af8c:	10800517 	ldw	r2,20(r2)
  80af90:	e17ffc17 	ldw	r5,-16(fp)
  80af94:	e1bffd17 	ldw	r6,-12(fp)
  80af98:	e13ffa17 	ldw	r4,-24(fp)
  80af9c:	103ee83a 	callr	r2
  80afa0:	e0bff915 	stw	r2,-28(fp)
  80afa4:	e0bff917 	ldw	r2,-28(fp)
  80afa8:	1004403a 	cmpge	r2,r2,zero
  80afac:	1000071e 	bne	r2,zero,80afcc <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80afb0:	080b01c0 	call	80b01c <alt_get_errno>
  80afb4:	e0fff917 	ldw	r3,-28(fp)
  80afb8:	00c7c83a 	sub	r3,zero,r3
  80afbc:	10c00015 	stw	r3,0(r2)
          return -1;
  80afc0:	00bfffc4 	movi	r2,-1
  80afc4:	e0bffe15 	stw	r2,-8(fp)
  80afc8:	00000e06 	br	80b004 <read+0x108>
        }
        return rval;
  80afcc:	e0bff917 	ldw	r2,-28(fp)
  80afd0:	e0bffe15 	stw	r2,-8(fp)
  80afd4:	00000b06 	br	80b004 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80afd8:	080b01c0 	call	80b01c <alt_get_errno>
  80afdc:	1007883a 	mov	r3,r2
  80afe0:	00800344 	movi	r2,13
  80afe4:	18800015 	stw	r2,0(r3)
  80afe8:	00000406 	br	80affc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80afec:	080b01c0 	call	80b01c <alt_get_errno>
  80aff0:	1007883a 	mov	r3,r2
  80aff4:	00801444 	movi	r2,81
  80aff8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80affc:	00bfffc4 	movi	r2,-1
  80b000:	e0bffe15 	stw	r2,-8(fp)
  80b004:	e0bffe17 	ldw	r2,-8(fp)
}
  80b008:	e037883a 	mov	sp,fp
  80b00c:	dfc00117 	ldw	ra,4(sp)
  80b010:	df000017 	ldw	fp,0(sp)
  80b014:	dec00204 	addi	sp,sp,8
  80b018:	f800283a 	ret

0080b01c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b01c:	defffd04 	addi	sp,sp,-12
  80b020:	dfc00215 	stw	ra,8(sp)
  80b024:	df000115 	stw	fp,4(sp)
  80b028:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b02c:	00802074 	movhi	r2,129
  80b030:	10835004 	addi	r2,r2,3392
  80b034:	10800017 	ldw	r2,0(r2)
  80b038:	1005003a 	cmpeq	r2,r2,zero
  80b03c:	1000061e 	bne	r2,zero,80b058 <alt_get_errno+0x3c>
  80b040:	00802074 	movhi	r2,129
  80b044:	10835004 	addi	r2,r2,3392
  80b048:	10800017 	ldw	r2,0(r2)
  80b04c:	103ee83a 	callr	r2
  80b050:	e0bfff15 	stw	r2,-4(fp)
  80b054:	00000306 	br	80b064 <alt_get_errno+0x48>
  80b058:	00802074 	movhi	r2,129
  80b05c:	108a6d04 	addi	r2,r2,10676
  80b060:	e0bfff15 	stw	r2,-4(fp)
  80b064:	e0bfff17 	ldw	r2,-4(fp)
}
  80b068:	e037883a 	mov	sp,fp
  80b06c:	dfc00117 	ldw	ra,4(sp)
  80b070:	df000017 	ldw	fp,0(sp)
  80b074:	dec00204 	addi	sp,sp,8
  80b078:	f800283a 	ret

0080b07c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b07c:	defffe04 	addi	sp,sp,-8
  80b080:	df000115 	stw	fp,4(sp)
  80b084:	df000104 	addi	fp,sp,4
  80b088:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b08c:	e0bfff17 	ldw	r2,-4(fp)
  80b090:	108000d0 	cmplti	r2,r2,3
  80b094:	10000d1e 	bne	r2,zero,80b0cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b098:	e0bfff17 	ldw	r2,-4(fp)
  80b09c:	00c02074 	movhi	r3,129
  80b0a0:	18fe5404 	addi	r3,r3,-1712
  80b0a4:	10800324 	muli	r2,r2,12
  80b0a8:	10c5883a 	add	r2,r2,r3
  80b0ac:	10800204 	addi	r2,r2,8
  80b0b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b0b4:	e0bfff17 	ldw	r2,-4(fp)
  80b0b8:	00c02074 	movhi	r3,129
  80b0bc:	18fe5404 	addi	r3,r3,-1712
  80b0c0:	10800324 	muli	r2,r2,12
  80b0c4:	10c5883a 	add	r2,r2,r3
  80b0c8:	10000015 	stw	zero,0(r2)
  }
}
  80b0cc:	e037883a 	mov	sp,fp
  80b0d0:	df000017 	ldw	fp,0(sp)
  80b0d4:	dec00104 	addi	sp,sp,4
  80b0d8:	f800283a 	ret

0080b0dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b0dc:	defff804 	addi	sp,sp,-32
  80b0e0:	df000715 	stw	fp,28(sp)
  80b0e4:	df000704 	addi	fp,sp,28
  80b0e8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b0ec:	0005303a 	rdctl	r2,status
  80b0f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b0f4:	e0fffb17 	ldw	r3,-20(fp)
  80b0f8:	00bfff84 	movi	r2,-2
  80b0fc:	1884703a 	and	r2,r3,r2
  80b100:	1001703a 	wrctl	status,r2
  
  return context;
  80b104:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b108:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b10c:	d0a00d17 	ldw	r2,-32716(gp)
  80b110:	10c000c4 	addi	r3,r2,3
  80b114:	00bfff04 	movi	r2,-4
  80b118:	1884703a 	and	r2,r3,r2
  80b11c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b120:	d0e00d17 	ldw	r3,-32716(gp)
  80b124:	e0bffe17 	ldw	r2,-8(fp)
  80b128:	1887883a 	add	r3,r3,r2
  80b12c:	00804034 	movhi	r2,256
  80b130:	10800004 	addi	r2,r2,0
  80b134:	10c0072e 	bgeu	r2,r3,80b154 <sbrk+0x78>
  80b138:	e0bffd17 	ldw	r2,-12(fp)
  80b13c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b140:	e0bffa17 	ldw	r2,-24(fp)
  80b144:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80b148:	00bfffc4 	movi	r2,-1
  80b14c:	e0bfff15 	stw	r2,-4(fp)
  80b150:	00000c06 	br	80b184 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80b154:	d0a00d17 	ldw	r2,-32716(gp)
  80b158:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80b15c:	d0e00d17 	ldw	r3,-32716(gp)
  80b160:	e0bffe17 	ldw	r2,-8(fp)
  80b164:	1885883a 	add	r2,r3,r2
  80b168:	d0a00d15 	stw	r2,-32716(gp)
  80b16c:	e0bffd17 	ldw	r2,-12(fp)
  80b170:	e0bff915 	stw	r2,-28(fp)
  80b174:	e0bff917 	ldw	r2,-28(fp)
  80b178:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80b17c:	e0bffc17 	ldw	r2,-16(fp)
  80b180:	e0bfff15 	stw	r2,-4(fp)
  80b184:	e0bfff17 	ldw	r2,-4(fp)
} 
  80b188:	e037883a 	mov	sp,fp
  80b18c:	df000017 	ldw	fp,0(sp)
  80b190:	dec00104 	addi	sp,sp,4
  80b194:	f800283a 	ret

0080b198 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80b198:	defffd04 	addi	sp,sp,-12
  80b19c:	dfc00215 	stw	ra,8(sp)
  80b1a0:	df000115 	stw	fp,4(sp)
  80b1a4:	df000104 	addi	fp,sp,4
  80b1a8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80b1ac:	e13fff17 	ldw	r4,-4(fp)
  80b1b0:	080da380 	call	80da38 <alt_busy_sleep>
}
  80b1b4:	e037883a 	mov	sp,fp
  80b1b8:	dfc00117 	ldw	ra,4(sp)
  80b1bc:	df000017 	ldw	fp,0(sp)
  80b1c0:	dec00204 	addi	sp,sp,8
  80b1c4:	f800283a 	ret

0080b1c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80b1c8:	defff704 	addi	sp,sp,-36
  80b1cc:	dfc00815 	stw	ra,32(sp)
  80b1d0:	df000715 	stw	fp,28(sp)
  80b1d4:	df000704 	addi	fp,sp,28
  80b1d8:	e13ffb15 	stw	r4,-20(fp)
  80b1dc:	e17ffc15 	stw	r5,-16(fp)
  80b1e0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b1e4:	e0bffb17 	ldw	r2,-20(fp)
  80b1e8:	1004803a 	cmplt	r2,r2,zero
  80b1ec:	1000081e 	bne	r2,zero,80b210 <write+0x48>
  80b1f0:	e0bffb17 	ldw	r2,-20(fp)
  80b1f4:	10800324 	muli	r2,r2,12
  80b1f8:	1007883a 	mov	r3,r2
  80b1fc:	00802074 	movhi	r2,129
  80b200:	10be5404 	addi	r2,r2,-1712
  80b204:	1887883a 	add	r3,r3,r2
  80b208:	e0ffff15 	stw	r3,-4(fp)
  80b20c:	00000106 	br	80b214 <write+0x4c>
  80b210:	e03fff15 	stw	zero,-4(fp)
  80b214:	e0bfff17 	ldw	r2,-4(fp)
  80b218:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b21c:	e0bffa17 	ldw	r2,-24(fp)
  80b220:	1005003a 	cmpeq	r2,r2,zero
  80b224:	1000241e 	bne	r2,zero,80b2b8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b228:	e0bffa17 	ldw	r2,-24(fp)
  80b22c:	10800217 	ldw	r2,8(r2)
  80b230:	108000cc 	andi	r2,r2,3
  80b234:	1005003a 	cmpeq	r2,r2,zero
  80b238:	10001a1e 	bne	r2,zero,80b2a4 <write+0xdc>
  80b23c:	e0bffa17 	ldw	r2,-24(fp)
  80b240:	10800017 	ldw	r2,0(r2)
  80b244:	10800617 	ldw	r2,24(r2)
  80b248:	1005003a 	cmpeq	r2,r2,zero
  80b24c:	1000151e 	bne	r2,zero,80b2a4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b250:	e0bffa17 	ldw	r2,-24(fp)
  80b254:	10800017 	ldw	r2,0(r2)
  80b258:	10800617 	ldw	r2,24(r2)
  80b25c:	e17ffc17 	ldw	r5,-16(fp)
  80b260:	e1bffd17 	ldw	r6,-12(fp)
  80b264:	e13ffa17 	ldw	r4,-24(fp)
  80b268:	103ee83a 	callr	r2
  80b26c:	e0bff915 	stw	r2,-28(fp)
  80b270:	e0bff917 	ldw	r2,-28(fp)
  80b274:	1004403a 	cmpge	r2,r2,zero
  80b278:	1000071e 	bne	r2,zero,80b298 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80b27c:	080b2e80 	call	80b2e8 <alt_get_errno>
  80b280:	e0fff917 	ldw	r3,-28(fp)
  80b284:	00c7c83a 	sub	r3,zero,r3
  80b288:	10c00015 	stw	r3,0(r2)
        return -1;
  80b28c:	00bfffc4 	movi	r2,-1
  80b290:	e0bffe15 	stw	r2,-8(fp)
  80b294:	00000e06 	br	80b2d0 <write+0x108>
      }
      return rval;
  80b298:	e0bff917 	ldw	r2,-28(fp)
  80b29c:	e0bffe15 	stw	r2,-8(fp)
  80b2a0:	00000b06 	br	80b2d0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b2a4:	080b2e80 	call	80b2e8 <alt_get_errno>
  80b2a8:	1007883a 	mov	r3,r2
  80b2ac:	00800344 	movi	r2,13
  80b2b0:	18800015 	stw	r2,0(r3)
  80b2b4:	00000406 	br	80b2c8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b2b8:	080b2e80 	call	80b2e8 <alt_get_errno>
  80b2bc:	1007883a 	mov	r3,r2
  80b2c0:	00801444 	movi	r2,81
  80b2c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b2c8:	00bfffc4 	movi	r2,-1
  80b2cc:	e0bffe15 	stw	r2,-8(fp)
  80b2d0:	e0bffe17 	ldw	r2,-8(fp)
}
  80b2d4:	e037883a 	mov	sp,fp
  80b2d8:	dfc00117 	ldw	ra,4(sp)
  80b2dc:	df000017 	ldw	fp,0(sp)
  80b2e0:	dec00204 	addi	sp,sp,8
  80b2e4:	f800283a 	ret

0080b2e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b2e8:	defffd04 	addi	sp,sp,-12
  80b2ec:	dfc00215 	stw	ra,8(sp)
  80b2f0:	df000115 	stw	fp,4(sp)
  80b2f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b2f8:	00802074 	movhi	r2,129
  80b2fc:	10835004 	addi	r2,r2,3392
  80b300:	10800017 	ldw	r2,0(r2)
  80b304:	1005003a 	cmpeq	r2,r2,zero
  80b308:	1000061e 	bne	r2,zero,80b324 <alt_get_errno+0x3c>
  80b30c:	00802074 	movhi	r2,129
  80b310:	10835004 	addi	r2,r2,3392
  80b314:	10800017 	ldw	r2,0(r2)
  80b318:	103ee83a 	callr	r2
  80b31c:	e0bfff15 	stw	r2,-4(fp)
  80b320:	00000306 	br	80b330 <alt_get_errno+0x48>
  80b324:	00802074 	movhi	r2,129
  80b328:	108a6d04 	addi	r2,r2,10676
  80b32c:	e0bfff15 	stw	r2,-4(fp)
  80b330:	e0bfff17 	ldw	r2,-4(fp)
}
  80b334:	e037883a 	mov	sp,fp
  80b338:	dfc00117 	ldw	ra,4(sp)
  80b33c:	df000017 	ldw	fp,0(sp)
  80b340:	dec00204 	addi	sp,sp,8
  80b344:	f800283a 	ret

0080b348 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b348:	defffd04 	addi	sp,sp,-12
  80b34c:	dfc00215 	stw	ra,8(sp)
  80b350:	df000115 	stw	fp,4(sp)
  80b354:	df000104 	addi	fp,sp,4
  80b358:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_NIOS, cpu_nios);
  80b35c:	080e5c40 	call	80e5c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b360:	00800044 	movi	r2,1
  80b364:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b368:	e037883a 	mov	sp,fp
  80b36c:	dfc00117 	ldw	ra,4(sp)
  80b370:	df000017 	ldw	fp,0(sp)
  80b374:	dec00204 	addi	sp,sp,8
  80b378:	f800283a 	ret

0080b37c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b37c:	defffe04 	addi	sp,sp,-8
  80b380:	dfc00115 	stw	ra,4(sp)
  80b384:	df000015 	stw	fp,0(sp)
  80b388:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80b38c:	01004034 	movhi	r4,256
  80b390:	21040804 	addi	r4,r4,4128
  80b394:	000b883a 	mov	r5,zero
  80b398:	01800084 	movi	r6,2
  80b39c:	01c01904 	movi	r7,100
  80b3a0:	080cea40 	call	80cea4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80b3a4:	01002074 	movhi	r4,129
  80b3a8:	213ebe04 	addi	r4,r4,-1288
  80b3ac:	000b883a 	mov	r5,zero
  80b3b0:	000d883a 	mov	r6,zero
  80b3b4:	080b5900 	call	80b590 <altera_avalon_jtag_uart_init>
  80b3b8:	01002074 	movhi	r4,129
  80b3bc:	213eb404 	addi	r4,r4,-1328
  80b3c0:	080b4100 	call	80b410 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
  80b3c4:	01002074 	movhi	r4,129
  80b3c8:	2102d604 	addi	r4,r4,2904
  80b3cc:	080cca00 	call	80cca0 <altera_avalon_lcd_16207_init>
  80b3d0:	01002074 	movhi	r4,129
  80b3d4:	2102cc04 	addi	r4,r4,2864
  80b3d8:	080b4100 	call	80b410 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_RS232, uart_RS232);
  80b3dc:	01002074 	movhi	r4,129
  80b3e0:	21031e04 	addi	r4,r4,3192
  80b3e4:	000b883a 	mov	r5,zero
  80b3e8:	01800044 	movi	r6,1
  80b3ec:	080d02c0 	call	80d02c <altera_avalon_uart_init>
  80b3f0:	01002074 	movhi	r4,129
  80b3f4:	21031404 	addi	r4,r4,3152
  80b3f8:	080b4100 	call	80b410 <alt_dev_reg>
}
  80b3fc:	e037883a 	mov	sp,fp
  80b400:	dfc00117 	ldw	ra,4(sp)
  80b404:	df000017 	ldw	fp,0(sp)
  80b408:	dec00204 	addi	sp,sp,8
  80b40c:	f800283a 	ret

0080b410 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b410:	defffd04 	addi	sp,sp,-12
  80b414:	dfc00215 	stw	ra,8(sp)
  80b418:	df000115 	stw	fp,4(sp)
  80b41c:	df000104 	addi	fp,sp,4
  80b420:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b424:	e13fff17 	ldw	r4,-4(fp)
  80b428:	01402074 	movhi	r5,129
  80b42c:	29434d04 	addi	r5,r5,3380
  80b430:	080dba00 	call	80dba0 <alt_dev_llist_insert>
}
  80b434:	e037883a 	mov	sp,fp
  80b438:	dfc00117 	ldw	ra,4(sp)
  80b43c:	df000017 	ldw	fp,0(sp)
  80b440:	dec00204 	addi	sp,sp,8
  80b444:	f800283a 	ret

0080b448 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b448:	defffa04 	addi	sp,sp,-24
  80b44c:	dfc00515 	stw	ra,20(sp)
  80b450:	df000415 	stw	fp,16(sp)
  80b454:	df000404 	addi	fp,sp,16
  80b458:	e13ffd15 	stw	r4,-12(fp)
  80b45c:	e17ffe15 	stw	r5,-8(fp)
  80b460:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b464:	e0bffd17 	ldw	r2,-12(fp)
  80b468:	10800017 	ldw	r2,0(r2)
  80b46c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b470:	e0bffc17 	ldw	r2,-16(fp)
  80b474:	11000a04 	addi	r4,r2,40
  80b478:	e0bffd17 	ldw	r2,-12(fp)
  80b47c:	11c00217 	ldw	r7,8(r2)
  80b480:	e17ffe17 	ldw	r5,-8(fp)
  80b484:	e1bfff17 	ldw	r6,-4(fp)
  80b488:	080ba900 	call	80ba90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b48c:	e037883a 	mov	sp,fp
  80b490:	dfc00117 	ldw	ra,4(sp)
  80b494:	df000017 	ldw	fp,0(sp)
  80b498:	dec00204 	addi	sp,sp,8
  80b49c:	f800283a 	ret

0080b4a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b4a0:	defffa04 	addi	sp,sp,-24
  80b4a4:	dfc00515 	stw	ra,20(sp)
  80b4a8:	df000415 	stw	fp,16(sp)
  80b4ac:	df000404 	addi	fp,sp,16
  80b4b0:	e13ffd15 	stw	r4,-12(fp)
  80b4b4:	e17ffe15 	stw	r5,-8(fp)
  80b4b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b4bc:	e0bffd17 	ldw	r2,-12(fp)
  80b4c0:	10800017 	ldw	r2,0(r2)
  80b4c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b4c8:	e0bffc17 	ldw	r2,-16(fp)
  80b4cc:	11000a04 	addi	r4,r2,40
  80b4d0:	e0bffd17 	ldw	r2,-12(fp)
  80b4d4:	11c00217 	ldw	r7,8(r2)
  80b4d8:	e17ffe17 	ldw	r5,-8(fp)
  80b4dc:	e1bfff17 	ldw	r6,-4(fp)
  80b4e0:	080bcb40 	call	80bcb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b4e4:	e037883a 	mov	sp,fp
  80b4e8:	dfc00117 	ldw	ra,4(sp)
  80b4ec:	df000017 	ldw	fp,0(sp)
  80b4f0:	dec00204 	addi	sp,sp,8
  80b4f4:	f800283a 	ret

0080b4f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b4f8:	defffc04 	addi	sp,sp,-16
  80b4fc:	dfc00315 	stw	ra,12(sp)
  80b500:	df000215 	stw	fp,8(sp)
  80b504:	df000204 	addi	fp,sp,8
  80b508:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b50c:	e0bfff17 	ldw	r2,-4(fp)
  80b510:	10800017 	ldw	r2,0(r2)
  80b514:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b518:	e0bffe17 	ldw	r2,-8(fp)
  80b51c:	11000a04 	addi	r4,r2,40
  80b520:	e0bfff17 	ldw	r2,-4(fp)
  80b524:	11400217 	ldw	r5,8(r2)
  80b528:	080b9280 	call	80b928 <altera_avalon_jtag_uart_close>
}
  80b52c:	e037883a 	mov	sp,fp
  80b530:	dfc00117 	ldw	ra,4(sp)
  80b534:	df000017 	ldw	fp,0(sp)
  80b538:	dec00204 	addi	sp,sp,8
  80b53c:	f800283a 	ret

0080b540 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b540:	defffa04 	addi	sp,sp,-24
  80b544:	dfc00515 	stw	ra,20(sp)
  80b548:	df000415 	stw	fp,16(sp)
  80b54c:	df000404 	addi	fp,sp,16
  80b550:	e13ffd15 	stw	r4,-12(fp)
  80b554:	e17ffe15 	stw	r5,-8(fp)
  80b558:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b55c:	e0bffd17 	ldw	r2,-12(fp)
  80b560:	10800017 	ldw	r2,0(r2)
  80b564:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b568:	e0bffc17 	ldw	r2,-16(fp)
  80b56c:	11000a04 	addi	r4,r2,40
  80b570:	e17ffe17 	ldw	r5,-8(fp)
  80b574:	e1bfff17 	ldw	r6,-4(fp)
  80b578:	080b99c0 	call	80b99c <altera_avalon_jtag_uart_ioctl>
}
  80b57c:	e037883a 	mov	sp,fp
  80b580:	dfc00117 	ldw	ra,4(sp)
  80b584:	df000017 	ldw	fp,0(sp)
  80b588:	dec00204 	addi	sp,sp,8
  80b58c:	f800283a 	ret

0080b590 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b590:	defffa04 	addi	sp,sp,-24
  80b594:	dfc00515 	stw	ra,20(sp)
  80b598:	df000415 	stw	fp,16(sp)
  80b59c:	df000404 	addi	fp,sp,16
  80b5a0:	e13ffd15 	stw	r4,-12(fp)
  80b5a4:	e17ffe15 	stw	r5,-8(fp)
  80b5a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b5ac:	e0fffd17 	ldw	r3,-12(fp)
  80b5b0:	00800044 	movi	r2,1
  80b5b4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b5b8:	e0bffd17 	ldw	r2,-12(fp)
  80b5bc:	10800017 	ldw	r2,0(r2)
  80b5c0:	11000104 	addi	r4,r2,4
  80b5c4:	e0bffd17 	ldw	r2,-12(fp)
  80b5c8:	10800817 	ldw	r2,32(r2)
  80b5cc:	1007883a 	mov	r3,r2
  80b5d0:	2005883a 	mov	r2,r4
  80b5d4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b5d8:	e13ffe17 	ldw	r4,-8(fp)
  80b5dc:	e17fff17 	ldw	r5,-4(fp)
  80b5e0:	d8000015 	stw	zero,0(sp)
  80b5e4:	01802074 	movhi	r6,129
  80b5e8:	31ad9404 	addi	r6,r6,-18864
  80b5ec:	e1fffd17 	ldw	r7,-12(fp)
  80b5f0:	080e0180 	call	80e018 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b5f4:	e0bffd17 	ldw	r2,-12(fp)
  80b5f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b5fc:	e0bffd17 	ldw	r2,-12(fp)
  80b600:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b604:	00802074 	movhi	r2,129
  80b608:	108a7804 	addi	r2,r2,10720
  80b60c:	10800017 	ldw	r2,0(r2)
  80b610:	100b883a 	mov	r5,r2
  80b614:	01802074 	movhi	r6,129
  80b618:	31ae1e04 	addi	r6,r6,-18312
  80b61c:	e1fffd17 	ldw	r7,-12(fp)
  80b620:	080d8e40 	call	80d8e4 <alt_alarm_start>
  80b624:	1004403a 	cmpge	r2,r2,zero
  80b628:	1000041e 	bne	r2,zero,80b63c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b62c:	e0fffd17 	ldw	r3,-12(fp)
  80b630:	00a00034 	movhi	r2,32768
  80b634:	10bfffc4 	addi	r2,r2,-1
  80b638:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b63c:	e037883a 	mov	sp,fp
  80b640:	dfc00117 	ldw	ra,4(sp)
  80b644:	df000017 	ldw	fp,0(sp)
  80b648:	dec00204 	addi	sp,sp,8
  80b64c:	f800283a 	ret

0080b650 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80b650:	defff804 	addi	sp,sp,-32
  80b654:	df000715 	stw	fp,28(sp)
  80b658:	df000704 	addi	fp,sp,28
  80b65c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80b660:	e0bfff17 	ldw	r2,-4(fp)
  80b664:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80b668:	e0bffe17 	ldw	r2,-8(fp)
  80b66c:	10800017 	ldw	r2,0(r2)
  80b670:	e0bffd15 	stw	r2,-12(fp)
  80b674:	00000006 	br	80b678 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b678:	e0bffd17 	ldw	r2,-12(fp)
  80b67c:	10800104 	addi	r2,r2,4
  80b680:	10800037 	ldwio	r2,0(r2)
  80b684:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b688:	e0bffc17 	ldw	r2,-16(fp)
  80b68c:	1080c00c 	andi	r2,r2,768
  80b690:	1005003a 	cmpeq	r2,r2,zero
  80b694:	1000741e 	bne	r2,zero,80b868 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b698:	e0bffc17 	ldw	r2,-16(fp)
  80b69c:	1080400c 	andi	r2,r2,256
  80b6a0:	1005003a 	cmpeq	r2,r2,zero
  80b6a4:	1000351e 	bne	r2,zero,80b77c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b6a8:	00800074 	movhi	r2,1
  80b6ac:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b6b0:	e0bffe17 	ldw	r2,-8(fp)
  80b6b4:	10800a17 	ldw	r2,40(r2)
  80b6b8:	10800044 	addi	r2,r2,1
  80b6bc:	1081ffcc 	andi	r2,r2,2047
  80b6c0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80b6c4:	e0bffe17 	ldw	r2,-8(fp)
  80b6c8:	10c00b17 	ldw	r3,44(r2)
  80b6cc:	e0bffa17 	ldw	r2,-24(fp)
  80b6d0:	18801626 	beq	r3,r2,80b72c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b6d4:	e0bffd17 	ldw	r2,-12(fp)
  80b6d8:	10800037 	ldwio	r2,0(r2)
  80b6dc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b6e0:	e0bffb17 	ldw	r2,-20(fp)
  80b6e4:	10a0000c 	andi	r2,r2,32768
  80b6e8:	1005003a 	cmpeq	r2,r2,zero
  80b6ec:	10000f1e 	bne	r2,zero,80b72c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b6f0:	e0bffe17 	ldw	r2,-8(fp)
  80b6f4:	10c00a17 	ldw	r3,40(r2)
  80b6f8:	e0bffb17 	ldw	r2,-20(fp)
  80b6fc:	1009883a 	mov	r4,r2
  80b700:	e0bffe17 	ldw	r2,-8(fp)
  80b704:	1885883a 	add	r2,r3,r2
  80b708:	10800e04 	addi	r2,r2,56
  80b70c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b710:	e0bffe17 	ldw	r2,-8(fp)
  80b714:	10800a17 	ldw	r2,40(r2)
  80b718:	10800044 	addi	r2,r2,1
  80b71c:	10c1ffcc 	andi	r3,r2,2047
  80b720:	e0bffe17 	ldw	r2,-8(fp)
  80b724:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b728:	003fe106 	br	80b6b0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b72c:	e0bffb17 	ldw	r2,-20(fp)
  80b730:	10bfffec 	andhi	r2,r2,65535
  80b734:	1005003a 	cmpeq	r2,r2,zero
  80b738:	1000101e 	bne	r2,zero,80b77c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b73c:	e0bffe17 	ldw	r2,-8(fp)
  80b740:	10c00817 	ldw	r3,32(r2)
  80b744:	00bfff84 	movi	r2,-2
  80b748:	1886703a 	and	r3,r3,r2
  80b74c:	e0bffe17 	ldw	r2,-8(fp)
  80b750:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b754:	e0bffd17 	ldw	r2,-12(fp)
  80b758:	11000104 	addi	r4,r2,4
  80b75c:	e0bffe17 	ldw	r2,-8(fp)
  80b760:	10800817 	ldw	r2,32(r2)
  80b764:	1007883a 	mov	r3,r2
  80b768:	2005883a 	mov	r2,r4
  80b76c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b770:	e0bffd17 	ldw	r2,-12(fp)
  80b774:	10800104 	addi	r2,r2,4
  80b778:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b77c:	e0bffc17 	ldw	r2,-16(fp)
  80b780:	1080800c 	andi	r2,r2,512
  80b784:	1005003a 	cmpeq	r2,r2,zero
  80b788:	103fbb1e 	bne	r2,zero,80b678 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b78c:	e0bffc17 	ldw	r2,-16(fp)
  80b790:	10bfffec 	andhi	r2,r2,65535
  80b794:	1004d43a 	srli	r2,r2,16
  80b798:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b79c:	00001506 	br	80b7f4 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b7a0:	e13ffd17 	ldw	r4,-12(fp)
  80b7a4:	e0bffe17 	ldw	r2,-8(fp)
  80b7a8:	10c00d17 	ldw	r3,52(r2)
  80b7ac:	e0bffe17 	ldw	r2,-8(fp)
  80b7b0:	1885883a 	add	r2,r3,r2
  80b7b4:	10820e04 	addi	r2,r2,2104
  80b7b8:	10800003 	ldbu	r2,0(r2)
  80b7bc:	10c03fcc 	andi	r3,r2,255
  80b7c0:	18c0201c 	xori	r3,r3,128
  80b7c4:	18ffe004 	addi	r3,r3,-128
  80b7c8:	2005883a 	mov	r2,r4
  80b7cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b7d0:	e0bffe17 	ldw	r2,-8(fp)
  80b7d4:	10800d17 	ldw	r2,52(r2)
  80b7d8:	10800044 	addi	r2,r2,1
  80b7dc:	10c1ffcc 	andi	r3,r2,2047
  80b7e0:	e0bffe17 	ldw	r2,-8(fp)
  80b7e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b7e8:	e0bff917 	ldw	r2,-28(fp)
  80b7ec:	10bfffc4 	addi	r2,r2,-1
  80b7f0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b7f4:	e0bff917 	ldw	r2,-28(fp)
  80b7f8:	1005003a 	cmpeq	r2,r2,zero
  80b7fc:	1000051e 	bne	r2,zero,80b814 <altera_avalon_jtag_uart_irq+0x1c4>
  80b800:	e0bffe17 	ldw	r2,-8(fp)
  80b804:	10c00d17 	ldw	r3,52(r2)
  80b808:	e0bffe17 	ldw	r2,-8(fp)
  80b80c:	10800c17 	ldw	r2,48(r2)
  80b810:	18bfe31e 	bne	r3,r2,80b7a0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b814:	e0bff917 	ldw	r2,-28(fp)
  80b818:	1005003a 	cmpeq	r2,r2,zero
  80b81c:	103f961e 	bne	r2,zero,80b678 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b820:	e0bffe17 	ldw	r2,-8(fp)
  80b824:	10c00817 	ldw	r3,32(r2)
  80b828:	00bfff44 	movi	r2,-3
  80b82c:	1886703a 	and	r3,r3,r2
  80b830:	e0bffe17 	ldw	r2,-8(fp)
  80b834:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b838:	e0bffe17 	ldw	r2,-8(fp)
  80b83c:	10800017 	ldw	r2,0(r2)
  80b840:	11000104 	addi	r4,r2,4
  80b844:	e0bffe17 	ldw	r2,-8(fp)
  80b848:	10800817 	ldw	r2,32(r2)
  80b84c:	1007883a 	mov	r3,r2
  80b850:	2005883a 	mov	r2,r4
  80b854:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b858:	e0bffd17 	ldw	r2,-12(fp)
  80b85c:	10800104 	addi	r2,r2,4
  80b860:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b864:	003f8406 	br	80b678 <altera_avalon_jtag_uart_irq+0x28>
}
  80b868:	e037883a 	mov	sp,fp
  80b86c:	df000017 	ldw	fp,0(sp)
  80b870:	dec00104 	addi	sp,sp,4
  80b874:	f800283a 	ret

0080b878 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b878:	defffc04 	addi	sp,sp,-16
  80b87c:	df000315 	stw	fp,12(sp)
  80b880:	df000304 	addi	fp,sp,12
  80b884:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b888:	e0bfff17 	ldw	r2,-4(fp)
  80b88c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b890:	e0bffe17 	ldw	r2,-8(fp)
  80b894:	10800017 	ldw	r2,0(r2)
  80b898:	10800104 	addi	r2,r2,4
  80b89c:	10800037 	ldwio	r2,0(r2)
  80b8a0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b8a4:	e0bffd17 	ldw	r2,-12(fp)
  80b8a8:	1081000c 	andi	r2,r2,1024
  80b8ac:	1005003a 	cmpeq	r2,r2,zero
  80b8b0:	10000c1e 	bne	r2,zero,80b8e4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b8b4:	e0bffe17 	ldw	r2,-8(fp)
  80b8b8:	10800017 	ldw	r2,0(r2)
  80b8bc:	11000104 	addi	r4,r2,4
  80b8c0:	e0bffe17 	ldw	r2,-8(fp)
  80b8c4:	10800817 	ldw	r2,32(r2)
  80b8c8:	10810014 	ori	r2,r2,1024
  80b8cc:	1007883a 	mov	r3,r2
  80b8d0:	2005883a 	mov	r2,r4
  80b8d4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b8d8:	e0bffe17 	ldw	r2,-8(fp)
  80b8dc:	10000915 	stw	zero,36(r2)
  80b8e0:	00000a06 	br	80b90c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b8e4:	e0bffe17 	ldw	r2,-8(fp)
  80b8e8:	10c00917 	ldw	r3,36(r2)
  80b8ec:	00a00034 	movhi	r2,32768
  80b8f0:	10bfff04 	addi	r2,r2,-4
  80b8f4:	10c00536 	bltu	r2,r3,80b90c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b8f8:	e0bffe17 	ldw	r2,-8(fp)
  80b8fc:	10800917 	ldw	r2,36(r2)
  80b900:	10c00044 	addi	r3,r2,1
  80b904:	e0bffe17 	ldw	r2,-8(fp)
  80b908:	10c00915 	stw	r3,36(r2)
  80b90c:	00802074 	movhi	r2,129
  80b910:	108a7804 	addi	r2,r2,10720
  80b914:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b918:	e037883a 	mov	sp,fp
  80b91c:	df000017 	ldw	fp,0(sp)
  80b920:	dec00104 	addi	sp,sp,4
  80b924:	f800283a 	ret

0080b928 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b928:	defffc04 	addi	sp,sp,-16
  80b92c:	df000315 	stw	fp,12(sp)
  80b930:	df000304 	addi	fp,sp,12
  80b934:	e13ffd15 	stw	r4,-12(fp)
  80b938:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b93c:	00000706 	br	80b95c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b940:	e0bffe17 	ldw	r2,-8(fp)
  80b944:	1090000c 	andi	r2,r2,16384
  80b948:	1005003a 	cmpeq	r2,r2,zero
  80b94c:	1000031e 	bne	r2,zero,80b95c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b950:	00bffd44 	movi	r2,-11
  80b954:	e0bfff15 	stw	r2,-4(fp)
  80b958:	00000b06 	br	80b988 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b95c:	e0bffd17 	ldw	r2,-12(fp)
  80b960:	10c00d17 	ldw	r3,52(r2)
  80b964:	e0bffd17 	ldw	r2,-12(fp)
  80b968:	10800c17 	ldw	r2,48(r2)
  80b96c:	18800526 	beq	r3,r2,80b984 <altera_avalon_jtag_uart_close+0x5c>
  80b970:	e0bffd17 	ldw	r2,-12(fp)
  80b974:	10c00917 	ldw	r3,36(r2)
  80b978:	e0bffd17 	ldw	r2,-12(fp)
  80b97c:	10800117 	ldw	r2,4(r2)
  80b980:	18bfef36 	bltu	r3,r2,80b940 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b984:	e03fff15 	stw	zero,-4(fp)
  80b988:	e0bfff17 	ldw	r2,-4(fp)
}
  80b98c:	e037883a 	mov	sp,fp
  80b990:	df000017 	ldw	fp,0(sp)
  80b994:	dec00104 	addi	sp,sp,4
  80b998:	f800283a 	ret

0080b99c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b99c:	defff804 	addi	sp,sp,-32
  80b9a0:	df000715 	stw	fp,28(sp)
  80b9a4:	df000704 	addi	fp,sp,28
  80b9a8:	e13ffb15 	stw	r4,-20(fp)
  80b9ac:	e17ffc15 	stw	r5,-16(fp)
  80b9b0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b9b4:	00bff9c4 	movi	r2,-25
  80b9b8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b9bc:	e0bffc17 	ldw	r2,-16(fp)
  80b9c0:	e0bfff15 	stw	r2,-4(fp)
  80b9c4:	e0ffff17 	ldw	r3,-4(fp)
  80b9c8:	189a8060 	cmpeqi	r2,r3,27137
  80b9cc:	1000041e 	bne	r2,zero,80b9e0 <altera_avalon_jtag_uart_ioctl+0x44>
  80b9d0:	e0ffff17 	ldw	r3,-4(fp)
  80b9d4:	189a80a0 	cmpeqi	r2,r3,27138
  80b9d8:	10001b1e 	bne	r2,zero,80ba48 <altera_avalon_jtag_uart_ioctl+0xac>
  80b9dc:	00002706 	br	80ba7c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b9e0:	e0bffb17 	ldw	r2,-20(fp)
  80b9e4:	10c00117 	ldw	r3,4(r2)
  80b9e8:	00a00034 	movhi	r2,32768
  80b9ec:	10bfffc4 	addi	r2,r2,-1
  80b9f0:	18802226 	beq	r3,r2,80ba7c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b9f4:	e0bffd17 	ldw	r2,-12(fp)
  80b9f8:	10800017 	ldw	r2,0(r2)
  80b9fc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80ba00:	e0bff917 	ldw	r2,-28(fp)
  80ba04:	10800090 	cmplti	r2,r2,2
  80ba08:	1000071e 	bne	r2,zero,80ba28 <altera_avalon_jtag_uart_ioctl+0x8c>
  80ba0c:	e0fff917 	ldw	r3,-28(fp)
  80ba10:	00a00034 	movhi	r2,32768
  80ba14:	10bfffc4 	addi	r2,r2,-1
  80ba18:	18800326 	beq	r3,r2,80ba28 <altera_avalon_jtag_uart_ioctl+0x8c>
  80ba1c:	e0bff917 	ldw	r2,-28(fp)
  80ba20:	e0bffe15 	stw	r2,-8(fp)
  80ba24:	00000306 	br	80ba34 <altera_avalon_jtag_uart_ioctl+0x98>
  80ba28:	00e00034 	movhi	r3,32768
  80ba2c:	18ffff84 	addi	r3,r3,-2
  80ba30:	e0fffe15 	stw	r3,-8(fp)
  80ba34:	e0bffb17 	ldw	r2,-20(fp)
  80ba38:	e0fffe17 	ldw	r3,-8(fp)
  80ba3c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80ba40:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80ba44:	00000d06 	br	80ba7c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80ba48:	e0bffb17 	ldw	r2,-20(fp)
  80ba4c:	10c00117 	ldw	r3,4(r2)
  80ba50:	00a00034 	movhi	r2,32768
  80ba54:	10bfffc4 	addi	r2,r2,-1
  80ba58:	18800826 	beq	r3,r2,80ba7c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80ba5c:	e13ffd17 	ldw	r4,-12(fp)
  80ba60:	e0bffb17 	ldw	r2,-20(fp)
  80ba64:	10c00917 	ldw	r3,36(r2)
  80ba68:	e0bffb17 	ldw	r2,-20(fp)
  80ba6c:	10800117 	ldw	r2,4(r2)
  80ba70:	1885803a 	cmpltu	r2,r3,r2
  80ba74:	20800015 	stw	r2,0(r4)
      rc = 0;
  80ba78:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80ba7c:	e0bffa17 	ldw	r2,-24(fp)
}
  80ba80:	e037883a 	mov	sp,fp
  80ba84:	df000017 	ldw	fp,0(sp)
  80ba88:	dec00104 	addi	sp,sp,4
  80ba8c:	f800283a 	ret

0080ba90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ba90:	defff204 	addi	sp,sp,-56
  80ba94:	dfc00d15 	stw	ra,52(sp)
  80ba98:	df000c15 	stw	fp,48(sp)
  80ba9c:	df000c04 	addi	fp,sp,48
  80baa0:	e13ffb15 	stw	r4,-20(fp)
  80baa4:	e17ffc15 	stw	r5,-16(fp)
  80baa8:	e1bffd15 	stw	r6,-12(fp)
  80baac:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80bab0:	e0bffc17 	ldw	r2,-16(fp)
  80bab4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80bab8:	00004806 	br	80bbdc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80babc:	e0bffb17 	ldw	r2,-20(fp)
  80bac0:	10800a17 	ldw	r2,40(r2)
  80bac4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80bac8:	e0bffb17 	ldw	r2,-20(fp)
  80bacc:	10800b17 	ldw	r2,44(r2)
  80bad0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80bad4:	e0fff717 	ldw	r3,-36(fp)
  80bad8:	e0bff617 	ldw	r2,-40(fp)
  80badc:	18800536 	bltu	r3,r2,80baf4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80bae0:	e0bff717 	ldw	r2,-36(fp)
  80bae4:	e0fff617 	ldw	r3,-40(fp)
  80bae8:	10c5c83a 	sub	r2,r2,r3
  80baec:	e0bff815 	stw	r2,-32(fp)
  80baf0:	00000406 	br	80bb04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80baf4:	00820004 	movi	r2,2048
  80baf8:	e0fff617 	ldw	r3,-40(fp)
  80bafc:	10c5c83a 	sub	r2,r2,r3
  80bb00:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80bb04:	e0bff817 	ldw	r2,-32(fp)
  80bb08:	1005003a 	cmpeq	r2,r2,zero
  80bb0c:	10001f1e 	bne	r2,zero,80bb8c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80bb10:	e0fffd17 	ldw	r3,-12(fp)
  80bb14:	e0bff817 	ldw	r2,-32(fp)
  80bb18:	1880022e 	bgeu	r3,r2,80bb24 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80bb1c:	e0bffd17 	ldw	r2,-12(fp)
  80bb20:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80bb24:	e0bffb17 	ldw	r2,-20(fp)
  80bb28:	10c00e04 	addi	r3,r2,56
  80bb2c:	e0bff617 	ldw	r2,-40(fp)
  80bb30:	1887883a 	add	r3,r3,r2
  80bb34:	e0bffa17 	ldw	r2,-24(fp)
  80bb38:	1009883a 	mov	r4,r2
  80bb3c:	180b883a 	mov	r5,r3
  80bb40:	e1bff817 	ldw	r6,-32(fp)
  80bb44:	08065c40 	call	8065c4 <memcpy>
      ptr   += n;
  80bb48:	e0fff817 	ldw	r3,-32(fp)
  80bb4c:	e0bffa17 	ldw	r2,-24(fp)
  80bb50:	10c5883a 	add	r2,r2,r3
  80bb54:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80bb58:	e0fffd17 	ldw	r3,-12(fp)
  80bb5c:	e0bff817 	ldw	r2,-32(fp)
  80bb60:	1885c83a 	sub	r2,r3,r2
  80bb64:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bb68:	e0fff617 	ldw	r3,-40(fp)
  80bb6c:	e0bff817 	ldw	r2,-32(fp)
  80bb70:	1885883a 	add	r2,r3,r2
  80bb74:	10c1ffcc 	andi	r3,r2,2047
  80bb78:	e0bffb17 	ldw	r2,-20(fp)
  80bb7c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80bb80:	e0bffd17 	ldw	r2,-12(fp)
  80bb84:	10800048 	cmpgei	r2,r2,1
  80bb88:	103fcc1e 	bne	r2,zero,80babc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80bb8c:	e0fffa17 	ldw	r3,-24(fp)
  80bb90:	e0bffc17 	ldw	r2,-16(fp)
  80bb94:	1880141e 	bne	r3,r2,80bbe8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80bb98:	e0bffe17 	ldw	r2,-8(fp)
  80bb9c:	1090000c 	andi	r2,r2,16384
  80bba0:	1004c03a 	cmpne	r2,r2,zero
  80bba4:	1000101e 	bne	r2,zero,80bbe8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80bba8:	e0bffb17 	ldw	r2,-20(fp)
  80bbac:	10c00a17 	ldw	r3,40(r2)
  80bbb0:	e0bff717 	ldw	r2,-36(fp)
  80bbb4:	1880051e 	bne	r3,r2,80bbcc <altera_avalon_jtag_uart_read+0x13c>
  80bbb8:	e0bffb17 	ldw	r2,-20(fp)
  80bbbc:	10c00917 	ldw	r3,36(r2)
  80bbc0:	e0bffb17 	ldw	r2,-20(fp)
  80bbc4:	10800117 	ldw	r2,4(r2)
  80bbc8:	18bff736 	bltu	r3,r2,80bba8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80bbcc:	e0bffb17 	ldw	r2,-20(fp)
  80bbd0:	10c00a17 	ldw	r3,40(r2)
  80bbd4:	e0bff717 	ldw	r2,-36(fp)
  80bbd8:	18800326 	beq	r3,r2,80bbe8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80bbdc:	e0bffd17 	ldw	r2,-12(fp)
  80bbe0:	10800048 	cmpgei	r2,r2,1
  80bbe4:	103fb51e 	bne	r2,zero,80babc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80bbe8:	e0fffa17 	ldw	r3,-24(fp)
  80bbec:	e0bffc17 	ldw	r2,-16(fp)
  80bbf0:	18801926 	beq	r3,r2,80bc58 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbf4:	0005303a 	rdctl	r2,status
  80bbf8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbfc:	e0fff517 	ldw	r3,-44(fp)
  80bc00:	00bfff84 	movi	r2,-2
  80bc04:	1884703a 	and	r2,r3,r2
  80bc08:	1001703a 	wrctl	status,r2
  
  return context;
  80bc0c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80bc10:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bc14:	e0bffb17 	ldw	r2,-20(fp)
  80bc18:	10800817 	ldw	r2,32(r2)
  80bc1c:	10c00054 	ori	r3,r2,1
  80bc20:	e0bffb17 	ldw	r2,-20(fp)
  80bc24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bc28:	e0bffb17 	ldw	r2,-20(fp)
  80bc2c:	10800017 	ldw	r2,0(r2)
  80bc30:	11000104 	addi	r4,r2,4
  80bc34:	e0bffb17 	ldw	r2,-20(fp)
  80bc38:	10800817 	ldw	r2,32(r2)
  80bc3c:	1007883a 	mov	r3,r2
  80bc40:	2005883a 	mov	r2,r4
  80bc44:	10c00035 	stwio	r3,0(r2)
  80bc48:	e0bff917 	ldw	r2,-28(fp)
  80bc4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc50:	e0bff417 	ldw	r2,-48(fp)
  80bc54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80bc58:	e0fffa17 	ldw	r3,-24(fp)
  80bc5c:	e0bffc17 	ldw	r2,-16(fp)
  80bc60:	18800526 	beq	r3,r2,80bc78 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80bc64:	e0fffa17 	ldw	r3,-24(fp)
  80bc68:	e0bffc17 	ldw	r2,-16(fp)
  80bc6c:	1887c83a 	sub	r3,r3,r2
  80bc70:	e0ffff15 	stw	r3,-4(fp)
  80bc74:	00000906 	br	80bc9c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80bc78:	e0bffe17 	ldw	r2,-8(fp)
  80bc7c:	1090000c 	andi	r2,r2,16384
  80bc80:	1005003a 	cmpeq	r2,r2,zero
  80bc84:	1000031e 	bne	r2,zero,80bc94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80bc88:	00bffd44 	movi	r2,-11
  80bc8c:	e0bfff15 	stw	r2,-4(fp)
  80bc90:	00000206 	br	80bc9c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80bc94:	00bffec4 	movi	r2,-5
  80bc98:	e0bfff15 	stw	r2,-4(fp)
  80bc9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80bca0:	e037883a 	mov	sp,fp
  80bca4:	dfc00117 	ldw	ra,4(sp)
  80bca8:	df000017 	ldw	fp,0(sp)
  80bcac:	dec00204 	addi	sp,sp,8
  80bcb0:	f800283a 	ret

0080bcb4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80bcb4:	defff204 	addi	sp,sp,-56
  80bcb8:	dfc00d15 	stw	ra,52(sp)
  80bcbc:	df000c15 	stw	fp,48(sp)
  80bcc0:	df000c04 	addi	fp,sp,48
  80bcc4:	e13ffb15 	stw	r4,-20(fp)
  80bcc8:	e17ffc15 	stw	r5,-16(fp)
  80bccc:	e1bffd15 	stw	r6,-12(fp)
  80bcd0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80bcd4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80bcd8:	e0bffc17 	ldw	r2,-16(fp)
  80bcdc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bce0:	00003a06 	br	80bdcc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80bce4:	e0bffb17 	ldw	r2,-20(fp)
  80bce8:	10800c17 	ldw	r2,48(r2)
  80bcec:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80bcf0:	e0bffb17 	ldw	r2,-20(fp)
  80bcf4:	10800d17 	ldw	r2,52(r2)
  80bcf8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80bcfc:	e0fffa17 	ldw	r3,-24(fp)
  80bd00:	e0bff917 	ldw	r2,-28(fp)
  80bd04:	1880062e 	bgeu	r3,r2,80bd20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80bd08:	e0fff917 	ldw	r3,-28(fp)
  80bd0c:	e0bffa17 	ldw	r2,-24(fp)
  80bd10:	1885c83a 	sub	r2,r3,r2
  80bd14:	10bfffc4 	addi	r2,r2,-1
  80bd18:	e0bff815 	stw	r2,-32(fp)
  80bd1c:	00000c06 	br	80bd50 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80bd20:	e0bff917 	ldw	r2,-28(fp)
  80bd24:	1005003a 	cmpeq	r2,r2,zero
  80bd28:	1000051e 	bne	r2,zero,80bd40 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80bd2c:	00820004 	movi	r2,2048
  80bd30:	e0fffa17 	ldw	r3,-24(fp)
  80bd34:	10c5c83a 	sub	r2,r2,r3
  80bd38:	e0bff815 	stw	r2,-32(fp)
  80bd3c:	00000406 	br	80bd50 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80bd40:	0081ffc4 	movi	r2,2047
  80bd44:	e0fffa17 	ldw	r3,-24(fp)
  80bd48:	10c5c83a 	sub	r2,r2,r3
  80bd4c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80bd50:	e0bff817 	ldw	r2,-32(fp)
  80bd54:	1005003a 	cmpeq	r2,r2,zero
  80bd58:	10001f1e 	bne	r2,zero,80bdd8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80bd5c:	e0fffd17 	ldw	r3,-12(fp)
  80bd60:	e0bff817 	ldw	r2,-32(fp)
  80bd64:	1880022e 	bgeu	r3,r2,80bd70 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80bd68:	e0bffd17 	ldw	r2,-12(fp)
  80bd6c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80bd70:	e0bffb17 	ldw	r2,-20(fp)
  80bd74:	10c20e04 	addi	r3,r2,2104
  80bd78:	e0bffa17 	ldw	r2,-24(fp)
  80bd7c:	1885883a 	add	r2,r3,r2
  80bd80:	e0fffc17 	ldw	r3,-16(fp)
  80bd84:	1009883a 	mov	r4,r2
  80bd88:	180b883a 	mov	r5,r3
  80bd8c:	e1bff817 	ldw	r6,-32(fp)
  80bd90:	08065c40 	call	8065c4 <memcpy>
      ptr   += n;
  80bd94:	e0fff817 	ldw	r3,-32(fp)
  80bd98:	e0bffc17 	ldw	r2,-16(fp)
  80bd9c:	10c5883a 	add	r2,r2,r3
  80bda0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80bda4:	e0fffd17 	ldw	r3,-12(fp)
  80bda8:	e0bff817 	ldw	r2,-32(fp)
  80bdac:	1885c83a 	sub	r2,r3,r2
  80bdb0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bdb4:	e0fffa17 	ldw	r3,-24(fp)
  80bdb8:	e0bff817 	ldw	r2,-32(fp)
  80bdbc:	1885883a 	add	r2,r3,r2
  80bdc0:	10c1ffcc 	andi	r3,r2,2047
  80bdc4:	e0bffb17 	ldw	r2,-20(fp)
  80bdc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bdcc:	e0bffd17 	ldw	r2,-12(fp)
  80bdd0:	10800048 	cmpgei	r2,r2,1
  80bdd4:	103fc31e 	bne	r2,zero,80bce4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bdd8:	0005303a 	rdctl	r2,status
  80bddc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bde0:	e0fff517 	ldw	r3,-44(fp)
  80bde4:	00bfff84 	movi	r2,-2
  80bde8:	1884703a 	and	r2,r3,r2
  80bdec:	1001703a 	wrctl	status,r2
  
  return context;
  80bdf0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80bdf4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bdf8:	e0bffb17 	ldw	r2,-20(fp)
  80bdfc:	10800817 	ldw	r2,32(r2)
  80be00:	10c00094 	ori	r3,r2,2
  80be04:	e0bffb17 	ldw	r2,-20(fp)
  80be08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80be0c:	e0bffb17 	ldw	r2,-20(fp)
  80be10:	10800017 	ldw	r2,0(r2)
  80be14:	11000104 	addi	r4,r2,4
  80be18:	e0bffb17 	ldw	r2,-20(fp)
  80be1c:	10800817 	ldw	r2,32(r2)
  80be20:	1007883a 	mov	r3,r2
  80be24:	2005883a 	mov	r2,r4
  80be28:	10c00035 	stwio	r3,0(r2)
  80be2c:	e0bff717 	ldw	r2,-36(fp)
  80be30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80be34:	e0bff417 	ldw	r2,-48(fp)
  80be38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80be3c:	e0bffd17 	ldw	r2,-12(fp)
  80be40:	10800050 	cmplti	r2,r2,1
  80be44:	1000111e 	bne	r2,zero,80be8c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80be48:	e0bffe17 	ldw	r2,-8(fp)
  80be4c:	1090000c 	andi	r2,r2,16384
  80be50:	1004c03a 	cmpne	r2,r2,zero
  80be54:	1000101e 	bne	r2,zero,80be98 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80be58:	e0bffb17 	ldw	r2,-20(fp)
  80be5c:	10c00d17 	ldw	r3,52(r2)
  80be60:	e0bff917 	ldw	r2,-28(fp)
  80be64:	1880051e 	bne	r3,r2,80be7c <altera_avalon_jtag_uart_write+0x1c8>
  80be68:	e0bffb17 	ldw	r2,-20(fp)
  80be6c:	10c00917 	ldw	r3,36(r2)
  80be70:	e0bffb17 	ldw	r2,-20(fp)
  80be74:	10800117 	ldw	r2,4(r2)
  80be78:	18bff736 	bltu	r3,r2,80be58 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80be7c:	e0bffb17 	ldw	r2,-20(fp)
  80be80:	10c00d17 	ldw	r3,52(r2)
  80be84:	e0bff917 	ldw	r2,-28(fp)
  80be88:	18800326 	beq	r3,r2,80be98 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80be8c:	e0bffd17 	ldw	r2,-12(fp)
  80be90:	10800048 	cmpgei	r2,r2,1
  80be94:	103fcd1e 	bne	r2,zero,80bdcc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80be98:	e0fffc17 	ldw	r3,-16(fp)
  80be9c:	e0bff617 	ldw	r2,-40(fp)
  80bea0:	18800526 	beq	r3,r2,80beb8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80bea4:	e0fffc17 	ldw	r3,-16(fp)
  80bea8:	e0bff617 	ldw	r2,-40(fp)
  80beac:	1887c83a 	sub	r3,r3,r2
  80beb0:	e0ffff15 	stw	r3,-4(fp)
  80beb4:	00000906 	br	80bedc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80beb8:	e0bffe17 	ldw	r2,-8(fp)
  80bebc:	1090000c 	andi	r2,r2,16384
  80bec0:	1005003a 	cmpeq	r2,r2,zero
  80bec4:	1000031e 	bne	r2,zero,80bed4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80bec8:	00bffd44 	movi	r2,-11
  80becc:	e0bfff15 	stw	r2,-4(fp)
  80bed0:	00000206 	br	80bedc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80bed4:	00bffec4 	movi	r2,-5
  80bed8:	e0bfff15 	stw	r2,-4(fp)
  80bedc:	e0bfff17 	ldw	r2,-4(fp)
}
  80bee0:	e037883a 	mov	sp,fp
  80bee4:	dfc00117 	ldw	ra,4(sp)
  80bee8:	df000017 	ldw	fp,0(sp)
  80beec:	dec00204 	addi	sp,sp,8
  80bef0:	f800283a 	ret

0080bef4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80bef4:	defffa04 	addi	sp,sp,-24
  80bef8:	dfc00515 	stw	ra,20(sp)
  80befc:	df000415 	stw	fp,16(sp)
  80bf00:	df000404 	addi	fp,sp,16
  80bf04:	e13ffe15 	stw	r4,-8(fp)
  80bf08:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80bf0c:	e0bffe17 	ldw	r2,-8(fp)
  80bf10:	10800017 	ldw	r2,0(r2)
  80bf14:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80bf18:	008003f4 	movhi	r2,15
  80bf1c:	10909004 	addi	r2,r2,16960
  80bf20:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80bf24:	e0bffe17 	ldw	r2,-8(fp)
  80bf28:	10800803 	ldbu	r2,32(r2)
  80bf2c:	10803fcc 	andi	r2,r2,255
  80bf30:	1080201c 	xori	r2,r2,128
  80bf34:	10bfe004 	addi	r2,r2,-128
  80bf38:	1004c03a 	cmpne	r2,r2,zero
  80bf3c:	1000161e 	bne	r2,zero,80bf98 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bf40:	00000a06 	br	80bf6c <lcd_write_command+0x78>
    if (--i == 0)
  80bf44:	e0bffc17 	ldw	r2,-16(fp)
  80bf48:	10bfffc4 	addi	r2,r2,-1
  80bf4c:	e0bffc15 	stw	r2,-16(fp)
  80bf50:	e0bffc17 	ldw	r2,-16(fp)
  80bf54:	1004c03a 	cmpne	r2,r2,zero
  80bf58:	1000041e 	bne	r2,zero,80bf6c <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80bf5c:	e0fffe17 	ldw	r3,-8(fp)
  80bf60:	00800044 	movi	r2,1
  80bf64:	18800805 	stb	r2,32(r3)
      return;
  80bf68:	00000b06 	br	80bf98 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bf6c:	e0bffd17 	ldw	r2,-12(fp)
  80bf70:	10800104 	addi	r2,r2,4
  80bf74:	10800037 	ldwio	r2,0(r2)
  80bf78:	1080200c 	andi	r2,r2,128
  80bf7c:	1004c03a 	cmpne	r2,r2,zero
  80bf80:	103ff01e 	bne	r2,zero,80bf44 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80bf84:	01001904 	movi	r4,100
  80bf88:	080b1980 	call	80b198 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80bf8c:	e0bffd17 	ldw	r2,-12(fp)
  80bf90:	e0ffff03 	ldbu	r3,-4(fp)
  80bf94:	10c00035 	stwio	r3,0(r2)
}
  80bf98:	e037883a 	mov	sp,fp
  80bf9c:	dfc00117 	ldw	ra,4(sp)
  80bfa0:	df000017 	ldw	fp,0(sp)
  80bfa4:	dec00204 	addi	sp,sp,8
  80bfa8:	f800283a 	ret

0080bfac <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80bfac:	defffa04 	addi	sp,sp,-24
  80bfb0:	dfc00515 	stw	ra,20(sp)
  80bfb4:	df000415 	stw	fp,16(sp)
  80bfb8:	df000404 	addi	fp,sp,16
  80bfbc:	e13ffe15 	stw	r4,-8(fp)
  80bfc0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80bfc4:	e0bffe17 	ldw	r2,-8(fp)
  80bfc8:	10800017 	ldw	r2,0(r2)
  80bfcc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80bfd0:	008003f4 	movhi	r2,15
  80bfd4:	10909004 	addi	r2,r2,16960
  80bfd8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80bfdc:	e0bffe17 	ldw	r2,-8(fp)
  80bfe0:	10800803 	ldbu	r2,32(r2)
  80bfe4:	10803fcc 	andi	r2,r2,255
  80bfe8:	1080201c 	xori	r2,r2,128
  80bfec:	10bfe004 	addi	r2,r2,-128
  80bff0:	1004c03a 	cmpne	r2,r2,zero
  80bff4:	10001d1e 	bne	r2,zero,80c06c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80bff8:	00000a06 	br	80c024 <lcd_write_data+0x78>
    if (--i == 0)
  80bffc:	e0bffc17 	ldw	r2,-16(fp)
  80c000:	10bfffc4 	addi	r2,r2,-1
  80c004:	e0bffc15 	stw	r2,-16(fp)
  80c008:	e0bffc17 	ldw	r2,-16(fp)
  80c00c:	1004c03a 	cmpne	r2,r2,zero
  80c010:	1000041e 	bne	r2,zero,80c024 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80c014:	e0fffe17 	ldw	r3,-8(fp)
  80c018:	00800044 	movi	r2,1
  80c01c:	18800805 	stb	r2,32(r3)
      return;
  80c020:	00001206 	br	80c06c <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c024:	e0bffd17 	ldw	r2,-12(fp)
  80c028:	10800104 	addi	r2,r2,4
  80c02c:	10800037 	ldwio	r2,0(r2)
  80c030:	1080200c 	andi	r2,r2,128
  80c034:	1004c03a 	cmpne	r2,r2,zero
  80c038:	103ff01e 	bne	r2,zero,80bffc <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80c03c:	01001904 	movi	r4,100
  80c040:	080b1980 	call	80b198 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80c044:	e0bffd17 	ldw	r2,-12(fp)
  80c048:	10800204 	addi	r2,r2,8
  80c04c:	e0ffff03 	ldbu	r3,-4(fp)
  80c050:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80c054:	e0bffe17 	ldw	r2,-8(fp)
  80c058:	108008c3 	ldbu	r2,35(r2)
  80c05c:	10800044 	addi	r2,r2,1
  80c060:	1007883a 	mov	r3,r2
  80c064:	e0bffe17 	ldw	r2,-8(fp)
  80c068:	10c008c5 	stb	r3,35(r2)
}
  80c06c:	e037883a 	mov	sp,fp
  80c070:	dfc00117 	ldw	ra,4(sp)
  80c074:	df000017 	ldw	fp,0(sp)
  80c078:	dec00204 	addi	sp,sp,8
  80c07c:	f800283a 	ret

0080c080 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80c080:	defffc04 	addi	sp,sp,-16
  80c084:	dfc00315 	stw	ra,12(sp)
  80c088:	df000215 	stw	fp,8(sp)
  80c08c:	df000204 	addi	fp,sp,8
  80c090:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80c094:	e13fff17 	ldw	r4,-4(fp)
  80c098:	01400044 	movi	r5,1
  80c09c:	080bef40 	call	80bef4 <lcd_write_command>

  sp->x = 0;
  80c0a0:	e0bfff17 	ldw	r2,-4(fp)
  80c0a4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80c0a8:	e0bfff17 	ldw	r2,-4(fp)
  80c0ac:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80c0b0:	e0bfff17 	ldw	r2,-4(fp)
  80c0b4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c0b8:	e03ffe15 	stw	zero,-8(fp)
  80c0bc:	00001906 	br	80c124 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80c0c0:	e0bffe17 	ldw	r2,-8(fp)
  80c0c4:	108018e4 	muli	r2,r2,99
  80c0c8:	10c01004 	addi	r3,r2,64
  80c0cc:	e0bfff17 	ldw	r2,-4(fp)
  80c0d0:	1889883a 	add	r4,r3,r2
  80c0d4:	01400804 	movi	r5,32
  80c0d8:	01801444 	movi	r6,81
  80c0dc:	0801e940 	call	801e94 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80c0e0:	e0bffe17 	ldw	r2,-8(fp)
  80c0e4:	108018e4 	muli	r2,r2,99
  80c0e8:	10c00c04 	addi	r3,r2,48
  80c0ec:	e0bfff17 	ldw	r2,-4(fp)
  80c0f0:	1889883a 	add	r4,r3,r2
  80c0f4:	01400804 	movi	r5,32
  80c0f8:	01800404 	movi	r6,16
  80c0fc:	0801e940 	call	801e94 <memset>
    sp->line[y].width = 0;
  80c100:	e0bffe17 	ldw	r2,-8(fp)
  80c104:	e0ffff17 	ldw	r3,-4(fp)
  80c108:	108018e4 	muli	r2,r2,99
  80c10c:	10c5883a 	add	r2,r2,r3
  80c110:	10802404 	addi	r2,r2,144
  80c114:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c118:	e0bffe17 	ldw	r2,-8(fp)
  80c11c:	10800044 	addi	r2,r2,1
  80c120:	e0bffe15 	stw	r2,-8(fp)
  80c124:	e0bffe17 	ldw	r2,-8(fp)
  80c128:	10800090 	cmplti	r2,r2,2
  80c12c:	103fe41e 	bne	r2,zero,80c0c0 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80c130:	e037883a 	mov	sp,fp
  80c134:	dfc00117 	ldw	ra,4(sp)
  80c138:	df000017 	ldw	fp,0(sp)
  80c13c:	dec00204 	addi	sp,sp,8
  80c140:	f800283a 	ret

0080c144 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80c144:	defff604 	addi	sp,sp,-40
  80c148:	dfc00915 	stw	ra,36(sp)
  80c14c:	df000815 	stw	fp,32(sp)
  80c150:	dc000715 	stw	r16,28(sp)
  80c154:	df000704 	addi	fp,sp,28
  80c158:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80c15c:	e0bfff17 	ldw	r2,-4(fp)
  80c160:	10800943 	ldbu	r2,37(r2)
  80c164:	10803fcc 	andi	r2,r2,255
  80c168:	1080201c 	xori	r2,r2,128
  80c16c:	10bfe004 	addi	r2,r2,-128
  80c170:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c174:	e03ffe15 	stw	zero,-8(fp)
  80c178:	00006406 	br	80c30c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80c17c:	e0bffe17 	ldw	r2,-8(fp)
  80c180:	e0ffff17 	ldw	r3,-4(fp)
  80c184:	108018e4 	muli	r2,r2,99
  80c188:	10c5883a 	add	r2,r2,r3
  80c18c:	10802404 	addi	r2,r2,144
  80c190:	10800043 	ldbu	r2,1(r2)
  80c194:	10803fcc 	andi	r2,r2,255
  80c198:	1080201c 	xori	r2,r2,128
  80c19c:	10bfe004 	addi	r2,r2,-128
  80c1a0:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80c1a4:	e0bffe17 	ldw	r2,-8(fp)
  80c1a8:	e0ffff17 	ldw	r3,-4(fp)
  80c1ac:	108018e4 	muli	r2,r2,99
  80c1b0:	10c5883a 	add	r2,r2,r3
  80c1b4:	10802404 	addi	r2,r2,144
  80c1b8:	10800083 	ldbu	r2,2(r2)
  80c1bc:	10c03fcc 	andi	r3,r2,255
  80c1c0:	e0bffc17 	ldw	r2,-16(fp)
  80c1c4:	1885383a 	mul	r2,r3,r2
  80c1c8:	1005d23a 	srai	r2,r2,8
  80c1cc:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80c1d0:	e0fffa17 	ldw	r3,-24(fp)
  80c1d4:	e0bffb17 	ldw	r2,-20(fp)
  80c1d8:	18800116 	blt	r3,r2,80c1e0 <lcd_repaint_screen+0x9c>
      offset = 0;
  80c1dc:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80c1e0:	e03ffd15 	stw	zero,-12(fp)
  80c1e4:	00004306 	br	80c2f4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80c1e8:	e43ffe17 	ldw	r16,-8(fp)
  80c1ec:	e0fffd17 	ldw	r3,-12(fp)
  80c1f0:	e0bffa17 	ldw	r2,-24(fp)
  80c1f4:	1889883a 	add	r4,r3,r2
  80c1f8:	e17ffb17 	ldw	r5,-20(fp)
  80c1fc:	0809d180 	call	809d18 <__modsi3>
  80c200:	1009883a 	mov	r4,r2
  80c204:	e0ffff17 	ldw	r3,-4(fp)
  80c208:	808018e4 	muli	r2,r16,99
  80c20c:	10c5883a 	add	r2,r2,r3
  80c210:	1105883a 	add	r2,r2,r4
  80c214:	10801004 	addi	r2,r2,64
  80c218:	10800003 	ldbu	r2,0(r2)
  80c21c:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80c220:	e0bffe17 	ldw	r2,-8(fp)
  80c224:	e13ffd17 	ldw	r4,-12(fp)
  80c228:	e0ffff17 	ldw	r3,-4(fp)
  80c22c:	108018e4 	muli	r2,r2,99
  80c230:	10c5883a 	add	r2,r2,r3
  80c234:	1105883a 	add	r2,r2,r4
  80c238:	10800c04 	addi	r2,r2,48
  80c23c:	10800003 	ldbu	r2,0(r2)
  80c240:	10c03fcc 	andi	r3,r2,255
  80c244:	18c0201c 	xori	r3,r3,128
  80c248:	18ffe004 	addi	r3,r3,-128
  80c24c:	e0bff947 	ldb	r2,-27(fp)
  80c250:	18802526 	beq	r3,r2,80c2e8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80c254:	e0fffe17 	ldw	r3,-8(fp)
  80c258:	d0a00e04 	addi	r2,gp,-32712
  80c25c:	1885883a 	add	r2,r3,r2
  80c260:	10800003 	ldbu	r2,0(r2)
  80c264:	1007883a 	mov	r3,r2
  80c268:	e0bffd17 	ldw	r2,-12(fp)
  80c26c:	1885883a 	add	r2,r3,r2
  80c270:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80c274:	e0fff903 	ldbu	r3,-28(fp)
  80c278:	e0bfff17 	ldw	r2,-4(fp)
  80c27c:	108008c3 	ldbu	r2,35(r2)
  80c280:	10803fcc 	andi	r2,r2,255
  80c284:	1080201c 	xori	r2,r2,128
  80c288:	10bfe004 	addi	r2,r2,-128
  80c28c:	18800926 	beq	r3,r2,80c2b4 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80c290:	e0fff903 	ldbu	r3,-28(fp)
  80c294:	00bfe004 	movi	r2,-128
  80c298:	1884b03a 	or	r2,r3,r2
  80c29c:	11403fcc 	andi	r5,r2,255
  80c2a0:	e13fff17 	ldw	r4,-4(fp)
  80c2a4:	080bef40 	call	80bef4 <lcd_write_command>
          sp->address = address;
  80c2a8:	e0fff903 	ldbu	r3,-28(fp)
  80c2ac:	e0bfff17 	ldw	r2,-4(fp)
  80c2b0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80c2b4:	e0bff943 	ldbu	r2,-27(fp)
  80c2b8:	11403fcc 	andi	r5,r2,255
  80c2bc:	e13fff17 	ldw	r4,-4(fp)
  80c2c0:	080bfac0 	call	80bfac <lcd_write_data>
        sp->line[y].visible[x] = c;
  80c2c4:	e0bffe17 	ldw	r2,-8(fp)
  80c2c8:	e13ffd17 	ldw	r4,-12(fp)
  80c2cc:	e0ffff17 	ldw	r3,-4(fp)
  80c2d0:	108018e4 	muli	r2,r2,99
  80c2d4:	10c5883a 	add	r2,r2,r3
  80c2d8:	1105883a 	add	r2,r2,r4
  80c2dc:	10c00c04 	addi	r3,r2,48
  80c2e0:	e0bff943 	ldbu	r2,-27(fp)
  80c2e4:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80c2e8:	e0bffd17 	ldw	r2,-12(fp)
  80c2ec:	10800044 	addi	r2,r2,1
  80c2f0:	e0bffd15 	stw	r2,-12(fp)
  80c2f4:	e0bffd17 	ldw	r2,-12(fp)
  80c2f8:	10800410 	cmplti	r2,r2,16
  80c2fc:	103fba1e 	bne	r2,zero,80c1e8 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c300:	e0bffe17 	ldw	r2,-8(fp)
  80c304:	10800044 	addi	r2,r2,1
  80c308:	e0bffe15 	stw	r2,-8(fp)
  80c30c:	e0bffe17 	ldw	r2,-8(fp)
  80c310:	10800090 	cmplti	r2,r2,2
  80c314:	103f991e 	bne	r2,zero,80c17c <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80c318:	e037883a 	mov	sp,fp
  80c31c:	dfc00217 	ldw	ra,8(sp)
  80c320:	df000117 	ldw	fp,4(sp)
  80c324:	dc000017 	ldw	r16,0(sp)
  80c328:	dec00304 	addi	sp,sp,12
  80c32c:	f800283a 	ret

0080c330 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80c330:	defffc04 	addi	sp,sp,-16
  80c334:	dfc00315 	stw	ra,12(sp)
  80c338:	df000215 	stw	fp,8(sp)
  80c33c:	df000204 	addi	fp,sp,8
  80c340:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c344:	e03ffe15 	stw	zero,-8(fp)
  80c348:	00001d06 	br	80c3c0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80c34c:	e0bffe17 	ldw	r2,-8(fp)
  80c350:	10800048 	cmpgei	r2,r2,1
  80c354:	10000f1e 	bne	r2,zero,80c394 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80c358:	e0bffe17 	ldw	r2,-8(fp)
  80c35c:	108018e4 	muli	r2,r2,99
  80c360:	10c01004 	addi	r3,r2,64
  80c364:	e0bfff17 	ldw	r2,-4(fp)
  80c368:	1889883a 	add	r4,r3,r2
  80c36c:	e0bffe17 	ldw	r2,-8(fp)
  80c370:	10800044 	addi	r2,r2,1
  80c374:	108018e4 	muli	r2,r2,99
  80c378:	10c01004 	addi	r3,r2,64
  80c37c:	e0bfff17 	ldw	r2,-4(fp)
  80c380:	1885883a 	add	r2,r3,r2
  80c384:	100b883a 	mov	r5,r2
  80c388:	01801404 	movi	r6,80
  80c38c:	08065c40 	call	8065c4 <memcpy>
  80c390:	00000806 	br	80c3b4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80c394:	e0bffe17 	ldw	r2,-8(fp)
  80c398:	108018e4 	muli	r2,r2,99
  80c39c:	10c01004 	addi	r3,r2,64
  80c3a0:	e0bfff17 	ldw	r2,-4(fp)
  80c3a4:	1889883a 	add	r4,r3,r2
  80c3a8:	01400804 	movi	r5,32
  80c3ac:	01801404 	movi	r6,80
  80c3b0:	0801e940 	call	801e94 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c3b4:	e0bffe17 	ldw	r2,-8(fp)
  80c3b8:	10800044 	addi	r2,r2,1
  80c3bc:	e0bffe15 	stw	r2,-8(fp)
  80c3c0:	e0bffe17 	ldw	r2,-8(fp)
  80c3c4:	10800090 	cmplti	r2,r2,2
  80c3c8:	103fe01e 	bne	r2,zero,80c34c <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80c3cc:	e0bfff17 	ldw	r2,-4(fp)
  80c3d0:	10800883 	ldbu	r2,34(r2)
  80c3d4:	10bfffc4 	addi	r2,r2,-1
  80c3d8:	1007883a 	mov	r3,r2
  80c3dc:	e0bfff17 	ldw	r2,-4(fp)
  80c3e0:	10c00885 	stb	r3,34(r2)
}
  80c3e4:	e037883a 	mov	sp,fp
  80c3e8:	dfc00117 	ldw	ra,4(sp)
  80c3ec:	df000017 	ldw	fp,0(sp)
  80c3f0:	dec00204 	addi	sp,sp,8
  80c3f4:	f800283a 	ret

0080c3f8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80c3f8:	defff804 	addi	sp,sp,-32
  80c3fc:	dfc00715 	stw	ra,28(sp)
  80c400:	df000615 	stw	fp,24(sp)
  80c404:	df000604 	addi	fp,sp,24
  80c408:	e13ffd15 	stw	r4,-12(fp)
  80c40c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80c410:	e03ffc15 	stw	zero,-16(fp)
  80c414:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  80c418:	e0bffd17 	ldw	r2,-12(fp)
  80c41c:	10800a03 	ldbu	r2,40(r2)
  80c420:	10803fcc 	andi	r2,r2,255
  80c424:	1080201c 	xori	r2,r2,128
  80c428:	10bfe004 	addi	r2,r2,-128
  80c42c:	108016d8 	cmpnei	r2,r2,91
  80c430:	1000491e 	bne	r2,zero,80c558 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  80c434:	e0bffd17 	ldw	r2,-12(fp)
  80c438:	10800a04 	addi	r2,r2,40
  80c43c:	10800044 	addi	r2,r2,1
  80c440:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80c444:	00000d06 	br	80c47c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80c448:	e0bffc17 	ldw	r2,-16(fp)
  80c44c:	10c002a4 	muli	r3,r2,10
  80c450:	e0bffa17 	ldw	r2,-24(fp)
  80c454:	10800003 	ldbu	r2,0(r2)
  80c458:	10803fcc 	andi	r2,r2,255
  80c45c:	1080201c 	xori	r2,r2,128
  80c460:	10bfe004 	addi	r2,r2,-128
  80c464:	1885883a 	add	r2,r3,r2
  80c468:	10bff404 	addi	r2,r2,-48
  80c46c:	e0bffc15 	stw	r2,-16(fp)
  80c470:	e0bffa17 	ldw	r2,-24(fp)
  80c474:	10800044 	addi	r2,r2,1
  80c478:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80c47c:	e0bffa17 	ldw	r2,-24(fp)
  80c480:	10800003 	ldbu	r2,0(r2)
  80c484:	10803fcc 	andi	r2,r2,255
  80c488:	1080201c 	xori	r2,r2,128
  80c48c:	10bfe004 	addi	r2,r2,-128
  80c490:	1007883a 	mov	r3,r2
  80c494:	00802074 	movhi	r2,129
  80c498:	10835604 	addi	r2,r2,3416
  80c49c:	10800017 	ldw	r2,0(r2)
  80c4a0:	1885883a 	add	r2,r3,r2
  80c4a4:	10800003 	ldbu	r2,0(r2)
  80c4a8:	10803fcc 	andi	r2,r2,255
  80c4ac:	1080010c 	andi	r2,r2,4
  80c4b0:	1004c03a 	cmpne	r2,r2,zero
  80c4b4:	103fe41e 	bne	r2,zero,80c448 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80c4b8:	e0bffa17 	ldw	r2,-24(fp)
  80c4bc:	10800003 	ldbu	r2,0(r2)
  80c4c0:	10803fcc 	andi	r2,r2,255
  80c4c4:	1080201c 	xori	r2,r2,128
  80c4c8:	10bfe004 	addi	r2,r2,-128
  80c4cc:	10800ed8 	cmpnei	r2,r2,59
  80c4d0:	1000231e 	bne	r2,zero,80c560 <lcd_handle_escape+0x168>
    {
      ptr++;
  80c4d4:	e0bffa17 	ldw	r2,-24(fp)
  80c4d8:	10800044 	addi	r2,r2,1
  80c4dc:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80c4e0:	00000d06 	br	80c518 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80c4e4:	e0bffb17 	ldw	r2,-20(fp)
  80c4e8:	10c002a4 	muli	r3,r2,10
  80c4ec:	e0bffa17 	ldw	r2,-24(fp)
  80c4f0:	10800003 	ldbu	r2,0(r2)
  80c4f4:	10803fcc 	andi	r2,r2,255
  80c4f8:	1080201c 	xori	r2,r2,128
  80c4fc:	10bfe004 	addi	r2,r2,-128
  80c500:	1885883a 	add	r2,r3,r2
  80c504:	10bff404 	addi	r2,r2,-48
  80c508:	e0bffb15 	stw	r2,-20(fp)
  80c50c:	e0bffa17 	ldw	r2,-24(fp)
  80c510:	10800044 	addi	r2,r2,1
  80c514:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80c518:	e0bffa17 	ldw	r2,-24(fp)
  80c51c:	10800003 	ldbu	r2,0(r2)
  80c520:	10803fcc 	andi	r2,r2,255
  80c524:	1080201c 	xori	r2,r2,128
  80c528:	10bfe004 	addi	r2,r2,-128
  80c52c:	1007883a 	mov	r3,r2
  80c530:	00802074 	movhi	r2,129
  80c534:	10835604 	addi	r2,r2,3416
  80c538:	10800017 	ldw	r2,0(r2)
  80c53c:	1885883a 	add	r2,r3,r2
  80c540:	10800003 	ldbu	r2,0(r2)
  80c544:	10803fcc 	andi	r2,r2,255
  80c548:	1080010c 	andi	r2,r2,4
  80c54c:	1004c03a 	cmpne	r2,r2,zero
  80c550:	103fe41e 	bne	r2,zero,80c4e4 <lcd_handle_escape+0xec>
  80c554:	00000206 	br	80c560 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80c558:	00bfffc4 	movi	r2,-1
  80c55c:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80c560:	e0bffe07 	ldb	r2,-8(fp)
  80c564:	e0bfff15 	stw	r2,-4(fp)
  80c568:	e0ffff17 	ldw	r3,-4(fp)
  80c56c:	188012a0 	cmpeqi	r2,r3,74
  80c570:	10002f1e 	bne	r2,zero,80c630 <lcd_handle_escape+0x238>
  80c574:	e0ffff17 	ldw	r3,-4(fp)
  80c578:	188012c8 	cmpgei	r2,r3,75
  80c57c:	1000041e 	bne	r2,zero,80c590 <lcd_handle_escape+0x198>
  80c580:	e0ffff17 	ldw	r3,-4(fp)
  80c584:	18801220 	cmpeqi	r2,r3,72
  80c588:	1000081e 	bne	r2,zero,80c5ac <lcd_handle_escape+0x1b4>
  80c58c:	00004906 	br	80c6b4 <lcd_handle_escape+0x2bc>
  80c590:	e0ffff17 	ldw	r3,-4(fp)
  80c594:	188012e0 	cmpeqi	r2,r3,75
  80c598:	10002b1e 	bne	r2,zero,80c648 <lcd_handle_escape+0x250>
  80c59c:	e0ffff17 	ldw	r3,-4(fp)
  80c5a0:	188019a0 	cmpeqi	r2,r3,102
  80c5a4:	1000011e 	bne	r2,zero,80c5ac <lcd_handle_escape+0x1b4>
  80c5a8:	00004206 	br	80c6b4 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80c5ac:	e0bffb17 	ldw	r2,-20(fp)
  80c5b0:	10800050 	cmplti	r2,r2,1
  80c5b4:	1000051e 	bne	r2,zero,80c5cc <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  80c5b8:	e0bffb17 	ldw	r2,-20(fp)
  80c5bc:	10bfffc4 	addi	r2,r2,-1
  80c5c0:	1007883a 	mov	r3,r2
  80c5c4:	e0bffd17 	ldw	r2,-12(fp)
  80c5c8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80c5cc:	e0bffc17 	ldw	r2,-16(fp)
  80c5d0:	10800050 	cmplti	r2,r2,1
  80c5d4:	1000371e 	bne	r2,zero,80c6b4 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  80c5d8:	e0bffc17 	ldw	r2,-16(fp)
  80c5dc:	10bfffc4 	addi	r2,r2,-1
  80c5e0:	1007883a 	mov	r3,r2
  80c5e4:	e0bffd17 	ldw	r2,-12(fp)
  80c5e8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80c5ec:	e0bffd17 	ldw	r2,-12(fp)
  80c5f0:	10800883 	ldbu	r2,34(r2)
  80c5f4:	10803fcc 	andi	r2,r2,255
  80c5f8:	10800170 	cmpltui	r2,r2,5
  80c5fc:	1000061e 	bne	r2,zero,80c618 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  80c600:	e0fffd17 	ldw	r3,-12(fp)
  80c604:	00800104 	movi	r2,4
  80c608:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  80c60c:	00000206 	br	80c618 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  80c610:	e13ffd17 	ldw	r4,-12(fp)
  80c614:	080c3300 	call	80c330 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80c618:	e0bffd17 	ldw	r2,-12(fp)
  80c61c:	10800883 	ldbu	r2,34(r2)
  80c620:	10803fcc 	andi	r2,r2,255
  80c624:	108000e8 	cmpgeui	r2,r2,3
  80c628:	103ff91e 	bne	r2,zero,80c610 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  80c62c:	00002106 	br	80c6b4 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80c630:	e0bffc17 	ldw	r2,-16(fp)
  80c634:	10800098 	cmpnei	r2,r2,2
  80c638:	10001e1e 	bne	r2,zero,80c6b4 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  80c63c:	e13ffd17 	ldw	r4,-12(fp)
  80c640:	080c0800 	call	80c080 <lcd_clear_screen>
    break;
  80c644:	00001b06 	br	80c6b4 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80c648:	e0bffc17 	ldw	r2,-16(fp)
  80c64c:	10800048 	cmpgei	r2,r2,1
  80c650:	1000181e 	bne	r2,zero,80c6b4 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80c654:	e0bffd17 	ldw	r2,-12(fp)
  80c658:	10800843 	ldbu	r2,33(r2)
  80c65c:	10803fcc 	andi	r2,r2,255
  80c660:	10801428 	cmpgeui	r2,r2,80
  80c664:	1000131e 	bne	r2,zero,80c6b4 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80c668:	e0bffd17 	ldw	r2,-12(fp)
  80c66c:	10800883 	ldbu	r2,34(r2)
  80c670:	10803fcc 	andi	r2,r2,255
  80c674:	108018e4 	muli	r2,r2,99
  80c678:	10c01004 	addi	r3,r2,64
  80c67c:	e0bffd17 	ldw	r2,-12(fp)
  80c680:	1887883a 	add	r3,r3,r2
  80c684:	e0bffd17 	ldw	r2,-12(fp)
  80c688:	10800843 	ldbu	r2,33(r2)
  80c68c:	10803fcc 	andi	r2,r2,255
  80c690:	1889883a 	add	r4,r3,r2
  80c694:	e0bffd17 	ldw	r2,-12(fp)
  80c698:	10800843 	ldbu	r2,33(r2)
  80c69c:	10c03fcc 	andi	r3,r2,255
  80c6a0:	00801404 	movi	r2,80
  80c6a4:	10c5c83a 	sub	r2,r2,r3
  80c6a8:	100d883a 	mov	r6,r2
  80c6ac:	01400804 	movi	r5,32
  80c6b0:	0801e940 	call	801e94 <memset>
    }
    break;
  }
}
  80c6b4:	e037883a 	mov	sp,fp
  80c6b8:	dfc00117 	ldw	ra,4(sp)
  80c6bc:	df000017 	ldw	fp,0(sp)
  80c6c0:	dec00204 	addi	sp,sp,8
  80c6c4:	f800283a 	ret

0080c6c8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80c6c8:	defff204 	addi	sp,sp,-56
  80c6cc:	dfc00d15 	stw	ra,52(sp)
  80c6d0:	df000c15 	stw	fp,48(sp)
  80c6d4:	dc000b15 	stw	r16,44(sp)
  80c6d8:	df000b04 	addi	fp,sp,44
  80c6dc:	e13ffc15 	stw	r4,-16(fp)
  80c6e0:	e17ffd15 	stw	r5,-12(fp)
  80c6e4:	e1bffe15 	stw	r6,-8(fp)
  80c6e8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80c6ec:	e0bffe17 	ldw	r2,-8(fp)
  80c6f0:	1007883a 	mov	r3,r2
  80c6f4:	e0bffd17 	ldw	r2,-12(fp)
  80c6f8:	10c5883a 	add	r2,r2,r3
  80c6fc:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80c700:	e0fffc17 	ldw	r3,-16(fp)
  80c704:	00800044 	movi	r2,1
  80c708:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  80c70c:	0000a206 	br	80c998 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  80c710:	e0bffd17 	ldw	r2,-12(fp)
  80c714:	10800003 	ldbu	r2,0(r2)
  80c718:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  80c71c:	e0bffc17 	ldw	r2,-16(fp)
  80c720:	10800903 	ldbu	r2,36(r2)
  80c724:	10803fcc 	andi	r2,r2,255
  80c728:	1080201c 	xori	r2,r2,128
  80c72c:	10bfe004 	addi	r2,r2,-128
  80c730:	1004803a 	cmplt	r2,r2,zero
  80c734:	10003b1e 	bne	r2,zero,80c824 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  80c738:	e0bffc17 	ldw	r2,-16(fp)
  80c73c:	10800903 	ldbu	r2,36(r2)
  80c740:	10803fcc 	andi	r2,r2,255
  80c744:	1080201c 	xori	r2,r2,128
  80c748:	10bfe004 	addi	r2,r2,-128
  80c74c:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80c750:	e0bff717 	ldw	r2,-36(fp)
  80c754:	1004c03a 	cmpne	r2,r2,zero
  80c758:	1000031e 	bne	r2,zero,80c768 <altera_avalon_lcd_16207_write+0xa0>
  80c75c:	e0bff807 	ldb	r2,-32(fp)
  80c760:	108016d8 	cmpnei	r2,r2,91
  80c764:	1000111e 	bne	r2,zero,80c7ac <altera_avalon_lcd_16207_write+0xe4>
  80c768:	e0bff717 	ldw	r2,-36(fp)
  80c76c:	1005003a 	cmpeq	r2,r2,zero
  80c770:	10001a1e 	bne	r2,zero,80c7dc <altera_avalon_lcd_16207_write+0x114>
  80c774:	e0bff807 	ldb	r2,-32(fp)
  80c778:	1007883a 	mov	r3,r2
  80c77c:	00802074 	movhi	r2,129
  80c780:	10835604 	addi	r2,r2,3416
  80c784:	10800017 	ldw	r2,0(r2)
  80c788:	1885883a 	add	r2,r3,r2
  80c78c:	10800003 	ldbu	r2,0(r2)
  80c790:	10803fcc 	andi	r2,r2,255
  80c794:	1080010c 	andi	r2,r2,4
  80c798:	1004c03a 	cmpne	r2,r2,zero
  80c79c:	10000f1e 	bne	r2,zero,80c7dc <altera_avalon_lcd_16207_write+0x114>
  80c7a0:	e0bff807 	ldb	r2,-32(fp)
  80c7a4:	10800ee0 	cmpeqi	r2,r2,59
  80c7a8:	10000c1e 	bne	r2,zero,80c7dc <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  80c7ac:	e0fff717 	ldw	r3,-36(fp)
  80c7b0:	e0bffc17 	ldw	r2,-16(fp)
  80c7b4:	1885883a 	add	r2,r3,r2
  80c7b8:	10800a04 	addi	r2,r2,40
  80c7bc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80c7c0:	e17ff807 	ldb	r5,-32(fp)
  80c7c4:	e13ffc17 	ldw	r4,-16(fp)
  80c7c8:	080c3f80 	call	80c3f8 <lcd_handle_escape>

        sp->esccount = -1;
  80c7cc:	e0fffc17 	ldw	r3,-16(fp)
  80c7d0:	00bfffc4 	movi	r2,-1
  80c7d4:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80c7d8:	00006c06 	br	80c98c <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80c7dc:	e0bffc17 	ldw	r2,-16(fp)
  80c7e0:	10800903 	ldbu	r2,36(r2)
  80c7e4:	10803fcc 	andi	r2,r2,255
  80c7e8:	108001e8 	cmpgeui	r2,r2,7
  80c7ec:	1000671e 	bne	r2,zero,80c98c <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  80c7f0:	e0fff717 	ldw	r3,-36(fp)
  80c7f4:	e0bffc17 	ldw	r2,-16(fp)
  80c7f8:	1885883a 	add	r2,r3,r2
  80c7fc:	10c00a04 	addi	r3,r2,40
  80c800:	e0bff803 	ldbu	r2,-32(fp)
  80c804:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  80c808:	e0bffc17 	ldw	r2,-16(fp)
  80c80c:	10800903 	ldbu	r2,36(r2)
  80c810:	10800044 	addi	r2,r2,1
  80c814:	1007883a 	mov	r3,r2
  80c818:	e0bffc17 	ldw	r2,-16(fp)
  80c81c:	10c00905 	stb	r3,36(r2)
  80c820:	00005a06 	br	80c98c <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  80c824:	e0bff807 	ldb	r2,-32(fp)
  80c828:	108006d8 	cmpnei	r2,r2,27
  80c82c:	1000031e 	bne	r2,zero,80c83c <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  80c830:	e0bffc17 	ldw	r2,-16(fp)
  80c834:	10000905 	stb	zero,36(r2)
  80c838:	00005406 	br	80c98c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  80c83c:	e0bff807 	ldb	r2,-32(fp)
  80c840:	10800358 	cmpnei	r2,r2,13
  80c844:	1000031e 	bne	r2,zero,80c854 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  80c848:	e0bffc17 	ldw	r2,-16(fp)
  80c84c:	10000845 	stb	zero,33(r2)
  80c850:	00004e06 	br	80c98c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  80c854:	e0bff807 	ldb	r2,-32(fp)
  80c858:	10800298 	cmpnei	r2,r2,10
  80c85c:	1000101e 	bne	r2,zero,80c8a0 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  80c860:	e0bffc17 	ldw	r2,-16(fp)
  80c864:	10000845 	stb	zero,33(r2)
      sp->y++;
  80c868:	e0bffc17 	ldw	r2,-16(fp)
  80c86c:	10800883 	ldbu	r2,34(r2)
  80c870:	10800044 	addi	r2,r2,1
  80c874:	1007883a 	mov	r3,r2
  80c878:	e0bffc17 	ldw	r2,-16(fp)
  80c87c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80c880:	e0bffc17 	ldw	r2,-16(fp)
  80c884:	10800883 	ldbu	r2,34(r2)
  80c888:	10803fcc 	andi	r2,r2,255
  80c88c:	108000f0 	cmpltui	r2,r2,3
  80c890:	10003e1e 	bne	r2,zero,80c98c <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  80c894:	e13ffc17 	ldw	r4,-16(fp)
  80c898:	080c3300 	call	80c330 <lcd_scroll_up>
  80c89c:	00003b06 	br	80c98c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  80c8a0:	e0bff807 	ldb	r2,-32(fp)
  80c8a4:	10800218 	cmpnei	r2,r2,8
  80c8a8:	10000c1e 	bne	r2,zero,80c8dc <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  80c8ac:	e0bffc17 	ldw	r2,-16(fp)
  80c8b0:	10800843 	ldbu	r2,33(r2)
  80c8b4:	10803fcc 	andi	r2,r2,255
  80c8b8:	1005003a 	cmpeq	r2,r2,zero
  80c8bc:	1000331e 	bne	r2,zero,80c98c <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  80c8c0:	e0bffc17 	ldw	r2,-16(fp)
  80c8c4:	10800843 	ldbu	r2,33(r2)
  80c8c8:	10bfffc4 	addi	r2,r2,-1
  80c8cc:	1007883a 	mov	r3,r2
  80c8d0:	e0bffc17 	ldw	r2,-16(fp)
  80c8d4:	10c00845 	stb	r3,33(r2)
  80c8d8:	00002c06 	br	80c98c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  80c8dc:	e0bff807 	ldb	r2,-32(fp)
  80c8e0:	1007883a 	mov	r3,r2
  80c8e4:	00802074 	movhi	r2,129
  80c8e8:	10835604 	addi	r2,r2,3416
  80c8ec:	10800017 	ldw	r2,0(r2)
  80c8f0:	1885883a 	add	r2,r3,r2
  80c8f4:	10800003 	ldbu	r2,0(r2)
  80c8f8:	10803fcc 	andi	r2,r2,255
  80c8fc:	1080201c 	xori	r2,r2,128
  80c900:	10bfe004 	addi	r2,r2,-128
  80c904:	108025cc 	andi	r2,r2,151
  80c908:	1005003a 	cmpeq	r2,r2,zero
  80c90c:	10001f1e 	bne	r2,zero,80c98c <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80c910:	e0bffc17 	ldw	r2,-16(fp)
  80c914:	10800883 	ldbu	r2,34(r2)
  80c918:	10803fcc 	andi	r2,r2,255
  80c91c:	108000b0 	cmpltui	r2,r2,2
  80c920:	1000021e 	bne	r2,zero,80c92c <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  80c924:	e13ffc17 	ldw	r4,-16(fp)
  80c928:	080c3300 	call	80c330 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80c92c:	e0bffc17 	ldw	r2,-16(fp)
  80c930:	10800843 	ldbu	r2,33(r2)
  80c934:	10803fcc 	andi	r2,r2,255
  80c938:	10801428 	cmpgeui	r2,r2,80
  80c93c:	10000d1e 	bne	r2,zero,80c974 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  80c940:	e0bffc17 	ldw	r2,-16(fp)
  80c944:	10800883 	ldbu	r2,34(r2)
  80c948:	11003fcc 	andi	r4,r2,255
  80c94c:	e0bffc17 	ldw	r2,-16(fp)
  80c950:	10800843 	ldbu	r2,33(r2)
  80c954:	11403fcc 	andi	r5,r2,255
  80c958:	e0fffc17 	ldw	r3,-16(fp)
  80c95c:	208018e4 	muli	r2,r4,99
  80c960:	10c5883a 	add	r2,r2,r3
  80c964:	1145883a 	add	r2,r2,r5
  80c968:	10c01004 	addi	r3,r2,64
  80c96c:	e0bff803 	ldbu	r2,-32(fp)
  80c970:	18800005 	stb	r2,0(r3)

      sp->x++;
  80c974:	e0bffc17 	ldw	r2,-16(fp)
  80c978:	10800843 	ldbu	r2,33(r2)
  80c97c:	10800044 	addi	r2,r2,1
  80c980:	1007883a 	mov	r3,r2
  80c984:	e0bffc17 	ldw	r2,-16(fp)
  80c988:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80c98c:	e0bffd17 	ldw	r2,-12(fp)
  80c990:	10800044 	addi	r2,r2,1
  80c994:	e0bffd15 	stw	r2,-12(fp)
  80c998:	e0fffd17 	ldw	r3,-12(fp)
  80c99c:	e0bffb17 	ldw	r2,-20(fp)
  80c9a0:	18bf5b36 	bltu	r3,r2,80c710 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80c9a4:	00800404 	movi	r2,16
  80c9a8:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c9ac:	e03ffa15 	stw	zero,-24(fp)
  80c9b0:	00003606 	br	80ca8c <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80c9b4:	00801404 	movi	r2,80
  80c9b8:	e0bff615 	stw	r2,-40(fp)
  80c9bc:	00001106 	br	80ca04 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  80c9c0:	e13ffa17 	ldw	r4,-24(fp)
  80c9c4:	e0bff617 	ldw	r2,-40(fp)
  80c9c8:	117fffc4 	addi	r5,r2,-1
  80c9cc:	e0fffc17 	ldw	r3,-16(fp)
  80c9d0:	208018e4 	muli	r2,r4,99
  80c9d4:	10c5883a 	add	r2,r2,r3
  80c9d8:	1145883a 	add	r2,r2,r5
  80c9dc:	10801004 	addi	r2,r2,64
  80c9e0:	10800003 	ldbu	r2,0(r2)
  80c9e4:	10803fcc 	andi	r2,r2,255
  80c9e8:	1080201c 	xori	r2,r2,128
  80c9ec:	10bfe004 	addi	r2,r2,-128
  80c9f0:	10800818 	cmpnei	r2,r2,32
  80c9f4:	1000061e 	bne	r2,zero,80ca10 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80c9f8:	e0bff617 	ldw	r2,-40(fp)
  80c9fc:	10bfffc4 	addi	r2,r2,-1
  80ca00:	e0bff615 	stw	r2,-40(fp)
  80ca04:	e0bff617 	ldw	r2,-40(fp)
  80ca08:	10800048 	cmpgei	r2,r2,1
  80ca0c:	103fec1e 	bne	r2,zero,80c9c0 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80ca10:	e0bff617 	ldw	r2,-40(fp)
  80ca14:	10800448 	cmpgei	r2,r2,17
  80ca18:	1000031e 	bne	r2,zero,80ca28 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  80ca1c:	00800404 	movi	r2,16
  80ca20:	e0bff615 	stw	r2,-40(fp)
  80ca24:	00000306 	br	80ca34 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  80ca28:	e0bff617 	ldw	r2,-40(fp)
  80ca2c:	10800044 	addi	r2,r2,1
  80ca30:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  80ca34:	e13ffa17 	ldw	r4,-24(fp)
  80ca38:	e0bff617 	ldw	r2,-40(fp)
  80ca3c:	100b883a 	mov	r5,r2
  80ca40:	e0fffc17 	ldw	r3,-16(fp)
  80ca44:	208018e4 	muli	r2,r4,99
  80ca48:	10c5883a 	add	r2,r2,r3
  80ca4c:	10802404 	addi	r2,r2,144
  80ca50:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  80ca54:	e0fff917 	ldw	r3,-28(fp)
  80ca58:	e0bff617 	ldw	r2,-40(fp)
  80ca5c:	1880020e 	bge	r3,r2,80ca68 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  80ca60:	e0bff617 	ldw	r2,-40(fp)
  80ca64:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80ca68:	e0bffa17 	ldw	r2,-24(fp)
  80ca6c:	e0fffc17 	ldw	r3,-16(fp)
  80ca70:	108018e4 	muli	r2,r2,99
  80ca74:	10c5883a 	add	r2,r2,r3
  80ca78:	10802404 	addi	r2,r2,144
  80ca7c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ca80:	e0bffa17 	ldw	r2,-24(fp)
  80ca84:	10800044 	addi	r2,r2,1
  80ca88:	e0bffa15 	stw	r2,-24(fp)
  80ca8c:	e0bffa17 	ldw	r2,-24(fp)
  80ca90:	10800090 	cmplti	r2,r2,2
  80ca94:	103fc71e 	bne	r2,zero,80c9b4 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80ca98:	e0bff917 	ldw	r2,-28(fp)
  80ca9c:	10800448 	cmpgei	r2,r2,17
  80caa0:	1000031e 	bne	r2,zero,80cab0 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  80caa4:	e0bffc17 	ldw	r2,-16(fp)
  80caa8:	10000985 	stb	zero,38(r2)
  80caac:	00002d06 	br	80cb64 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  80cab0:	e0bff917 	ldw	r2,-28(fp)
  80cab4:	1085883a 	add	r2,r2,r2
  80cab8:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  80cabc:	e0bff917 	ldw	r2,-28(fp)
  80cac0:	1007883a 	mov	r3,r2
  80cac4:	e0bffc17 	ldw	r2,-16(fp)
  80cac8:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cacc:	e03ffa15 	stw	zero,-24(fp)
  80cad0:	00002106 	br	80cb58 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80cad4:	e0bffa17 	ldw	r2,-24(fp)
  80cad8:	e0fffc17 	ldw	r3,-16(fp)
  80cadc:	108018e4 	muli	r2,r2,99
  80cae0:	10c5883a 	add	r2,r2,r3
  80cae4:	10802404 	addi	r2,r2,144
  80cae8:	10800043 	ldbu	r2,1(r2)
  80caec:	10803fcc 	andi	r2,r2,255
  80caf0:	1080201c 	xori	r2,r2,128
  80caf4:	10bfe004 	addi	r2,r2,-128
  80caf8:	10800450 	cmplti	r2,r2,17
  80cafc:	1000131e 	bne	r2,zero,80cb4c <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80cb00:	e43ffa17 	ldw	r16,-24(fp)
  80cb04:	e0bffa17 	ldw	r2,-24(fp)
  80cb08:	e0fffc17 	ldw	r3,-16(fp)
  80cb0c:	108018e4 	muli	r2,r2,99
  80cb10:	10c5883a 	add	r2,r2,r3
  80cb14:	10802404 	addi	r2,r2,144
  80cb18:	10800043 	ldbu	r2,1(r2)
  80cb1c:	10803fcc 	andi	r2,r2,255
  80cb20:	1080201c 	xori	r2,r2,128
  80cb24:	10bfe004 	addi	r2,r2,-128
  80cb28:	1008923a 	slli	r4,r2,8
  80cb2c:	e17ff917 	ldw	r5,-28(fp)
  80cb30:	0809cb80 	call	809cb8 <__divsi3>
  80cb34:	1009883a 	mov	r4,r2
  80cb38:	e0fffc17 	ldw	r3,-16(fp)
  80cb3c:	808018e4 	muli	r2,r16,99
  80cb40:	10c5883a 	add	r2,r2,r3
  80cb44:	10802404 	addi	r2,r2,144
  80cb48:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cb4c:	e0bffa17 	ldw	r2,-24(fp)
  80cb50:	10800044 	addi	r2,r2,1
  80cb54:	e0bffa15 	stw	r2,-24(fp)
  80cb58:	e0bffa17 	ldw	r2,-24(fp)
  80cb5c:	10800090 	cmplti	r2,r2,2
  80cb60:	103fdc1e 	bne	r2,zero,80cad4 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80cb64:	e0bffc17 	ldw	r2,-16(fp)
  80cb68:	10800943 	ldbu	r2,37(r2)
  80cb6c:	10803fcc 	andi	r2,r2,255
  80cb70:	1080201c 	xori	r2,r2,128
  80cb74:	10bfe004 	addi	r2,r2,-128
  80cb78:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  80cb7c:	e13ffc17 	ldw	r4,-16(fp)
  80cb80:	080c1440 	call	80c144 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80cb84:	e0bffc17 	ldw	r2,-16(fp)
  80cb88:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80cb8c:	e0bffc17 	ldw	r2,-16(fp)
  80cb90:	10800943 	ldbu	r2,37(r2)
  80cb94:	10c03fcc 	andi	r3,r2,255
  80cb98:	18c0201c 	xori	r3,r3,128
  80cb9c:	18ffe004 	addi	r3,r3,-128
  80cba0:	e0bff517 	ldw	r2,-44(fp)
  80cba4:	18800426 	beq	r3,r2,80cbb8 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80cba8:	e0fffc17 	ldw	r3,-16(fp)
  80cbac:	00800044 	movi	r2,1
  80cbb0:	188009c5 	stb	r2,39(r3)
  }
  80cbb4:	003feb06 	br	80cb64 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80cbb8:	e0bffe17 	ldw	r2,-8(fp)
}
  80cbbc:	e037883a 	mov	sp,fp
  80cbc0:	dfc00217 	ldw	ra,8(sp)
  80cbc4:	df000117 	ldw	fp,4(sp)
  80cbc8:	dc000017 	ldw	r16,0(sp)
  80cbcc:	dec00304 	addi	sp,sp,12
  80cbd0:	f800283a 	ret

0080cbd4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80cbd4:	defffc04 	addi	sp,sp,-16
  80cbd8:	dfc00315 	stw	ra,12(sp)
  80cbdc:	df000215 	stw	fp,8(sp)
  80cbe0:	df000204 	addi	fp,sp,8
  80cbe4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80cbe8:	e0bfff17 	ldw	r2,-4(fp)
  80cbec:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80cbf0:	e0bffe17 	ldw	r2,-8(fp)
  80cbf4:	10800943 	ldbu	r2,37(r2)
  80cbf8:	10803fcc 	andi	r2,r2,255
  80cbfc:	1080201c 	xori	r2,r2,128
  80cc00:	10bfe004 	addi	r2,r2,-128
  80cc04:	10c00044 	addi	r3,r2,1
  80cc08:	e0bffe17 	ldw	r2,-8(fp)
  80cc0c:	10800983 	ldbu	r2,38(r2)
  80cc10:	10803fcc 	andi	r2,r2,255
  80cc14:	1080201c 	xori	r2,r2,128
  80cc18:	10bfe004 	addi	r2,r2,-128
  80cc1c:	18800316 	blt	r3,r2,80cc2c <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  80cc20:	e0bffe17 	ldw	r2,-8(fp)
  80cc24:	10000945 	stb	zero,37(r2)
  80cc28:	00000606 	br	80cc44 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80cc2c:	e0bffe17 	ldw	r2,-8(fp)
  80cc30:	10800943 	ldbu	r2,37(r2)
  80cc34:	10800044 	addi	r2,r2,1
  80cc38:	1007883a 	mov	r3,r2
  80cc3c:	e0bffe17 	ldw	r2,-8(fp)
  80cc40:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80cc44:	e0bffe17 	ldw	r2,-8(fp)
  80cc48:	10800983 	ldbu	r2,38(r2)
  80cc4c:	10803fcc 	andi	r2,r2,255
  80cc50:	1080201c 	xori	r2,r2,128
  80cc54:	10bfe004 	addi	r2,r2,-128
  80cc58:	10800050 	cmplti	r2,r2,1
  80cc5c:	1000091e 	bne	r2,zero,80cc84 <alt_lcd_16207_timeout+0xb0>
  80cc60:	e0bffe17 	ldw	r2,-8(fp)
  80cc64:	108009c3 	ldbu	r2,39(r2)
  80cc68:	10803fcc 	andi	r2,r2,255
  80cc6c:	1080201c 	xori	r2,r2,128
  80cc70:	10bfe004 	addi	r2,r2,-128
  80cc74:	1004c03a 	cmpne	r2,r2,zero
  80cc78:	1000021e 	bne	r2,zero,80cc84 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  80cc7c:	e13ffe17 	ldw	r4,-8(fp)
  80cc80:	080c1440 	call	80c144 <lcd_repaint_screen>

  return sp->period;
  80cc84:	e0bffe17 	ldw	r2,-8(fp)
  80cc88:	10800717 	ldw	r2,28(r2)
}
  80cc8c:	e037883a 	mov	sp,fp
  80cc90:	dfc00117 	ldw	ra,4(sp)
  80cc94:	df000017 	ldw	fp,0(sp)
  80cc98:	dec00204 	addi	sp,sp,8
  80cc9c:	f800283a 	ret

0080cca0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80cca0:	defffc04 	addi	sp,sp,-16
  80cca4:	dfc00315 	stw	ra,12(sp)
  80cca8:	df000215 	stw	fp,8(sp)
  80ccac:	df000204 	addi	fp,sp,8
  80ccb0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80ccb4:	e0bfff17 	ldw	r2,-4(fp)
  80ccb8:	10800017 	ldw	r2,0(r2)
  80ccbc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80ccc0:	e0bfff17 	ldw	r2,-4(fp)
  80ccc4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80ccc8:	010ea604 	movi	r4,15000
  80cccc:	080b1980 	call	80b198 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80ccd0:	e0bffe17 	ldw	r2,-8(fp)
  80ccd4:	1007883a 	mov	r3,r2
  80ccd8:	00800c04 	movi	r2,48
  80ccdc:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80cce0:	01040104 	movi	r4,4100
  80cce4:	080b1980 	call	80b198 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80cce8:	e0bffe17 	ldw	r2,-8(fp)
  80ccec:	1007883a 	mov	r3,r2
  80ccf0:	00800c04 	movi	r2,48
  80ccf4:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80ccf8:	0100fa04 	movi	r4,1000
  80ccfc:	080b1980 	call	80b198 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80cd00:	e0bffe17 	ldw	r2,-8(fp)
  80cd04:	1007883a 	mov	r3,r2
  80cd08:	00800c04 	movi	r2,48
  80cd0c:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80cd10:	e13fff17 	ldw	r4,-4(fp)
  80cd14:	01400e04 	movi	r5,56
  80cd18:	080bef40 	call	80bef4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80cd1c:	e13fff17 	ldw	r4,-4(fp)
  80cd20:	01400204 	movi	r5,8
  80cd24:	080bef40 	call	80bef4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80cd28:	e13fff17 	ldw	r4,-4(fp)
  80cd2c:	080c0800 	call	80c080 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80cd30:	e13fff17 	ldw	r4,-4(fp)
  80cd34:	01400184 	movi	r5,6
  80cd38:	080bef40 	call	80bef4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80cd3c:	e13fff17 	ldw	r4,-4(fp)
  80cd40:	01400304 	movi	r5,12
  80cd44:	080bef40 	call	80bef4 <lcd_write_command>

  sp->esccount = -1;
  80cd48:	e0ffff17 	ldw	r3,-4(fp)
  80cd4c:	00bfffc4 	movi	r2,-1
  80cd50:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  80cd54:	e0bfff17 	ldw	r2,-4(fp)
  80cd58:	11000a04 	addi	r4,r2,40
  80cd5c:	000b883a 	mov	r5,zero
  80cd60:	01800204 	movi	r6,8
  80cd64:	0801e940 	call	801e94 <memset>

  sp->scrollpos = 0;
  80cd68:	e0bfff17 	ldw	r2,-4(fp)
  80cd6c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80cd70:	e0bfff17 	ldw	r2,-4(fp)
  80cd74:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80cd78:	e0bfff17 	ldw	r2,-4(fp)
  80cd7c:	100009c5 	stb	zero,39(r2)
  80cd80:	00802074 	movhi	r2,129
  80cd84:	108a7804 	addi	r2,r2,10720
  80cd88:	10800017 	ldw	r2,0(r2)
  80cd8c:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80cd90:	01400284 	movi	r5,10
  80cd94:	0809d780 	call	809d78 <__udivsi3>
  80cd98:	1007883a 	mov	r3,r2
  80cd9c:	e0bfff17 	ldw	r2,-4(fp)
  80cda0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80cda4:	e0bfff17 	ldw	r2,-4(fp)
  80cda8:	11000104 	addi	r4,r2,4
  80cdac:	e0bfff17 	ldw	r2,-4(fp)
  80cdb0:	10800717 	ldw	r2,28(r2)
  80cdb4:	100b883a 	mov	r5,r2
  80cdb8:	01802074 	movhi	r6,129
  80cdbc:	31b2f504 	addi	r6,r6,-13356
  80cdc0:	e1ffff17 	ldw	r7,-4(fp)
  80cdc4:	080d8e40 	call	80d8e4 <alt_alarm_start>
}
  80cdc8:	e037883a 	mov	sp,fp
  80cdcc:	dfc00117 	ldw	ra,4(sp)
  80cdd0:	df000017 	ldw	fp,0(sp)
  80cdd4:	dec00204 	addi	sp,sp,8
  80cdd8:	f800283a 	ret

0080cddc <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80cddc:	defffa04 	addi	sp,sp,-24
  80cde0:	dfc00515 	stw	ra,20(sp)
  80cde4:	df000415 	stw	fp,16(sp)
  80cde8:	df000404 	addi	fp,sp,16
  80cdec:	e13ffd15 	stw	r4,-12(fp)
  80cdf0:	e17ffe15 	stw	r5,-8(fp)
  80cdf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80cdf8:	e0bffd17 	ldw	r2,-12(fp)
  80cdfc:	10800017 	ldw	r2,0(r2)
  80ce00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ce04:	e0bffc17 	ldw	r2,-16(fp)
  80ce08:	11000a04 	addi	r4,r2,40
  80ce0c:	e0bffd17 	ldw	r2,-12(fp)
  80ce10:	11c00217 	ldw	r7,8(r2)
  80ce14:	e17ffe17 	ldw	r5,-8(fp)
  80ce18:	e1bfff17 	ldw	r6,-4(fp)
  80ce1c:	080c6c80 	call	80c6c8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80ce20:	e037883a 	mov	sp,fp
  80ce24:	dfc00117 	ldw	ra,4(sp)
  80ce28:	df000017 	ldw	fp,0(sp)
  80ce2c:	dec00204 	addi	sp,sp,8
  80ce30:	f800283a 	ret

0080ce34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80ce34:	defffa04 	addi	sp,sp,-24
  80ce38:	dfc00515 	stw	ra,20(sp)
  80ce3c:	df000415 	stw	fp,16(sp)
  80ce40:	df000404 	addi	fp,sp,16
  80ce44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80ce48:	e0bfff17 	ldw	r2,-4(fp)
  80ce4c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80ce50:	e0bfff17 	ldw	r2,-4(fp)
  80ce54:	10800104 	addi	r2,r2,4
  80ce58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ce5c:	0005303a 	rdctl	r2,status
  80ce60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ce64:	e0fffd17 	ldw	r3,-12(fp)
  80ce68:	00bfff84 	movi	r2,-2
  80ce6c:	1884703a 	and	r2,r3,r2
  80ce70:	1001703a 	wrctl	status,r2
  
  return context;
  80ce74:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80ce78:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80ce7c:	080e4b80 	call	80e4b8 <alt_tick>
  80ce80:	e0bffe17 	ldw	r2,-8(fp)
  80ce84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ce88:	e0bffc17 	ldw	r2,-16(fp)
  80ce8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ce90:	e037883a 	mov	sp,fp
  80ce94:	dfc00117 	ldw	ra,4(sp)
  80ce98:	df000017 	ldw	fp,0(sp)
  80ce9c:	dec00204 	addi	sp,sp,8
  80cea0:	f800283a 	ret

0080cea4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80cea4:	defff804 	addi	sp,sp,-32
  80cea8:	dfc00715 	stw	ra,28(sp)
  80ceac:	df000615 	stw	fp,24(sp)
  80ceb0:	df000604 	addi	fp,sp,24
  80ceb4:	e13ffc15 	stw	r4,-16(fp)
  80ceb8:	e17ffd15 	stw	r5,-12(fp)
  80cebc:	e1bffe15 	stw	r6,-8(fp)
  80cec0:	e1ffff15 	stw	r7,-4(fp)
  80cec4:	e0bfff17 	ldw	r2,-4(fp)
  80cec8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80cecc:	00802074 	movhi	r2,129
  80ced0:	108a7804 	addi	r2,r2,10720
  80ced4:	10800017 	ldw	r2,0(r2)
  80ced8:	1004c03a 	cmpne	r2,r2,zero
  80cedc:	1000041e 	bne	r2,zero,80cef0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80cee0:	00c02074 	movhi	r3,129
  80cee4:	18ca7804 	addi	r3,r3,10720
  80cee8:	e0bffb17 	ldw	r2,-20(fp)
  80ceec:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80cef0:	e0bffc17 	ldw	r2,-16(fp)
  80cef4:	10800104 	addi	r2,r2,4
  80cef8:	1007883a 	mov	r3,r2
  80cefc:	008001c4 	movi	r2,7
  80cf00:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80cf04:	d8000015 	stw	zero,0(sp)
  80cf08:	e13ffd17 	ldw	r4,-12(fp)
  80cf0c:	e17ffe17 	ldw	r5,-8(fp)
  80cf10:	01802074 	movhi	r6,129
  80cf14:	31b38d04 	addi	r6,r6,-12748
  80cf18:	e1fffc17 	ldw	r7,-16(fp)
  80cf1c:	080e0180 	call	80e018 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80cf20:	e037883a 	mov	sp,fp
  80cf24:	dfc00117 	ldw	ra,4(sp)
  80cf28:	df000017 	ldw	fp,0(sp)
  80cf2c:	dec00204 	addi	sp,sp,8
  80cf30:	f800283a 	ret

0080cf34 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80cf34:	defffa04 	addi	sp,sp,-24
  80cf38:	dfc00515 	stw	ra,20(sp)
  80cf3c:	df000415 	stw	fp,16(sp)
  80cf40:	df000404 	addi	fp,sp,16
  80cf44:	e13ffd15 	stw	r4,-12(fp)
  80cf48:	e17ffe15 	stw	r5,-8(fp)
  80cf4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cf50:	e0bffd17 	ldw	r2,-12(fp)
  80cf54:	10800017 	ldw	r2,0(r2)
  80cf58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80cf5c:	e0bffc17 	ldw	r2,-16(fp)
  80cf60:	11000a04 	addi	r4,r2,40
  80cf64:	e0bffd17 	ldw	r2,-12(fp)
  80cf68:	11c00217 	ldw	r7,8(r2)
  80cf6c:	e17ffe17 	ldw	r5,-8(fp)
  80cf70:	e1bfff17 	ldw	r6,-4(fp)
  80cf74:	080d42c0 	call	80d42c <altera_avalon_uart_read>
      fd->fd_flags);
}
  80cf78:	e037883a 	mov	sp,fp
  80cf7c:	dfc00117 	ldw	ra,4(sp)
  80cf80:	df000017 	ldw	fp,0(sp)
  80cf84:	dec00204 	addi	sp,sp,8
  80cf88:	f800283a 	ret

0080cf8c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80cf8c:	defffa04 	addi	sp,sp,-24
  80cf90:	dfc00515 	stw	ra,20(sp)
  80cf94:	df000415 	stw	fp,16(sp)
  80cf98:	df000404 	addi	fp,sp,16
  80cf9c:	e13ffd15 	stw	r4,-12(fp)
  80cfa0:	e17ffe15 	stw	r5,-8(fp)
  80cfa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cfa8:	e0bffd17 	ldw	r2,-12(fp)
  80cfac:	10800017 	ldw	r2,0(r2)
  80cfb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80cfb4:	e0bffc17 	ldw	r2,-16(fp)
  80cfb8:	11000a04 	addi	r4,r2,40
  80cfbc:	e0bffd17 	ldw	r2,-12(fp)
  80cfc0:	11c00217 	ldw	r7,8(r2)
  80cfc4:	e17ffe17 	ldw	r5,-8(fp)
  80cfc8:	e1bfff17 	ldw	r6,-4(fp)
  80cfcc:	080d6bc0 	call	80d6bc <altera_avalon_uart_write>
      fd->fd_flags);
}
  80cfd0:	e037883a 	mov	sp,fp
  80cfd4:	dfc00117 	ldw	ra,4(sp)
  80cfd8:	df000017 	ldw	fp,0(sp)
  80cfdc:	dec00204 	addi	sp,sp,8
  80cfe0:	f800283a 	ret

0080cfe4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80cfe4:	defffc04 	addi	sp,sp,-16
  80cfe8:	dfc00315 	stw	ra,12(sp)
  80cfec:	df000215 	stw	fp,8(sp)
  80cff0:	df000204 	addi	fp,sp,8
  80cff4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80cff8:	e0bfff17 	ldw	r2,-4(fp)
  80cffc:	10800017 	ldw	r2,0(r2)
  80d000:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80d004:	e0bffe17 	ldw	r2,-8(fp)
  80d008:	11000a04 	addi	r4,r2,40
  80d00c:	e0bfff17 	ldw	r2,-4(fp)
  80d010:	11400217 	ldw	r5,8(r2)
  80d014:	080d3cc0 	call	80d3cc <altera_avalon_uart_close>
}
  80d018:	e037883a 	mov	sp,fp
  80d01c:	dfc00117 	ldw	ra,4(sp)
  80d020:	df000017 	ldw	fp,0(sp)
  80d024:	dec00204 	addi	sp,sp,8
  80d028:	f800283a 	ret

0080d02c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80d02c:	defff704 	addi	sp,sp,-36
  80d030:	dfc00815 	stw	ra,32(sp)
  80d034:	df000715 	stw	fp,28(sp)
  80d038:	df000704 	addi	fp,sp,28
  80d03c:	e13ffc15 	stw	r4,-16(fp)
  80d040:	e17ffd15 	stw	r5,-12(fp)
  80d044:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80d048:	e0bffc17 	ldw	r2,-16(fp)
  80d04c:	10800017 	ldw	r2,0(r2)
  80d050:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80d054:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80d058:	1004c03a 	cmpne	r2,r2,zero
  80d05c:	1000061e 	bne	r2,zero,80d078 <altera_avalon_uart_init+0x4c>
  80d060:	0005883a 	mov	r2,zero
  80d064:	1004c03a 	cmpne	r2,r2,zero
  80d068:	1000031e 	bne	r2,zero,80d078 <altera_avalon_uart_init+0x4c>
  80d06c:	0005883a 	mov	r2,zero
  80d070:	1005003a 	cmpeq	r2,r2,zero
  80d074:	1000031e 	bne	r2,zero,80d084 <altera_avalon_uart_init+0x58>
  80d078:	00800044 	movi	r2,1
  80d07c:	e0bfff15 	stw	r2,-4(fp)
  80d080:	00000106 	br	80d088 <altera_avalon_uart_init+0x5c>
  80d084:	e03fff15 	stw	zero,-4(fp)
  80d088:	e0bfff17 	ldw	r2,-4(fp)
  80d08c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80d090:	e0bffa17 	ldw	r2,-24(fp)
  80d094:	1004c03a 	cmpne	r2,r2,zero
  80d098:	1000111e 	bne	r2,zero,80d0e0 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80d09c:	e0fffc17 	ldw	r3,-16(fp)
  80d0a0:	00832004 	movi	r2,3200
  80d0a4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80d0a8:	e0bffb17 	ldw	r2,-20(fp)
  80d0ac:	11000304 	addi	r4,r2,12
  80d0b0:	e0bffc17 	ldw	r2,-16(fp)
  80d0b4:	10800117 	ldw	r2,4(r2)
  80d0b8:	1007883a 	mov	r3,r2
  80d0bc:	2005883a 	mov	r2,r4
  80d0c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80d0c4:	d8000015 	stw	zero,0(sp)
  80d0c8:	e13ffd17 	ldw	r4,-12(fp)
  80d0cc:	e17ffe17 	ldw	r5,-8(fp)
  80d0d0:	01802074 	movhi	r6,129
  80d0d4:	31b43d04 	addi	r6,r6,-12044
  80d0d8:	e1fffc17 	ldw	r7,-16(fp)
  80d0dc:	080e0180 	call	80e018 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80d0e0:	e037883a 	mov	sp,fp
  80d0e4:	dfc00117 	ldw	ra,4(sp)
  80d0e8:	df000017 	ldw	fp,0(sp)
  80d0ec:	dec00204 	addi	sp,sp,8
  80d0f0:	f800283a 	ret

0080d0f4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80d0f4:	defffa04 	addi	sp,sp,-24
  80d0f8:	dfc00515 	stw	ra,20(sp)
  80d0fc:	df000415 	stw	fp,16(sp)
  80d100:	df000404 	addi	fp,sp,16
  80d104:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80d108:	e0bfff17 	ldw	r2,-4(fp)
  80d10c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80d110:	e0bffd17 	ldw	r2,-12(fp)
  80d114:	10800017 	ldw	r2,0(r2)
  80d118:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80d11c:	e0bffc17 	ldw	r2,-16(fp)
  80d120:	10800204 	addi	r2,r2,8
  80d124:	10800037 	ldwio	r2,0(r2)
  80d128:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80d12c:	e0bffc17 	ldw	r2,-16(fp)
  80d130:	10800204 	addi	r2,r2,8
  80d134:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80d138:	e0bffc17 	ldw	r2,-16(fp)
  80d13c:	10800204 	addi	r2,r2,8
  80d140:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80d144:	e0bffe17 	ldw	r2,-8(fp)
  80d148:	1080200c 	andi	r2,r2,128
  80d14c:	1005003a 	cmpeq	r2,r2,zero
  80d150:	1000031e 	bne	r2,zero,80d160 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80d154:	e13ffd17 	ldw	r4,-12(fp)
  80d158:	e17ffe17 	ldw	r5,-8(fp)
  80d15c:	080d1900 	call	80d190 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80d160:	e0bffe17 	ldw	r2,-8(fp)
  80d164:	1081100c 	andi	r2,r2,1088
  80d168:	1005003a 	cmpeq	r2,r2,zero
  80d16c:	1000031e 	bne	r2,zero,80d17c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80d170:	e13ffd17 	ldw	r4,-12(fp)
  80d174:	e17ffe17 	ldw	r5,-8(fp)
  80d178:	080d2700 	call	80d270 <altera_avalon_uart_txirq>
  }
  

}
  80d17c:	e037883a 	mov	sp,fp
  80d180:	dfc00117 	ldw	ra,4(sp)
  80d184:	df000017 	ldw	fp,0(sp)
  80d188:	dec00204 	addi	sp,sp,8
  80d18c:	f800283a 	ret

0080d190 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d190:	defffc04 	addi	sp,sp,-16
  80d194:	df000315 	stw	fp,12(sp)
  80d198:	df000304 	addi	fp,sp,12
  80d19c:	e13ffe15 	stw	r4,-8(fp)
  80d1a0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80d1a4:	e0bfff17 	ldw	r2,-4(fp)
  80d1a8:	108000cc 	andi	r2,r2,3
  80d1ac:	1004c03a 	cmpne	r2,r2,zero
  80d1b0:	10002b1e 	bne	r2,zero,80d260 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80d1b4:	e0bffe17 	ldw	r2,-8(fp)
  80d1b8:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d1bc:	e0bffe17 	ldw	r2,-8(fp)
  80d1c0:	10800317 	ldw	r2,12(r2)
  80d1c4:	10800044 	addi	r2,r2,1
  80d1c8:	10800fcc 	andi	r2,r2,63
  80d1cc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80d1d0:	e0bffe17 	ldw	r2,-8(fp)
  80d1d4:	11000317 	ldw	r4,12(r2)
  80d1d8:	e0bffe17 	ldw	r2,-8(fp)
  80d1dc:	10800017 	ldw	r2,0(r2)
  80d1e0:	10800037 	ldwio	r2,0(r2)
  80d1e4:	1007883a 	mov	r3,r2
  80d1e8:	e0bffe17 	ldw	r2,-8(fp)
  80d1ec:	2085883a 	add	r2,r4,r2
  80d1f0:	10800704 	addi	r2,r2,28
  80d1f4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  80d1f8:	e0fffe17 	ldw	r3,-8(fp)
  80d1fc:	e0bffd17 	ldw	r2,-12(fp)
  80d200:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d204:	e0bffe17 	ldw	r2,-8(fp)
  80d208:	10800317 	ldw	r2,12(r2)
  80d20c:	10800044 	addi	r2,r2,1
  80d210:	10800fcc 	andi	r2,r2,63
  80d214:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80d218:	e0bffe17 	ldw	r2,-8(fp)
  80d21c:	10c00217 	ldw	r3,8(r2)
  80d220:	e0bffd17 	ldw	r2,-12(fp)
  80d224:	18800e1e 	bne	r3,r2,80d260 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d228:	e0bffe17 	ldw	r2,-8(fp)
  80d22c:	10c00117 	ldw	r3,4(r2)
  80d230:	00bfdfc4 	movi	r2,-129
  80d234:	1886703a 	and	r3,r3,r2
  80d238:	e0bffe17 	ldw	r2,-8(fp)
  80d23c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80d240:	e0bffe17 	ldw	r2,-8(fp)
  80d244:	10800017 	ldw	r2,0(r2)
  80d248:	11000304 	addi	r4,r2,12
  80d24c:	e0bffe17 	ldw	r2,-8(fp)
  80d250:	10800117 	ldw	r2,4(r2)
  80d254:	1007883a 	mov	r3,r2
  80d258:	2005883a 	mov	r2,r4
  80d25c:	10c00035 	stwio	r3,0(r2)
  }   
}
  80d260:	e037883a 	mov	sp,fp
  80d264:	df000017 	ldw	fp,0(sp)
  80d268:	dec00104 	addi	sp,sp,4
  80d26c:	f800283a 	ret

0080d270 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d270:	defffd04 	addi	sp,sp,-12
  80d274:	df000215 	stw	fp,8(sp)
  80d278:	df000204 	addi	fp,sp,8
  80d27c:	e13ffe15 	stw	r4,-8(fp)
  80d280:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80d284:	e0bffe17 	ldw	r2,-8(fp)
  80d288:	10c00417 	ldw	r3,16(r2)
  80d28c:	e0bffe17 	ldw	r2,-8(fp)
  80d290:	10800517 	ldw	r2,20(r2)
  80d294:	18803626 	beq	r3,r2,80d370 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d298:	e0bffe17 	ldw	r2,-8(fp)
  80d29c:	10800617 	ldw	r2,24(r2)
  80d2a0:	1080008c 	andi	r2,r2,2
  80d2a4:	1005003a 	cmpeq	r2,r2,zero
  80d2a8:	1000041e 	bne	r2,zero,80d2bc <altera_avalon_uart_txirq+0x4c>
  80d2ac:	e0bfff17 	ldw	r2,-4(fp)
  80d2b0:	1082000c 	andi	r2,r2,2048
  80d2b4:	1005003a 	cmpeq	r2,r2,zero
  80d2b8:	10001e1e 	bne	r2,zero,80d334 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80d2bc:	e0bffe17 	ldw	r2,-8(fp)
  80d2c0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80d2c4:	e0bffe17 	ldw	r2,-8(fp)
  80d2c8:	10800017 	ldw	r2,0(r2)
  80d2cc:	11000104 	addi	r4,r2,4
  80d2d0:	e0bffe17 	ldw	r2,-8(fp)
  80d2d4:	10c00417 	ldw	r3,16(r2)
  80d2d8:	e0bffe17 	ldw	r2,-8(fp)
  80d2dc:	1885883a 	add	r2,r3,r2
  80d2e0:	10801704 	addi	r2,r2,92
  80d2e4:	10800003 	ldbu	r2,0(r2)
  80d2e8:	10c03fcc 	andi	r3,r2,255
  80d2ec:	2005883a 	mov	r2,r4
  80d2f0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80d2f4:	e0bffe17 	ldw	r2,-8(fp)
  80d2f8:	10800417 	ldw	r2,16(r2)
  80d2fc:	10c00044 	addi	r3,r2,1
  80d300:	e0bffe17 	ldw	r2,-8(fp)
  80d304:	10c00415 	stw	r3,16(r2)
  80d308:	e0bffe17 	ldw	r2,-8(fp)
  80d30c:	10800417 	ldw	r2,16(r2)
  80d310:	10c00fcc 	andi	r3,r2,63
  80d314:	e0bffe17 	ldw	r2,-8(fp)
  80d318:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d31c:	e0bffe17 	ldw	r2,-8(fp)
  80d320:	10800117 	ldw	r2,4(r2)
  80d324:	10c01014 	ori	r3,r2,64
  80d328:	e0bffe17 	ldw	r2,-8(fp)
  80d32c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d330:	00000f06 	br	80d370 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80d334:	e0bffe17 	ldw	r2,-8(fp)
  80d338:	10800017 	ldw	r2,0(r2)
  80d33c:	10800204 	addi	r2,r2,8
  80d340:	10800037 	ldwio	r2,0(r2)
  80d344:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80d348:	e0bfff17 	ldw	r2,-4(fp)
  80d34c:	1082000c 	andi	r2,r2,2048
  80d350:	1004c03a 	cmpne	r2,r2,zero
  80d354:	1000061e 	bne	r2,zero,80d370 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d358:	e0bffe17 	ldw	r2,-8(fp)
  80d35c:	10c00117 	ldw	r3,4(r2)
  80d360:	00bfefc4 	movi	r2,-65
  80d364:	1886703a 	and	r3,r3,r2
  80d368:	e0bffe17 	ldw	r2,-8(fp)
  80d36c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80d370:	e0bffe17 	ldw	r2,-8(fp)
  80d374:	10c00417 	ldw	r3,16(r2)
  80d378:	e0bffe17 	ldw	r2,-8(fp)
  80d37c:	10800517 	ldw	r2,20(r2)
  80d380:	1880061e 	bne	r3,r2,80d39c <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d384:	e0bffe17 	ldw	r2,-8(fp)
  80d388:	10c00117 	ldw	r3,4(r2)
  80d38c:	00beefc4 	movi	r2,-1089
  80d390:	1886703a 	and	r3,r3,r2
  80d394:	e0bffe17 	ldw	r2,-8(fp)
  80d398:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d39c:	e0bffe17 	ldw	r2,-8(fp)
  80d3a0:	10800017 	ldw	r2,0(r2)
  80d3a4:	11000304 	addi	r4,r2,12
  80d3a8:	e0bffe17 	ldw	r2,-8(fp)
  80d3ac:	10800117 	ldw	r2,4(r2)
  80d3b0:	1007883a 	mov	r3,r2
  80d3b4:	2005883a 	mov	r2,r4
  80d3b8:	10c00035 	stwio	r3,0(r2)
}
  80d3bc:	e037883a 	mov	sp,fp
  80d3c0:	df000017 	ldw	fp,0(sp)
  80d3c4:	dec00104 	addi	sp,sp,4
  80d3c8:	f800283a 	ret

0080d3cc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80d3cc:	defffc04 	addi	sp,sp,-16
  80d3d0:	df000315 	stw	fp,12(sp)
  80d3d4:	df000304 	addi	fp,sp,12
  80d3d8:	e13ffd15 	stw	r4,-12(fp)
  80d3dc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d3e0:	00000706 	br	80d400 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d3e4:	e0bffe17 	ldw	r2,-8(fp)
  80d3e8:	1090000c 	andi	r2,r2,16384
  80d3ec:	1005003a 	cmpeq	r2,r2,zero
  80d3f0:	1000031e 	bne	r2,zero,80d400 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d3f4:	00bffd44 	movi	r2,-11
  80d3f8:	e0bfff15 	stw	r2,-4(fp)
  80d3fc:	00000606 	br	80d418 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d400:	e0bffd17 	ldw	r2,-12(fp)
  80d404:	10c00417 	ldw	r3,16(r2)
  80d408:	e0bffd17 	ldw	r2,-12(fp)
  80d40c:	10800517 	ldw	r2,20(r2)
  80d410:	18bff41e 	bne	r3,r2,80d3e4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d414:	e03fff15 	stw	zero,-4(fp)
  80d418:	e0bfff17 	ldw	r2,-4(fp)
}
  80d41c:	e037883a 	mov	sp,fp
  80d420:	df000017 	ldw	fp,0(sp)
  80d424:	dec00104 	addi	sp,sp,4
  80d428:	f800283a 	ret

0080d42c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80d42c:	defff004 	addi	sp,sp,-64
  80d430:	dfc00f15 	stw	ra,60(sp)
  80d434:	df000e15 	stw	fp,56(sp)
  80d438:	df000e04 	addi	fp,sp,56
  80d43c:	e13ffb15 	stw	r4,-20(fp)
  80d440:	e17ffc15 	stw	r5,-16(fp)
  80d444:	e1bffd15 	stw	r6,-12(fp)
  80d448:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80d44c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80d450:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80d454:	e0bffe17 	ldw	r2,-8(fp)
  80d458:	1090000c 	andi	r2,r2,16384
  80d45c:	1005003a 	cmpeq	r2,r2,zero
  80d460:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80d464:	e0bffb17 	ldw	r2,-20(fp)
  80d468:	10800217 	ldw	r2,8(r2)
  80d46c:	10800044 	addi	r2,r2,1
  80d470:	10800fcc 	andi	r2,r2,63
  80d474:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d478:	00001906 	br	80d4e0 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80d47c:	e0bff617 	ldw	r2,-40(fp)
  80d480:	10800044 	addi	r2,r2,1
  80d484:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80d488:	e0bffb17 	ldw	r2,-20(fp)
  80d48c:	10c00217 	ldw	r3,8(r2)
  80d490:	e0bffb17 	ldw	r2,-20(fp)
  80d494:	1885883a 	add	r2,r3,r2
  80d498:	10800704 	addi	r2,r2,28
  80d49c:	10800003 	ldbu	r2,0(r2)
  80d4a0:	1007883a 	mov	r3,r2
  80d4a4:	e0bffc17 	ldw	r2,-16(fp)
  80d4a8:	10c00005 	stb	r3,0(r2)
  80d4ac:	e0bffc17 	ldw	r2,-16(fp)
  80d4b0:	10800044 	addi	r2,r2,1
  80d4b4:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80d4b8:	e0bffb17 	ldw	r2,-20(fp)
  80d4bc:	10800217 	ldw	r2,8(r2)
  80d4c0:	10c00044 	addi	r3,r2,1
  80d4c4:	e0bffb17 	ldw	r2,-20(fp)
  80d4c8:	10c00215 	stw	r3,8(r2)
  80d4cc:	e0bffb17 	ldw	r2,-20(fp)
  80d4d0:	10800217 	ldw	r2,8(r2)
  80d4d4:	10c00fcc 	andi	r3,r2,63
  80d4d8:	e0bffb17 	ldw	r2,-20(fp)
  80d4dc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d4e0:	e0fff617 	ldw	r3,-40(fp)
  80d4e4:	e0bffd17 	ldw	r2,-12(fp)
  80d4e8:	1880050e 	bge	r3,r2,80d500 <altera_avalon_uart_read+0xd4>
  80d4ec:	e0bffb17 	ldw	r2,-20(fp)
  80d4f0:	10c00217 	ldw	r3,8(r2)
  80d4f4:	e0bffb17 	ldw	r2,-20(fp)
  80d4f8:	10800317 	ldw	r2,12(r2)
  80d4fc:	18bfdf1e 	bne	r3,r2,80d47c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80d500:	e0bff617 	ldw	r2,-40(fp)
  80d504:	1004c03a 	cmpne	r2,r2,zero
  80d508:	1000271e 	bne	r2,zero,80d5a8 <altera_avalon_uart_read+0x17c>
  80d50c:	e0bffb17 	ldw	r2,-20(fp)
  80d510:	10c00217 	ldw	r3,8(r2)
  80d514:	e0bffb17 	ldw	r2,-20(fp)
  80d518:	10800317 	ldw	r2,12(r2)
  80d51c:	1880221e 	bne	r3,r2,80d5a8 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80d520:	e0bff917 	ldw	r2,-28(fp)
  80d524:	1004c03a 	cmpne	r2,r2,zero
  80d528:	1000061e 	bne	r2,zero,80d544 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80d52c:	080d65c0 	call	80d65c <alt_get_errno>
  80d530:	00c002c4 	movi	r3,11
  80d534:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80d538:	00800044 	movi	r2,1
  80d53c:	e0bff705 	stb	r2,-36(fp)
        break;
  80d540:	00001f06 	br	80d5c0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d544:	0005303a 	rdctl	r2,status
  80d548:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d54c:	e0fff517 	ldw	r3,-44(fp)
  80d550:	00bfff84 	movi	r2,-2
  80d554:	1884703a 	and	r2,r3,r2
  80d558:	1001703a 	wrctl	status,r2
  
  return context;
  80d55c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80d560:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d564:	e0bffb17 	ldw	r2,-20(fp)
  80d568:	10800117 	ldw	r2,4(r2)
  80d56c:	10c02014 	ori	r3,r2,128
  80d570:	e0bffb17 	ldw	r2,-20(fp)
  80d574:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d578:	e0bffb17 	ldw	r2,-20(fp)
  80d57c:	10800017 	ldw	r2,0(r2)
  80d580:	11000304 	addi	r4,r2,12
  80d584:	e0bffb17 	ldw	r2,-20(fp)
  80d588:	10800117 	ldw	r2,4(r2)
  80d58c:	1007883a 	mov	r3,r2
  80d590:	2005883a 	mov	r2,r4
  80d594:	10c00035 	stwio	r3,0(r2)
  80d598:	e0bffa17 	ldw	r2,-24(fp)
  80d59c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d5a0:	e0bff417 	ldw	r2,-48(fp)
  80d5a4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80d5a8:	e0bff617 	ldw	r2,-40(fp)
  80d5ac:	1004c03a 	cmpne	r2,r2,zero
  80d5b0:	1000031e 	bne	r2,zero,80d5c0 <altera_avalon_uart_read+0x194>
  80d5b4:	e0bffd17 	ldw	r2,-12(fp)
  80d5b8:	1004c03a 	cmpne	r2,r2,zero
  80d5bc:	103fc81e 	bne	r2,zero,80d4e0 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5c0:	0005303a 	rdctl	r2,status
  80d5c4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5c8:	e0fff317 	ldw	r3,-52(fp)
  80d5cc:	00bfff84 	movi	r2,-2
  80d5d0:	1884703a 	and	r2,r3,r2
  80d5d4:	1001703a 	wrctl	status,r2
  
  return context;
  80d5d8:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80d5dc:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d5e0:	e0bffb17 	ldw	r2,-20(fp)
  80d5e4:	10800117 	ldw	r2,4(r2)
  80d5e8:	10c02014 	ori	r3,r2,128
  80d5ec:	e0bffb17 	ldw	r2,-20(fp)
  80d5f0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d5f4:	e0bffb17 	ldw	r2,-20(fp)
  80d5f8:	10800017 	ldw	r2,0(r2)
  80d5fc:	11000304 	addi	r4,r2,12
  80d600:	e0bffb17 	ldw	r2,-20(fp)
  80d604:	10800117 	ldw	r2,4(r2)
  80d608:	1007883a 	mov	r3,r2
  80d60c:	2005883a 	mov	r2,r4
  80d610:	10c00035 	stwio	r3,0(r2)
  80d614:	e0bffa17 	ldw	r2,-24(fp)
  80d618:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d61c:	e0bff217 	ldw	r2,-56(fp)
  80d620:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80d624:	e0bff703 	ldbu	r2,-36(fp)
  80d628:	1005003a 	cmpeq	r2,r2,zero
  80d62c:	1000031e 	bne	r2,zero,80d63c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80d630:	00bffd04 	movi	r2,-12
  80d634:	e0bfff15 	stw	r2,-4(fp)
  80d638:	00000206 	br	80d644 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80d63c:	e0bff617 	ldw	r2,-40(fp)
  80d640:	e0bfff15 	stw	r2,-4(fp)
  80d644:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80d648:	e037883a 	mov	sp,fp
  80d64c:	dfc00117 	ldw	ra,4(sp)
  80d650:	df000017 	ldw	fp,0(sp)
  80d654:	dec00204 	addi	sp,sp,8
  80d658:	f800283a 	ret

0080d65c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d65c:	defffd04 	addi	sp,sp,-12
  80d660:	dfc00215 	stw	ra,8(sp)
  80d664:	df000115 	stw	fp,4(sp)
  80d668:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d66c:	00802074 	movhi	r2,129
  80d670:	10835004 	addi	r2,r2,3392
  80d674:	10800017 	ldw	r2,0(r2)
  80d678:	1005003a 	cmpeq	r2,r2,zero
  80d67c:	1000061e 	bne	r2,zero,80d698 <alt_get_errno+0x3c>
  80d680:	00802074 	movhi	r2,129
  80d684:	10835004 	addi	r2,r2,3392
  80d688:	10800017 	ldw	r2,0(r2)
  80d68c:	103ee83a 	callr	r2
  80d690:	e0bfff15 	stw	r2,-4(fp)
  80d694:	00000306 	br	80d6a4 <alt_get_errno+0x48>
  80d698:	00802074 	movhi	r2,129
  80d69c:	108a6d04 	addi	r2,r2,10676
  80d6a0:	e0bfff15 	stw	r2,-4(fp)
  80d6a4:	e0bfff17 	ldw	r2,-4(fp)
}
  80d6a8:	e037883a 	mov	sp,fp
  80d6ac:	dfc00117 	ldw	ra,4(sp)
  80d6b0:	df000017 	ldw	fp,0(sp)
  80d6b4:	dec00204 	addi	sp,sp,8
  80d6b8:	f800283a 	ret

0080d6bc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80d6bc:	defff204 	addi	sp,sp,-56
  80d6c0:	dfc00d15 	stw	ra,52(sp)
  80d6c4:	df000c15 	stw	fp,48(sp)
  80d6c8:	df000c04 	addi	fp,sp,48
  80d6cc:	e13ffc15 	stw	r4,-16(fp)
  80d6d0:	e17ffd15 	stw	r5,-12(fp)
  80d6d4:	e1bffe15 	stw	r6,-8(fp)
  80d6d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80d6dc:	e0bffe17 	ldw	r2,-8(fp)
  80d6e0:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80d6e4:	e0bfff17 	ldw	r2,-4(fp)
  80d6e8:	1090000c 	andi	r2,r2,16384
  80d6ec:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80d6f0:	00004006 	br	80d7f4 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d6f4:	e0bffc17 	ldw	r2,-16(fp)
  80d6f8:	10800517 	ldw	r2,20(r2)
  80d6fc:	10800044 	addi	r2,r2,1
  80d700:	10800fcc 	andi	r2,r2,63
  80d704:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80d708:	e0bffc17 	ldw	r2,-16(fp)
  80d70c:	10c00417 	ldw	r3,16(r2)
  80d710:	e0bff917 	ldw	r2,-28(fp)
  80d714:	1880251e 	bne	r3,r2,80d7ac <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80d718:	e0bffa17 	ldw	r2,-24(fp)
  80d71c:	1005003a 	cmpeq	r2,r2,zero
  80d720:	1000051e 	bne	r2,zero,80d738 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80d724:	080d8840 	call	80d884 <alt_get_errno>
  80d728:	1007883a 	mov	r3,r2
  80d72c:	008002c4 	movi	r2,11
  80d730:	18800015 	stw	r2,0(r3)
        break;
  80d734:	00003206 	br	80d800 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d738:	0005303a 	rdctl	r2,status
  80d73c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d740:	e0fff717 	ldw	r3,-36(fp)
  80d744:	00bfff84 	movi	r2,-2
  80d748:	1884703a 	and	r2,r3,r2
  80d74c:	1001703a 	wrctl	status,r2
  
  return context;
  80d750:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80d754:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d758:	e0bffc17 	ldw	r2,-16(fp)
  80d75c:	10800117 	ldw	r2,4(r2)
  80d760:	10c11014 	ori	r3,r2,1088
  80d764:	e0bffc17 	ldw	r2,-16(fp)
  80d768:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d76c:	e0bffc17 	ldw	r2,-16(fp)
  80d770:	10800017 	ldw	r2,0(r2)
  80d774:	11000304 	addi	r4,r2,12
  80d778:	e0bffc17 	ldw	r2,-16(fp)
  80d77c:	10800117 	ldw	r2,4(r2)
  80d780:	1007883a 	mov	r3,r2
  80d784:	2005883a 	mov	r2,r4
  80d788:	10c00035 	stwio	r3,0(r2)
  80d78c:	e0bffb17 	ldw	r2,-20(fp)
  80d790:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d794:	e0bff617 	ldw	r2,-40(fp)
  80d798:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80d79c:	e0bffc17 	ldw	r2,-16(fp)
  80d7a0:	10c00417 	ldw	r3,16(r2)
  80d7a4:	e0bff917 	ldw	r2,-28(fp)
  80d7a8:	18bffc26 	beq	r3,r2,80d79c <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80d7ac:	e0bff817 	ldw	r2,-32(fp)
  80d7b0:	10bfffc4 	addi	r2,r2,-1
  80d7b4:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80d7b8:	e0bffc17 	ldw	r2,-16(fp)
  80d7bc:	10c00517 	ldw	r3,20(r2)
  80d7c0:	e0bffd17 	ldw	r2,-12(fp)
  80d7c4:	10800003 	ldbu	r2,0(r2)
  80d7c8:	1009883a 	mov	r4,r2
  80d7cc:	e0bffc17 	ldw	r2,-16(fp)
  80d7d0:	1885883a 	add	r2,r3,r2
  80d7d4:	10801704 	addi	r2,r2,92
  80d7d8:	11000005 	stb	r4,0(r2)
  80d7dc:	e0bffd17 	ldw	r2,-12(fp)
  80d7e0:	10800044 	addi	r2,r2,1
  80d7e4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80d7e8:	e0fffc17 	ldw	r3,-16(fp)
  80d7ec:	e0bff917 	ldw	r2,-28(fp)
  80d7f0:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80d7f4:	e0bff817 	ldw	r2,-32(fp)
  80d7f8:	1004c03a 	cmpne	r2,r2,zero
  80d7fc:	103fbd1e 	bne	r2,zero,80d6f4 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d800:	0005303a 	rdctl	r2,status
  80d804:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d808:	e0fff517 	ldw	r3,-44(fp)
  80d80c:	00bfff84 	movi	r2,-2
  80d810:	1884703a 	and	r2,r3,r2
  80d814:	1001703a 	wrctl	status,r2
  
  return context;
  80d818:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80d81c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d820:	e0bffc17 	ldw	r2,-16(fp)
  80d824:	10800117 	ldw	r2,4(r2)
  80d828:	10c11014 	ori	r3,r2,1088
  80d82c:	e0bffc17 	ldw	r2,-16(fp)
  80d830:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d834:	e0bffc17 	ldw	r2,-16(fp)
  80d838:	10800017 	ldw	r2,0(r2)
  80d83c:	11000304 	addi	r4,r2,12
  80d840:	e0bffc17 	ldw	r2,-16(fp)
  80d844:	10800117 	ldw	r2,4(r2)
  80d848:	1007883a 	mov	r3,r2
  80d84c:	2005883a 	mov	r2,r4
  80d850:	10c00035 	stwio	r3,0(r2)
  80d854:	e0bffb17 	ldw	r2,-20(fp)
  80d858:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d85c:	e0bff417 	ldw	r2,-48(fp)
  80d860:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80d864:	e0fffe17 	ldw	r3,-8(fp)
  80d868:	e0bff817 	ldw	r2,-32(fp)
  80d86c:	1885c83a 	sub	r2,r3,r2
}
  80d870:	e037883a 	mov	sp,fp
  80d874:	dfc00117 	ldw	ra,4(sp)
  80d878:	df000017 	ldw	fp,0(sp)
  80d87c:	dec00204 	addi	sp,sp,8
  80d880:	f800283a 	ret

0080d884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d884:	defffd04 	addi	sp,sp,-12
  80d888:	dfc00215 	stw	ra,8(sp)
  80d88c:	df000115 	stw	fp,4(sp)
  80d890:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d894:	00802074 	movhi	r2,129
  80d898:	10835004 	addi	r2,r2,3392
  80d89c:	10800017 	ldw	r2,0(r2)
  80d8a0:	1005003a 	cmpeq	r2,r2,zero
  80d8a4:	1000061e 	bne	r2,zero,80d8c0 <alt_get_errno+0x3c>
  80d8a8:	00802074 	movhi	r2,129
  80d8ac:	10835004 	addi	r2,r2,3392
  80d8b0:	10800017 	ldw	r2,0(r2)
  80d8b4:	103ee83a 	callr	r2
  80d8b8:	e0bfff15 	stw	r2,-4(fp)
  80d8bc:	00000306 	br	80d8cc <alt_get_errno+0x48>
  80d8c0:	00802074 	movhi	r2,129
  80d8c4:	108a6d04 	addi	r2,r2,10676
  80d8c8:	e0bfff15 	stw	r2,-4(fp)
  80d8cc:	e0bfff17 	ldw	r2,-4(fp)
}
  80d8d0:	e037883a 	mov	sp,fp
  80d8d4:	dfc00117 	ldw	ra,4(sp)
  80d8d8:	df000017 	ldw	fp,0(sp)
  80d8dc:	dec00204 	addi	sp,sp,8
  80d8e0:	f800283a 	ret

0080d8e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80d8e4:	defff404 	addi	sp,sp,-48
  80d8e8:	df000b15 	stw	fp,44(sp)
  80d8ec:	df000b04 	addi	fp,sp,44
  80d8f0:	e13ffb15 	stw	r4,-20(fp)
  80d8f4:	e17ffc15 	stw	r5,-16(fp)
  80d8f8:	e1bffd15 	stw	r6,-12(fp)
  80d8fc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80d900:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d904:	00802074 	movhi	r2,129
  80d908:	108a7804 	addi	r2,r2,10720
  80d90c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80d910:	1005003a 	cmpeq	r2,r2,zero
  80d914:	1000411e 	bne	r2,zero,80da1c <alt_alarm_start+0x138>
  {
    if (alarm)
  80d918:	e0bffb17 	ldw	r2,-20(fp)
  80d91c:	1005003a 	cmpeq	r2,r2,zero
  80d920:	10003b1e 	bne	r2,zero,80da10 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80d924:	e0fffb17 	ldw	r3,-20(fp)
  80d928:	e0bffd17 	ldw	r2,-12(fp)
  80d92c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80d930:	e0fffb17 	ldw	r3,-20(fp)
  80d934:	e0bffe17 	ldw	r2,-8(fp)
  80d938:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d93c:	0005303a 	rdctl	r2,status
  80d940:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d944:	e0fff817 	ldw	r3,-32(fp)
  80d948:	00bfff84 	movi	r2,-2
  80d94c:	1884703a 	and	r2,r3,r2
  80d950:	1001703a 	wrctl	status,r2
  
  return context;
  80d954:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80d958:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80d95c:	00802074 	movhi	r2,129
  80d960:	108a7904 	addi	r2,r2,10724
  80d964:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80d968:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80d96c:	e0fffc17 	ldw	r3,-16(fp)
  80d970:	e0bff917 	ldw	r2,-28(fp)
  80d974:	1885883a 	add	r2,r3,r2
  80d978:	10c00044 	addi	r3,r2,1
  80d97c:	e0bffb17 	ldw	r2,-20(fp)
  80d980:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80d984:	e0bffb17 	ldw	r2,-20(fp)
  80d988:	10c00217 	ldw	r3,8(r2)
  80d98c:	e0bff917 	ldw	r2,-28(fp)
  80d990:	1880042e 	bgeu	r3,r2,80d9a4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80d994:	e0fffb17 	ldw	r3,-20(fp)
  80d998:	00800044 	movi	r2,1
  80d99c:	18800405 	stb	r2,16(r3)
  80d9a0:	00000206 	br	80d9ac <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80d9a4:	e0bffb17 	ldw	r2,-20(fp)
  80d9a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80d9ac:	e0fffb17 	ldw	r3,-20(fp)
  80d9b0:	00802074 	movhi	r2,129
  80d9b4:	10835404 	addi	r2,r2,3408
  80d9b8:	e0bff615 	stw	r2,-40(fp)
  80d9bc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80d9c0:	e0fff717 	ldw	r3,-36(fp)
  80d9c4:	e0bff617 	ldw	r2,-40(fp)
  80d9c8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80d9cc:	e0bff617 	ldw	r2,-40(fp)
  80d9d0:	10c00017 	ldw	r3,0(r2)
  80d9d4:	e0bff717 	ldw	r2,-36(fp)
  80d9d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80d9dc:	e0bff617 	ldw	r2,-40(fp)
  80d9e0:	10c00017 	ldw	r3,0(r2)
  80d9e4:	e0bff717 	ldw	r2,-36(fp)
  80d9e8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80d9ec:	e0fff617 	ldw	r3,-40(fp)
  80d9f0:	e0bff717 	ldw	r2,-36(fp)
  80d9f4:	18800015 	stw	r2,0(r3)
  80d9f8:	e0bffa17 	ldw	r2,-24(fp)
  80d9fc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da00:	e0bff517 	ldw	r2,-44(fp)
  80da04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80da08:	e03fff15 	stw	zero,-4(fp)
  80da0c:	00000506 	br	80da24 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80da10:	00bffa84 	movi	r2,-22
  80da14:	e0bfff15 	stw	r2,-4(fp)
  80da18:	00000206 	br	80da24 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80da1c:	00bfde84 	movi	r2,-134
  80da20:	e0bfff15 	stw	r2,-4(fp)
  80da24:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80da28:	e037883a 	mov	sp,fp
  80da2c:	df000017 	ldw	fp,0(sp)
  80da30:	dec00104 	addi	sp,sp,4
  80da34:	f800283a 	ret

0080da38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80da38:	defffa04 	addi	sp,sp,-24
  80da3c:	dfc00515 	stw	ra,20(sp)
  80da40:	df000415 	stw	fp,16(sp)
  80da44:	df000404 	addi	fp,sp,16
  80da48:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80da4c:	008000c4 	movi	r2,3
  80da50:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80da54:	e0fffc17 	ldw	r3,-16(fp)
  80da58:	008003f4 	movhi	r2,15
  80da5c:	10909004 	addi	r2,r2,16960
  80da60:	188b383a 	mul	r5,r3,r2
  80da64:	0100bef4 	movhi	r4,763
  80da68:	213c2004 	addi	r4,r4,-3968
  80da6c:	0809d780 	call	809d78 <__udivsi3>
  80da70:	100b883a 	mov	r5,r2
  80da74:	01200034 	movhi	r4,32768
  80da78:	213fffc4 	addi	r4,r4,-1
  80da7c:	0809d780 	call	809d78 <__udivsi3>
  80da80:	100b883a 	mov	r5,r2
  80da84:	e13fff17 	ldw	r4,-4(fp)
  80da88:	0809d780 	call	809d78 <__udivsi3>
  80da8c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80da90:	e0bffd17 	ldw	r2,-12(fp)
  80da94:	1005003a 	cmpeq	r2,r2,zero
  80da98:	1000281e 	bne	r2,zero,80db3c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80da9c:	e03ffe15 	stw	zero,-8(fp)
  80daa0:	00001606 	br	80dafc <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80daa4:	00a00034 	movhi	r2,32768
  80daa8:	10bfffc4 	addi	r2,r2,-1
  80daac:	10bfffc4 	addi	r2,r2,-1
  80dab0:	103ffe1e 	bne	r2,zero,80daac <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80dab4:	e0fffc17 	ldw	r3,-16(fp)
  80dab8:	008003f4 	movhi	r2,15
  80dabc:	10909004 	addi	r2,r2,16960
  80dac0:	188b383a 	mul	r5,r3,r2
  80dac4:	0100bef4 	movhi	r4,763
  80dac8:	213c2004 	addi	r4,r4,-3968
  80dacc:	0809d780 	call	809d78 <__udivsi3>
  80dad0:	100b883a 	mov	r5,r2
  80dad4:	01200034 	movhi	r4,32768
  80dad8:	213fffc4 	addi	r4,r4,-1
  80dadc:	0809d780 	call	809d78 <__udivsi3>
  80dae0:	1007883a 	mov	r3,r2
  80dae4:	e0bfff17 	ldw	r2,-4(fp)
  80dae8:	10c5c83a 	sub	r2,r2,r3
  80daec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80daf0:	e0bffe17 	ldw	r2,-8(fp)
  80daf4:	10800044 	addi	r2,r2,1
  80daf8:	e0bffe15 	stw	r2,-8(fp)
  80dafc:	e0fffe17 	ldw	r3,-8(fp)
  80db00:	e0bffd17 	ldw	r2,-12(fp)
  80db04:	18bfe716 	blt	r3,r2,80daa4 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80db08:	e0fffc17 	ldw	r3,-16(fp)
  80db0c:	008003f4 	movhi	r2,15
  80db10:	10909004 	addi	r2,r2,16960
  80db14:	188b383a 	mul	r5,r3,r2
  80db18:	0100bef4 	movhi	r4,763
  80db1c:	213c2004 	addi	r4,r4,-3968
  80db20:	0809d780 	call	809d78 <__udivsi3>
  80db24:	1007883a 	mov	r3,r2
  80db28:	e0bfff17 	ldw	r2,-4(fp)
  80db2c:	1885383a 	mul	r2,r3,r2
  80db30:	10bfffc4 	addi	r2,r2,-1
  80db34:	103ffe1e 	bne	r2,zero,80db30 <alt_busy_sleep+0xf8>
  80db38:	00000c06 	br	80db6c <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80db3c:	e0fffc17 	ldw	r3,-16(fp)
  80db40:	008003f4 	movhi	r2,15
  80db44:	10909004 	addi	r2,r2,16960
  80db48:	188b383a 	mul	r5,r3,r2
  80db4c:	0100bef4 	movhi	r4,763
  80db50:	213c2004 	addi	r4,r4,-3968
  80db54:	0809d780 	call	809d78 <__udivsi3>
  80db58:	1007883a 	mov	r3,r2
  80db5c:	e0bfff17 	ldw	r2,-4(fp)
  80db60:	1885383a 	mul	r2,r3,r2
  80db64:	10bfffc4 	addi	r2,r2,-1
  80db68:	00bffe16 	blt	zero,r2,80db64 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80db6c:	0005883a 	mov	r2,zero
}
  80db70:	e037883a 	mov	sp,fp
  80db74:	dfc00117 	ldw	ra,4(sp)
  80db78:	df000017 	ldw	fp,0(sp)
  80db7c:	dec00204 	addi	sp,sp,8
  80db80:	f800283a 	ret

0080db84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80db84:	deffff04 	addi	sp,sp,-4
  80db88:	df000015 	stw	fp,0(sp)
  80db8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80db90:	e037883a 	mov	sp,fp
  80db94:	df000017 	ldw	fp,0(sp)
  80db98:	dec00104 	addi	sp,sp,4
  80db9c:	f800283a 	ret

0080dba0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80dba0:	defff904 	addi	sp,sp,-28
  80dba4:	dfc00615 	stw	ra,24(sp)
  80dba8:	df000515 	stw	fp,20(sp)
  80dbac:	df000504 	addi	fp,sp,20
  80dbb0:	e13ffd15 	stw	r4,-12(fp)
  80dbb4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80dbb8:	e0bffd17 	ldw	r2,-12(fp)
  80dbbc:	1005003a 	cmpeq	r2,r2,zero
  80dbc0:	1000041e 	bne	r2,zero,80dbd4 <alt_dev_llist_insert+0x34>
  80dbc4:	e0bffd17 	ldw	r2,-12(fp)
  80dbc8:	10800217 	ldw	r2,8(r2)
  80dbcc:	1004c03a 	cmpne	r2,r2,zero
  80dbd0:	1000071e 	bne	r2,zero,80dbf0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80dbd4:	080dc540 	call	80dc54 <alt_get_errno>
  80dbd8:	1007883a 	mov	r3,r2
  80dbdc:	00800584 	movi	r2,22
  80dbe0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80dbe4:	00bffa84 	movi	r2,-22
  80dbe8:	e0bfff15 	stw	r2,-4(fp)
  80dbec:	00001306 	br	80dc3c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80dbf0:	e0fffd17 	ldw	r3,-12(fp)
  80dbf4:	e0bffe17 	ldw	r2,-8(fp)
  80dbf8:	e0bffb15 	stw	r2,-20(fp)
  80dbfc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80dc00:	e0fffc17 	ldw	r3,-16(fp)
  80dc04:	e0bffb17 	ldw	r2,-20(fp)
  80dc08:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80dc0c:	e0bffb17 	ldw	r2,-20(fp)
  80dc10:	10c00017 	ldw	r3,0(r2)
  80dc14:	e0bffc17 	ldw	r2,-16(fp)
  80dc18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80dc1c:	e0bffb17 	ldw	r2,-20(fp)
  80dc20:	10c00017 	ldw	r3,0(r2)
  80dc24:	e0bffc17 	ldw	r2,-16(fp)
  80dc28:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80dc2c:	e0fffb17 	ldw	r3,-20(fp)
  80dc30:	e0bffc17 	ldw	r2,-16(fp)
  80dc34:	18800015 	stw	r2,0(r3)

  return 0;  
  80dc38:	e03fff15 	stw	zero,-4(fp)
  80dc3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc40:	e037883a 	mov	sp,fp
  80dc44:	dfc00117 	ldw	ra,4(sp)
  80dc48:	df000017 	ldw	fp,0(sp)
  80dc4c:	dec00204 	addi	sp,sp,8
  80dc50:	f800283a 	ret

0080dc54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc54:	defffd04 	addi	sp,sp,-12
  80dc58:	dfc00215 	stw	ra,8(sp)
  80dc5c:	df000115 	stw	fp,4(sp)
  80dc60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dc64:	00802074 	movhi	r2,129
  80dc68:	10835004 	addi	r2,r2,3392
  80dc6c:	10800017 	ldw	r2,0(r2)
  80dc70:	1005003a 	cmpeq	r2,r2,zero
  80dc74:	1000061e 	bne	r2,zero,80dc90 <alt_get_errno+0x3c>
  80dc78:	00802074 	movhi	r2,129
  80dc7c:	10835004 	addi	r2,r2,3392
  80dc80:	10800017 	ldw	r2,0(r2)
  80dc84:	103ee83a 	callr	r2
  80dc88:	e0bfff15 	stw	r2,-4(fp)
  80dc8c:	00000306 	br	80dc9c <alt_get_errno+0x48>
  80dc90:	00802074 	movhi	r2,129
  80dc94:	108a6d04 	addi	r2,r2,10676
  80dc98:	e0bfff15 	stw	r2,-4(fp)
  80dc9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80dca0:	e037883a 	mov	sp,fp
  80dca4:	dfc00117 	ldw	ra,4(sp)
  80dca8:	df000017 	ldw	fp,0(sp)
  80dcac:	dec00204 	addi	sp,sp,8
  80dcb0:	f800283a 	ret

0080dcb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80dcb4:	defffd04 	addi	sp,sp,-12
  80dcb8:	dfc00215 	stw	ra,8(sp)
  80dcbc:	df000115 	stw	fp,4(sp)
  80dcc0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80dcc4:	00bfff04 	movi	r2,-4
  80dcc8:	00c02074 	movhi	r3,129
  80dccc:	18fabb04 	addi	r3,r3,-5396
  80dcd0:	1885883a 	add	r2,r3,r2
  80dcd4:	e0bfff15 	stw	r2,-4(fp)
  80dcd8:	00000606 	br	80dcf4 <_do_ctors+0x40>
        (*ctor) (); 
  80dcdc:	e0bfff17 	ldw	r2,-4(fp)
  80dce0:	10800017 	ldw	r2,0(r2)
  80dce4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80dce8:	e0bfff17 	ldw	r2,-4(fp)
  80dcec:	10bfff04 	addi	r2,r2,-4
  80dcf0:	e0bfff15 	stw	r2,-4(fp)
  80dcf4:	e0ffff17 	ldw	r3,-4(fp)
  80dcf8:	00802074 	movhi	r2,129
  80dcfc:	10baba04 	addi	r2,r2,-5400
  80dd00:	18bff62e 	bgeu	r3,r2,80dcdc <_do_ctors+0x28>
        (*ctor) (); 
}
  80dd04:	e037883a 	mov	sp,fp
  80dd08:	dfc00117 	ldw	ra,4(sp)
  80dd0c:	df000017 	ldw	fp,0(sp)
  80dd10:	dec00204 	addi	sp,sp,8
  80dd14:	f800283a 	ret

0080dd18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80dd18:	defffd04 	addi	sp,sp,-12
  80dd1c:	dfc00215 	stw	ra,8(sp)
  80dd20:	df000115 	stw	fp,4(sp)
  80dd24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80dd28:	00bfff04 	movi	r2,-4
  80dd2c:	00c02074 	movhi	r3,129
  80dd30:	18fabb04 	addi	r3,r3,-5396
  80dd34:	1885883a 	add	r2,r3,r2
  80dd38:	e0bfff15 	stw	r2,-4(fp)
  80dd3c:	00000606 	br	80dd58 <_do_dtors+0x40>
        (*dtor) (); 
  80dd40:	e0bfff17 	ldw	r2,-4(fp)
  80dd44:	10800017 	ldw	r2,0(r2)
  80dd48:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80dd4c:	e0bfff17 	ldw	r2,-4(fp)
  80dd50:	10bfff04 	addi	r2,r2,-4
  80dd54:	e0bfff15 	stw	r2,-4(fp)
  80dd58:	e0ffff17 	ldw	r3,-4(fp)
  80dd5c:	00802074 	movhi	r2,129
  80dd60:	10babb04 	addi	r2,r2,-5396
  80dd64:	18bff62e 	bgeu	r3,r2,80dd40 <_do_dtors+0x28>
        (*dtor) (); 
}
  80dd68:	e037883a 	mov	sp,fp
  80dd6c:	dfc00117 	ldw	ra,4(sp)
  80dd70:	df000017 	ldw	fp,0(sp)
  80dd74:	dec00204 	addi	sp,sp,8
  80dd78:	f800283a 	ret

0080dd7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80dd7c:	defff904 	addi	sp,sp,-28
  80dd80:	dfc00615 	stw	ra,24(sp)
  80dd84:	df000515 	stw	fp,20(sp)
  80dd88:	df000504 	addi	fp,sp,20
  80dd8c:	e13ffd15 	stw	r4,-12(fp)
  80dd90:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80dd94:	e0bffe17 	ldw	r2,-8(fp)
  80dd98:	10800017 	ldw	r2,0(r2)
  80dd9c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80dda0:	e13ffd17 	ldw	r4,-12(fp)
  80dda4:	080246c0 	call	80246c <strlen>
  80dda8:	10800044 	addi	r2,r2,1
  80ddac:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80ddb0:	00000d06 	br	80dde8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80ddb4:	e0bffc17 	ldw	r2,-16(fp)
  80ddb8:	11000217 	ldw	r4,8(r2)
  80ddbc:	e1bffb17 	ldw	r6,-20(fp)
  80ddc0:	e17ffd17 	ldw	r5,-12(fp)
  80ddc4:	080e6c00 	call	80e6c0 <memcmp>
  80ddc8:	1004c03a 	cmpne	r2,r2,zero
  80ddcc:	1000031e 	bne	r2,zero,80dddc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80ddd0:	e0bffc17 	ldw	r2,-16(fp)
  80ddd4:	e0bfff15 	stw	r2,-4(fp)
  80ddd8:	00000706 	br	80ddf8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80dddc:	e0bffc17 	ldw	r2,-16(fp)
  80dde0:	10800017 	ldw	r2,0(r2)
  80dde4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80dde8:	e0fffe17 	ldw	r3,-8(fp)
  80ddec:	e0bffc17 	ldw	r2,-16(fp)
  80ddf0:	10fff01e 	bne	r2,r3,80ddb4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80ddf4:	e03fff15 	stw	zero,-4(fp)
  80ddf8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ddfc:	e037883a 	mov	sp,fp
  80de00:	dfc00117 	ldw	ra,4(sp)
  80de04:	df000017 	ldw	fp,0(sp)
  80de08:	dec00204 	addi	sp,sp,8
  80de0c:	f800283a 	ret

0080de10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80de10:	defffa04 	addi	sp,sp,-24
  80de14:	dfc00515 	stw	ra,20(sp)
  80de18:	df000415 	stw	fp,16(sp)
  80de1c:	df000404 	addi	fp,sp,16
  80de20:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80de24:	00802074 	movhi	r2,129
  80de28:	10834b04 	addi	r2,r2,3372
  80de2c:	10800017 	ldw	r2,0(r2)
  80de30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80de34:	00003306 	br	80df04 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80de38:	e0bffd17 	ldw	r2,-12(fp)
  80de3c:	11000217 	ldw	r4,8(r2)
  80de40:	080246c0 	call	80246c <strlen>
  80de44:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80de48:	e0bffd17 	ldw	r2,-12(fp)
  80de4c:	10c00217 	ldw	r3,8(r2)
  80de50:	e0bffc17 	ldw	r2,-16(fp)
  80de54:	1885883a 	add	r2,r3,r2
  80de58:	10bfffc4 	addi	r2,r2,-1
  80de5c:	10800003 	ldbu	r2,0(r2)
  80de60:	10803fcc 	andi	r2,r2,255
  80de64:	1080201c 	xori	r2,r2,128
  80de68:	10bfe004 	addi	r2,r2,-128
  80de6c:	10800bd8 	cmpnei	r2,r2,47
  80de70:	1000031e 	bne	r2,zero,80de80 <alt_find_file+0x70>
    {
      len -= 1;
  80de74:	e0bffc17 	ldw	r2,-16(fp)
  80de78:	10bfffc4 	addi	r2,r2,-1
  80de7c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80de80:	e0bffc17 	ldw	r2,-16(fp)
  80de84:	1007883a 	mov	r3,r2
  80de88:	e0bffe17 	ldw	r2,-8(fp)
  80de8c:	1885883a 	add	r2,r3,r2
  80de90:	10800003 	ldbu	r2,0(r2)
  80de94:	10803fcc 	andi	r2,r2,255
  80de98:	1080201c 	xori	r2,r2,128
  80de9c:	10bfe004 	addi	r2,r2,-128
  80dea0:	10800be0 	cmpeqi	r2,r2,47
  80dea4:	10000a1e 	bne	r2,zero,80ded0 <alt_find_file+0xc0>
  80dea8:	e0bffc17 	ldw	r2,-16(fp)
  80deac:	1007883a 	mov	r3,r2
  80deb0:	e0bffe17 	ldw	r2,-8(fp)
  80deb4:	1885883a 	add	r2,r3,r2
  80deb8:	10800003 	ldbu	r2,0(r2)
  80debc:	10803fcc 	andi	r2,r2,255
  80dec0:	1080201c 	xori	r2,r2,128
  80dec4:	10bfe004 	addi	r2,r2,-128
  80dec8:	1004c03a 	cmpne	r2,r2,zero
  80decc:	10000a1e 	bne	r2,zero,80def8 <alt_find_file+0xe8>
  80ded0:	e0bffd17 	ldw	r2,-12(fp)
  80ded4:	11000217 	ldw	r4,8(r2)
  80ded8:	e1bffc17 	ldw	r6,-16(fp)
  80dedc:	e17ffe17 	ldw	r5,-8(fp)
  80dee0:	080e6c00 	call	80e6c0 <memcmp>
  80dee4:	1004c03a 	cmpne	r2,r2,zero
  80dee8:	1000031e 	bne	r2,zero,80def8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80deec:	e0bffd17 	ldw	r2,-12(fp)
  80def0:	e0bfff15 	stw	r2,-4(fp)
  80def4:	00000806 	br	80df18 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80def8:	e0bffd17 	ldw	r2,-12(fp)
  80defc:	10800017 	ldw	r2,0(r2)
  80df00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80df04:	00c02074 	movhi	r3,129
  80df08:	18c34b04 	addi	r3,r3,3372
  80df0c:	e0bffd17 	ldw	r2,-12(fp)
  80df10:	10ffc91e 	bne	r2,r3,80de38 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80df14:	e03fff15 	stw	zero,-4(fp)
  80df18:	e0bfff17 	ldw	r2,-4(fp)
}
  80df1c:	e037883a 	mov	sp,fp
  80df20:	dfc00117 	ldw	ra,4(sp)
  80df24:	df000017 	ldw	fp,0(sp)
  80df28:	dec00204 	addi	sp,sp,8
  80df2c:	f800283a 	ret

0080df30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80df30:	defffc04 	addi	sp,sp,-16
  80df34:	df000315 	stw	fp,12(sp)
  80df38:	df000304 	addi	fp,sp,12
  80df3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80df40:	00bffa04 	movi	r2,-24
  80df44:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80df48:	e03ffe15 	stw	zero,-8(fp)
  80df4c:	00001e06 	br	80dfc8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80df50:	e0bffe17 	ldw	r2,-8(fp)
  80df54:	00c02074 	movhi	r3,129
  80df58:	18fe5404 	addi	r3,r3,-1712
  80df5c:	10800324 	muli	r2,r2,12
  80df60:	10c5883a 	add	r2,r2,r3
  80df64:	10800017 	ldw	r2,0(r2)
  80df68:	1004c03a 	cmpne	r2,r2,zero
  80df6c:	1000131e 	bne	r2,zero,80dfbc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80df70:	e0bffe17 	ldw	r2,-8(fp)
  80df74:	00c02074 	movhi	r3,129
  80df78:	18fe5404 	addi	r3,r3,-1712
  80df7c:	10800324 	muli	r2,r2,12
  80df80:	10c7883a 	add	r3,r2,r3
  80df84:	e0bfff17 	ldw	r2,-4(fp)
  80df88:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80df8c:	00802074 	movhi	r2,129
  80df90:	10834f04 	addi	r2,r2,3388
  80df94:	10c00017 	ldw	r3,0(r2)
  80df98:	e0bffe17 	ldw	r2,-8(fp)
  80df9c:	1880040e 	bge	r3,r2,80dfb0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80dfa0:	00c02074 	movhi	r3,129
  80dfa4:	18c34f04 	addi	r3,r3,3388
  80dfa8:	e0bffe17 	ldw	r2,-8(fp)
  80dfac:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80dfb0:	e0bffe17 	ldw	r2,-8(fp)
  80dfb4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80dfb8:	00000606 	br	80dfd4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80dfbc:	e0bffe17 	ldw	r2,-8(fp)
  80dfc0:	10800044 	addi	r2,r2,1
  80dfc4:	e0bffe15 	stw	r2,-8(fp)
  80dfc8:	e0bffe17 	ldw	r2,-8(fp)
  80dfcc:	10800810 	cmplti	r2,r2,32
  80dfd0:	103fdf1e 	bne	r2,zero,80df50 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80dfd4:	e0bffd17 	ldw	r2,-12(fp)
}
  80dfd8:	e037883a 	mov	sp,fp
  80dfdc:	df000017 	ldw	fp,0(sp)
  80dfe0:	dec00104 	addi	sp,sp,4
  80dfe4:	f800283a 	ret

0080dfe8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80dfe8:	defffe04 	addi	sp,sp,-8
  80dfec:	dfc00115 	stw	ra,4(sp)
  80dff0:	df000015 	stw	fp,0(sp)
  80dff4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80dff8:	0009883a 	mov	r4,zero
  80dffc:	01440004 	movi	r5,4096
  80e000:	080e5e40 	call	80e5e4 <alt_icache_flush>
#endif
}
  80e004:	e037883a 	mov	sp,fp
  80e008:	dfc00117 	ldw	ra,4(sp)
  80e00c:	df000017 	ldw	fp,0(sp)
  80e010:	dec00204 	addi	sp,sp,8
  80e014:	f800283a 	ret

0080e018 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e018:	defff904 	addi	sp,sp,-28
  80e01c:	dfc00615 	stw	ra,24(sp)
  80e020:	df000515 	stw	fp,20(sp)
  80e024:	df000504 	addi	fp,sp,20
  80e028:	e13ffc15 	stw	r4,-16(fp)
  80e02c:	e17ffd15 	stw	r5,-12(fp)
  80e030:	e1bffe15 	stw	r6,-8(fp)
  80e034:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e038:	e0800217 	ldw	r2,8(fp)
  80e03c:	d8800015 	stw	r2,0(sp)
  80e040:	e13ffc17 	ldw	r4,-16(fp)
  80e044:	e17ffd17 	ldw	r5,-12(fp)
  80e048:	e1bffe17 	ldw	r6,-8(fp)
  80e04c:	e1ffff17 	ldw	r7,-4(fp)
  80e050:	080e1ec0 	call	80e1ec <alt_iic_isr_register>
}  
  80e054:	e037883a 	mov	sp,fp
  80e058:	dfc00117 	ldw	ra,4(sp)
  80e05c:	df000017 	ldw	fp,0(sp)
  80e060:	dec00204 	addi	sp,sp,8
  80e064:	f800283a 	ret

0080e068 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e068:	defff904 	addi	sp,sp,-28
  80e06c:	df000615 	stw	fp,24(sp)
  80e070:	df000604 	addi	fp,sp,24
  80e074:	e13ffe15 	stw	r4,-8(fp)
  80e078:	e17fff15 	stw	r5,-4(fp)
  80e07c:	e0bfff17 	ldw	r2,-4(fp)
  80e080:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e084:	0005303a 	rdctl	r2,status
  80e088:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e08c:	e0fffb17 	ldw	r3,-20(fp)
  80e090:	00bfff84 	movi	r2,-2
  80e094:	1884703a 	and	r2,r3,r2
  80e098:	1001703a 	wrctl	status,r2
  
  return context;
  80e09c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e0a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80e0a4:	e0fffc17 	ldw	r3,-16(fp)
  80e0a8:	00800044 	movi	r2,1
  80e0ac:	10c4983a 	sll	r2,r2,r3
  80e0b0:	1007883a 	mov	r3,r2
  80e0b4:	00802074 	movhi	r2,129
  80e0b8:	108a7404 	addi	r2,r2,10704
  80e0bc:	10800017 	ldw	r2,0(r2)
  80e0c0:	1886b03a 	or	r3,r3,r2
  80e0c4:	00802074 	movhi	r2,129
  80e0c8:	108a7404 	addi	r2,r2,10704
  80e0cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e0d0:	00802074 	movhi	r2,129
  80e0d4:	108a7404 	addi	r2,r2,10704
  80e0d8:	10800017 	ldw	r2,0(r2)
  80e0dc:	100170fa 	wrctl	ienable,r2
  80e0e0:	e0bffd17 	ldw	r2,-12(fp)
  80e0e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0e8:	e0bffa17 	ldw	r2,-24(fp)
  80e0ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e0f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80e0f4:	e037883a 	mov	sp,fp
  80e0f8:	df000017 	ldw	fp,0(sp)
  80e0fc:	dec00104 	addi	sp,sp,4
  80e100:	f800283a 	ret

0080e104 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e104:	defff904 	addi	sp,sp,-28
  80e108:	df000615 	stw	fp,24(sp)
  80e10c:	df000604 	addi	fp,sp,24
  80e110:	e13ffe15 	stw	r4,-8(fp)
  80e114:	e17fff15 	stw	r5,-4(fp)
  80e118:	e0bfff17 	ldw	r2,-4(fp)
  80e11c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e120:	0005303a 	rdctl	r2,status
  80e124:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e128:	e0fffb17 	ldw	r3,-20(fp)
  80e12c:	00bfff84 	movi	r2,-2
  80e130:	1884703a 	and	r2,r3,r2
  80e134:	1001703a 	wrctl	status,r2
  
  return context;
  80e138:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e13c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80e140:	e0fffc17 	ldw	r3,-16(fp)
  80e144:	00800044 	movi	r2,1
  80e148:	10c4983a 	sll	r2,r2,r3
  80e14c:	0084303a 	nor	r2,zero,r2
  80e150:	1007883a 	mov	r3,r2
  80e154:	00802074 	movhi	r2,129
  80e158:	108a7404 	addi	r2,r2,10704
  80e15c:	10800017 	ldw	r2,0(r2)
  80e160:	1886703a 	and	r3,r3,r2
  80e164:	00802074 	movhi	r2,129
  80e168:	108a7404 	addi	r2,r2,10704
  80e16c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e170:	00802074 	movhi	r2,129
  80e174:	108a7404 	addi	r2,r2,10704
  80e178:	10800017 	ldw	r2,0(r2)
  80e17c:	100170fa 	wrctl	ienable,r2
  80e180:	e0bffd17 	ldw	r2,-12(fp)
  80e184:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e188:	e0bffa17 	ldw	r2,-24(fp)
  80e18c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e190:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80e194:	e037883a 	mov	sp,fp
  80e198:	df000017 	ldw	fp,0(sp)
  80e19c:	dec00104 	addi	sp,sp,4
  80e1a0:	f800283a 	ret

0080e1a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e1a4:	defffc04 	addi	sp,sp,-16
  80e1a8:	df000315 	stw	fp,12(sp)
  80e1ac:	df000304 	addi	fp,sp,12
  80e1b0:	e13ffe15 	stw	r4,-8(fp)
  80e1b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e1b8:	000530fa 	rdctl	r2,ienable
  80e1bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e1c0:	e0ffff17 	ldw	r3,-4(fp)
  80e1c4:	00800044 	movi	r2,1
  80e1c8:	10c4983a 	sll	r2,r2,r3
  80e1cc:	1007883a 	mov	r3,r2
  80e1d0:	e0bffd17 	ldw	r2,-12(fp)
  80e1d4:	1884703a 	and	r2,r3,r2
  80e1d8:	1004c03a 	cmpne	r2,r2,zero
}
  80e1dc:	e037883a 	mov	sp,fp
  80e1e0:	df000017 	ldw	fp,0(sp)
  80e1e4:	dec00104 	addi	sp,sp,4
  80e1e8:	f800283a 	ret

0080e1ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e1ec:	defff404 	addi	sp,sp,-48
  80e1f0:	dfc00b15 	stw	ra,44(sp)
  80e1f4:	df000a15 	stw	fp,40(sp)
  80e1f8:	df000a04 	addi	fp,sp,40
  80e1fc:	e13ffb15 	stw	r4,-20(fp)
  80e200:	e17ffc15 	stw	r5,-16(fp)
  80e204:	e1bffd15 	stw	r6,-12(fp)
  80e208:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80e20c:	00bffa84 	movi	r2,-22
  80e210:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e214:	e0bffc17 	ldw	r2,-16(fp)
  80e218:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e21c:	e0bff917 	ldw	r2,-28(fp)
  80e220:	10800808 	cmpgei	r2,r2,32
  80e224:	1000291e 	bne	r2,zero,80e2cc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e228:	0005303a 	rdctl	r2,status
  80e22c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e230:	e0fff717 	ldw	r3,-36(fp)
  80e234:	00bfff84 	movi	r2,-2
  80e238:	1884703a 	and	r2,r3,r2
  80e23c:	1001703a 	wrctl	status,r2
  
  return context;
  80e240:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e244:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80e248:	e0bff917 	ldw	r2,-28(fp)
  80e24c:	00c02074 	movhi	r3,129
  80e250:	18cb0b04 	addi	r3,r3,11308
  80e254:	100490fa 	slli	r2,r2,3
  80e258:	10c7883a 	add	r3,r2,r3
  80e25c:	e0bffd17 	ldw	r2,-12(fp)
  80e260:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80e264:	e0bff917 	ldw	r2,-28(fp)
  80e268:	00c02074 	movhi	r3,129
  80e26c:	18cb0b04 	addi	r3,r3,11308
  80e270:	100490fa 	slli	r2,r2,3
  80e274:	10c5883a 	add	r2,r2,r3
  80e278:	10c00104 	addi	r3,r2,4
  80e27c:	e0bffe17 	ldw	r2,-8(fp)
  80e280:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e284:	e0bffd17 	ldw	r2,-12(fp)
  80e288:	1005003a 	cmpeq	r2,r2,zero
  80e28c:	1000051e 	bne	r2,zero,80e2a4 <alt_iic_isr_register+0xb8>
  80e290:	e17ff917 	ldw	r5,-28(fp)
  80e294:	e13ffb17 	ldw	r4,-20(fp)
  80e298:	080e0680 	call	80e068 <alt_ic_irq_enable>
  80e29c:	e0bfff15 	stw	r2,-4(fp)
  80e2a0:	00000406 	br	80e2b4 <alt_iic_isr_register+0xc8>
  80e2a4:	e17ff917 	ldw	r5,-28(fp)
  80e2a8:	e13ffb17 	ldw	r4,-20(fp)
  80e2ac:	080e1040 	call	80e104 <alt_ic_irq_disable>
  80e2b0:	e0bfff15 	stw	r2,-4(fp)
  80e2b4:	e0bfff17 	ldw	r2,-4(fp)
  80e2b8:	e0bffa15 	stw	r2,-24(fp)
  80e2bc:	e0bff817 	ldw	r2,-32(fp)
  80e2c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e2c4:	e0bff617 	ldw	r2,-40(fp)
  80e2c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e2cc:	e0bffa17 	ldw	r2,-24(fp)
}
  80e2d0:	e037883a 	mov	sp,fp
  80e2d4:	dfc00117 	ldw	ra,4(sp)
  80e2d8:	df000017 	ldw	fp,0(sp)
  80e2dc:	dec00204 	addi	sp,sp,8
  80e2e0:	f800283a 	ret

0080e2e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80e2e4:	defff904 	addi	sp,sp,-28
  80e2e8:	dfc00615 	stw	ra,24(sp)
  80e2ec:	df000515 	stw	fp,20(sp)
  80e2f0:	df000504 	addi	fp,sp,20
  80e2f4:	e13ffc15 	stw	r4,-16(fp)
  80e2f8:	e17ffd15 	stw	r5,-12(fp)
  80e2fc:	e1bffe15 	stw	r6,-8(fp)
  80e300:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80e304:	e13ffd17 	ldw	r4,-12(fp)
  80e308:	e17ffe17 	ldw	r5,-8(fp)
  80e30c:	e1bfff17 	ldw	r6,-4(fp)
  80e310:	080ad140 	call	80ad14 <open>
  80e314:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80e318:	e0bffb17 	ldw	r2,-20(fp)
  80e31c:	1004803a 	cmplt	r2,r2,zero
  80e320:	10001c1e 	bne	r2,zero,80e394 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80e324:	e0bffb17 	ldw	r2,-20(fp)
  80e328:	00c02074 	movhi	r3,129
  80e32c:	18fe5404 	addi	r3,r3,-1712
  80e330:	10800324 	muli	r2,r2,12
  80e334:	10c5883a 	add	r2,r2,r3
  80e338:	10c00017 	ldw	r3,0(r2)
  80e33c:	e0bffc17 	ldw	r2,-16(fp)
  80e340:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80e344:	e0bffb17 	ldw	r2,-20(fp)
  80e348:	00c02074 	movhi	r3,129
  80e34c:	18fe5404 	addi	r3,r3,-1712
  80e350:	10800324 	muli	r2,r2,12
  80e354:	10c5883a 	add	r2,r2,r3
  80e358:	10800104 	addi	r2,r2,4
  80e35c:	10c00017 	ldw	r3,0(r2)
  80e360:	e0bffc17 	ldw	r2,-16(fp)
  80e364:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80e368:	e0bffb17 	ldw	r2,-20(fp)
  80e36c:	00c02074 	movhi	r3,129
  80e370:	18fe5404 	addi	r3,r3,-1712
  80e374:	10800324 	muli	r2,r2,12
  80e378:	10c5883a 	add	r2,r2,r3
  80e37c:	10800204 	addi	r2,r2,8
  80e380:	10c00017 	ldw	r3,0(r2)
  80e384:	e0bffc17 	ldw	r2,-16(fp)
  80e388:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80e38c:	e13ffb17 	ldw	r4,-20(fp)
  80e390:	080b07c0 	call	80b07c <alt_release_fd>
  }
} 
  80e394:	e037883a 	mov	sp,fp
  80e398:	dfc00117 	ldw	ra,4(sp)
  80e39c:	df000017 	ldw	fp,0(sp)
  80e3a0:	dec00204 	addi	sp,sp,8
  80e3a4:	f800283a 	ret

0080e3a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80e3a8:	defffb04 	addi	sp,sp,-20
  80e3ac:	dfc00415 	stw	ra,16(sp)
  80e3b0:	df000315 	stw	fp,12(sp)
  80e3b4:	df000304 	addi	fp,sp,12
  80e3b8:	e13ffd15 	stw	r4,-12(fp)
  80e3bc:	e17ffe15 	stw	r5,-8(fp)
  80e3c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80e3c4:	01002074 	movhi	r4,129
  80e3c8:	213e5704 	addi	r4,r4,-1700
  80e3cc:	e17ffd17 	ldw	r5,-12(fp)
  80e3d0:	01800044 	movi	r6,1
  80e3d4:	01c07fc4 	movi	r7,511
  80e3d8:	080e2e40 	call	80e2e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80e3dc:	01002074 	movhi	r4,129
  80e3e0:	213e5404 	addi	r4,r4,-1712
  80e3e4:	e17ffe17 	ldw	r5,-8(fp)
  80e3e8:	000d883a 	mov	r6,zero
  80e3ec:	01c07fc4 	movi	r7,511
  80e3f0:	080e2e40 	call	80e2e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80e3f4:	01002074 	movhi	r4,129
  80e3f8:	213e5a04 	addi	r4,r4,-1688
  80e3fc:	e17fff17 	ldw	r5,-4(fp)
  80e400:	01800044 	movi	r6,1
  80e404:	01c07fc4 	movi	r7,511
  80e408:	080e2e40 	call	80e2e4 <alt_open_fd>
}  
  80e40c:	e037883a 	mov	sp,fp
  80e410:	dfc00117 	ldw	ra,4(sp)
  80e414:	df000017 	ldw	fp,0(sp)
  80e418:	dec00204 	addi	sp,sp,8
  80e41c:	f800283a 	ret

0080e420 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e420:	defffa04 	addi	sp,sp,-24
  80e424:	df000515 	stw	fp,20(sp)
  80e428:	df000504 	addi	fp,sp,20
  80e42c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e430:	0005303a 	rdctl	r2,status
  80e434:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e438:	e0fffd17 	ldw	r3,-12(fp)
  80e43c:	00bfff84 	movi	r2,-2
  80e440:	1884703a 	and	r2,r3,r2
  80e444:	1001703a 	wrctl	status,r2
  
  return context;
  80e448:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e44c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80e450:	e0bfff17 	ldw	r2,-4(fp)
  80e454:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e458:	e0bffc17 	ldw	r2,-16(fp)
  80e45c:	10c00017 	ldw	r3,0(r2)
  80e460:	e0bffc17 	ldw	r2,-16(fp)
  80e464:	10800117 	ldw	r2,4(r2)
  80e468:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80e46c:	e0bffc17 	ldw	r2,-16(fp)
  80e470:	10c00117 	ldw	r3,4(r2)
  80e474:	e0bffc17 	ldw	r2,-16(fp)
  80e478:	10800017 	ldw	r2,0(r2)
  80e47c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e480:	e0fffc17 	ldw	r3,-16(fp)
  80e484:	e0bffc17 	ldw	r2,-16(fp)
  80e488:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80e48c:	e0fffc17 	ldw	r3,-16(fp)
  80e490:	e0bffc17 	ldw	r2,-16(fp)
  80e494:	18800015 	stw	r2,0(r3)
  80e498:	e0bffe17 	ldw	r2,-8(fp)
  80e49c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e4a0:	e0bffb17 	ldw	r2,-20(fp)
  80e4a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e4a8:	e037883a 	mov	sp,fp
  80e4ac:	df000017 	ldw	fp,0(sp)
  80e4b0:	dec00104 	addi	sp,sp,4
  80e4b4:	f800283a 	ret

0080e4b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e4b8:	defffb04 	addi	sp,sp,-20
  80e4bc:	dfc00415 	stw	ra,16(sp)
  80e4c0:	df000315 	stw	fp,12(sp)
  80e4c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e4c8:	d0a00f17 	ldw	r2,-32708(gp)
  80e4cc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e4d0:	d0a73417 	ldw	r2,-25392(gp)
  80e4d4:	10800044 	addi	r2,r2,1
  80e4d8:	d0a73415 	stw	r2,-25392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e4dc:	00003106 	br	80e5a4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e4e0:	e0bffe17 	ldw	r2,-8(fp)
  80e4e4:	10800017 	ldw	r2,0(r2)
  80e4e8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e4ec:	e0bffe17 	ldw	r2,-8(fp)
  80e4f0:	10800403 	ldbu	r2,16(r2)
  80e4f4:	10803fcc 	andi	r2,r2,255
  80e4f8:	1005003a 	cmpeq	r2,r2,zero
  80e4fc:	1000051e 	bne	r2,zero,80e514 <alt_tick+0x5c>
  80e500:	d0a73417 	ldw	r2,-25392(gp)
  80e504:	1004c03a 	cmpne	r2,r2,zero
  80e508:	1000021e 	bne	r2,zero,80e514 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80e50c:	e0bffe17 	ldw	r2,-8(fp)
  80e510:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e514:	e0bffe17 	ldw	r2,-8(fp)
  80e518:	10c00217 	ldw	r3,8(r2)
  80e51c:	d0a73417 	ldw	r2,-25392(gp)
  80e520:	10c01e36 	bltu	r2,r3,80e59c <alt_tick+0xe4>
  80e524:	e0bffe17 	ldw	r2,-8(fp)
  80e528:	10800403 	ldbu	r2,16(r2)
  80e52c:	10803fcc 	andi	r2,r2,255
  80e530:	1004c03a 	cmpne	r2,r2,zero
  80e534:	1000191e 	bne	r2,zero,80e59c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80e538:	e0bffe17 	ldw	r2,-8(fp)
  80e53c:	10c00317 	ldw	r3,12(r2)
  80e540:	e0bffe17 	ldw	r2,-8(fp)
  80e544:	11000517 	ldw	r4,20(r2)
  80e548:	183ee83a 	callr	r3
  80e54c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80e550:	e0bffd17 	ldw	r2,-12(fp)
  80e554:	1004c03a 	cmpne	r2,r2,zero
  80e558:	1000031e 	bne	r2,zero,80e568 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80e55c:	e13ffe17 	ldw	r4,-8(fp)
  80e560:	080e4200 	call	80e420 <alt_alarm_stop>
  80e564:	00000d06 	br	80e59c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80e568:	e0bffe17 	ldw	r2,-8(fp)
  80e56c:	10c00217 	ldw	r3,8(r2)
  80e570:	e0bffd17 	ldw	r2,-12(fp)
  80e574:	1887883a 	add	r3,r3,r2
  80e578:	e0bffe17 	ldw	r2,-8(fp)
  80e57c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80e580:	e0bffe17 	ldw	r2,-8(fp)
  80e584:	10c00217 	ldw	r3,8(r2)
  80e588:	d0a73417 	ldw	r2,-25392(gp)
  80e58c:	1880032e 	bgeu	r3,r2,80e59c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80e590:	e0fffe17 	ldw	r3,-8(fp)
  80e594:	00800044 	movi	r2,1
  80e598:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80e59c:	e0bfff17 	ldw	r2,-4(fp)
  80e5a0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e5a4:	d0e00f04 	addi	r3,gp,-32708
  80e5a8:	e0bffe17 	ldw	r2,-8(fp)
  80e5ac:	10ffcc1e 	bne	r2,r3,80e4e0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80e5b0:	e037883a 	mov	sp,fp
  80e5b4:	dfc00117 	ldw	ra,4(sp)
  80e5b8:	df000017 	ldw	fp,0(sp)
  80e5bc:	dec00204 	addi	sp,sp,8
  80e5c0:	f800283a 	ret

0080e5c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80e5c4:	deffff04 	addi	sp,sp,-4
  80e5c8:	df000015 	stw	fp,0(sp)
  80e5cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80e5d0:	000170fa 	wrctl	ienable,zero
}
  80e5d4:	e037883a 	mov	sp,fp
  80e5d8:	df000017 	ldw	fp,0(sp)
  80e5dc:	dec00104 	addi	sp,sp,4
  80e5e0:	f800283a 	ret

0080e5e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80e5e4:	defffb04 	addi	sp,sp,-20
  80e5e8:	df000415 	stw	fp,16(sp)
  80e5ec:	df000404 	addi	fp,sp,16
  80e5f0:	e13ffe15 	stw	r4,-8(fp)
  80e5f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80e5f8:	e0bfff17 	ldw	r2,-4(fp)
  80e5fc:	10840070 	cmpltui	r2,r2,4097
  80e600:	1000021e 	bne	r2,zero,80e60c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80e604:	00840004 	movi	r2,4096
  80e608:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80e60c:	e0fffe17 	ldw	r3,-8(fp)
  80e610:	e0bfff17 	ldw	r2,-4(fp)
  80e614:	1885883a 	add	r2,r3,r2
  80e618:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80e61c:	e0bffe17 	ldw	r2,-8(fp)
  80e620:	e0bffd15 	stw	r2,-12(fp)
  80e624:	00000506 	br	80e63c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80e628:	e0bffd17 	ldw	r2,-12(fp)
  80e62c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80e630:	e0bffd17 	ldw	r2,-12(fp)
  80e634:	10800804 	addi	r2,r2,32
  80e638:	e0bffd15 	stw	r2,-12(fp)
  80e63c:	e0fffd17 	ldw	r3,-12(fp)
  80e640:	e0bffc17 	ldw	r2,-16(fp)
  80e644:	18bff836 	bltu	r3,r2,80e628 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80e648:	e0bffe17 	ldw	r2,-8(fp)
  80e64c:	108007cc 	andi	r2,r2,31
  80e650:	1005003a 	cmpeq	r2,r2,zero
  80e654:	1000021e 	bne	r2,zero,80e660 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80e658:	e0bffd17 	ldw	r2,-12(fp)
  80e65c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80e660:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80e664:	e037883a 	mov	sp,fp
  80e668:	df000017 	ldw	fp,0(sp)
  80e66c:	dec00104 	addi	sp,sp,4
  80e670:	f800283a 	ret

0080e674 <atexit>:
  80e674:	200b883a 	mov	r5,r4
  80e678:	000d883a 	mov	r6,zero
  80e67c:	0009883a 	mov	r4,zero
  80e680:	000f883a 	mov	r7,zero
  80e684:	080e7341 	jmpi	80e734 <__register_exitproc>

0080e688 <exit>:
  80e688:	defffe04 	addi	sp,sp,-8
  80e68c:	000b883a 	mov	r5,zero
  80e690:	dc000015 	stw	r16,0(sp)
  80e694:	dfc00115 	stw	ra,4(sp)
  80e698:	2021883a 	mov	r16,r4
  80e69c:	080e86c0 	call	80e86c <__call_exitprocs>
  80e6a0:	00802074 	movhi	r2,129
  80e6a4:	10834604 	addi	r2,r2,3352
  80e6a8:	11000017 	ldw	r4,0(r2)
  80e6ac:	20800f17 	ldw	r2,60(r4)
  80e6b0:	10000126 	beq	r2,zero,80e6b8 <exit+0x30>
  80e6b4:	103ee83a 	callr	r2
  80e6b8:	8009883a 	mov	r4,r16
  80e6bc:	080ea5c0 	call	80ea5c <_exit>

0080e6c0 <memcmp>:
  80e6c0:	00c000c4 	movi	r3,3
  80e6c4:	1980032e 	bgeu	r3,r6,80e6d4 <memcmp+0x14>
  80e6c8:	2144b03a 	or	r2,r4,r5
  80e6cc:	10c4703a 	and	r2,r2,r3
  80e6d0:	10000f26 	beq	r2,zero,80e710 <memcmp+0x50>
  80e6d4:	31ffffc4 	addi	r7,r6,-1
  80e6d8:	3000061e 	bne	r6,zero,80e6f4 <memcmp+0x34>
  80e6dc:	00000a06 	br	80e708 <memcmp+0x48>
  80e6e0:	39ffffc4 	addi	r7,r7,-1
  80e6e4:	00bfffc4 	movi	r2,-1
  80e6e8:	21000044 	addi	r4,r4,1
  80e6ec:	29400044 	addi	r5,r5,1
  80e6f0:	38800526 	beq	r7,r2,80e708 <memcmp+0x48>
  80e6f4:	20c00003 	ldbu	r3,0(r4)
  80e6f8:	28800003 	ldbu	r2,0(r5)
  80e6fc:	18bff826 	beq	r3,r2,80e6e0 <memcmp+0x20>
  80e700:	1885c83a 	sub	r2,r3,r2
  80e704:	f800283a 	ret
  80e708:	0005883a 	mov	r2,zero
  80e70c:	f800283a 	ret
  80e710:	180f883a 	mov	r7,r3
  80e714:	20c00017 	ldw	r3,0(r4)
  80e718:	28800017 	ldw	r2,0(r5)
  80e71c:	18bfed1e 	bne	r3,r2,80e6d4 <memcmp+0x14>
  80e720:	31bfff04 	addi	r6,r6,-4
  80e724:	21000104 	addi	r4,r4,4
  80e728:	29400104 	addi	r5,r5,4
  80e72c:	39bff936 	bltu	r7,r6,80e714 <memcmp+0x54>
  80e730:	003fe806 	br	80e6d4 <memcmp+0x14>

0080e734 <__register_exitproc>:
  80e734:	defffa04 	addi	sp,sp,-24
  80e738:	00802074 	movhi	r2,129
  80e73c:	10834604 	addi	r2,r2,3352
  80e740:	dc000015 	stw	r16,0(sp)
  80e744:	14000017 	ldw	r16,0(r2)
  80e748:	dd000415 	stw	r20,16(sp)
  80e74c:	2829883a 	mov	r20,r5
  80e750:	81405217 	ldw	r5,328(r16)
  80e754:	dcc00315 	stw	r19,12(sp)
  80e758:	dc800215 	stw	r18,8(sp)
  80e75c:	dc400115 	stw	r17,4(sp)
  80e760:	dfc00515 	stw	ra,20(sp)
  80e764:	2023883a 	mov	r17,r4
  80e768:	3027883a 	mov	r19,r6
  80e76c:	3825883a 	mov	r18,r7
  80e770:	28002526 	beq	r5,zero,80e808 <__register_exitproc+0xd4>
  80e774:	29000117 	ldw	r4,4(r5)
  80e778:	008007c4 	movi	r2,31
  80e77c:	11002716 	blt	r2,r4,80e81c <__register_exitproc+0xe8>
  80e780:	8800101e 	bne	r17,zero,80e7c4 <__register_exitproc+0x90>
  80e784:	2105883a 	add	r2,r4,r4
  80e788:	1085883a 	add	r2,r2,r2
  80e78c:	20c00044 	addi	r3,r4,1
  80e790:	1145883a 	add	r2,r2,r5
  80e794:	0009883a 	mov	r4,zero
  80e798:	15000215 	stw	r20,8(r2)
  80e79c:	28c00115 	stw	r3,4(r5)
  80e7a0:	2005883a 	mov	r2,r4
  80e7a4:	dfc00517 	ldw	ra,20(sp)
  80e7a8:	dd000417 	ldw	r20,16(sp)
  80e7ac:	dcc00317 	ldw	r19,12(sp)
  80e7b0:	dc800217 	ldw	r18,8(sp)
  80e7b4:	dc400117 	ldw	r17,4(sp)
  80e7b8:	dc000017 	ldw	r16,0(sp)
  80e7bc:	dec00604 	addi	sp,sp,24
  80e7c0:	f800283a 	ret
  80e7c4:	29802204 	addi	r6,r5,136
  80e7c8:	00800044 	movi	r2,1
  80e7cc:	110e983a 	sll	r7,r2,r4
  80e7d0:	30c04017 	ldw	r3,256(r6)
  80e7d4:	2105883a 	add	r2,r4,r4
  80e7d8:	1085883a 	add	r2,r2,r2
  80e7dc:	1185883a 	add	r2,r2,r6
  80e7e0:	19c6b03a 	or	r3,r3,r7
  80e7e4:	14802015 	stw	r18,128(r2)
  80e7e8:	14c00015 	stw	r19,0(r2)
  80e7ec:	00800084 	movi	r2,2
  80e7f0:	30c04015 	stw	r3,256(r6)
  80e7f4:	88bfe31e 	bne	r17,r2,80e784 <__register_exitproc+0x50>
  80e7f8:	30804117 	ldw	r2,260(r6)
  80e7fc:	11c4b03a 	or	r2,r2,r7
  80e800:	30804115 	stw	r2,260(r6)
  80e804:	003fdf06 	br	80e784 <__register_exitproc+0x50>
  80e808:	00802074 	movhi	r2,129
  80e80c:	108b4b04 	addi	r2,r2,11564
  80e810:	100b883a 	mov	r5,r2
  80e814:	80805215 	stw	r2,328(r16)
  80e818:	003fd606 	br	80e774 <__register_exitproc+0x40>
  80e81c:	00800034 	movhi	r2,0
  80e820:	10800004 	addi	r2,r2,0
  80e824:	1000021e 	bne	r2,zero,80e830 <__register_exitproc+0xfc>
  80e828:	013fffc4 	movi	r4,-1
  80e82c:	003fdc06 	br	80e7a0 <__register_exitproc+0x6c>
  80e830:	01006404 	movi	r4,400
  80e834:	103ee83a 	callr	r2
  80e838:	1007883a 	mov	r3,r2
  80e83c:	103ffa26 	beq	r2,zero,80e828 <__register_exitproc+0xf4>
  80e840:	80805217 	ldw	r2,328(r16)
  80e844:	180b883a 	mov	r5,r3
  80e848:	18000115 	stw	zero,4(r3)
  80e84c:	18800015 	stw	r2,0(r3)
  80e850:	80c05215 	stw	r3,328(r16)
  80e854:	18006215 	stw	zero,392(r3)
  80e858:	18006315 	stw	zero,396(r3)
  80e85c:	0009883a 	mov	r4,zero
  80e860:	883fc826 	beq	r17,zero,80e784 <__register_exitproc+0x50>
  80e864:	003fd706 	br	80e7c4 <__register_exitproc+0x90>

0080e868 <register_fini>:
  80e868:	f800283a 	ret

0080e86c <__call_exitprocs>:
  80e86c:	00802074 	movhi	r2,129
  80e870:	10834604 	addi	r2,r2,3352
  80e874:	10800017 	ldw	r2,0(r2)
  80e878:	defff304 	addi	sp,sp,-52
  80e87c:	df000b15 	stw	fp,44(sp)
  80e880:	d8800115 	stw	r2,4(sp)
  80e884:	00800034 	movhi	r2,0
  80e888:	10800004 	addi	r2,r2,0
  80e88c:	1005003a 	cmpeq	r2,r2,zero
  80e890:	d8800215 	stw	r2,8(sp)
  80e894:	d8800117 	ldw	r2,4(sp)
  80e898:	dd400815 	stw	r21,32(sp)
  80e89c:	dd000715 	stw	r20,28(sp)
  80e8a0:	10805204 	addi	r2,r2,328
  80e8a4:	dfc00c15 	stw	ra,48(sp)
  80e8a8:	ddc00a15 	stw	r23,40(sp)
  80e8ac:	dd800915 	stw	r22,36(sp)
  80e8b0:	dcc00615 	stw	r19,24(sp)
  80e8b4:	dc800515 	stw	r18,20(sp)
  80e8b8:	dc400415 	stw	r17,16(sp)
  80e8bc:	dc000315 	stw	r16,12(sp)
  80e8c0:	282b883a 	mov	r21,r5
  80e8c4:	2039883a 	mov	fp,r4
  80e8c8:	d8800015 	stw	r2,0(sp)
  80e8cc:	2829003a 	cmpeq	r20,r5,zero
  80e8d0:	d8800117 	ldw	r2,4(sp)
  80e8d4:	14405217 	ldw	r17,328(r2)
  80e8d8:	88001026 	beq	r17,zero,80e91c <__call_exitprocs+0xb0>
  80e8dc:	ddc00017 	ldw	r23,0(sp)
  80e8e0:	88800117 	ldw	r2,4(r17)
  80e8e4:	8c802204 	addi	r18,r17,136
  80e8e8:	143fffc4 	addi	r16,r2,-1
  80e8ec:	80000916 	blt	r16,zero,80e914 <__call_exitprocs+0xa8>
  80e8f0:	05bfffc4 	movi	r22,-1
  80e8f4:	a000151e 	bne	r20,zero,80e94c <__call_exitprocs+0xe0>
  80e8f8:	8409883a 	add	r4,r16,r16
  80e8fc:	2105883a 	add	r2,r4,r4
  80e900:	1485883a 	add	r2,r2,r18
  80e904:	10c02017 	ldw	r3,128(r2)
  80e908:	a8c01126 	beq	r21,r3,80e950 <__call_exitprocs+0xe4>
  80e90c:	843fffc4 	addi	r16,r16,-1
  80e910:	85bff81e 	bne	r16,r22,80e8f4 <__call_exitprocs+0x88>
  80e914:	d8800217 	ldw	r2,8(sp)
  80e918:	10003126 	beq	r2,zero,80e9e0 <__call_exitprocs+0x174>
  80e91c:	dfc00c17 	ldw	ra,48(sp)
  80e920:	df000b17 	ldw	fp,44(sp)
  80e924:	ddc00a17 	ldw	r23,40(sp)
  80e928:	dd800917 	ldw	r22,36(sp)
  80e92c:	dd400817 	ldw	r21,32(sp)
  80e930:	dd000717 	ldw	r20,28(sp)
  80e934:	dcc00617 	ldw	r19,24(sp)
  80e938:	dc800517 	ldw	r18,20(sp)
  80e93c:	dc400417 	ldw	r17,16(sp)
  80e940:	dc000317 	ldw	r16,12(sp)
  80e944:	dec00d04 	addi	sp,sp,52
  80e948:	f800283a 	ret
  80e94c:	8409883a 	add	r4,r16,r16
  80e950:	88c00117 	ldw	r3,4(r17)
  80e954:	2105883a 	add	r2,r4,r4
  80e958:	1445883a 	add	r2,r2,r17
  80e95c:	18ffffc4 	addi	r3,r3,-1
  80e960:	11800217 	ldw	r6,8(r2)
  80e964:	1c001526 	beq	r3,r16,80e9bc <__call_exitprocs+0x150>
  80e968:	10000215 	stw	zero,8(r2)
  80e96c:	303fe726 	beq	r6,zero,80e90c <__call_exitprocs+0xa0>
  80e970:	00c00044 	movi	r3,1
  80e974:	1c06983a 	sll	r3,r3,r16
  80e978:	90804017 	ldw	r2,256(r18)
  80e97c:	8cc00117 	ldw	r19,4(r17)
  80e980:	1884703a 	and	r2,r3,r2
  80e984:	10001426 	beq	r2,zero,80e9d8 <__call_exitprocs+0x16c>
  80e988:	90804117 	ldw	r2,260(r18)
  80e98c:	1884703a 	and	r2,r3,r2
  80e990:	10000c1e 	bne	r2,zero,80e9c4 <__call_exitprocs+0x158>
  80e994:	2105883a 	add	r2,r4,r4
  80e998:	1485883a 	add	r2,r2,r18
  80e99c:	11400017 	ldw	r5,0(r2)
  80e9a0:	e009883a 	mov	r4,fp
  80e9a4:	303ee83a 	callr	r6
  80e9a8:	88800117 	ldw	r2,4(r17)
  80e9ac:	98bfc81e 	bne	r19,r2,80e8d0 <__call_exitprocs+0x64>
  80e9b0:	b8800017 	ldw	r2,0(r23)
  80e9b4:	147fd526 	beq	r2,r17,80e90c <__call_exitprocs+0xa0>
  80e9b8:	003fc506 	br	80e8d0 <__call_exitprocs+0x64>
  80e9bc:	8c000115 	stw	r16,4(r17)
  80e9c0:	003fea06 	br	80e96c <__call_exitprocs+0x100>
  80e9c4:	2105883a 	add	r2,r4,r4
  80e9c8:	1485883a 	add	r2,r2,r18
  80e9cc:	11000017 	ldw	r4,0(r2)
  80e9d0:	303ee83a 	callr	r6
  80e9d4:	003ff406 	br	80e9a8 <__call_exitprocs+0x13c>
  80e9d8:	303ee83a 	callr	r6
  80e9dc:	003ff206 	br	80e9a8 <__call_exitprocs+0x13c>
  80e9e0:	88800117 	ldw	r2,4(r17)
  80e9e4:	1000081e 	bne	r2,zero,80ea08 <__call_exitprocs+0x19c>
  80e9e8:	89000017 	ldw	r4,0(r17)
  80e9ec:	20000726 	beq	r4,zero,80ea0c <__call_exitprocs+0x1a0>
  80e9f0:	b9000015 	stw	r4,0(r23)
  80e9f4:	8809883a 	mov	r4,r17
  80e9f8:	00000000 	call	0 <__reset-0x800000>
  80e9fc:	bc400017 	ldw	r17,0(r23)
  80ea00:	883fb71e 	bne	r17,zero,80e8e0 <__call_exitprocs+0x74>
  80ea04:	003fc506 	br	80e91c <__call_exitprocs+0xb0>
  80ea08:	89000017 	ldw	r4,0(r17)
  80ea0c:	882f883a 	mov	r23,r17
  80ea10:	2023883a 	mov	r17,r4
  80ea14:	883fb21e 	bne	r17,zero,80e8e0 <__call_exitprocs+0x74>
  80ea18:	003fc006 	br	80e91c <__call_exitprocs+0xb0>

0080ea1c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80ea1c:	defffd04 	addi	sp,sp,-12
  80ea20:	df000215 	stw	fp,8(sp)
  80ea24:	df000204 	addi	fp,sp,8
  80ea28:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80ea2c:	e0bfff17 	ldw	r2,-4(fp)
  80ea30:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80ea34:	e0bffe17 	ldw	r2,-8(fp)
  80ea38:	1005003a 	cmpeq	r2,r2,zero
  80ea3c:	1000021e 	bne	r2,zero,80ea48 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80ea40:	002af070 	cmpltui	zero,zero,43969
  80ea44:	00000106 	br	80ea4c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80ea48:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80ea4c:	e037883a 	mov	sp,fp
  80ea50:	df000017 	ldw	fp,0(sp)
  80ea54:	dec00104 	addi	sp,sp,4
  80ea58:	f800283a 	ret

0080ea5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80ea5c:	defffd04 	addi	sp,sp,-12
  80ea60:	dfc00215 	stw	ra,8(sp)
  80ea64:	df000115 	stw	fp,4(sp)
  80ea68:	df000104 	addi	fp,sp,4
  80ea6c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80ea70:	e13fff17 	ldw	r4,-4(fp)
  80ea74:	080ea1c0 	call	80ea1c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80ea78:	003fff06 	br	80ea78 <_exit+0x1c>
  80ea7c:	00000010 	cmplti	zero,zero,0
  80ea80:	00000000 	call	0 <__reset-0x800000>
  80ea84:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  80ea88:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  80ea8c:	001b0c0b 	ldhu	zero,27696(zero)
  80ea90:	00000028 	cmpgeui	zero,zero,0
  80ea94:	00000018 	cmpnei	zero,zero,0
  80ea98:	00807f84 	movi	r2,510
  80ea9c:	000005dc 	xori	zero,zero,23
  80eaa0:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  80eaa4:	92099170 	cmpltui	r8,r18,9797
  80eaa8:	95079308 	cmpgei	r20,r18,7756
  80eaac:	97049605 	stb	fp,4696(r18)
  80eab0:	90019f03 	ldbu	zero,1660(r18)
  80eab4:	9c06940a 	0x9c06940a
  80eab8:	00000002 	0x2
  80eabc:	00000028 	cmpgeui	zero,zero,0
  80eac0:	00000044 	movi	zero,1
  80eac4:	00808560 	cmpeqi	r2,zero,533
  80eac8:	000005b0 	cmpltui	zero,zero,22
  80eacc:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  80ead0:	92099168 	cmpgeui	r8,r18,9797
  80ead4:	95079308 	cmpgei	r20,r18,7756
  80ead8:	9c039705 	stb	r16,3676(r19)
  80eadc:	90019f02 	0x90019f02
  80eae0:	9606940a 	0x9606940a
  80eae4:	00000004 	movi	zero,0
  80eae8:	0080e868 	cmpgeui	r2,zero,929
