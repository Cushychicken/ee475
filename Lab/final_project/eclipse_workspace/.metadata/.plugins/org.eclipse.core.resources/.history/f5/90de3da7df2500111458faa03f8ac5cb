/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>

/* PERIPHERAL ADDRESSES -- SEE system.h FOR BASE ADDRESS ASSIGNMENTS */
#define CALIBRATE_AVALON_0_BASE 0x01001040
#define CALIBRATE_DATA  		(int *) CALIBRATE_AVALON_0_BASE
#define CALIBRATE_X				(int *) 0x01001041
#define CALIBRATE_Y  			(int *) 0x01001042
#define CALIBRATE_MEM_OFF  		(int *) 0x01001043
#define CALIBRATE_GAIN  		(int *) 0x01001044
#define CALIBRATE_OFFSET  		(int *) 0x01001045
#define CALIBRATE_DATA_CAL  	(int *) 0x01001046

#define LEDs 	 				(int *) 0x01001060
#define Switches  				(int *) 0x01001070

#define IMAGE_SIZE_X	5
#define IMAGE_SIZE_Y	5

/* Array containing input image values */
int input_image[IMAGE_SIZE_Y][IMAGE_SIZE_X]  	= {	{100, 100, 100, 100, 100},
													{100, 100, 100, 100, 100},
													{100, 100, 100, 100, 100},
													{100, 100, 100, 100, 100},
													{100, 100, 100, 100, 100}};
/* Array containing output image values */
int output_image[IMAGE_SIZE_Y][IMAGE_SIZE_X];

/* Array containing gain values for correction */
int gain_table[IMAGE_SIZE_Y][IMAGE_SIZE_X]    	= {	{2,2,2,2,2},
													{3,3,3,3,3},
													{2,2,2,2,2},
													{2,2,2,2,2},
													{3,3,3,3,3}};
/* Array containing offset values for correction */
int offset_table[IMAGE_SIZE_Y][IMAGE_SIZE_X]    = {	{10, 10, 10, 10, 10},
													{10, 10, 10, 10, 10},
													{10, 10, 10, 10, 10},
													{10, 10, 10, 10, 10},
													{10, 10, 10, 10, 10}};

/* Array containing mem_offset values for confirmation purposes */
int mem_offset_table[IMAGE_SIZE_Y][IMAGE_SIZE_X];

int x,y;
int temp;


int main()
{
	x = 0;
	y = 0;

	printf("Starting...\n");

	while(1){
		*LEDs = *Switches;

		/* Loads input image array */

		printf("Output image\n");

		for(y = 0; y < IMAGE_SIZE_Y; y++){
			for(x = 0; x < IMAGE_SIZE_X; x++){
				*CALIBRATE_DATA			= input_image[y][x];
				temp					= *CALIBRATE_DATA;
				printf("%d, ", temp);
			};
			printf("\n");
		};
		printf("\n");


		/*
		printf("Memory offset table\n");
		for(y = 0; y < IMAGE_SIZE_Y; y++){
			for(x = 0; x < IMAGE_SIZE_X; x++){
				printf("%d, ", mem_offset_table[y][x]);
			};
			printf("\n");
		};
		printf("\n");
		*/

/*
 * 				*CALIBRATE_X			= x;
				*CALIBRATE_Y			= y;
				mem_offset_table[y][x]	= *CALIBRATE_MEM_OFF;
				*CALIBRATE_GAIN			= gain_table[y][x];
				*CALIBRATE_OFFSET		= offset_table[y][x];
				output_image[y][x]		= *CALIBRATE_DATA_CAL;
 */

		usleep(1000000);
	};


	return 0;
}

