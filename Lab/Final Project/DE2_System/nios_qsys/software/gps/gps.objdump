
gps.elf:     file format elf32-littlenios2
gps.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001310c memsz 0x0001310c flags r-x
    LOAD off    0x0001412c vaddr 0x0081312c paddr 0x00814d78 align 2**12
         filesz 0x00001c4c memsz 0x00001c4c flags rw-
    LOAD off    0x000169c4 vaddr 0x008169c4 paddr 0x008169c4 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000126e4  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000894  00812898  00812898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c4c  0081312c  00814d78  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  008169c4  008169c4  000169c4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015d78  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  00015da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000018ef  00000000  00000000  00016df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f2fa  00000000  00000000  000186e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a150  00000000  00000000  000479e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001a67c  00000000  00000000  00051b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020bc  00000000  00000000  0006c1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b84  00000000  00000000  0006e26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000eb3e  00000000  00000000  00070df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007f930  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c00  00000000  00000000  0007f980  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00083f2d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00083f30  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00083f38  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00083f39  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00083f3a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000a  00000000  00000000  00083f45  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00083f4f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00083f5a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  00083f63  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00812898 l    d  .rodata	00000000 .rodata
0081312c l    d  .rwdata	00000000 .rwdata
008169c4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 gps.c
008001f0 l     F .text	00000068 WriteLCD
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00812afc l     O .rodata	00000010 bp
00812b0c l     O .rodata	00000010 dp_l
00812b1c l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00812b2c l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 dp-bit.c
00803da8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008056d0 l     F .text	00000058 std
008057dc l     F .text	00000008 __fp_lock
008057e4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0081312c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 refill.c
00807300 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080760c l     F .text	00000058 __sprint_r
00812cc2 l     O .rodata	00000010 blanks.3452
00812cb2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00809758 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00814d44 l     O .rwdata	00000004 charset
00812cf4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00812e3c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080e1d4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0080e41c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e47c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e57c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080e69c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080e77c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080e8d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080e9e4 l     F .text	000000dc alt_file_locked
0080ec48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080edc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814d60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080f064 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00813ae8 l     O .rwdata	00001060 jtag_uart_0
00814b48 l     O .rwdata	00000120 lcd_0
00814c68 l     O .rwdata	000000c4 uart_RS232
0080f18c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f3cc l     F .text	00000228 altera_avalon_jtag_uart_irq
0080f5f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00814d64 l     O .rwdata	00000004 colstart
0080fc70 l     F .text	000000b8 lcd_write_command
0080fd28 l     F .text	000000d4 lcd_write_data
0080fdfc l     F .text	000000c4 lcd_clear_screen
0080fec0 l     F .text	000001ec lcd_repaint_screen
008100ac l     F .text	000000c8 lcd_scroll_up
00810174 l     F .text	000002d0 lcd_handle_escape
00810950 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00810bb0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00810e70 l     F .text	0000009c altera_avalon_uart_irq
00810f0c l     F .text	000000e0 altera_avalon_uart_rxirq
00810fec l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008113d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00811600 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811884 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00811f14 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00812fa9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00812614 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008127c8 l     F .text	00000040 alt_sim_halt
00807118 g     F .text	0000001c putchar
0080bc7c g     F .text	00000094 _mprec_log10
0080bd68 g     F .text	00000088 __any_on
0080b460 g     F .text	00000070 _isatty_r
00812e14 g     O .rodata	00000028 __mprec_tinytens
0080e938 g     F .text	0000006c alt_main
00816a20 g     O .bss	00000100 alt_irq
00803918 g     F .text	00000018 fabs
0080b594 g     F .text	00000078 _lseek_r
00814d78 g       *ABS*	00000000 __flash_rwdata_start
0080af24 g     F .text	000000a0 __sflags
008048c8 g     F .text	00000088 __eqdf2
00816cb0 g       *ABS*	00000000 __alt_heap_start
00800f90 g     F .text	00000038 check_upd
008070a0 g     F .text	00000044 printf
008074c8 g     F .text	00000068 __sseek
00805738 g     F .text	000000a4 __sinit
0080d22c g     F .text	00000130 __swbuf_r
0080b4f4 g     F .text	00000084 _setlocale_r
00805838 g     F .text	00000068 __sfmoreglue
0080e9c4 g     F .text	00000020 __malloc_unlock
0080b790 g     F .text	000000e0 memmove
00805828 g     F .text	00000010 _cleanup
0080bdf0 g     F .text	000000bc _Balloc
008049d8 g     F .text	00000088 __gtdf2
0080536c g     F .text	00000010 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008063a0 g     F .text	00000074 _fstat_r
008169c4 g     O .bss	00000004 errno
00807368 g     F .text	00000014 __srget
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
008169e4 g     O .bss	00000004 alt_argv
0081cd2c g       *ABS*	00000000 _gp
008121f4 g     F .text	00000030 usleep
00813968 g     O .rwdata	00000180 alt_fd_list
0080662c g     F .text	00000090 _getc_r
00806594 g     F .text	00000098 getc
00807134 g     F .text	00000008 _putchar_r
008119ac g     F .text	00000094 alt_find_dev
0080b6f0 g     F .text	000000a0 memcpy
0080581c g     F .text	0000000c _cleanup_r
00804b70 g     F .text	000000f8 __floatsidf
00811fd8 g     F .text	00000078 alt_io_redirect
00804a60 g     F .text	00000088 __ltdf2
00812898 g       *ABS*	00000000 __DTOR_END__
0080bbcc g     F .text	000000b0 __ratio
0080f80c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008070e4 g     F .text	00000034 _printf_r
0080e310 g     F .text	00000008 __udivsi3
0080e5dc g     F .text	000000c0 isatty
00812d24 g     O .rodata	000000c8 __mprec_tens
0080b4d0 g     F .text	00000008 __locale_charset
00812390 g     F .text	00000090 alt_icache_flush
008169c8 g     O .bss	00000004 __malloc_top_pad
00814d40 g     O .rwdata	00000004 __mb_cur_max
0080b4d8 g     F .text	0000000c _localeconv_r
0080c4e8 g     F .text	0000003c __i2b
0080afc4 g     F .text	0000049c __sfvwrite_r
0080737c g     F .text	00000070 _sbrk_r
0080ca50 g     F .text	00000078 _read_r
00813934 g     O .rwdata	0000000c __lc_ctype
00814d58 g     O .rwdata	00000004 alt_max_fd
0080516c g     F .text	00000138 __unpack_d
0080537c g     F .text	00000110 _fclose_r
0080569c g     F .text	00000034 fflush
008169cc g     O .bss	00000004 __malloc_max_sbrked_mem
00804238 g     F .text	00000074 __adddf3
0080baac g     F .text	00000120 __b2d
0080da08 g     F .text	000005b0 __umoddi3
0080e7e8 g     F .text	000000f0 lseek
00814d2c g     O .rwdata	00000004 __fdlib_version
00814d34 g     O .rwdata	00000004 _global_impure_ptr
0080cac8 g     F .text	000005f4 _realloc_r
00816cb0 g       *ABS*	00000000 __bss_end
00811e1c g     F .text	000000f8 alt_iic_isr_register
008120e8 g     F .text	0000010c alt_tick
0080d42c g     F .text	000005dc __udivdi3
00812dec g     O .rodata	00000028 __mprec_bigtens
0080c744 g     F .text	00000120 __s2b
0080e040 g     F .text	00000194 __floatunsidf
0080b9cc g     F .text	00000060 __mcmp
00810da8 g     F .text	000000c8 altera_avalon_uart_init
00814d74 g     O .rwdata	00000004 __ctype_ptr
00805804 g     F .text	00000018 __fp_lock_all
00811dd4 g     F .text	00000048 alt_ic_irq_enabled
00812050 g     F .text	00000098 alt_alarm_stop
008169ec g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
00813940 g     O .rwdata	00000028 alt_dev_null
00803994 g     F .text	00000210 rint
008117b4 g     F .text	0000001c alt_dcache_flush_all
0080b898 g     F .text	00000070 __hi0bits
00804c68 g     F .text	000000d8 __fixdfsi
00814d78 g       *ABS*	00000000 __ram_rwdata_end
00814d50 g     O .rwdata	00000008 alt_dev_list
0080ef44 g     F .text	00000120 write
0080c968 g     F .text	000000e8 _putc_r
0081312c g       *ABS*	00000000 __ram_rodata_end
0080e4a8 g     F .text	000000d4 fstat
00805aa0 g     F .text	0000002c fprintf
00804ae8 g     F .text	00000088 __ledf2
0080c624 g     F .text	00000120 __pow5mult
008169d4 g     O .bss	00000004 __nlocale_changed
0080e318 g     F .text	00000008 __umodsi3
00816cb0 g       *ABS*	00000000 end
00810444 g     F .text	0000050c altera_avalon_lcd_16207_write
00811438 g     F .text	000001c8 altera_avalon_uart_write
0080637c g     F .text	00000024 fseek
0080f30c g     F .text	000000c0 altera_avalon_jtag_uart_init
00812894 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810c20 g     F .text	00000090 alt_avalon_timer_sc_init
00810d08 g     F .text	00000058 altera_avalon_uart_write_fd
00804dd8 g     F .text	00000080 __clzsi2
00810d60 g     F .text	00000048 altera_avalon_uart_close_fd
0080fa30 g     F .text	00000240 altera_avalon_jtag_uart_write
00805728 g     F .text	00000004 __sfp_lock_acquire
0080b60c g     F .text	000000e4 memchr
00807664 g     F .text	00001eac ___vfprintf_internal_r
00807460 g     F .text	00000060 _sprintf_r
00805c2c g     F .text	00000314 _free_r
00812618 g     F .text	000001b0 __call_exitprocs
0080731c g     F .text	0000004c __srget_r
008169d8 g     O .bss	00000004 __mlocale_changed
00814d3c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
008169f0 g     O .bss	00000004 _alt_tick_rate
008018d4 g     F .text	000003b0 long_to_deg
0080c1b4 g     F .text	0000014c __lshift
008169f4 g     O .bss	00000004 _alt_nticks
0080eca8 g     F .text	00000120 read
0080f0f8 g     F .text	00000094 alt_sys_init
00807028 g     F .text	00000078 _open_r
008124e0 g     F .text	00000134 __register_exitproc
00801524 g     F .text	000003b0 lat_to_deg
0080c300 g     F .text	000001e8 __multiply
00802350 g     F .text	00001300 __ieee754_pow
0080f6a4 g     F .text	00000074 altera_avalon_jtag_uart_close
00801ec8 g     F .text	00000488 pow
0081312c g       *ABS*	00000000 __ram_rwdata_start
00812898 g       *ABS*	00000000 __ram_rodata_start
008169f8 g     O .bss	00000028 __malloc_current_mallinfo
0080beac g     F .text	0000017c __d2b
00800fc8 g     F .text	0000017c atoh
0080f1c4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00811b60 g     F .text	000000b8 alt_get_fd
00812244 g     F .text	0000014c alt_busy_sleep
008052a4 g     F .text	000000c8 __fpcmp_parts_d
008096e8 g     F .text	00000070 _close_r
0081246c g     F .text	00000074 memcmp
0080f274 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00816cb0 g       *ABS*	00000000 __alt_stack_base
0080f2bc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008095ac g     F .text	0000013c __swsetup_r
00804670 g     F .text	00000258 __divdf3
008058a0 g     F .text	000000f0 __sfp
0080bd10 g     F .text	00000058 __copybits
0081352c g     O .rwdata	00000408 __malloc_av_
00805734 g     F .text	00000004 __sinit_lock_release
008042ac g     F .text	000003c4 __muldf3
008075ac g     F .text	00000060 __sread
00811a40 g     F .text	00000120 alt_find_file
008117d0 g     F .text	000000b4 alt_dev_llist_insert
0080e9a4 g     F .text	00000020 __malloc_lock
00805acc g     F .text	00000034 _fprintf_r
0080ee88 g     F .text	000000bc sbrk
008054a0 g     F .text	000001fc _fflush_r
0080d378 g     F .text	000000b4 _calloc_r
00805a84 g     F .text	0000001c fopen
008169c4 g       *ABS*	00000000 __bss_start
00806f90 g     F .text	00000098 memset
00801c84 g     F .text	00000244 main
008169e8 g     O .bss	00000004 alt_envp
008169d0 g     O .bss	00000004 __malloc_max_total_mem
0080f21c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080d35c g     F .text	0000001c __swbuf
00810a1c g     F .text	0000013c altera_avalon_lcd_16207_init
008074c0 g     F .text	00000008 __sclose
0080397c g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
0080548c g     F .text	00000014 fclose
00816b20 g     O .bss	00000190 _atexit0
00809970 g     F .text	000015b4 _dtoa_r
00806850 g     F .text	00000740 _malloc_r
00814d5c g     O .rwdata	00000004 alt_errno
008064dc g     F .text	000000b8 _fwalk
0080c864 g     F .text	00000104 putc
0080e250 g     F .text	00000060 __divsi3
00812b3c g     O .rodata	00000014 __thenan_df
00805b00 g     F .text	0000012c _malloc_trim_r
00812898 g       *ABS*	00000000 __CTOR_END__
00803930 g     F .text	0000001c finite
0080d0fc g     F .text	000000bc strcmp
00812898 g       *ABS*	00000000 __flash_rodata_start
00812898 g       *ABS*	00000000 __DTOR_LIST__
00803d84 g     F .text	00000024 copysign
00804950 g     F .text	00000088 __nedf2
008005b8 g     F .text	000009d8 parse_GGA
0080f0c4 g     F .text	00000034 alt_irq_init
0080ee28 g     F .text	00000060 alt_release_fd
008073ec g     F .text	00000074 sprintf
00812b50 g     O .rodata	00000100 __clz_tab
008169dc g     O .bss	00000004 _PathLocale
00812420 g     F .text	00000014 atexit
00809534 g     F .text	00000078 _write_r
0080b578 g     F .text	0000001c setlocale
00814d30 g     O .rwdata	00000004 _impure_ptr
008169e0 g     O .bss	00000004 alt_argc
00803ba4 g     F .text	000001e0 scalbn
00811948 g     F .text	00000064 _do_dtors
00805f40 g     F .text	0000043c _fseek_r
0080713c g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080ba2c g     F .text	00000080 __ulp
0080d0bc g     F .text	00000040 __isinfd
008057ec g     F .text	00000018 __fp_unlock_all
00810b58 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00814d48 g     O .rwdata	00000008 alt_fs_list
00803984 g     F .text	00000010 nan
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080b4e4 g     F .text	00000010 localeconv
00803650 g     F .text	000002c8 __ieee754_sqrt
00801144 g     F .text	00000248 GMT_to_MST
00811c48 g     F .text	00000050 alt_ic_isr_register
00814d78 g       *ABS*	00000000 _edata
00810cb0 g     F .text	00000058 altera_avalon_uart_read_fd
00816cb0 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080f718 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00811d34 g     F .text	000000a0 alt_ic_irq_disable
00807530 g     F .text	0000007c __swrite
00814d38 g     O .rwdata	00000004 __malloc_trim_threshold
00812224 g     F .text	00000020 altera_nios2_qsys_irq_init
00812434 g     F .text	00000038 exit
00806414 g     F .text	000000c8 _fwalk_reent
0080c028 g     F .text	0000018c __mdiff
0080e2b0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080572c g     F .text	00000004 __sfp_lock_release
00812ea8 g     O .rodata	00000101 _ctype_
00800258 g     F .text	00000360 checksum
00811148 g     F .text	00000060 altera_avalon_uart_close
00805990 g     F .text	000000f4 _fopen_r
00812808 g     F .text	00000020 _exit
0080394c g     F .text	00000030 __isnand
00811660 g     F .text	00000154 alt_alarm_start
00804d40 g     F .text	00000098 __muldi3
008066bc g     F .text	00000194 __smakebuf_r
0080d1b8 g     F .text	00000074 strlen
0080eac0 g     F .text	00000188 open
0080dfb8 g     F .text	00000088 __gedf2
00811c18 g     F .text	00000030 alt_icache_flush_all
00814d68 g     O .rwdata	00000004 alt_priority_mask
00811c98 g     F .text	0000009c alt_ic_irq_enable
00809510 g     F .text	00000024 __vfprintf_internal
008111a8 g     F .text	00000230 altera_avalon_uart_read
008041b8 g     F .text	00000080 __subdf3
0080b908 g     F .text	000000c4 __lo0bits
00814d6c g     O .rwdata	00000008 alt_alarm_list
008118e4 g     F .text	00000064 _do_ctors
0080e320 g     F .text	000000fc close
0080e6fc g     F .text	00000080 alt_load
00804e58 g     F .text	00000314 __pack_d
0080138c g     F .text	00000198 m_to_ft
00000000  w      *UND*	00000000 free
00805730 g     F .text	00000004 __sinit_lock_acquire
0080c524 g     F .text	00000100 __multadd
0080b870 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18da8804 	addi	r3,r3,27168
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18da8804 	addi	r3,r3,27168
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d6b34b14 	ori	gp,gp,52524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	109a7114 	ori	r2,r2,27076

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18db2c14 	ori	r3,r3,27824

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080e6fc0 	call	80e6fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080e9380 	call	80e938 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <WriteLCD>:
 * Note: ensure the fopen command is accessing the proper lcd driver name!
 *
 ******************************************************************************/

static void WriteLCD(char *msg)
{
  8001f0:	defffc04 	addi	sp,sp,-16
  8001f4:	dfc00315 	stw	ra,12(sp)
  8001f8:	df000215 	stw	fp,8(sp)
  8001fc:	df000204 	addi	fp,sp,8
  800200:	e13fff15 	stw	r4,-4(fp)
  FILE *lcd;

  lcd = fopen("/dev/lcd_0", "w");
  800204:	01002074 	movhi	r4,129
  800208:	210a2604 	addi	r4,r4,10392
  80020c:	01402074 	movhi	r5,129
  800210:	294a2904 	addi	r5,r5,10404
  800214:	0805a840 	call	805a84 <fopen>
  800218:	e0bffe15 	stw	r2,-8(fp)

  /* Write some simple text to the LCD. */
  if (lcd != NULL )
  80021c:	e0bffe17 	ldw	r2,-8(fp)
  800220:	1005003a 	cmpeq	r2,r2,zero
  800224:	1000051e 	bne	r2,zero,80023c <WriteLCD+0x4c>
  {
    fprintf(lcd, "%s\n", msg);
  800228:	e13ffe17 	ldw	r4,-8(fp)
  80022c:	01402074 	movhi	r5,129
  800230:	294a2a04 	addi	r5,r5,10408
  800234:	e1bfff17 	ldw	r6,-4(fp)
  800238:	0805aa00 	call	805aa0 <fprintf>
  }

  fclose( lcd );
  80023c:	e13ffe17 	ldw	r4,-8(fp)
  800240:	080548c0 	call	80548c <fclose>

  return;
}
  800244:	e037883a 	mov	sp,fp
  800248:	dfc00117 	ldw	ra,4(sp)
  80024c:	df000017 	ldw	fp,0(sp)
  800250:	dec00204 	addi	sp,sp,8
  800254:	f800283a 	ret

00800258 <checksum>:
void parse_GGA(char pkt[83], struct packet *packet_GGA);						/*Function to parse GGA packet into data structure     	*/
char GMT_to_MST(int *time, char *pkt_time);										/*Function to convert to Mt Standard time from GMT		*/
void lat_to_deg(char *pkt_lat, int *lat);										/*Function to convert packet latitude to integers		*/
void long_to_deg(char *pkt_lat, int *lon);										/*Function to convert packet longitude to integers		*/

int checksum(char test, char cs, char pkt[83]){
  800258:	defff604 	addi	sp,sp,-40
  80025c:	dfc00915 	stw	ra,36(sp)
  800260:	df000815 	stw	fp,32(sp)
  800264:	df000804 	addi	fp,sp,32
  800268:	e1bffe15 	stw	r6,-8(fp)
  80026c:	e13ffc05 	stb	r4,-16(fp)
  800270:	e17ffd05 	stb	r5,-12(fp)
  int j,k,temp,check;

  j = 0;																		/*Sets checksum flag to 0                              	*/
  800274:	e03ffb15 	stw	zero,-20(fp)
  k = 0;
  800278:	e03ffa15 	stw	zero,-24(fp)

  if(test == 'G'){
  80027c:	e0bffc07 	ldb	r2,-16(fp)
  800280:	108011d8 	cmpnei	r2,r2,71
  800284:	1000c51e 	bne	r2,zero,80059c <checksum+0x344>
	  cs  		= test;
  800288:	e0bffc03 	ldbu	r2,-16(fp)
  80028c:	e0bffd05 	stb	r2,-12(fp)
	  pkt[j] 	= test;
  800290:	e0bffb17 	ldw	r2,-20(fp)
  800294:	1007883a 	mov	r3,r2
  800298:	e0bffe17 	ldw	r2,-8(fp)
  80029c:	1887883a 	add	r3,r3,r2
  8002a0:	e0bffc03 	ldbu	r2,-16(fp)
  8002a4:	18800005 	stb	r2,0(r3)
	  j++;
  8002a8:	e0bffb17 	ldw	r2,-20(fp)
  8002ac:	10800044 	addi	r2,r2,1
  8002b0:	e0bffb15 	stw	r2,-20(fp)
	  test		= getchar();
  8002b4:	00802074 	movhi	r2,129
  8002b8:	10934c04 	addi	r2,r2,19760
  8002bc:	10800017 	ldw	r2,0(r2)
  8002c0:	11000117 	ldw	r4,4(r2)
  8002c4:	08065940 	call	806594 <getc>
  8002c8:	e0bffc05 	stb	r2,-16(fp)
	  if(test == 'P'){
  8002cc:	e0bffc07 	ldb	r2,-16(fp)
  8002d0:	10801418 	cmpnei	r2,r2,80
  8002d4:	1000b11e 	bne	r2,zero,80059c <checksum+0x344>
		  cs = check_upd(test,cs);
  8002d8:	e13ffc07 	ldb	r4,-16(fp)
  8002dc:	e17ffd07 	ldb	r5,-12(fp)
  8002e0:	0800f900 	call	800f90 <check_upd>
  8002e4:	e0bffd05 	stb	r2,-12(fp)
		  pkt[j] = test;
  8002e8:	e0bffb17 	ldw	r2,-20(fp)
  8002ec:	1007883a 	mov	r3,r2
  8002f0:	e0bffe17 	ldw	r2,-8(fp)
  8002f4:	1887883a 	add	r3,r3,r2
  8002f8:	e0bffc03 	ldbu	r2,-16(fp)
  8002fc:	18800005 	stb	r2,0(r3)
		  j++;
  800300:	e0bffb17 	ldw	r2,-20(fp)
  800304:	10800044 	addi	r2,r2,1
  800308:	e0bffb15 	stw	r2,-20(fp)
		  test = getchar();
  80030c:	00802074 	movhi	r2,129
  800310:	10934c04 	addi	r2,r2,19760
  800314:	10800017 	ldw	r2,0(r2)
  800318:	11000117 	ldw	r4,4(r2)
  80031c:	08065940 	call	806594 <getc>
  800320:	e0bffc05 	stb	r2,-16(fp)
		  if(test == 'G'){
  800324:	e0bffc07 	ldb	r2,-16(fp)
  800328:	108011d8 	cmpnei	r2,r2,71
  80032c:	10009b1e 	bne	r2,zero,80059c <checksum+0x344>
			  cs = check_upd(test,cs);
  800330:	e13ffc07 	ldb	r4,-16(fp)
  800334:	e17ffd07 	ldb	r5,-12(fp)
  800338:	0800f900 	call	800f90 <check_upd>
  80033c:	e0bffd05 	stb	r2,-12(fp)
			  pkt[j] 	= test;
  800340:	e0bffb17 	ldw	r2,-20(fp)
  800344:	1007883a 	mov	r3,r2
  800348:	e0bffe17 	ldw	r2,-8(fp)
  80034c:	1887883a 	add	r3,r3,r2
  800350:	e0bffc03 	ldbu	r2,-16(fp)
  800354:	18800005 	stb	r2,0(r3)
			  j++;
  800358:	e0bffb17 	ldw	r2,-20(fp)
  80035c:	10800044 	addi	r2,r2,1
  800360:	e0bffb15 	stw	r2,-20(fp)
			  test 	= getchar();
  800364:	00802074 	movhi	r2,129
  800368:	10934c04 	addi	r2,r2,19760
  80036c:	10800017 	ldw	r2,0(r2)
  800370:	11000117 	ldw	r4,4(r2)
  800374:	08065940 	call	806594 <getc>
  800378:	e0bffc05 	stb	r2,-16(fp)
			  if(test == 'G'){
  80037c:	e0bffc07 	ldb	r2,-16(fp)
  800380:	108011d8 	cmpnei	r2,r2,71
  800384:	1000851e 	bne	r2,zero,80059c <checksum+0x344>
				  cs   	= check_upd(test,cs);
  800388:	e13ffc07 	ldb	r4,-16(fp)
  80038c:	e17ffd07 	ldb	r5,-12(fp)
  800390:	0800f900 	call	800f90 <check_upd>
  800394:	e0bffd05 	stb	r2,-12(fp)
				  pkt[j] 	= test;
  800398:	e0bffb17 	ldw	r2,-20(fp)
  80039c:	1007883a 	mov	r3,r2
  8003a0:	e0bffe17 	ldw	r2,-8(fp)
  8003a4:	1887883a 	add	r3,r3,r2
  8003a8:	e0bffc03 	ldbu	r2,-16(fp)
  8003ac:	18800005 	stb	r2,0(r3)
				  j++;
  8003b0:	e0bffb17 	ldw	r2,-20(fp)
  8003b4:	10800044 	addi	r2,r2,1
  8003b8:	e0bffb15 	stw	r2,-20(fp)
				  test 	= getchar();
  8003bc:	00802074 	movhi	r2,129
  8003c0:	10934c04 	addi	r2,r2,19760
  8003c4:	10800017 	ldw	r2,0(r2)
  8003c8:	11000117 	ldw	r4,4(r2)
  8003cc:	08065940 	call	806594 <getc>
  8003d0:	e0bffc05 	stb	r2,-16(fp)
				  if(test == 'A'){								/*If it makes it this far, GPGGA has been found       */
  8003d4:	e0bffc07 	ldb	r2,-16(fp)
  8003d8:	10801058 	cmpnei	r2,r2,65
  8003dc:	10006f1e 	bne	r2,zero,80059c <checksum+0x344>
					  cs = check_upd(test,cs);
  8003e0:	e13ffc07 	ldb	r4,-16(fp)
  8003e4:	e17ffd07 	ldb	r5,-12(fp)
  8003e8:	0800f900 	call	800f90 <check_upd>
  8003ec:	e0bffd05 	stb	r2,-12(fp)
					  pkt[j] 	= test;
  8003f0:	e0bffb17 	ldw	r2,-20(fp)
  8003f4:	1007883a 	mov	r3,r2
  8003f8:	e0bffe17 	ldw	r2,-8(fp)
  8003fc:	1887883a 	add	r3,r3,r2
  800400:	e0bffc03 	ldbu	r2,-16(fp)
  800404:	18800005 	stb	r2,0(r3)
					  j++;
  800408:	e0bffb17 	ldw	r2,-20(fp)
  80040c:	10800044 	addi	r2,r2,1
  800410:	e0bffb15 	stw	r2,-20(fp)
					  test 	= getchar();
  800414:	00802074 	movhi	r2,129
  800418:	10934c04 	addi	r2,r2,19760
  80041c:	10800017 	ldw	r2,0(r2)
  800420:	11000117 	ldw	r4,4(r2)
  800424:	08065940 	call	806594 <getc>
  800428:	e0bffc05 	stb	r2,-16(fp)
					  while(test != '$'){						/*Loop reads in new character from serial and 		  */
  80042c:	00000f06 	br	80046c <checksum+0x214>
						  pkt[j] = test;						/*populates an array of characters with the serial 	  */
  800430:	e0bffb17 	ldw	r2,-20(fp)
  800434:	1007883a 	mov	r3,r2
  800438:	e0bffe17 	ldw	r2,-8(fp)
  80043c:	1887883a 	add	r3,r3,r2
  800440:	e0bffc03 	ldbu	r2,-16(fp)
  800444:	18800005 	stb	r2,0(r3)
						  j++;									/*characters										  */
  800448:	e0bffb17 	ldw	r2,-20(fp)
  80044c:	10800044 	addi	r2,r2,1
  800450:	e0bffb15 	stw	r2,-20(fp)
						  test = getchar();
  800454:	00802074 	movhi	r2,129
  800458:	10934c04 	addi	r2,r2,19760
  80045c:	10800017 	ldw	r2,0(r2)
  800460:	11000117 	ldw	r4,4(r2)
  800464:	08065940 	call	806594 <getc>
  800468:	e0bffc05 	stb	r2,-16(fp)
				  if(test == 'A'){								/*If it makes it this far, GPGGA has been found       */
					  cs = check_upd(test,cs);
					  pkt[j] 	= test;
					  j++;
					  test 	= getchar();
					  while(test != '$'){						/*Loop reads in new character from serial and 		  */
  80046c:	e0bffc07 	ldb	r2,-16(fp)
  800470:	10800918 	cmpnei	r2,r2,36
  800474:	103fee1e 	bne	r2,zero,800430 <checksum+0x1d8>
						  pkt[j] = test;						/*populates an array of characters with the serial 	  */
						  j++;									/*characters										  */
						  test = getchar();
					  };

					  for(j=0; (pkt[j]!= '*'); j++){			/*Calculates the checksum by looping through array	  */
  800478:	e03ffb15 	stw	zero,-20(fp)
  80047c:	00001806 	br	8004e0 <checksum+0x288>
						  if(j == 0){							/*Xors each successive ascii character with the stored*/
  800480:	e0bffb17 	ldw	r2,-20(fp)
  800484:	1004c03a 	cmpne	r2,r2,zero
  800488:	1000071e 	bne	r2,zero,8004a8 <checksum+0x250>
							  cs = pkt[j];						/*value of cs with the check_upd f'n				  */
  80048c:	e0bffb17 	ldw	r2,-20(fp)
  800490:	1007883a 	mov	r3,r2
  800494:	e0bffe17 	ldw	r2,-8(fp)
  800498:	1885883a 	add	r2,r3,r2
  80049c:	10800003 	ldbu	r2,0(r2)
  8004a0:	e0bffd05 	stb	r2,-12(fp)
  8004a4:	00000b06 	br	8004d4 <checksum+0x27c>
						  } else {
							  cs = check_upd(pkt[j], cs);
  8004a8:	e0bffb17 	ldw	r2,-20(fp)
  8004ac:	1007883a 	mov	r3,r2
  8004b0:	e0bffe17 	ldw	r2,-8(fp)
  8004b4:	1885883a 	add	r2,r3,r2
  8004b8:	10800003 	ldbu	r2,0(r2)
  8004bc:	11003fcc 	andi	r4,r2,255
  8004c0:	2100201c 	xori	r4,r4,128
  8004c4:	213fe004 	addi	r4,r4,-128
  8004c8:	e17ffd07 	ldb	r5,-12(fp)
  8004cc:	0800f900 	call	800f90 <check_upd>
  8004d0:	e0bffd05 	stb	r2,-12(fp)
						  pkt[j] = test;						/*populates an array of characters with the serial 	  */
						  j++;									/*characters										  */
						  test = getchar();
					  };

					  for(j=0; (pkt[j]!= '*'); j++){			/*Calculates the checksum by looping through array	  */
  8004d4:	e0bffb17 	ldw	r2,-20(fp)
  8004d8:	10800044 	addi	r2,r2,1
  8004dc:	e0bffb15 	stw	r2,-20(fp)
  8004e0:	e0bffb17 	ldw	r2,-20(fp)
  8004e4:	1007883a 	mov	r3,r2
  8004e8:	e0bffe17 	ldw	r2,-8(fp)
  8004ec:	1885883a 	add	r2,r3,r2
  8004f0:	10800003 	ldbu	r2,0(r2)
  8004f4:	10803fcc 	andi	r2,r2,255
  8004f8:	1080201c 	xori	r2,r2,128
  8004fc:	10bfe004 	addi	r2,r2,-128
  800500:	10800a98 	cmpnei	r2,r2,42
  800504:	103fde1e 	bne	r2,zero,800480 <checksum+0x228>
						  } else {
							  cs = check_upd(pkt[j], cs);
						  }
					  };

					  printf("\n");
  800508:	01000284 	movi	r4,10
  80050c:	08071180 	call	807118 <putchar>
					  temp  = (atoh(pkt[(j+1)]));
  800510:	e0fffb17 	ldw	r3,-20(fp)
  800514:	e0bffe17 	ldw	r2,-8(fp)
  800518:	1885883a 	add	r2,r3,r2
  80051c:	10800044 	addi	r2,r2,1
  800520:	10800003 	ldbu	r2,0(r2)
  800524:	11003fcc 	andi	r4,r2,255
  800528:	2100201c 	xori	r4,r4,128
  80052c:	213fe004 	addi	r4,r4,-128
  800530:	0800fc80 	call	800fc8 <atoh>
  800534:	e0bff915 	stw	r2,-28(fp)
					  temp  = temp << 4;
  800538:	e0bff917 	ldw	r2,-28(fp)
  80053c:	1004913a 	slli	r2,r2,4
  800540:	e0bff915 	stw	r2,-28(fp)
					  check = (atoh(pkt[(j+2)]) + temp);
  800544:	e0fffb17 	ldw	r3,-20(fp)
  800548:	e0bffe17 	ldw	r2,-8(fp)
  80054c:	1885883a 	add	r2,r3,r2
  800550:	10800084 	addi	r2,r2,2
  800554:	10800003 	ldbu	r2,0(r2)
  800558:	11003fcc 	andi	r4,r2,255
  80055c:	2100201c 	xori	r4,r4,128
  800560:	213fe004 	addi	r4,r4,-128
  800564:	0800fc80 	call	800fc8 <atoh>
  800568:	1007883a 	mov	r3,r2
  80056c:	e0bff917 	ldw	r2,-28(fp)
  800570:	1885883a 	add	r2,r3,r2
  800574:	e0bff815 	stw	r2,-32(fp)
				/* Printf statements for debugging checksum--left in for future convenience*/
				/*	  printf("Checksum (rec'd, hex)= 0x%c%c\n",pkt[(j+1)],pkt[(j+2)]);
					  printf("Checksum (rec'd, hex)= 0x%x\n", check);
					  printf("Checksum (calc)      = 0x%x\n", cs); */

					  if (cs == check) {
  800578:	e0fffd07 	ldb	r3,-12(fp)
  80057c:	e0bff817 	ldw	r2,-32(fp)
  800580:	1880031e 	bne	r3,r2,800590 <checksum+0x338>
						  return(1);
  800584:	00800044 	movi	r2,1
  800588:	e0bfff15 	stw	r2,-4(fp)
  80058c:	00000406 	br	8005a0 <checksum+0x348>
					/*	  for(j=0; (pkt[j]!= '\n'); j++){
							  printf("%c", pkt[j]);
						  };*/
					  } else {
						  printf("GPS not available.");
  800590:	01002074 	movhi	r4,129
  800594:	210a2b04 	addi	r4,r4,10412
  800598:	08070a00 	call	8070a0 <printf>
				  };
			  };
		  };
	  };
  };
  return(0);
  80059c:	e03fff15 	stw	zero,-4(fp)
  8005a0:	e0bfff17 	ldw	r2,-4(fp)
};
  8005a4:	e037883a 	mov	sp,fp
  8005a8:	dfc00117 	ldw	ra,4(sp)
  8005ac:	df000017 	ldw	fp,0(sp)
  8005b0:	dec00204 	addi	sp,sp,8
  8005b4:	f800283a 	ret

008005b8 <parse_GGA>:

void parse_GGA(char pkt[83], struct packet *packet_GGA){
  8005b8:	defffa04 	addi	sp,sp,-24
  8005bc:	dfc00515 	stw	ra,20(sp)
  8005c0:	df000415 	stw	fp,16(sp)
  8005c4:	df000404 	addi	fp,sp,16
  8005c8:	e13ffe15 	stw	r4,-8(fp)
  8005cc:	e17fff15 	stw	r5,-4(fp)
	int j,k;

	j = 0;
  8005d0:	e03ffd15 	stw	zero,-12(fp)
	k = 0;
  8005d4:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Identifier String ******/
	while(pkt[j] != ','){
  8005d8:	00000f06 	br	800618 <parse_GGA+0x60>
		packet_GGA->ident[k] = pkt[j];
  8005dc:	e13ffc17 	ldw	r4,-16(fp)
  8005e0:	e0bffd17 	ldw	r2,-12(fp)
  8005e4:	1007883a 	mov	r3,r2
  8005e8:	e0bffe17 	ldw	r2,-8(fp)
  8005ec:	1885883a 	add	r2,r3,r2
  8005f0:	10c00003 	ldbu	r3,0(r2)
  8005f4:	e0bfff17 	ldw	r2,-4(fp)
  8005f8:	1105883a 	add	r2,r2,r4
  8005fc:	10c00005 	stb	r3,0(r2)
		j++;
  800600:	e0bffd17 	ldw	r2,-12(fp)
  800604:	10800044 	addi	r2,r2,1
  800608:	e0bffd15 	stw	r2,-12(fp)
		k++;
  80060c:	e0bffc17 	ldw	r2,-16(fp)
  800610:	10800044 	addi	r2,r2,1
  800614:	e0bffc15 	stw	r2,-16(fp)

	j = 0;
	k = 0;

	/****** Parses Identifier String ******/
	while(pkt[j] != ','){
  800618:	e0bffd17 	ldw	r2,-12(fp)
  80061c:	1007883a 	mov	r3,r2
  800620:	e0bffe17 	ldw	r2,-8(fp)
  800624:	1885883a 	add	r2,r3,r2
  800628:	10800003 	ldbu	r2,0(r2)
  80062c:	10803fcc 	andi	r2,r2,255
  800630:	1080201c 	xori	r2,r2,128
  800634:	10bfe004 	addi	r2,r2,-128
  800638:	10800b18 	cmpnei	r2,r2,44
  80063c:	103fe71e 	bne	r2,zero,8005dc <parse_GGA+0x24>
		packet_GGA->ident[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800640:	e0bffd17 	ldw	r2,-12(fp)
  800644:	10800044 	addi	r2,r2,1
  800648:	e0bffd15 	stw	r2,-12(fp)
	packet_GGA->ident[k] = '\0';
  80064c:	e0fffc17 	ldw	r3,-16(fp)
  800650:	e0bfff17 	ldw	r2,-4(fp)
  800654:	10c5883a 	add	r2,r2,r3
  800658:	10000005 	stb	zero,0(r2)

	printf("\n");
  80065c:	01000284 	movi	r4,10
  800660:	08071180 	call	807118 <putchar>
	printf("Identifier                       = %s\n", packet_GGA->ident);
  800664:	e17fff17 	ldw	r5,-4(fp)
  800668:	01002074 	movhi	r4,129
  80066c:	210a3004 	addi	r4,r4,10432
  800670:	08070a00 	call	8070a0 <printf>

	k = 0;
  800674:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Time String ******/
	while(pkt[j] != ','){
  800678:	00001006 	br	8006bc <parse_GGA+0x104>
		packet_GGA->time[k] = pkt[j];
  80067c:	e13ffc17 	ldw	r4,-16(fp)
  800680:	e0bffd17 	ldw	r2,-12(fp)
  800684:	1007883a 	mov	r3,r2
  800688:	e0bffe17 	ldw	r2,-8(fp)
  80068c:	1885883a 	add	r2,r3,r2
  800690:	10c00003 	ldbu	r3,0(r2)
  800694:	e0bfff17 	ldw	r2,-4(fp)
  800698:	1105883a 	add	r2,r2,r4
  80069c:	10800184 	addi	r2,r2,6
  8006a0:	10c00005 	stb	r3,0(r2)
		j++;
  8006a4:	e0bffd17 	ldw	r2,-12(fp)
  8006a8:	10800044 	addi	r2,r2,1
  8006ac:	e0bffd15 	stw	r2,-12(fp)
		k++;
  8006b0:	e0bffc17 	ldw	r2,-16(fp)
  8006b4:	10800044 	addi	r2,r2,1
  8006b8:	e0bffc15 	stw	r2,-16(fp)
	printf("Identifier                       = %s\n", packet_GGA->ident);

	k = 0;

	/****** Parses Time String ******/
	while(pkt[j] != ','){
  8006bc:	e0bffd17 	ldw	r2,-12(fp)
  8006c0:	1007883a 	mov	r3,r2
  8006c4:	e0bffe17 	ldw	r2,-8(fp)
  8006c8:	1885883a 	add	r2,r3,r2
  8006cc:	10800003 	ldbu	r2,0(r2)
  8006d0:	10803fcc 	andi	r2,r2,255
  8006d4:	1080201c 	xori	r2,r2,128
  8006d8:	10bfe004 	addi	r2,r2,-128
  8006dc:	10800b18 	cmpnei	r2,r2,44
  8006e0:	103fe61e 	bne	r2,zero,80067c <parse_GGA+0xc4>
		packet_GGA->time[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  8006e4:	e0bffd17 	ldw	r2,-12(fp)
  8006e8:	10800044 	addi	r2,r2,1
  8006ec:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->time[k] = '\0';
  8006f0:	e0fffc17 	ldw	r3,-16(fp)
  8006f4:	e0bfff17 	ldw	r2,-4(fp)
  8006f8:	10c5883a 	add	r2,r2,r3
  8006fc:	10800184 	addi	r2,r2,6
  800700:	10000005 	stb	zero,0(r2)

	printf("Time                             = %s\n", packet_GGA->time);
  800704:	e0bfff17 	ldw	r2,-4(fp)
  800708:	11400184 	addi	r5,r2,6
  80070c:	01002074 	movhi	r4,129
  800710:	210a3a04 	addi	r4,r4,10472
  800714:	08070a00 	call	8070a0 <printf>

	k = 0;
  800718:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Latitude String ******/
	while(pkt[j] != ','){
  80071c:	00001006 	br	800760 <parse_GGA+0x1a8>
		packet_GGA->latitude[k] = pkt[j];
  800720:	e13ffc17 	ldw	r4,-16(fp)
  800724:	e0bffd17 	ldw	r2,-12(fp)
  800728:	1007883a 	mov	r3,r2
  80072c:	e0bffe17 	ldw	r2,-8(fp)
  800730:	1885883a 	add	r2,r3,r2
  800734:	10c00003 	ldbu	r3,0(r2)
  800738:	e0bfff17 	ldw	r2,-4(fp)
  80073c:	2085883a 	add	r2,r4,r2
  800740:	10800404 	addi	r2,r2,16
  800744:	10c00005 	stb	r3,0(r2)
		j++;
  800748:	e0bffd17 	ldw	r2,-12(fp)
  80074c:	10800044 	addi	r2,r2,1
  800750:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800754:	e0bffc17 	ldw	r2,-16(fp)
  800758:	10800044 	addi	r2,r2,1
  80075c:	e0bffc15 	stw	r2,-16(fp)
	printf("Time                             = %s\n", packet_GGA->time);

	k = 0;

	/****** Parses Latitude String ******/
	while(pkt[j] != ','){
  800760:	e0bffd17 	ldw	r2,-12(fp)
  800764:	1007883a 	mov	r3,r2
  800768:	e0bffe17 	ldw	r2,-8(fp)
  80076c:	1885883a 	add	r2,r3,r2
  800770:	10800003 	ldbu	r2,0(r2)
  800774:	10803fcc 	andi	r2,r2,255
  800778:	1080201c 	xori	r2,r2,128
  80077c:	10bfe004 	addi	r2,r2,-128
  800780:	10800b18 	cmpnei	r2,r2,44
  800784:	103fe61e 	bne	r2,zero,800720 <parse_GGA+0x168>
		packet_GGA->latitude[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800788:	e0bffd17 	ldw	r2,-12(fp)
  80078c:	10800044 	addi	r2,r2,1
  800790:	e0bffd15 	stw	r2,-12(fp)
	packet_GGA->latitude[k] = '\0';
  800794:	e0fffc17 	ldw	r3,-16(fp)
  800798:	e0bfff17 	ldw	r2,-4(fp)
  80079c:	1885883a 	add	r2,r3,r2
  8007a0:	10800404 	addi	r2,r2,16
  8007a4:	10000005 	stb	zero,0(r2)

	printf("Latitude                         = %s", packet_GGA->latitude);
  8007a8:	e0bfff17 	ldw	r2,-4(fp)
  8007ac:	11400404 	addi	r5,r2,16
  8007b0:	01002074 	movhi	r4,129
  8007b4:	210a4404 	addi	r4,r4,10512
  8007b8:	08070a00 	call	8070a0 <printf>

	k = 0;
  8007bc:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses North/South String ******/
	while(pkt[j] != ','){
  8007c0:	00001006 	br	800804 <parse_GGA+0x24c>
		packet_GGA->ns[k] = pkt[j];
  8007c4:	e13ffc17 	ldw	r4,-16(fp)
  8007c8:	e0bffd17 	ldw	r2,-12(fp)
  8007cc:	1007883a 	mov	r3,r2
  8007d0:	e0bffe17 	ldw	r2,-8(fp)
  8007d4:	1885883a 	add	r2,r3,r2
  8007d8:	10c00003 	ldbu	r3,0(r2)
  8007dc:	e0bfff17 	ldw	r2,-4(fp)
  8007e0:	2085883a 	add	r2,r4,r2
  8007e4:	10800704 	addi	r2,r2,28
  8007e8:	10c00005 	stb	r3,0(r2)
		j++;
  8007ec:	e0bffd17 	ldw	r2,-12(fp)
  8007f0:	10800044 	addi	r2,r2,1
  8007f4:	e0bffd15 	stw	r2,-12(fp)
		k++;
  8007f8:	e0bffc17 	ldw	r2,-16(fp)
  8007fc:	10800044 	addi	r2,r2,1
  800800:	e0bffc15 	stw	r2,-16(fp)
	printf("Latitude                         = %s", packet_GGA->latitude);

	k = 0;

	/****** Parses North/South String ******/
	while(pkt[j] != ','){
  800804:	e0bffd17 	ldw	r2,-12(fp)
  800808:	1007883a 	mov	r3,r2
  80080c:	e0bffe17 	ldw	r2,-8(fp)
  800810:	1885883a 	add	r2,r3,r2
  800814:	10800003 	ldbu	r2,0(r2)
  800818:	10803fcc 	andi	r2,r2,255
  80081c:	1080201c 	xori	r2,r2,128
  800820:	10bfe004 	addi	r2,r2,-128
  800824:	10800b18 	cmpnei	r2,r2,44
  800828:	103fe61e 	bne	r2,zero,8007c4 <parse_GGA+0x20c>
		packet_GGA->ns[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  80082c:	e0bffd17 	ldw	r2,-12(fp)
  800830:	10800044 	addi	r2,r2,1
  800834:	e0bffd15 	stw	r2,-12(fp)
	k++;
  800838:	e0bffc17 	ldw	r2,-16(fp)
  80083c:	10800044 	addi	r2,r2,1
  800840:	e0bffc15 	stw	r2,-16(fp)
	packet_GGA->ns[k] = '\0';
  800844:	e0fffc17 	ldw	r3,-16(fp)
  800848:	e0bfff17 	ldw	r2,-4(fp)
  80084c:	1885883a 	add	r2,r3,r2
  800850:	10800704 	addi	r2,r2,28
  800854:	10000005 	stb	zero,0(r2)

	printf(" %c\n", packet_GGA->ns[0]);
  800858:	e0bfff17 	ldw	r2,-4(fp)
  80085c:	10800703 	ldbu	r2,28(r2)
  800860:	11403fcc 	andi	r5,r2,255
  800864:	2940201c 	xori	r5,r5,128
  800868:	297fe004 	addi	r5,r5,-128
  80086c:	01002074 	movhi	r4,129
  800870:	210a4e04 	addi	r4,r4,10552
  800874:	08070a00 	call	8070a0 <printf>

	k = 0;
  800878:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Longitude String ******/
	while(pkt[j] != ','){
  80087c:	00001006 	br	8008c0 <parse_GGA+0x308>
		packet_GGA->longitude[k] = pkt[j];
  800880:	e13ffc17 	ldw	r4,-16(fp)
  800884:	e0bffd17 	ldw	r2,-12(fp)
  800888:	1007883a 	mov	r3,r2
  80088c:	e0bffe17 	ldw	r2,-8(fp)
  800890:	1885883a 	add	r2,r3,r2
  800894:	10c00003 	ldbu	r3,0(r2)
  800898:	e0bfff17 	ldw	r2,-4(fp)
  80089c:	1105883a 	add	r2,r2,r4
  8008a0:	10800784 	addi	r2,r2,30
  8008a4:	10c00005 	stb	r3,0(r2)
		j++;
  8008a8:	e0bffd17 	ldw	r2,-12(fp)
  8008ac:	10800044 	addi	r2,r2,1
  8008b0:	e0bffd15 	stw	r2,-12(fp)
		k++;
  8008b4:	e0bffc17 	ldw	r2,-16(fp)
  8008b8:	10800044 	addi	r2,r2,1
  8008bc:	e0bffc15 	stw	r2,-16(fp)
	printf(" %c\n", packet_GGA->ns[0]);

	k = 0;

	/****** Parses Longitude String ******/
	while(pkt[j] != ','){
  8008c0:	e0bffd17 	ldw	r2,-12(fp)
  8008c4:	1007883a 	mov	r3,r2
  8008c8:	e0bffe17 	ldw	r2,-8(fp)
  8008cc:	1885883a 	add	r2,r3,r2
  8008d0:	10800003 	ldbu	r2,0(r2)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10800b18 	cmpnei	r2,r2,44
  8008e4:	103fe61e 	bne	r2,zero,800880 <parse_GGA+0x2c8>
		packet_GGA->longitude[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  8008e8:	e0bffd17 	ldw	r2,-12(fp)
  8008ec:	10800044 	addi	r2,r2,1
  8008f0:	e0bffd15 	stw	r2,-12(fp)
	/*k++;*/
	packet_GGA->longitude[k] = '\0';
  8008f4:	e0fffc17 	ldw	r3,-16(fp)
  8008f8:	e0bfff17 	ldw	r2,-4(fp)
  8008fc:	10c5883a 	add	r2,r2,r3
  800900:	10800784 	addi	r2,r2,30
  800904:	10000005 	stb	zero,0(r2)

	printf("Longitude                        = %s", packet_GGA->longitude);
  800908:	e0bfff17 	ldw	r2,-4(fp)
  80090c:	11400784 	addi	r5,r2,30
  800910:	01002074 	movhi	r4,129
  800914:	210a5004 	addi	r4,r4,10560
  800918:	08070a00 	call	8070a0 <printf>

	k = 0;
  80091c:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses East/West String ******/
	while(pkt[j] != ','){
  800920:	00001006 	br	800964 <parse_GGA+0x3ac>
		packet_GGA->ew[k] = pkt[j];
  800924:	e13ffc17 	ldw	r4,-16(fp)
  800928:	e0bffd17 	ldw	r2,-12(fp)
  80092c:	1007883a 	mov	r3,r2
  800930:	e0bffe17 	ldw	r2,-8(fp)
  800934:	1885883a 	add	r2,r3,r2
  800938:	10c00003 	ldbu	r3,0(r2)
  80093c:	e0bfff17 	ldw	r2,-4(fp)
  800940:	1105883a 	add	r2,r2,r4
  800944:	10800a84 	addi	r2,r2,42
  800948:	10c00005 	stb	r3,0(r2)
		j++;
  80094c:	e0bffd17 	ldw	r2,-12(fp)
  800950:	10800044 	addi	r2,r2,1
  800954:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800958:	e0bffc17 	ldw	r2,-16(fp)
  80095c:	10800044 	addi	r2,r2,1
  800960:	e0bffc15 	stw	r2,-16(fp)
	printf("Longitude                        = %s", packet_GGA->longitude);

	k = 0;

	/****** Parses East/West String ******/
	while(pkt[j] != ','){
  800964:	e0bffd17 	ldw	r2,-12(fp)
  800968:	1007883a 	mov	r3,r2
  80096c:	e0bffe17 	ldw	r2,-8(fp)
  800970:	1885883a 	add	r2,r3,r2
  800974:	10800003 	ldbu	r2,0(r2)
  800978:	10803fcc 	andi	r2,r2,255
  80097c:	1080201c 	xori	r2,r2,128
  800980:	10bfe004 	addi	r2,r2,-128
  800984:	10800b18 	cmpnei	r2,r2,44
  800988:	103fe61e 	bne	r2,zero,800924 <parse_GGA+0x36c>
		packet_GGA->ew[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  80098c:	e0bffd17 	ldw	r2,-12(fp)
  800990:	10800044 	addi	r2,r2,1
  800994:	e0bffd15 	stw	r2,-12(fp)
	k++;
  800998:	e0bffc17 	ldw	r2,-16(fp)
  80099c:	10800044 	addi	r2,r2,1
  8009a0:	e0bffc15 	stw	r2,-16(fp)
	packet_GGA->ew[k] = '\0';
  8009a4:	e0fffc17 	ldw	r3,-16(fp)
  8009a8:	e0bfff17 	ldw	r2,-4(fp)
  8009ac:	10c5883a 	add	r2,r2,r3
  8009b0:	10800a84 	addi	r2,r2,42
  8009b4:	10000005 	stb	zero,0(r2)

	printf(" %c\n", packet_GGA->ew[0]);
  8009b8:	e0bfff17 	ldw	r2,-4(fp)
  8009bc:	10800a83 	ldbu	r2,42(r2)
  8009c0:	11403fcc 	andi	r5,r2,255
  8009c4:	2940201c 	xori	r5,r5,128
  8009c8:	297fe004 	addi	r5,r5,-128
  8009cc:	01002074 	movhi	r4,129
  8009d0:	210a4e04 	addi	r4,r4,10552
  8009d4:	08070a00 	call	8070a0 <printf>

	k = 0;
  8009d8:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Quality String ******/
	while(pkt[j] != ','){
  8009dc:	00001006 	br	800a20 <parse_GGA+0x468>
		packet_GGA->qual[k] = pkt[j];
  8009e0:	e13ffc17 	ldw	r4,-16(fp)
  8009e4:	e0bffd17 	ldw	r2,-12(fp)
  8009e8:	1007883a 	mov	r3,r2
  8009ec:	e0bffe17 	ldw	r2,-8(fp)
  8009f0:	1885883a 	add	r2,r3,r2
  8009f4:	10c00003 	ldbu	r3,0(r2)
  8009f8:	e0bfff17 	ldw	r2,-4(fp)
  8009fc:	2085883a 	add	r2,r4,r2
  800a00:	10800b04 	addi	r2,r2,44
  800a04:	10c00005 	stb	r3,0(r2)
		j++;
  800a08:	e0bffd17 	ldw	r2,-12(fp)
  800a0c:	10800044 	addi	r2,r2,1
  800a10:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800a14:	e0bffc17 	ldw	r2,-16(fp)
  800a18:	10800044 	addi	r2,r2,1
  800a1c:	e0bffc15 	stw	r2,-16(fp)
	printf(" %c\n", packet_GGA->ew[0]);

	k = 0;

	/****** Parses Quality String ******/
	while(pkt[j] != ','){
  800a20:	e0bffd17 	ldw	r2,-12(fp)
  800a24:	1007883a 	mov	r3,r2
  800a28:	e0bffe17 	ldw	r2,-8(fp)
  800a2c:	1885883a 	add	r2,r3,r2
  800a30:	10800003 	ldbu	r2,0(r2)
  800a34:	10803fcc 	andi	r2,r2,255
  800a38:	1080201c 	xori	r2,r2,128
  800a3c:	10bfe004 	addi	r2,r2,-128
  800a40:	10800b18 	cmpnei	r2,r2,44
  800a44:	103fe61e 	bne	r2,zero,8009e0 <parse_GGA+0x428>
		packet_GGA->qual[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800a48:	e0bffd17 	ldw	r2,-12(fp)
  800a4c:	10800044 	addi	r2,r2,1
  800a50:	e0bffd15 	stw	r2,-12(fp)
	k++;
  800a54:	e0bffc17 	ldw	r2,-16(fp)
  800a58:	10800044 	addi	r2,r2,1
  800a5c:	e0bffc15 	stw	r2,-16(fp)
	packet_GGA->qual[k] = '\0';
  800a60:	e0fffc17 	ldw	r3,-16(fp)
  800a64:	e0bfff17 	ldw	r2,-4(fp)
  800a68:	1885883a 	add	r2,r3,r2
  800a6c:	10800b04 	addi	r2,r2,44
  800a70:	10000005 	stb	zero,0(r2)

	printf("Quality                          = %c\n", packet_GGA->qual[0]);
  800a74:	e0bfff17 	ldw	r2,-4(fp)
  800a78:	10800b03 	ldbu	r2,44(r2)
  800a7c:	11403fcc 	andi	r5,r2,255
  800a80:	2940201c 	xori	r5,r5,128
  800a84:	297fe004 	addi	r5,r5,-128
  800a88:	01002074 	movhi	r4,129
  800a8c:	210a5a04 	addi	r4,r4,10600
  800a90:	08070a00 	call	8070a0 <printf>

	k = 0;
  800a94:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Satellite Number String ******/
	while(pkt[j] != ','){
  800a98:	00001006 	br	800adc <parse_GGA+0x524>
		packet_GGA->satnum[k] = pkt[j];
  800a9c:	e13ffc17 	ldw	r4,-16(fp)
  800aa0:	e0bffd17 	ldw	r2,-12(fp)
  800aa4:	1007883a 	mov	r3,r2
  800aa8:	e0bffe17 	ldw	r2,-8(fp)
  800aac:	1885883a 	add	r2,r3,r2
  800ab0:	10c00003 	ldbu	r3,0(r2)
  800ab4:	e0bfff17 	ldw	r2,-4(fp)
  800ab8:	1105883a 	add	r2,r2,r4
  800abc:	10800b84 	addi	r2,r2,46
  800ac0:	10c00005 	stb	r3,0(r2)
		j++;
  800ac4:	e0bffd17 	ldw	r2,-12(fp)
  800ac8:	10800044 	addi	r2,r2,1
  800acc:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800ad0:	e0bffc17 	ldw	r2,-16(fp)
  800ad4:	10800044 	addi	r2,r2,1
  800ad8:	e0bffc15 	stw	r2,-16(fp)
	printf("Quality                          = %c\n", packet_GGA->qual[0]);

	k = 0;

	/****** Parses Satellite Number String ******/
	while(pkt[j] != ','){
  800adc:	e0bffd17 	ldw	r2,-12(fp)
  800ae0:	1007883a 	mov	r3,r2
  800ae4:	e0bffe17 	ldw	r2,-8(fp)
  800ae8:	1885883a 	add	r2,r3,r2
  800aec:	10800003 	ldbu	r2,0(r2)
  800af0:	10803fcc 	andi	r2,r2,255
  800af4:	1080201c 	xori	r2,r2,128
  800af8:	10bfe004 	addi	r2,r2,-128
  800afc:	10800b18 	cmpnei	r2,r2,44
  800b00:	103fe61e 	bne	r2,zero,800a9c <parse_GGA+0x4e4>
		packet_GGA->satnum[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800b04:	e0bffd17 	ldw	r2,-12(fp)
  800b08:	10800044 	addi	r2,r2,1
  800b0c:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->satnum[k] = '\0';
  800b10:	e0fffc17 	ldw	r3,-16(fp)
  800b14:	e0bfff17 	ldw	r2,-4(fp)
  800b18:	10c5883a 	add	r2,r2,r3
  800b1c:	10800b84 	addi	r2,r2,46
  800b20:	10000005 	stb	zero,0(r2)

	printf("Number of satellites             = %s\n", packet_GGA->satnum);
  800b24:	e0bfff17 	ldw	r2,-4(fp)
  800b28:	11400b84 	addi	r5,r2,46
  800b2c:	01002074 	movhi	r4,129
  800b30:	210a6404 	addi	r4,r4,10640
  800b34:	08070a00 	call	8070a0 <printf>

	k = 0;
  800b38:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses HDOP String ******/
	while(pkt[j] != ','){
  800b3c:	00001006 	br	800b80 <parse_GGA+0x5c8>
		packet_GGA->hdop[k] = pkt[j];
  800b40:	e13ffc17 	ldw	r4,-16(fp)
  800b44:	e0bffd17 	ldw	r2,-12(fp)
  800b48:	1007883a 	mov	r3,r2
  800b4c:	e0bffe17 	ldw	r2,-8(fp)
  800b50:	1885883a 	add	r2,r3,r2
  800b54:	10c00003 	ldbu	r3,0(r2)
  800b58:	e0bfff17 	ldw	r2,-4(fp)
  800b5c:	1105883a 	add	r2,r2,r4
  800b60:	10800c44 	addi	r2,r2,49
  800b64:	10c00005 	stb	r3,0(r2)
		j++;
  800b68:	e0bffd17 	ldw	r2,-12(fp)
  800b6c:	10800044 	addi	r2,r2,1
  800b70:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800b74:	e0bffc17 	ldw	r2,-16(fp)
  800b78:	10800044 	addi	r2,r2,1
  800b7c:	e0bffc15 	stw	r2,-16(fp)
	printf("Number of satellites             = %s\n", packet_GGA->satnum);

	k = 0;

	/****** Parses HDOP String ******/
	while(pkt[j] != ','){
  800b80:	e0bffd17 	ldw	r2,-12(fp)
  800b84:	1007883a 	mov	r3,r2
  800b88:	e0bffe17 	ldw	r2,-8(fp)
  800b8c:	1885883a 	add	r2,r3,r2
  800b90:	10800003 	ldbu	r2,0(r2)
  800b94:	10803fcc 	andi	r2,r2,255
  800b98:	1080201c 	xori	r2,r2,128
  800b9c:	10bfe004 	addi	r2,r2,-128
  800ba0:	10800b18 	cmpnei	r2,r2,44
  800ba4:	103fe61e 	bne	r2,zero,800b40 <parse_GGA+0x588>
		packet_GGA->hdop[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800ba8:	e0bffd17 	ldw	r2,-12(fp)
  800bac:	10800044 	addi	r2,r2,1
  800bb0:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->hdop[k] = '\0';
  800bb4:	e0fffc17 	ldw	r3,-16(fp)
  800bb8:	e0bfff17 	ldw	r2,-4(fp)
  800bbc:	10c5883a 	add	r2,r2,r3
  800bc0:	10800c44 	addi	r2,r2,49
  800bc4:	10000005 	stb	zero,0(r2)

	printf("Horizontal Dilution of Precision = %s\n", packet_GGA->hdop);
  800bc8:	e0bfff17 	ldw	r2,-4(fp)
  800bcc:	11400c44 	addi	r5,r2,49
  800bd0:	01002074 	movhi	r4,129
  800bd4:	210a6e04 	addi	r4,r4,10680
  800bd8:	08070a00 	call	8070a0 <printf>

	k = 0;
  800bdc:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Antenna Height String ******/
	while(pkt[j] != ','){
  800be0:	00001006 	br	800c24 <parse_GGA+0x66c>
		packet_GGA->ant_ht[k] = pkt[j];
  800be4:	e13ffc17 	ldw	r4,-16(fp)
  800be8:	e0bffd17 	ldw	r2,-12(fp)
  800bec:	1007883a 	mov	r3,r2
  800bf0:	e0bffe17 	ldw	r2,-8(fp)
  800bf4:	1885883a 	add	r2,r3,r2
  800bf8:	10c00003 	ldbu	r3,0(r2)
  800bfc:	e0bfff17 	ldw	r2,-4(fp)
  800c00:	1105883a 	add	r2,r2,r4
  800c04:	10800d84 	addi	r2,r2,54
  800c08:	10c00005 	stb	r3,0(r2)
		j++;
  800c0c:	e0bffd17 	ldw	r2,-12(fp)
  800c10:	10800044 	addi	r2,r2,1
  800c14:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800c18:	e0bffc17 	ldw	r2,-16(fp)
  800c1c:	10800044 	addi	r2,r2,1
  800c20:	e0bffc15 	stw	r2,-16(fp)
	printf("Horizontal Dilution of Precision = %s\n", packet_GGA->hdop);

	k = 0;

	/****** Parses Antenna Height String ******/
	while(pkt[j] != ','){
  800c24:	e0bffd17 	ldw	r2,-12(fp)
  800c28:	1007883a 	mov	r3,r2
  800c2c:	e0bffe17 	ldw	r2,-8(fp)
  800c30:	1885883a 	add	r2,r3,r2
  800c34:	10800003 	ldbu	r2,0(r2)
  800c38:	10803fcc 	andi	r2,r2,255
  800c3c:	1080201c 	xori	r2,r2,128
  800c40:	10bfe004 	addi	r2,r2,-128
  800c44:	10800b18 	cmpnei	r2,r2,44
  800c48:	103fe61e 	bne	r2,zero,800be4 <parse_GGA+0x62c>
		packet_GGA->ant_ht[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800c4c:	e0bffd17 	ldw	r2,-12(fp)
  800c50:	10800044 	addi	r2,r2,1
  800c54:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->ant_ht[k] = '\0';
  800c58:	e0fffc17 	ldw	r3,-16(fp)
  800c5c:	e0bfff17 	ldw	r2,-4(fp)
  800c60:	10c5883a 	add	r2,r2,r3
  800c64:	10800d84 	addi	r2,r2,54
  800c68:	10000005 	stb	zero,0(r2)

	printf("Antenna Height                   = %s", packet_GGA->ant_ht);
  800c6c:	e0bfff17 	ldw	r2,-4(fp)
  800c70:	11400d84 	addi	r5,r2,54
  800c74:	01002074 	movhi	r4,129
  800c78:	210a7804 	addi	r4,r4,10720
  800c7c:	08070a00 	call	8070a0 <printf>

	k = 0;
  800c80:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Antenna Units String ******/
	while(pkt[j] != ','){
  800c84:	00001006 	br	800cc8 <parse_GGA+0x710>
		packet_GGA->ant_unt[k] = pkt[j];
  800c88:	e13ffc17 	ldw	r4,-16(fp)
  800c8c:	e0bffd17 	ldw	r2,-12(fp)
  800c90:	1007883a 	mov	r3,r2
  800c94:	e0bffe17 	ldw	r2,-8(fp)
  800c98:	1885883a 	add	r2,r3,r2
  800c9c:	10c00003 	ldbu	r3,0(r2)
  800ca0:	e0bfff17 	ldw	r2,-4(fp)
  800ca4:	1105883a 	add	r2,r2,r4
  800ca8:	10800f44 	addi	r2,r2,61
  800cac:	10c00005 	stb	r3,0(r2)
		j++;
  800cb0:	e0bffd17 	ldw	r2,-12(fp)
  800cb4:	10800044 	addi	r2,r2,1
  800cb8:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800cbc:	e0bffc17 	ldw	r2,-16(fp)
  800cc0:	10800044 	addi	r2,r2,1
  800cc4:	e0bffc15 	stw	r2,-16(fp)
	printf("Antenna Height                   = %s", packet_GGA->ant_ht);

	k = 0;

	/****** Parses Antenna Units String ******/
	while(pkt[j] != ','){
  800cc8:	e0bffd17 	ldw	r2,-12(fp)
  800ccc:	1007883a 	mov	r3,r2
  800cd0:	e0bffe17 	ldw	r2,-8(fp)
  800cd4:	1885883a 	add	r2,r3,r2
  800cd8:	10800003 	ldbu	r2,0(r2)
  800cdc:	10803fcc 	andi	r2,r2,255
  800ce0:	1080201c 	xori	r2,r2,128
  800ce4:	10bfe004 	addi	r2,r2,-128
  800ce8:	10800b18 	cmpnei	r2,r2,44
  800cec:	103fe61e 	bne	r2,zero,800c88 <parse_GGA+0x6d0>
		packet_GGA->ant_unt[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800cf0:	e0bffd17 	ldw	r2,-12(fp)
  800cf4:	10800044 	addi	r2,r2,1
  800cf8:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->ant_unt[k] = '\0';
  800cfc:	e0fffc17 	ldw	r3,-16(fp)
  800d00:	e0bfff17 	ldw	r2,-4(fp)
  800d04:	10c5883a 	add	r2,r2,r3
  800d08:	10800f44 	addi	r2,r2,61
  800d0c:	10000005 	stb	zero,0(r2)

	printf(" %s\n", packet_GGA->ant_unt);
  800d10:	e0bfff17 	ldw	r2,-4(fp)
  800d14:	11400f44 	addi	r5,r2,61
  800d18:	01002074 	movhi	r4,129
  800d1c:	210a8204 	addi	r4,r4,10760
  800d20:	08070a00 	call	8070a0 <printf>

	k = 0;
  800d24:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Geoid Differential String ******/
	while(pkt[j] != ','){
  800d28:	00001006 	br	800d6c <parse_GGA+0x7b4>
		packet_GGA->geoid_diff[k] = pkt[j];
  800d2c:	e13ffc17 	ldw	r4,-16(fp)
  800d30:	e0bffd17 	ldw	r2,-12(fp)
  800d34:	1007883a 	mov	r3,r2
  800d38:	e0bffe17 	ldw	r2,-8(fp)
  800d3c:	1885883a 	add	r2,r3,r2
  800d40:	10c00003 	ldbu	r3,0(r2)
  800d44:	e0bfff17 	ldw	r2,-4(fp)
  800d48:	1105883a 	add	r2,r2,r4
  800d4c:	10800fc4 	addi	r2,r2,63
  800d50:	10c00005 	stb	r3,0(r2)
		j++;
  800d54:	e0bffd17 	ldw	r2,-12(fp)
  800d58:	10800044 	addi	r2,r2,1
  800d5c:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800d60:	e0bffc17 	ldw	r2,-16(fp)
  800d64:	10800044 	addi	r2,r2,1
  800d68:	e0bffc15 	stw	r2,-16(fp)
	printf(" %s\n", packet_GGA->ant_unt);

	k = 0;

	/****** Parses Geoid Differential String ******/
	while(pkt[j] != ','){
  800d6c:	e0bffd17 	ldw	r2,-12(fp)
  800d70:	1007883a 	mov	r3,r2
  800d74:	e0bffe17 	ldw	r2,-8(fp)
  800d78:	1885883a 	add	r2,r3,r2
  800d7c:	10800003 	ldbu	r2,0(r2)
  800d80:	10803fcc 	andi	r2,r2,255
  800d84:	1080201c 	xori	r2,r2,128
  800d88:	10bfe004 	addi	r2,r2,-128
  800d8c:	10800b18 	cmpnei	r2,r2,44
  800d90:	103fe61e 	bne	r2,zero,800d2c <parse_GGA+0x774>
		packet_GGA->geoid_diff[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800d94:	e0bffd17 	ldw	r2,-12(fp)
  800d98:	10800044 	addi	r2,r2,1
  800d9c:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->geoid_diff[k] = '\0';
  800da0:	e0fffc17 	ldw	r3,-16(fp)
  800da4:	e0bfff17 	ldw	r2,-4(fp)
  800da8:	10c5883a 	add	r2,r2,r3
  800dac:	10800fc4 	addi	r2,r2,63
  800db0:	10000005 	stb	zero,0(r2)

	printf("Geoid Differential               = %s", packet_GGA->geoid_diff);
  800db4:	e0bfff17 	ldw	r2,-4(fp)
  800db8:	11400fc4 	addi	r5,r2,63
  800dbc:	01002074 	movhi	r4,129
  800dc0:	210a8404 	addi	r4,r4,10768
  800dc4:	08070a00 	call	8070a0 <printf>

	k = 0;
  800dc8:	e03ffc15 	stw	zero,-16(fp)

	/****** Parses Geoid Differential Units String ******/
	while(pkt[j] != ','){
  800dcc:	00001006 	br	800e10 <parse_GGA+0x858>
		packet_GGA->geoid_unt[k] = pkt[j];
  800dd0:	e13ffc17 	ldw	r4,-16(fp)
  800dd4:	e0bffd17 	ldw	r2,-12(fp)
  800dd8:	1007883a 	mov	r3,r2
  800ddc:	e0bffe17 	ldw	r2,-8(fp)
  800de0:	1885883a 	add	r2,r3,r2
  800de4:	10c00003 	ldbu	r3,0(r2)
  800de8:	e0bfff17 	ldw	r2,-4(fp)
  800dec:	1105883a 	add	r2,r2,r4
  800df0:	10801184 	addi	r2,r2,70
  800df4:	10c00005 	stb	r3,0(r2)
		j++;
  800df8:	e0bffd17 	ldw	r2,-12(fp)
  800dfc:	10800044 	addi	r2,r2,1
  800e00:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800e04:	e0bffc17 	ldw	r2,-16(fp)
  800e08:	10800044 	addi	r2,r2,1
  800e0c:	e0bffc15 	stw	r2,-16(fp)
	printf("Geoid Differential               = %s", packet_GGA->geoid_diff);

	k = 0;

	/****** Parses Geoid Differential Units String ******/
	while(pkt[j] != ','){
  800e10:	e0bffd17 	ldw	r2,-12(fp)
  800e14:	1007883a 	mov	r3,r2
  800e18:	e0bffe17 	ldw	r2,-8(fp)
  800e1c:	1885883a 	add	r2,r3,r2
  800e20:	10800003 	ldbu	r2,0(r2)
  800e24:	10803fcc 	andi	r2,r2,255
  800e28:	1080201c 	xori	r2,r2,128
  800e2c:	10bfe004 	addi	r2,r2,-128
  800e30:	10800b18 	cmpnei	r2,r2,44
  800e34:	103fe61e 	bne	r2,zero,800dd0 <parse_GGA+0x818>
		packet_GGA->geoid_unt[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800e38:	e0bffd17 	ldw	r2,-12(fp)
  800e3c:	10800044 	addi	r2,r2,1
  800e40:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->geoid_unt[k] = '\0';
  800e44:	e0fffc17 	ldw	r3,-16(fp)
  800e48:	e0bfff17 	ldw	r2,-4(fp)
  800e4c:	10c5883a 	add	r2,r2,r3
  800e50:	10801184 	addi	r2,r2,70
  800e54:	10000005 	stb	zero,0(r2)

	printf(" %s\n", packet_GGA->geoid_unt);
  800e58:	e0bfff17 	ldw	r2,-4(fp)
  800e5c:	11401184 	addi	r5,r2,70
  800e60:	01002074 	movhi	r4,129
  800e64:	210a8204 	addi	r4,r4,10760
  800e68:	08070a00 	call	8070a0 <printf>

	k = 0;
  800e6c:	e03ffc15 	stw	zero,-16(fp)

	while((pkt[j] == ',')||(pkt[j] == '*')){
  800e70:	00000306 	br	800e80 <parse_GGA+0x8c8>
		j++;
  800e74:	e0bffd17 	ldw	r2,-12(fp)
  800e78:	10800044 	addi	r2,r2,1
  800e7c:	e0bffd15 	stw	r2,-12(fp)

	printf(" %s\n", packet_GGA->geoid_unt);

	k = 0;

	while((pkt[j] == ',')||(pkt[j] == '*')){
  800e80:	e0bffd17 	ldw	r2,-12(fp)
  800e84:	1007883a 	mov	r3,r2
  800e88:	e0bffe17 	ldw	r2,-8(fp)
  800e8c:	1885883a 	add	r2,r3,r2
  800e90:	10800003 	ldbu	r2,0(r2)
  800e94:	10803fcc 	andi	r2,r2,255
  800e98:	1080201c 	xori	r2,r2,128
  800e9c:	10bfe004 	addi	r2,r2,-128
  800ea0:	10800b20 	cmpeqi	r2,r2,44
  800ea4:	103ff31e 	bne	r2,zero,800e74 <parse_GGA+0x8bc>
  800ea8:	e0bffd17 	ldw	r2,-12(fp)
  800eac:	1007883a 	mov	r3,r2
  800eb0:	e0bffe17 	ldw	r2,-8(fp)
  800eb4:	1885883a 	add	r2,r3,r2
  800eb8:	10800003 	ldbu	r2,0(r2)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	10800aa0 	cmpeqi	r2,r2,42
  800ecc:	103fe91e 	bne	r2,zero,800e74 <parse_GGA+0x8bc>
		j++;
	};

	/****** Parses Checksum String ******/
	while(pkt[j] != '\n'){
  800ed0:	00001006 	br	800f14 <parse_GGA+0x95c>
		packet_GGA->cs[k] = pkt[j];
  800ed4:	e13ffc17 	ldw	r4,-16(fp)
  800ed8:	e0bffd17 	ldw	r2,-12(fp)
  800edc:	1007883a 	mov	r3,r2
  800ee0:	e0bffe17 	ldw	r2,-8(fp)
  800ee4:	1885883a 	add	r2,r3,r2
  800ee8:	10c00003 	ldbu	r3,0(r2)
  800eec:	e0bfff17 	ldw	r2,-4(fp)
  800ef0:	2085883a 	add	r2,r4,r2
  800ef4:	10801204 	addi	r2,r2,72
  800ef8:	10c00005 	stb	r3,0(r2)
		j++;
  800efc:	e0bffd17 	ldw	r2,-12(fp)
  800f00:	10800044 	addi	r2,r2,1
  800f04:	e0bffd15 	stw	r2,-12(fp)
		k++;
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	10800044 	addi	r2,r2,1
  800f10:	e0bffc15 	stw	r2,-16(fp)
	while((pkt[j] == ',')||(pkt[j] == '*')){
		j++;
	};

	/****** Parses Checksum String ******/
	while(pkt[j] != '\n'){
  800f14:	e0bffd17 	ldw	r2,-12(fp)
  800f18:	1007883a 	mov	r3,r2
  800f1c:	e0bffe17 	ldw	r2,-8(fp)
  800f20:	1885883a 	add	r2,r3,r2
  800f24:	10800003 	ldbu	r2,0(r2)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	10800298 	cmpnei	r2,r2,10
  800f38:	103fe61e 	bne	r2,zero,800ed4 <parse_GGA+0x91c>
		packet_GGA->cs[k] = pkt[j];
		j++;
		k++;
	}
	j++;
  800f3c:	e0bffd17 	ldw	r2,-12(fp)
  800f40:	10800044 	addi	r2,r2,1
  800f44:	e0bffd15 	stw	r2,-12(fp)
	//k++;
	packet_GGA->cs[k] = '\0';
  800f48:	e0fffc17 	ldw	r3,-16(fp)
  800f4c:	e0bfff17 	ldw	r2,-4(fp)
  800f50:	1885883a 	add	r2,r3,r2
  800f54:	10801204 	addi	r2,r2,72
  800f58:	10000005 	stb	zero,0(r2)

	printf("Checksum                         = %s\n", packet_GGA->cs);
  800f5c:	e0bfff17 	ldw	r2,-4(fp)
  800f60:	11401204 	addi	r5,r2,72
  800f64:	01002074 	movhi	r4,129
  800f68:	210a8e04 	addi	r4,r4,10808
  800f6c:	08070a00 	call	8070a0 <printf>
	printf("\n");
  800f70:	01000284 	movi	r4,10
  800f74:	08071180 	call	807118 <putchar>

	k = 0;
  800f78:	e03ffc15 	stw	zero,-16(fp)
};
  800f7c:	e037883a 	mov	sp,fp
  800f80:	dfc00117 	ldw	ra,4(sp)
  800f84:	df000017 	ldw	fp,0(sp)
  800f88:	dec00204 	addi	sp,sp,8
  800f8c:	f800283a 	ret

00800f90 <check_upd>:

char check_upd(char test, char cs){
  800f90:	defffd04 	addi	sp,sp,-12
  800f94:	df000215 	stw	fp,8(sp)
  800f98:	df000204 	addi	fp,sp,8
  800f9c:	e13ffe05 	stb	r4,-8(fp)
  800fa0:	e17fff05 	stb	r5,-4(fp)
  cs = (cs ^ test);
  800fa4:	e0ffff03 	ldbu	r3,-4(fp)
  800fa8:	e0bffe03 	ldbu	r2,-8(fp)
  800fac:	1884f03a 	xor	r2,r3,r2
  800fb0:	e0bfff05 	stb	r2,-4(fp)
  return(cs);
  800fb4:	e0bfff07 	ldb	r2,-4(fp)
};
  800fb8:	e037883a 	mov	sp,fp
  800fbc:	df000017 	ldw	fp,0(sp)
  800fc0:	dec00104 	addi	sp,sp,4
  800fc4:	f800283a 	ret

00800fc8 <atoh>:

int atoh(char test){
  800fc8:	defffc04 	addi	sp,sp,-16
  800fcc:	df000315 	stw	fp,12(sp)
  800fd0:	df000304 	addi	fp,sp,12
  800fd4:	e13ffe05 	stb	r4,-8(fp)
	int temp;
	switch(test){
  800fd8:	e0bffe07 	ldb	r2,-8(fp)
  800fdc:	10bff404 	addi	r2,r2,-48
  800fe0:	e0bfff15 	stw	r2,-4(fp)
  800fe4:	e0ffff17 	ldw	r3,-4(fp)
  800fe8:	188005e8 	cmpgeui	r2,r3,23
  800fec:	10004f1e 	bne	r2,zero,80112c <atoh+0x164>
  800ff0:	e13fff17 	ldw	r4,-4(fp)
  800ff4:	e13fff17 	ldw	r4,-4(fp)
  800ff8:	2105883a 	add	r2,r4,r4
  800ffc:	1087883a 	add	r3,r2,r2
  801000:	00802034 	movhi	r2,128
  801004:	10840504 	addi	r2,r2,4116
  801008:	1885883a 	add	r2,r3,r2
  80100c:	10800017 	ldw	r2,0(r2)
  801010:	1000683a 	jmp	r2
  801014:	00801070 	cmpltui	r2,zero,65
  801018:	00801078 	rdprs	r2,zero,65
  80101c:	00801084 	movi	r2,66
  801020:	00801090 	cmplti	r2,zero,66
  801024:	0080109c 	xori	r2,zero,66
  801028:	008010a8 	cmpgeui	r2,zero,66
  80102c:	008010b4 	movhi	r2,66
  801030:	008010c0 	call	8010c <__reset-0x77fef4>
  801034:	008010cc 	andi	r2,zero,67
  801038:	008010d8 	cmpnei	r2,zero,67
  80103c:	0080112c 	andhi	r2,zero,68
  801040:	0080112c 	andhi	r2,zero,68
  801044:	0080112c 	andhi	r2,zero,68
  801048:	0080112c 	andhi	r2,zero,68
  80104c:	0080112c 	andhi	r2,zero,68
  801050:	0080112c 	andhi	r2,zero,68
  801054:	0080112c 	andhi	r2,zero,68
  801058:	008010e4 	muli	r2,zero,67
  80105c:	008010f0 	cmpltui	r2,zero,67
  801060:	008010fc 	xorhi	r2,zero,67
  801064:	00801108 	cmpgei	r2,zero,68
  801068:	00801114 	movui	r2,68
  80106c:	00801120 	cmpeqi	r2,zero,68
	case '0':
		temp = 0; break;
  801070:	e03ffd15 	stw	zero,-12(fp)
  801074:	00002e06 	br	801130 <atoh+0x168>
	case '1':
		temp = 1; break;
  801078:	00800044 	movi	r2,1
  80107c:	e0bffd15 	stw	r2,-12(fp)
  801080:	00002b06 	br	801130 <atoh+0x168>
	case '2':
		temp = 2; break;
  801084:	00800084 	movi	r2,2
  801088:	e0bffd15 	stw	r2,-12(fp)
  80108c:	00002806 	br	801130 <atoh+0x168>
	case '3':
		temp = 3; break;
  801090:	008000c4 	movi	r2,3
  801094:	e0bffd15 	stw	r2,-12(fp)
  801098:	00002506 	br	801130 <atoh+0x168>
	case '4':
		temp = 4; break;
  80109c:	00800104 	movi	r2,4
  8010a0:	e0bffd15 	stw	r2,-12(fp)
  8010a4:	00002206 	br	801130 <atoh+0x168>
	case '5':
		temp = 5; break;
  8010a8:	00800144 	movi	r2,5
  8010ac:	e0bffd15 	stw	r2,-12(fp)
  8010b0:	00001f06 	br	801130 <atoh+0x168>
	case '6':
		temp = 6; break;
  8010b4:	00800184 	movi	r2,6
  8010b8:	e0bffd15 	stw	r2,-12(fp)
  8010bc:	00001c06 	br	801130 <atoh+0x168>
	case '7':
		temp = 7; break;
  8010c0:	008001c4 	movi	r2,7
  8010c4:	e0bffd15 	stw	r2,-12(fp)
  8010c8:	00001906 	br	801130 <atoh+0x168>
	case '8':
		temp = 8; break;
  8010cc:	00800204 	movi	r2,8
  8010d0:	e0bffd15 	stw	r2,-12(fp)
  8010d4:	00001606 	br	801130 <atoh+0x168>
	case '9':
		temp = 9; break;
  8010d8:	00800244 	movi	r2,9
  8010dc:	e0bffd15 	stw	r2,-12(fp)
  8010e0:	00001306 	br	801130 <atoh+0x168>
	case 'A':
		temp = 10; break;
  8010e4:	00800284 	movi	r2,10
  8010e8:	e0bffd15 	stw	r2,-12(fp)
  8010ec:	00001006 	br	801130 <atoh+0x168>
	case 'B':
		temp = 11; break;
  8010f0:	008002c4 	movi	r2,11
  8010f4:	e0bffd15 	stw	r2,-12(fp)
  8010f8:	00000d06 	br	801130 <atoh+0x168>
	case 'C':
		temp = 12; break;
  8010fc:	00800304 	movi	r2,12
  801100:	e0bffd15 	stw	r2,-12(fp)
  801104:	00000a06 	br	801130 <atoh+0x168>
	case 'D':
		temp = 13; break;
  801108:	00800344 	movi	r2,13
  80110c:	e0bffd15 	stw	r2,-12(fp)
  801110:	00000706 	br	801130 <atoh+0x168>
	case 'E':
		temp = 14; break;
  801114:	00800384 	movi	r2,14
  801118:	e0bffd15 	stw	r2,-12(fp)
  80111c:	00000406 	br	801130 <atoh+0x168>
	case 'F':
		temp = 15; break;
  801120:	008003c4 	movi	r2,15
  801124:	e0bffd15 	stw	r2,-12(fp)
  801128:	00000106 	br	801130 <atoh+0x168>
	default:
		temp = 0;
  80112c:	e03ffd15 	stw	zero,-12(fp)
	};
	return(temp);
  801130:	e0bffd17 	ldw	r2,-12(fp)
};
  801134:	e037883a 	mov	sp,fp
  801138:	df000017 	ldw	fp,0(sp)
  80113c:	dec00104 	addi	sp,sp,4
  801140:	f800283a 	ret

00801144 <GMT_to_MST>:

char GMT_to_MST(int *time, char *pkt_time){
  801144:	defff904 	addi	sp,sp,-28
  801148:	dfc00615 	stw	ra,24(sp)
  80114c:	df000515 	stw	fp,20(sp)
  801150:	df000504 	addi	fp,sp,20
  801154:	e13ffe15 	stw	r4,-8(fp)
  801158:	e17fff15 	stw	r5,-4(fp)
	int j,t1;
	char aorp;
	aorp = 'A';
  80115c:	00801044 	movi	r2,65
  801160:	e0bffb05 	stb	r2,-20(fp)
	for(j = 0; j < 6; j++){										/*Switch statement does all the fun stuff to convert to MST		*/
  801164:	e03ffd15 	stw	zero,-12(fp)
  801168:	00007f06 	br	801368 <GMT_to_MST+0x224>
		switch(j){												/*Uses AtoH function in this library to properly parse time 	*/
  80116c:	e0bffd17 	ldw	r2,-12(fp)
  801170:	108001a8 	cmpgeui	r2,r2,6
  801174:	1000781e 	bne	r2,zero,801358 <GMT_to_MST+0x214>
  801178:	e0bffd17 	ldw	r2,-12(fp)
  80117c:	1085883a 	add	r2,r2,r2
  801180:	1087883a 	add	r3,r2,r2
  801184:	00802034 	movhi	r2,128
  801188:	10846604 	addi	r2,r2,4504
  80118c:	1885883a 	add	r2,r3,r2
  801190:	10800017 	ldw	r2,0(r2)
  801194:	1000683a 	jmp	r2
  801198:	008011b0 	cmpltui	r2,zero,70
  80119c:	008011e0 	cmpeqi	r2,zero,71
  8011a0:	0080126c 	andhi	r2,zero,73
  8011a4:	0080129c 	xori	r2,zero,74
  8011a8:	008012e4 	muli	r2,zero,75
  8011ac:	00801310 	cmplti	r2,zero,76
		case 0:
			t1 = atoh(pkt_time[j])*10; break;
  8011b0:	e0bffd17 	ldw	r2,-12(fp)
  8011b4:	1007883a 	mov	r3,r2
  8011b8:	e0bfff17 	ldw	r2,-4(fp)
  8011bc:	1885883a 	add	r2,r3,r2
  8011c0:	10800003 	ldbu	r2,0(r2)
  8011c4:	11003fcc 	andi	r4,r2,255
  8011c8:	2100201c 	xori	r4,r4,128
  8011cc:	213fe004 	addi	r4,r4,-128
  8011d0:	0800fc80 	call	800fc8 <atoh>
  8011d4:	108002a4 	muli	r2,r2,10
  8011d8:	e0bffc15 	stw	r2,-16(fp)
  8011dc:	00005f06 	br	80135c <GMT_to_MST+0x218>
		case 1:													/*First IF converts to MST, second converts to nonmilitary time	*/
			t1 = t1 + atoh(pkt_time[j]);
  8011e0:	e0bffd17 	ldw	r2,-12(fp)
  8011e4:	1007883a 	mov	r3,r2
  8011e8:	e0bfff17 	ldw	r2,-4(fp)
  8011ec:	1885883a 	add	r2,r3,r2
  8011f0:	10800003 	ldbu	r2,0(r2)
  8011f4:	11003fcc 	andi	r4,r2,255
  8011f8:	2100201c 	xori	r4,r4,128
  8011fc:	213fe004 	addi	r4,r4,-128
  801200:	0800fc80 	call	800fc8 <atoh>
  801204:	1007883a 	mov	r3,r2
  801208:	e0bffc17 	ldw	r2,-16(fp)
  80120c:	10c5883a 	add	r2,r2,r3
  801210:	e0bffc15 	stw	r2,-16(fp)
			if (t1 > 6){
  801214:	e0bffc17 	ldw	r2,-16(fp)
  801218:	108001d0 	cmplti	r2,r2,7
  80121c:	1000041e 	bne	r2,zero,801230 <GMT_to_MST+0xec>
				t1 = t1 - 6;
  801220:	e0bffc17 	ldw	r2,-16(fp)
  801224:	10bffe84 	addi	r2,r2,-6
  801228:	e0bffc15 	stw	r2,-16(fp)
  80122c:	00000306 	br	80123c <GMT_to_MST+0xf8>
			} else {
				t1 = t1 + 18;
  801230:	e0bffc17 	ldw	r2,-16(fp)
  801234:	10800484 	addi	r2,r2,18
  801238:	e0bffc15 	stw	r2,-16(fp)
			}
			if (t1 > 12){
  80123c:	e0bffc17 	ldw	r2,-16(fp)
  801240:	10800350 	cmplti	r2,r2,13
  801244:	1000051e 	bne	r2,zero,80125c <GMT_to_MST+0x118>
				t1 = t1 - 12;
  801248:	e0bffc17 	ldw	r2,-16(fp)
  80124c:	10bffd04 	addi	r2,r2,-12
  801250:	e0bffc15 	stw	r2,-16(fp)
				aorp = 'P';
  801254:	00801404 	movi	r2,80
  801258:	e0bffb05 	stb	r2,-20(fp)
			};
			time[0] = t1; break;
  80125c:	e0fffe17 	ldw	r3,-8(fp)
  801260:	e0bffc17 	ldw	r2,-16(fp)
  801264:	18800015 	stw	r2,0(r3)
  801268:	00003c06 	br	80135c <GMT_to_MST+0x218>
		case 2:
			t1 = atoh(pkt_time[j])*10; break;
  80126c:	e0bffd17 	ldw	r2,-12(fp)
  801270:	1007883a 	mov	r3,r2
  801274:	e0bfff17 	ldw	r2,-4(fp)
  801278:	1885883a 	add	r2,r3,r2
  80127c:	10800003 	ldbu	r2,0(r2)
  801280:	11003fcc 	andi	r4,r2,255
  801284:	2100201c 	xori	r4,r4,128
  801288:	213fe004 	addi	r4,r4,-128
  80128c:	0800fc80 	call	800fc8 <atoh>
  801290:	108002a4 	muli	r2,r2,10
  801294:	e0bffc15 	stw	r2,-16(fp)
  801298:	00003006 	br	80135c <GMT_to_MST+0x218>
		case 3:
			t1 = t1 + atoh(pkt_time[j]);
  80129c:	e0bffd17 	ldw	r2,-12(fp)
  8012a0:	1007883a 	mov	r3,r2
  8012a4:	e0bfff17 	ldw	r2,-4(fp)
  8012a8:	1885883a 	add	r2,r3,r2
  8012ac:	10800003 	ldbu	r2,0(r2)
  8012b0:	11003fcc 	andi	r4,r2,255
  8012b4:	2100201c 	xori	r4,r4,128
  8012b8:	213fe004 	addi	r4,r4,-128
  8012bc:	0800fc80 	call	800fc8 <atoh>
  8012c0:	1007883a 	mov	r3,r2
  8012c4:	e0bffc17 	ldw	r2,-16(fp)
  8012c8:	10c5883a 	add	r2,r2,r3
  8012cc:	e0bffc15 	stw	r2,-16(fp)
			time[1] = t1; break;
  8012d0:	e0bffe17 	ldw	r2,-8(fp)
  8012d4:	10c00104 	addi	r3,r2,4
  8012d8:	e0bffc17 	ldw	r2,-16(fp)
  8012dc:	18800015 	stw	r2,0(r3)
  8012e0:	00001e06 	br	80135c <GMT_to_MST+0x218>
		case 4:
			t1 = (atoh(pkt_time[j])*10);
  8012e4:	e0bffd17 	ldw	r2,-12(fp)
  8012e8:	1007883a 	mov	r3,r2
  8012ec:	e0bfff17 	ldw	r2,-4(fp)
  8012f0:	1885883a 	add	r2,r3,r2
  8012f4:	10800003 	ldbu	r2,0(r2)
  8012f8:	11003fcc 	andi	r4,r2,255
  8012fc:	2100201c 	xori	r4,r4,128
  801300:	213fe004 	addi	r4,r4,-128
  801304:	0800fc80 	call	800fc8 <atoh>
  801308:	108002a4 	muli	r2,r2,10
  80130c:	e0bffc15 	stw	r2,-16(fp)
		case 5:
			t1 = t1 + atoh(pkt_time[j]);
  801310:	e0bffd17 	ldw	r2,-12(fp)
  801314:	1007883a 	mov	r3,r2
  801318:	e0bfff17 	ldw	r2,-4(fp)
  80131c:	1885883a 	add	r2,r3,r2
  801320:	10800003 	ldbu	r2,0(r2)
  801324:	11003fcc 	andi	r4,r2,255
  801328:	2100201c 	xori	r4,r4,128
  80132c:	213fe004 	addi	r4,r4,-128
  801330:	0800fc80 	call	800fc8 <atoh>
  801334:	1007883a 	mov	r3,r2
  801338:	e0bffc17 	ldw	r2,-16(fp)
  80133c:	10c5883a 	add	r2,r2,r3
  801340:	e0bffc15 	stw	r2,-16(fp)
			time[2] = t1; break;
  801344:	e0bffe17 	ldw	r2,-8(fp)
  801348:	10c00204 	addi	r3,r2,8
  80134c:	e0bffc17 	ldw	r2,-16(fp)
  801350:	18800015 	stw	r2,0(r3)
  801354:	00000106 	br	80135c <GMT_to_MST+0x218>
		default:
			t1 = 0; break;
  801358:	e03ffc15 	stw	zero,-16(fp)

char GMT_to_MST(int *time, char *pkt_time){
	int j,t1;
	char aorp;
	aorp = 'A';
	for(j = 0; j < 6; j++){										/*Switch statement does all the fun stuff to convert to MST		*/
  80135c:	e0bffd17 	ldw	r2,-12(fp)
  801360:	10800044 	addi	r2,r2,1
  801364:	e0bffd15 	stw	r2,-12(fp)
  801368:	e0bffd17 	ldw	r2,-12(fp)
  80136c:	10800190 	cmplti	r2,r2,6
  801370:	103f7e1e 	bne	r2,zero,80116c <GMT_to_MST+0x28>
			time[2] = t1; break;
		default:
			t1 = 0; break;
		};
	};
	return(aorp);
  801374:	e0bffb07 	ldb	r2,-20(fp)
};
  801378:	e037883a 	mov	sp,fp
  80137c:	dfc00117 	ldw	ra,4(sp)
  801380:	df000017 	ldw	fp,0(sp)
  801384:	dec00204 	addi	sp,sp,8
  801388:	f800283a 	ret

0080138c <m_to_ft>:

double m_to_ft(char *pkt_ht){
  80138c:	defff504 	addi	sp,sp,-44
  801390:	dfc00a15 	stw	ra,40(sp)
  801394:	df000915 	stw	fp,36(sp)
  801398:	dcc00815 	stw	r19,32(sp)
  80139c:	dc800715 	stw	r18,28(sp)
  8013a0:	dc400615 	stw	r17,24(sp)
  8013a4:	dc000515 	stw	r16,20(sp)
  8013a8:	df000504 	addi	fp,sp,20
  8013ac:	e13fff15 	stw	r4,-4(fp)
	int j,temp;
	double tmp;
	temp = 0;
  8013b0:	e03ffd15 	stw	zero,-12(fp)
	for(j=0;j<4;j++){													/*Converts meters to feet through for loop*/
  8013b4:	e03ffe15 	stw	zero,-8(fp)
  8013b8:	00003906 	br	8014a0 <m_to_ft+0x114>
		temp = temp + atoh(pkt_ht[j])*pow(10,(3-j));					/*Reduces power of ten each time through loop*/
  8013bc:	e13ffd17 	ldw	r4,-12(fp)
  8013c0:	0804b700 	call	804b70 <__floatsidf>
  8013c4:	1025883a 	mov	r18,r2
  8013c8:	1827883a 	mov	r19,r3
  8013cc:	e0bffe17 	ldw	r2,-8(fp)
  8013d0:	1007883a 	mov	r3,r2
  8013d4:	e0bfff17 	ldw	r2,-4(fp)
  8013d8:	1885883a 	add	r2,r3,r2
  8013dc:	10800003 	ldbu	r2,0(r2)
  8013e0:	11003fcc 	andi	r4,r2,255
  8013e4:	2100201c 	xori	r4,r4,128
  8013e8:	213fe004 	addi	r4,r4,-128
  8013ec:	0800fc80 	call	800fc8 <atoh>
  8013f0:	1009883a 	mov	r4,r2
  8013f4:	0804b700 	call	804b70 <__floatsidf>
  8013f8:	1021883a 	mov	r16,r2
  8013fc:	1823883a 	mov	r17,r3
  801400:	00c000c4 	movi	r3,3
  801404:	e0bffe17 	ldw	r2,-8(fp)
  801408:	1889c83a 	sub	r4,r3,r2
  80140c:	0804b700 	call	804b70 <__floatsidf>
  801410:	100f883a 	mov	r7,r2
  801414:	1811883a 	mov	r8,r3
  801418:	0009883a 	mov	r4,zero
  80141c:	01500934 	movhi	r5,16420
  801420:	380d883a 	mov	r6,r7
  801424:	400f883a 	mov	r7,r8
  801428:	0801ec80 	call	801ec8 <pow>
  80142c:	1009883a 	mov	r4,r2
  801430:	180b883a 	mov	r5,r3
  801434:	2005883a 	mov	r2,r4
  801438:	2807883a 	mov	r3,r5
  80143c:	8009883a 	mov	r4,r16
  801440:	880b883a 	mov	r5,r17
  801444:	100d883a 	mov	r6,r2
  801448:	180f883a 	mov	r7,r3
  80144c:	08042ac0 	call	8042ac <__muldf3>
  801450:	1009883a 	mov	r4,r2
  801454:	180b883a 	mov	r5,r3
  801458:	2005883a 	mov	r2,r4
  80145c:	2807883a 	mov	r3,r5
  801460:	9009883a 	mov	r4,r18
  801464:	980b883a 	mov	r5,r19
  801468:	100d883a 	mov	r6,r2
  80146c:	180f883a 	mov	r7,r3
  801470:	08042380 	call	804238 <__adddf3>
  801474:	1009883a 	mov	r4,r2
  801478:	180b883a 	mov	r5,r3
  80147c:	2005883a 	mov	r2,r4
  801480:	2807883a 	mov	r3,r5
  801484:	1009883a 	mov	r4,r2
  801488:	180b883a 	mov	r5,r3
  80148c:	0804c680 	call	804c68 <__fixdfsi>
  801490:	e0bffd15 	stw	r2,-12(fp)

double m_to_ft(char *pkt_ht){
	int j,temp;
	double tmp;
	temp = 0;
	for(j=0;j<4;j++){													/*Converts meters to feet through for loop*/
  801494:	e0bffe17 	ldw	r2,-8(fp)
  801498:	10800044 	addi	r2,r2,1
  80149c:	e0bffe15 	stw	r2,-8(fp)
  8014a0:	e0bffe17 	ldw	r2,-8(fp)
  8014a4:	10800110 	cmplti	r2,r2,4
  8014a8:	103fc41e 	bne	r2,zero,8013bc <m_to_ft+0x30>
		temp = temp + atoh(pkt_ht[j])*pow(10,(3-j));					/*Reduces power of ten each time through loop*/
	}
	tmp = (((double)temp) * 3.28);										/*Multiplies meters into feet*/
  8014ac:	e13ffd17 	ldw	r4,-12(fp)
  8014b0:	0804b700 	call	804b70 <__floatsidf>
  8014b4:	100b883a 	mov	r5,r2
  8014b8:	180d883a 	mov	r6,r3
  8014bc:	2809883a 	mov	r4,r5
  8014c0:	300b883a 	mov	r5,r6
  8014c4:	01a8f5f4 	movhi	r6,41943
  8014c8:	31828f44 	addi	r6,r6,2621
  8014cc:	01d002b4 	movhi	r7,16394
  8014d0:	39cf5c04 	addi	r7,r7,15728
  8014d4:	08042ac0 	call	8042ac <__muldf3>
  8014d8:	1009883a 	mov	r4,r2
  8014dc:	180b883a 	mov	r5,r3
  8014e0:	e13ffb15 	stw	r4,-20(fp)
  8014e4:	e17ffc15 	stw	r5,-16(fp)
	return(tmp);
  8014e8:	e17ffb17 	ldw	r5,-20(fp)
  8014ec:	e1bffc17 	ldw	r6,-16(fp)
  8014f0:	2807883a 	mov	r3,r5
  8014f4:	3009883a 	mov	r4,r6
};
  8014f8:	1805883a 	mov	r2,r3
  8014fc:	2007883a 	mov	r3,r4
  801500:	e037883a 	mov	sp,fp
  801504:	dfc00517 	ldw	ra,20(sp)
  801508:	df000417 	ldw	fp,16(sp)
  80150c:	dcc00317 	ldw	r19,12(sp)
  801510:	dc800217 	ldw	r18,8(sp)
  801514:	dc400117 	ldw	r17,4(sp)
  801518:	dc000017 	ldw	r16,0(sp)
  80151c:	dec00604 	addi	sp,sp,24
  801520:	f800283a 	ret

00801524 <lat_to_deg>:

void lat_to_deg(char *pkt_lat, int *lat){
  801524:	defff504 	addi	sp,sp,-44
  801528:	dfc00a15 	stw	ra,40(sp)
  80152c:	df000915 	stw	fp,36(sp)
  801530:	dcc00815 	stw	r19,32(sp)
  801534:	dc800715 	stw	r18,28(sp)
  801538:	dc400615 	stw	r17,24(sp)
  80153c:	dc000515 	stw	r16,20(sp)
  801540:	df000504 	addi	fp,sp,20
  801544:	e13ffe15 	stw	r4,-8(fp)
  801548:	e17fff15 	stw	r5,-4(fp)
	int j,k;
	int temp;
	temp = 0;
  80154c:	e03ffb15 	stw	zero,-20(fp)
	k = 0;
  801550:	e03ffc15 	stw	zero,-16(fp)
	for(j=0;j<2;j++){													/*Converts latitude to double value*/
  801554:	e03ffd15 	stw	zero,-12(fp)
  801558:	00003706 	br	801638 <lat_to_deg+0x114>
		temp = temp + (atoh(pkt_lat[j])*pow(10,(1-j)));			/*Reduces power of ten each time through loop*/
  80155c:	e13ffb17 	ldw	r4,-20(fp)
  801560:	0804b700 	call	804b70 <__floatsidf>
  801564:	1025883a 	mov	r18,r2
  801568:	1827883a 	mov	r19,r3
  80156c:	e0bffd17 	ldw	r2,-12(fp)
  801570:	1007883a 	mov	r3,r2
  801574:	e0bffe17 	ldw	r2,-8(fp)
  801578:	1885883a 	add	r2,r3,r2
  80157c:	10800003 	ldbu	r2,0(r2)
  801580:	11003fcc 	andi	r4,r2,255
  801584:	2100201c 	xori	r4,r4,128
  801588:	213fe004 	addi	r4,r4,-128
  80158c:	0800fc80 	call	800fc8 <atoh>
  801590:	1009883a 	mov	r4,r2
  801594:	0804b700 	call	804b70 <__floatsidf>
  801598:	1021883a 	mov	r16,r2
  80159c:	1823883a 	mov	r17,r3
  8015a0:	00c00044 	movi	r3,1
  8015a4:	e0bffd17 	ldw	r2,-12(fp)
  8015a8:	1889c83a 	sub	r4,r3,r2
  8015ac:	0804b700 	call	804b70 <__floatsidf>
  8015b0:	100f883a 	mov	r7,r2
  8015b4:	1811883a 	mov	r8,r3
  8015b8:	0009883a 	mov	r4,zero
  8015bc:	01500934 	movhi	r5,16420
  8015c0:	380d883a 	mov	r6,r7
  8015c4:	400f883a 	mov	r7,r8
  8015c8:	0801ec80 	call	801ec8 <pow>
  8015cc:	100f883a 	mov	r7,r2
  8015d0:	1811883a 	mov	r8,r3
  8015d4:	8009883a 	mov	r4,r16
  8015d8:	880b883a 	mov	r5,r17
  8015dc:	380d883a 	mov	r6,r7
  8015e0:	400f883a 	mov	r7,r8
  8015e4:	08042ac0 	call	8042ac <__muldf3>
  8015e8:	1009883a 	mov	r4,r2
  8015ec:	180b883a 	mov	r5,r3
  8015f0:	2005883a 	mov	r2,r4
  8015f4:	2807883a 	mov	r3,r5
  8015f8:	9009883a 	mov	r4,r18
  8015fc:	980b883a 	mov	r5,r19
  801600:	100d883a 	mov	r6,r2
  801604:	180f883a 	mov	r7,r3
  801608:	08042380 	call	804238 <__adddf3>
  80160c:	1009883a 	mov	r4,r2
  801610:	180b883a 	mov	r5,r3
  801614:	2005883a 	mov	r2,r4
  801618:	2807883a 	mov	r3,r5
  80161c:	1009883a 	mov	r4,r2
  801620:	180b883a 	mov	r5,r3
  801624:	0804c680 	call	804c68 <__fixdfsi>
  801628:	e0bffb15 	stw	r2,-20(fp)
void lat_to_deg(char *pkt_lat, int *lat){
	int j,k;
	int temp;
	temp = 0;
	k = 0;
	for(j=0;j<2;j++){													/*Converts latitude to double value*/
  80162c:	e0bffd17 	ldw	r2,-12(fp)
  801630:	10800044 	addi	r2,r2,1
  801634:	e0bffd15 	stw	r2,-12(fp)
  801638:	e0bffd17 	ldw	r2,-12(fp)
  80163c:	10800090 	cmplti	r2,r2,2
  801640:	103fc61e 	bne	r2,zero,80155c <lat_to_deg+0x38>
		temp = temp + (atoh(pkt_lat[j])*pow(10,(1-j)));			/*Reduces power of ten each time through loop*/
	};
	lat[k] = temp;
  801644:	e0bffc17 	ldw	r2,-16(fp)
  801648:	1085883a 	add	r2,r2,r2
  80164c:	1085883a 	add	r2,r2,r2
  801650:	1007883a 	mov	r3,r2
  801654:	e0bfff17 	ldw	r2,-4(fp)
  801658:	1887883a 	add	r3,r3,r2
  80165c:	e0bffb17 	ldw	r2,-20(fp)
  801660:	18800015 	stw	r2,0(r3)
	k++;
  801664:	e0bffc17 	ldw	r2,-16(fp)
  801668:	10800044 	addi	r2,r2,1
  80166c:	e0bffc15 	stw	r2,-16(fp)
	temp = 0;
  801670:	e03ffb15 	stw	zero,-20(fp)
	for(j=0;j<2;j++){
  801674:	e03ffd15 	stw	zero,-12(fp)
  801678:	00003706 	br	801758 <lat_to_deg+0x234>
		temp = temp + atoh(pkt_lat[j+2])*pow(10,(1-j));
  80167c:	e13ffb17 	ldw	r4,-20(fp)
  801680:	0804b700 	call	804b70 <__floatsidf>
  801684:	1025883a 	mov	r18,r2
  801688:	1827883a 	mov	r19,r3
  80168c:	e0fffd17 	ldw	r3,-12(fp)
  801690:	e0bffe17 	ldw	r2,-8(fp)
  801694:	1885883a 	add	r2,r3,r2
  801698:	10800084 	addi	r2,r2,2
  80169c:	10800003 	ldbu	r2,0(r2)
  8016a0:	11003fcc 	andi	r4,r2,255
  8016a4:	2100201c 	xori	r4,r4,128
  8016a8:	213fe004 	addi	r4,r4,-128
  8016ac:	0800fc80 	call	800fc8 <atoh>
  8016b0:	1009883a 	mov	r4,r2
  8016b4:	0804b700 	call	804b70 <__floatsidf>
  8016b8:	1021883a 	mov	r16,r2
  8016bc:	1823883a 	mov	r17,r3
  8016c0:	00c00044 	movi	r3,1
  8016c4:	e0bffd17 	ldw	r2,-12(fp)
  8016c8:	1889c83a 	sub	r4,r3,r2
  8016cc:	0804b700 	call	804b70 <__floatsidf>
  8016d0:	100f883a 	mov	r7,r2
  8016d4:	1811883a 	mov	r8,r3
  8016d8:	0009883a 	mov	r4,zero
  8016dc:	01500934 	movhi	r5,16420
  8016e0:	380d883a 	mov	r6,r7
  8016e4:	400f883a 	mov	r7,r8
  8016e8:	0801ec80 	call	801ec8 <pow>
  8016ec:	100f883a 	mov	r7,r2
  8016f0:	1811883a 	mov	r8,r3
  8016f4:	8009883a 	mov	r4,r16
  8016f8:	880b883a 	mov	r5,r17
  8016fc:	380d883a 	mov	r6,r7
  801700:	400f883a 	mov	r7,r8
  801704:	08042ac0 	call	8042ac <__muldf3>
  801708:	1009883a 	mov	r4,r2
  80170c:	180b883a 	mov	r5,r3
  801710:	2005883a 	mov	r2,r4
  801714:	2807883a 	mov	r3,r5
  801718:	9009883a 	mov	r4,r18
  80171c:	980b883a 	mov	r5,r19
  801720:	100d883a 	mov	r6,r2
  801724:	180f883a 	mov	r7,r3
  801728:	08042380 	call	804238 <__adddf3>
  80172c:	1009883a 	mov	r4,r2
  801730:	180b883a 	mov	r5,r3
  801734:	2005883a 	mov	r2,r4
  801738:	2807883a 	mov	r3,r5
  80173c:	1009883a 	mov	r4,r2
  801740:	180b883a 	mov	r5,r3
  801744:	0804c680 	call	804c68 <__fixdfsi>
  801748:	e0bffb15 	stw	r2,-20(fp)
		temp = temp + (atoh(pkt_lat[j])*pow(10,(1-j)));			/*Reduces power of ten each time through loop*/
	};
	lat[k] = temp;
	k++;
	temp = 0;
	for(j=0;j<2;j++){
  80174c:	e0bffd17 	ldw	r2,-12(fp)
  801750:	10800044 	addi	r2,r2,1
  801754:	e0bffd15 	stw	r2,-12(fp)
  801758:	e0bffd17 	ldw	r2,-12(fp)
  80175c:	10800090 	cmplti	r2,r2,2
  801760:	103fc61e 	bne	r2,zero,80167c <lat_to_deg+0x158>
		temp = temp + atoh(pkt_lat[j+2])*pow(10,(1-j));
	};
	lat[k] = temp;
  801764:	e0bffc17 	ldw	r2,-16(fp)
  801768:	1085883a 	add	r2,r2,r2
  80176c:	1085883a 	add	r2,r2,r2
  801770:	1007883a 	mov	r3,r2
  801774:	e0bfff17 	ldw	r2,-4(fp)
  801778:	1887883a 	add	r3,r3,r2
  80177c:	e0bffb17 	ldw	r2,-20(fp)
  801780:	18800015 	stw	r2,0(r3)
	k++;
  801784:	e0bffc17 	ldw	r2,-16(fp)
  801788:	10800044 	addi	r2,r2,1
  80178c:	e0bffc15 	stw	r2,-16(fp)
	temp = 0;
  801790:	e03ffb15 	stw	zero,-20(fp)
	for(j=0;j<5;j++){
  801794:	e03ffd15 	stw	zero,-12(fp)
  801798:	00003706 	br	801878 <lat_to_deg+0x354>
		temp = temp + atoh(pkt_lat[j+5])*pow(10,(4-j));
  80179c:	e13ffb17 	ldw	r4,-20(fp)
  8017a0:	0804b700 	call	804b70 <__floatsidf>
  8017a4:	1025883a 	mov	r18,r2
  8017a8:	1827883a 	mov	r19,r3
  8017ac:	e0fffd17 	ldw	r3,-12(fp)
  8017b0:	e0bffe17 	ldw	r2,-8(fp)
  8017b4:	1885883a 	add	r2,r3,r2
  8017b8:	10800144 	addi	r2,r2,5
  8017bc:	10800003 	ldbu	r2,0(r2)
  8017c0:	11003fcc 	andi	r4,r2,255
  8017c4:	2100201c 	xori	r4,r4,128
  8017c8:	213fe004 	addi	r4,r4,-128
  8017cc:	0800fc80 	call	800fc8 <atoh>
  8017d0:	1009883a 	mov	r4,r2
  8017d4:	0804b700 	call	804b70 <__floatsidf>
  8017d8:	1021883a 	mov	r16,r2
  8017dc:	1823883a 	mov	r17,r3
  8017e0:	00c00104 	movi	r3,4
  8017e4:	e0bffd17 	ldw	r2,-12(fp)
  8017e8:	1889c83a 	sub	r4,r3,r2
  8017ec:	0804b700 	call	804b70 <__floatsidf>
  8017f0:	100f883a 	mov	r7,r2
  8017f4:	1811883a 	mov	r8,r3
  8017f8:	0009883a 	mov	r4,zero
  8017fc:	01500934 	movhi	r5,16420
  801800:	380d883a 	mov	r6,r7
  801804:	400f883a 	mov	r7,r8
  801808:	0801ec80 	call	801ec8 <pow>
  80180c:	100f883a 	mov	r7,r2
  801810:	1811883a 	mov	r8,r3
  801814:	8009883a 	mov	r4,r16
  801818:	880b883a 	mov	r5,r17
  80181c:	380d883a 	mov	r6,r7
  801820:	400f883a 	mov	r7,r8
  801824:	08042ac0 	call	8042ac <__muldf3>
  801828:	1009883a 	mov	r4,r2
  80182c:	180b883a 	mov	r5,r3
  801830:	2005883a 	mov	r2,r4
  801834:	2807883a 	mov	r3,r5
  801838:	9009883a 	mov	r4,r18
  80183c:	980b883a 	mov	r5,r19
  801840:	100d883a 	mov	r6,r2
  801844:	180f883a 	mov	r7,r3
  801848:	08042380 	call	804238 <__adddf3>
  80184c:	1009883a 	mov	r4,r2
  801850:	180b883a 	mov	r5,r3
  801854:	2005883a 	mov	r2,r4
  801858:	2807883a 	mov	r3,r5
  80185c:	1009883a 	mov	r4,r2
  801860:	180b883a 	mov	r5,r3
  801864:	0804c680 	call	804c68 <__fixdfsi>
  801868:	e0bffb15 	stw	r2,-20(fp)
		temp = temp + atoh(pkt_lat[j+2])*pow(10,(1-j));
	};
	lat[k] = temp;
	k++;
	temp = 0;
	for(j=0;j<5;j++){
  80186c:	e0bffd17 	ldw	r2,-12(fp)
  801870:	10800044 	addi	r2,r2,1
  801874:	e0bffd15 	stw	r2,-12(fp)
  801878:	e0bffd17 	ldw	r2,-12(fp)
  80187c:	10800150 	cmplti	r2,r2,5
  801880:	103fc61e 	bne	r2,zero,80179c <lat_to_deg+0x278>
		temp = temp + atoh(pkt_lat[j+5])*pow(10,(4-j));
	};
	lat[k] = temp;
  801884:	e0bffc17 	ldw	r2,-16(fp)
  801888:	1085883a 	add	r2,r2,r2
  80188c:	1085883a 	add	r2,r2,r2
  801890:	1007883a 	mov	r3,r2
  801894:	e0bfff17 	ldw	r2,-4(fp)
  801898:	1887883a 	add	r3,r3,r2
  80189c:	e0bffb17 	ldw	r2,-20(fp)
  8018a0:	18800015 	stw	r2,0(r3)
	k++;
  8018a4:	e0bffc17 	ldw	r2,-16(fp)
  8018a8:	10800044 	addi	r2,r2,1
  8018ac:	e0bffc15 	stw	r2,-16(fp)
	return;
}
  8018b0:	e037883a 	mov	sp,fp
  8018b4:	dfc00517 	ldw	ra,20(sp)
  8018b8:	df000417 	ldw	fp,16(sp)
  8018bc:	dcc00317 	ldw	r19,12(sp)
  8018c0:	dc800217 	ldw	r18,8(sp)
  8018c4:	dc400117 	ldw	r17,4(sp)
  8018c8:	dc000017 	ldw	r16,0(sp)
  8018cc:	dec00604 	addi	sp,sp,24
  8018d0:	f800283a 	ret

008018d4 <long_to_deg>:

void long_to_deg(char *pkt_long, int *lon){
  8018d4:	defff504 	addi	sp,sp,-44
  8018d8:	dfc00a15 	stw	ra,40(sp)
  8018dc:	df000915 	stw	fp,36(sp)
  8018e0:	dcc00815 	stw	r19,32(sp)
  8018e4:	dc800715 	stw	r18,28(sp)
  8018e8:	dc400615 	stw	r17,24(sp)
  8018ec:	dc000515 	stw	r16,20(sp)
  8018f0:	df000504 	addi	fp,sp,20
  8018f4:	e13ffe15 	stw	r4,-8(fp)
  8018f8:	e17fff15 	stw	r5,-4(fp)
	int j,k;
	int temp;
	temp = 0;
  8018fc:	e03ffb15 	stw	zero,-20(fp)
	k = 0;
  801900:	e03ffc15 	stw	zero,-16(fp)
	for(j=0;j<3;j++){													/*Converts latitude to double value*/
  801904:	e03ffd15 	stw	zero,-12(fp)
  801908:	00003706 	br	8019e8 <long_to_deg+0x114>
		temp = temp + (atoh(pkt_long[j])*pow(10,(2-j)));			/*Reduces power of ten each time through loop*/
  80190c:	e13ffb17 	ldw	r4,-20(fp)
  801910:	0804b700 	call	804b70 <__floatsidf>
  801914:	1025883a 	mov	r18,r2
  801918:	1827883a 	mov	r19,r3
  80191c:	e0bffd17 	ldw	r2,-12(fp)
  801920:	1007883a 	mov	r3,r2
  801924:	e0bffe17 	ldw	r2,-8(fp)
  801928:	1885883a 	add	r2,r3,r2
  80192c:	10800003 	ldbu	r2,0(r2)
  801930:	11003fcc 	andi	r4,r2,255
  801934:	2100201c 	xori	r4,r4,128
  801938:	213fe004 	addi	r4,r4,-128
  80193c:	0800fc80 	call	800fc8 <atoh>
  801940:	1009883a 	mov	r4,r2
  801944:	0804b700 	call	804b70 <__floatsidf>
  801948:	1021883a 	mov	r16,r2
  80194c:	1823883a 	mov	r17,r3
  801950:	00c00084 	movi	r3,2
  801954:	e0bffd17 	ldw	r2,-12(fp)
  801958:	1889c83a 	sub	r4,r3,r2
  80195c:	0804b700 	call	804b70 <__floatsidf>
  801960:	100f883a 	mov	r7,r2
  801964:	1811883a 	mov	r8,r3
  801968:	0009883a 	mov	r4,zero
  80196c:	01500934 	movhi	r5,16420
  801970:	380d883a 	mov	r6,r7
  801974:	400f883a 	mov	r7,r8
  801978:	0801ec80 	call	801ec8 <pow>
  80197c:	100f883a 	mov	r7,r2
  801980:	1811883a 	mov	r8,r3
  801984:	8009883a 	mov	r4,r16
  801988:	880b883a 	mov	r5,r17
  80198c:	380d883a 	mov	r6,r7
  801990:	400f883a 	mov	r7,r8
  801994:	08042ac0 	call	8042ac <__muldf3>
  801998:	1009883a 	mov	r4,r2
  80199c:	180b883a 	mov	r5,r3
  8019a0:	2005883a 	mov	r2,r4
  8019a4:	2807883a 	mov	r3,r5
  8019a8:	9009883a 	mov	r4,r18
  8019ac:	980b883a 	mov	r5,r19
  8019b0:	100d883a 	mov	r6,r2
  8019b4:	180f883a 	mov	r7,r3
  8019b8:	08042380 	call	804238 <__adddf3>
  8019bc:	1009883a 	mov	r4,r2
  8019c0:	180b883a 	mov	r5,r3
  8019c4:	2005883a 	mov	r2,r4
  8019c8:	2807883a 	mov	r3,r5
  8019cc:	1009883a 	mov	r4,r2
  8019d0:	180b883a 	mov	r5,r3
  8019d4:	0804c680 	call	804c68 <__fixdfsi>
  8019d8:	e0bffb15 	stw	r2,-20(fp)
void long_to_deg(char *pkt_long, int *lon){
	int j,k;
	int temp;
	temp = 0;
	k = 0;
	for(j=0;j<3;j++){													/*Converts latitude to double value*/
  8019dc:	e0bffd17 	ldw	r2,-12(fp)
  8019e0:	10800044 	addi	r2,r2,1
  8019e4:	e0bffd15 	stw	r2,-12(fp)
  8019e8:	e0bffd17 	ldw	r2,-12(fp)
  8019ec:	108000d0 	cmplti	r2,r2,3
  8019f0:	103fc61e 	bne	r2,zero,80190c <long_to_deg+0x38>
		temp = temp + (atoh(pkt_long[j])*pow(10,(2-j)));			/*Reduces power of ten each time through loop*/
	};
	lon[k] = temp;
  8019f4:	e0bffc17 	ldw	r2,-16(fp)
  8019f8:	1085883a 	add	r2,r2,r2
  8019fc:	1085883a 	add	r2,r2,r2
  801a00:	1007883a 	mov	r3,r2
  801a04:	e0bfff17 	ldw	r2,-4(fp)
  801a08:	1887883a 	add	r3,r3,r2
  801a0c:	e0bffb17 	ldw	r2,-20(fp)
  801a10:	18800015 	stw	r2,0(r3)
	k++;
  801a14:	e0bffc17 	ldw	r2,-16(fp)
  801a18:	10800044 	addi	r2,r2,1
  801a1c:	e0bffc15 	stw	r2,-16(fp)
	temp = 0;
  801a20:	e03ffb15 	stw	zero,-20(fp)
	for(j=0;j<2;j++){
  801a24:	e03ffd15 	stw	zero,-12(fp)
  801a28:	00003706 	br	801b08 <long_to_deg+0x234>
		temp = temp + atoh(pkt_long[j+3])*pow(10,(1-j));
  801a2c:	e13ffb17 	ldw	r4,-20(fp)
  801a30:	0804b700 	call	804b70 <__floatsidf>
  801a34:	1025883a 	mov	r18,r2
  801a38:	1827883a 	mov	r19,r3
  801a3c:	e0fffd17 	ldw	r3,-12(fp)
  801a40:	e0bffe17 	ldw	r2,-8(fp)
  801a44:	1885883a 	add	r2,r3,r2
  801a48:	108000c4 	addi	r2,r2,3
  801a4c:	10800003 	ldbu	r2,0(r2)
  801a50:	11003fcc 	andi	r4,r2,255
  801a54:	2100201c 	xori	r4,r4,128
  801a58:	213fe004 	addi	r4,r4,-128
  801a5c:	0800fc80 	call	800fc8 <atoh>
  801a60:	1009883a 	mov	r4,r2
  801a64:	0804b700 	call	804b70 <__floatsidf>
  801a68:	1021883a 	mov	r16,r2
  801a6c:	1823883a 	mov	r17,r3
  801a70:	00c00044 	movi	r3,1
  801a74:	e0bffd17 	ldw	r2,-12(fp)
  801a78:	1889c83a 	sub	r4,r3,r2
  801a7c:	0804b700 	call	804b70 <__floatsidf>
  801a80:	100f883a 	mov	r7,r2
  801a84:	1811883a 	mov	r8,r3
  801a88:	0009883a 	mov	r4,zero
  801a8c:	01500934 	movhi	r5,16420
  801a90:	380d883a 	mov	r6,r7
  801a94:	400f883a 	mov	r7,r8
  801a98:	0801ec80 	call	801ec8 <pow>
  801a9c:	100f883a 	mov	r7,r2
  801aa0:	1811883a 	mov	r8,r3
  801aa4:	8009883a 	mov	r4,r16
  801aa8:	880b883a 	mov	r5,r17
  801aac:	380d883a 	mov	r6,r7
  801ab0:	400f883a 	mov	r7,r8
  801ab4:	08042ac0 	call	8042ac <__muldf3>
  801ab8:	1009883a 	mov	r4,r2
  801abc:	180b883a 	mov	r5,r3
  801ac0:	2005883a 	mov	r2,r4
  801ac4:	2807883a 	mov	r3,r5
  801ac8:	9009883a 	mov	r4,r18
  801acc:	980b883a 	mov	r5,r19
  801ad0:	100d883a 	mov	r6,r2
  801ad4:	180f883a 	mov	r7,r3
  801ad8:	08042380 	call	804238 <__adddf3>
  801adc:	1009883a 	mov	r4,r2
  801ae0:	180b883a 	mov	r5,r3
  801ae4:	2005883a 	mov	r2,r4
  801ae8:	2807883a 	mov	r3,r5
  801aec:	1009883a 	mov	r4,r2
  801af0:	180b883a 	mov	r5,r3
  801af4:	0804c680 	call	804c68 <__fixdfsi>
  801af8:	e0bffb15 	stw	r2,-20(fp)
		temp = temp + (atoh(pkt_long[j])*pow(10,(2-j)));			/*Reduces power of ten each time through loop*/
	};
	lon[k] = temp;
	k++;
	temp = 0;
	for(j=0;j<2;j++){
  801afc:	e0bffd17 	ldw	r2,-12(fp)
  801b00:	10800044 	addi	r2,r2,1
  801b04:	e0bffd15 	stw	r2,-12(fp)
  801b08:	e0bffd17 	ldw	r2,-12(fp)
  801b0c:	10800090 	cmplti	r2,r2,2
  801b10:	103fc61e 	bne	r2,zero,801a2c <long_to_deg+0x158>
		temp = temp + atoh(pkt_long[j+3])*pow(10,(1-j));
	};
	lon[k] = temp;
  801b14:	e0bffc17 	ldw	r2,-16(fp)
  801b18:	1085883a 	add	r2,r2,r2
  801b1c:	1085883a 	add	r2,r2,r2
  801b20:	1007883a 	mov	r3,r2
  801b24:	e0bfff17 	ldw	r2,-4(fp)
  801b28:	1887883a 	add	r3,r3,r2
  801b2c:	e0bffb17 	ldw	r2,-20(fp)
  801b30:	18800015 	stw	r2,0(r3)
	k++;
  801b34:	e0bffc17 	ldw	r2,-16(fp)
  801b38:	10800044 	addi	r2,r2,1
  801b3c:	e0bffc15 	stw	r2,-16(fp)
	temp = 0;
  801b40:	e03ffb15 	stw	zero,-20(fp)
	for(j=0;j<5;j++){
  801b44:	e03ffd15 	stw	zero,-12(fp)
  801b48:	00003706 	br	801c28 <long_to_deg+0x354>
		temp = temp + atoh(pkt_long[j+6])*pow(10,(4-j));
  801b4c:	e13ffb17 	ldw	r4,-20(fp)
  801b50:	0804b700 	call	804b70 <__floatsidf>
  801b54:	1025883a 	mov	r18,r2
  801b58:	1827883a 	mov	r19,r3
  801b5c:	e0fffd17 	ldw	r3,-12(fp)
  801b60:	e0bffe17 	ldw	r2,-8(fp)
  801b64:	1885883a 	add	r2,r3,r2
  801b68:	10800184 	addi	r2,r2,6
  801b6c:	10800003 	ldbu	r2,0(r2)
  801b70:	11003fcc 	andi	r4,r2,255
  801b74:	2100201c 	xori	r4,r4,128
  801b78:	213fe004 	addi	r4,r4,-128
  801b7c:	0800fc80 	call	800fc8 <atoh>
  801b80:	1009883a 	mov	r4,r2
  801b84:	0804b700 	call	804b70 <__floatsidf>
  801b88:	1021883a 	mov	r16,r2
  801b8c:	1823883a 	mov	r17,r3
  801b90:	00c00104 	movi	r3,4
  801b94:	e0bffd17 	ldw	r2,-12(fp)
  801b98:	1889c83a 	sub	r4,r3,r2
  801b9c:	0804b700 	call	804b70 <__floatsidf>
  801ba0:	100f883a 	mov	r7,r2
  801ba4:	1811883a 	mov	r8,r3
  801ba8:	0009883a 	mov	r4,zero
  801bac:	01500934 	movhi	r5,16420
  801bb0:	380d883a 	mov	r6,r7
  801bb4:	400f883a 	mov	r7,r8
  801bb8:	0801ec80 	call	801ec8 <pow>
  801bbc:	100f883a 	mov	r7,r2
  801bc0:	1811883a 	mov	r8,r3
  801bc4:	8009883a 	mov	r4,r16
  801bc8:	880b883a 	mov	r5,r17
  801bcc:	380d883a 	mov	r6,r7
  801bd0:	400f883a 	mov	r7,r8
  801bd4:	08042ac0 	call	8042ac <__muldf3>
  801bd8:	1009883a 	mov	r4,r2
  801bdc:	180b883a 	mov	r5,r3
  801be0:	2005883a 	mov	r2,r4
  801be4:	2807883a 	mov	r3,r5
  801be8:	9009883a 	mov	r4,r18
  801bec:	980b883a 	mov	r5,r19
  801bf0:	100d883a 	mov	r6,r2
  801bf4:	180f883a 	mov	r7,r3
  801bf8:	08042380 	call	804238 <__adddf3>
  801bfc:	1009883a 	mov	r4,r2
  801c00:	180b883a 	mov	r5,r3
  801c04:	2005883a 	mov	r2,r4
  801c08:	2807883a 	mov	r3,r5
  801c0c:	1009883a 	mov	r4,r2
  801c10:	180b883a 	mov	r5,r3
  801c14:	0804c680 	call	804c68 <__fixdfsi>
  801c18:	e0bffb15 	stw	r2,-20(fp)
		temp = temp + atoh(pkt_long[j+3])*pow(10,(1-j));
	};
	lon[k] = temp;
	k++;
	temp = 0;
	for(j=0;j<5;j++){
  801c1c:	e0bffd17 	ldw	r2,-12(fp)
  801c20:	10800044 	addi	r2,r2,1
  801c24:	e0bffd15 	stw	r2,-12(fp)
  801c28:	e0bffd17 	ldw	r2,-12(fp)
  801c2c:	10800150 	cmplti	r2,r2,5
  801c30:	103fc61e 	bne	r2,zero,801b4c <long_to_deg+0x278>
		temp = temp + atoh(pkt_long[j+6])*pow(10,(4-j));
	};
	lon[k] = temp;
  801c34:	e0bffc17 	ldw	r2,-16(fp)
  801c38:	1085883a 	add	r2,r2,r2
  801c3c:	1085883a 	add	r2,r2,r2
  801c40:	1007883a 	mov	r3,r2
  801c44:	e0bfff17 	ldw	r2,-4(fp)
  801c48:	1887883a 	add	r3,r3,r2
  801c4c:	e0bffb17 	ldw	r2,-20(fp)
  801c50:	18800015 	stw	r2,0(r3)
	k++;
  801c54:	e0bffc17 	ldw	r2,-16(fp)
  801c58:	10800044 	addi	r2,r2,1
  801c5c:	e0bffc15 	stw	r2,-16(fp)
	return;
}
  801c60:	e037883a 	mov	sp,fp
  801c64:	dfc00517 	ldw	ra,20(sp)
  801c68:	df000417 	ldw	fp,16(sp)
  801c6c:	dcc00317 	ldw	r19,12(sp)
  801c70:	dc800217 	ldw	r18,8(sp)
  801c74:	dc400117 	ldw	r17,4(sp)
  801c78:	dc000017 	ldw	r16,0(sp)
  801c7c:	dec00604 	addi	sp,sp,24
  801c80:	f800283a 	ret

00801c84 <main>:

#define Switches (volatile int *) 0x01001090
#define LEDs 	 (int *) 		  0x01001080

int main()
{
  801c84:	deffc304 	addi	sp,sp,-244
  801c88:	dfc03c15 	stw	ra,240(sp)
  801c8c:	df003b15 	stw	fp,236(sp)
  801c90:	df003b04 	addi	fp,sp,236
	char test;
	char cs;
	char pkt[83];
	char print[] = "Sixteen LCD char";
  801c94:	00c02074 	movhi	r3,129
  801c98:	18cab904 	addi	r3,r3,10980
  801c9c:	1880000b 	ldhu	r2,0(r3)
  801ca0:	e0bfdf8d 	sth	r2,-130(fp)
  801ca4:	1880008b 	ldhu	r2,2(r3)
  801ca8:	e0bfe00d 	sth	r2,-128(fp)
  801cac:	1880010b 	ldhu	r2,4(r3)
  801cb0:	e0bfe08d 	sth	r2,-126(fp)
  801cb4:	1880018b 	ldhu	r2,6(r3)
  801cb8:	e0bfe10d 	sth	r2,-124(fp)
  801cbc:	1880020b 	ldhu	r2,8(r3)
  801cc0:	e0bfe18d 	sth	r2,-122(fp)
  801cc4:	1880028b 	ldhu	r2,10(r3)
  801cc8:	e0bfe20d 	sth	r2,-120(fp)
  801ccc:	1880030b 	ldhu	r2,12(r3)
  801cd0:	e0bfe28d 	sth	r2,-118(fp)
  801cd4:	1880038b 	ldhu	r2,14(r3)
  801cd8:	e0bfe30d 	sth	r2,-116(fp)
  801cdc:	18800403 	ldbu	r2,16(r3)
  801ce0:	e0bfe385 	stb	r2,-114(fp)
	char aorp;
	double height;
	struct packet packet_GGA;
	int temp;
	int time[3]      = {0, 0, 0};
  801ce4:	e03ff715 	stw	zero,-36(fp)
  801ce8:	e03ff815 	stw	zero,-32(fp)
  801cec:	e03ff915 	stw	zero,-28(fp)
	int latitude[3]  = {0, 0, 0};
  801cf0:	e03ffa15 	stw	zero,-24(fp)
  801cf4:	e03ffb15 	stw	zero,-20(fp)
  801cf8:	e03ffc15 	stw	zero,-16(fp)
	int longitude[3] = {0, 0, 0};
  801cfc:	e03ffd15 	stw	zero,-12(fp)
  801d00:	e03ffe15 	stw	zero,-8(fp)
  801d04:	e03fff15 	stw	zero,-4(fp)
  801d08:	00000006 	br	801d0c <main+0x88>

	while(1){
		test=getchar();																/*Gets first character from serial stream             */
  801d0c:	00802074 	movhi	r2,129
  801d10:	10934c04 	addi	r2,r2,19760
  801d14:	10800017 	ldw	r2,0(r2)
  801d18:	11000117 	ldw	r4,4(r2)
  801d1c:	08065940 	call	806594 <getc>
  801d20:	e0bfca85 	stb	r2,-214(fp)

		*LEDs = *Switches;
  801d24:	00c04034 	movhi	r3,256
  801d28:	18c42004 	addi	r3,r3,4224
  801d2c:	00804034 	movhi	r2,256
  801d30:	10842404 	addi	r2,r2,4240
  801d34:	10800017 	ldw	r2,0(r2)
  801d38:	18800015 	stw	r2,0(r3)
		temp  = *LEDs;
  801d3c:	00804034 	movhi	r2,256
  801d40:	10842004 	addi	r2,r2,4224
  801d44:	10800017 	ldw	r2,0(r2)
  801d48:	e0bfc715 	stw	r2,-228(fp)

		if(checksum(test,cs,pkt)){													/*Pipes all the fun stuff to checksum and parse f'ns  */
  801d4c:	e13fca87 	ldb	r4,-214(fp)
  801d50:	e17fca47 	ldb	r5,-215(fp)
  801d54:	e1bfcac4 	addi	r6,fp,-213
  801d58:	08002580 	call	800258 <checksum>
  801d5c:	1005003a 	cmpeq	r2,r2,zero
  801d60:	103fea1e 	bne	r2,zero,801d0c <main+0x88>
			parse_GGA(pkt, &packet_GGA);												/*See gpsparse.h library for full view of functions   */
  801d64:	e13fcac4 	addi	r4,fp,-213
  801d68:	e17fe3c4 	addi	r5,fp,-113
  801d6c:	08005b80 	call	8005b8 <parse_GGA>
			temp = (temp & 0x01);
  801d70:	e0bfc717 	ldw	r2,-228(fp)
  801d74:	1080004c 	andi	r2,r2,1
  801d78:	e0bfc715 	stw	r2,-228(fp)
			if (temp == 1){
  801d7c:	e0bfc717 	ldw	r2,-228(fp)
  801d80:	10800058 	cmpnei	r2,r2,1
  801d84:	1000181e 	bne	r2,zero,801de8 <main+0x164>
				sprintf(print, "Lat:%s%c", packet_GGA.latitude, packet_GGA.ns[0]);
  801d88:	e0bfeac3 	ldbu	r2,-85(fp)
  801d8c:	11c03fcc 	andi	r7,r2,255
  801d90:	39c0201c 	xori	r7,r7,128
  801d94:	39ffe004 	addi	r7,r7,-128
  801d98:	e13fdf84 	addi	r4,fp,-130
  801d9c:	e0bfe3c4 	addi	r2,fp,-113
  801da0:	11800404 	addi	r6,r2,16
  801da4:	01402074 	movhi	r5,129
  801da8:	294a9804 	addi	r5,r5,10848
  801dac:	08073ec0 	call	8073ec <sprintf>
				WriteLCD(print);
  801db0:	e13fdf84 	addi	r4,fp,-130
  801db4:	08001f00 	call	8001f0 <WriteLCD>
				sprintf(print, "Lon:%s%c", packet_GGA.longitude, packet_GGA.ew[0]);
  801db8:	e0bfee43 	ldbu	r2,-71(fp)
  801dbc:	11c03fcc 	andi	r7,r2,255
  801dc0:	39c0201c 	xori	r7,r7,128
  801dc4:	39ffe004 	addi	r7,r7,-128
  801dc8:	e13fdf84 	addi	r4,fp,-130
  801dcc:	e0bfe3c4 	addi	r2,fp,-113
  801dd0:	11800784 	addi	r6,r2,30
  801dd4:	01402074 	movhi	r5,129
  801dd8:	294a9b04 	addi	r5,r5,10860
  801ddc:	08073ec0 	call	8073ec <sprintf>
				WriteLCD(print);
  801de0:	e13fdf84 	addi	r4,fp,-130
  801de4:	08001f00 	call	8001f0 <WriteLCD>
			};
			if (temp == 0){
  801de8:	e0bfc717 	ldw	r2,-228(fp)
  801dec:	1004c03a 	cmpne	r2,r2,zero
  801df0:	1000201e 	bne	r2,zero,801e74 <main+0x1f0>
				aorp = GMT_to_MST(time, packet_GGA.time);
  801df4:	e13ff704 	addi	r4,fp,-36
  801df8:	e0bfe3c4 	addi	r2,fp,-113
  801dfc:	11400184 	addi	r5,r2,6
  801e00:	08011440 	call	801144 <GMT_to_MST>
  801e04:	e0bfca05 	stb	r2,-216(fp)
				sprintf(print, "Time: %d:%02d:%02d%cM", time[0], time[1], time[2], aorp);
  801e08:	e1bff717 	ldw	r6,-36(fp)
  801e0c:	e1fff817 	ldw	r7,-32(fp)
  801e10:	e0bff917 	ldw	r2,-28(fp)
  801e14:	e0ffca07 	ldb	r3,-216(fp)
  801e18:	e13fdf84 	addi	r4,fp,-130
  801e1c:	d8800015 	stw	r2,0(sp)
  801e20:	d8c00115 	stw	r3,4(sp)
  801e24:	01402074 	movhi	r5,129
  801e28:	294a9e04 	addi	r5,r5,10872
  801e2c:	08073ec0 	call	8073ec <sprintf>
				WriteLCD(print);
  801e30:	e13fdf84 	addi	r4,fp,-130
  801e34:	08001f00 	call	8001f0 <WriteLCD>
				height = m_to_ft(packet_GGA.ant_ht);
  801e38:	e0bfe3c4 	addi	r2,fp,-113
  801e3c:	11000d84 	addi	r4,r2,54
  801e40:	080138c0 	call	80138c <m_to_ft>
  801e44:	1009883a 	mov	r4,r2
  801e48:	180b883a 	mov	r5,r3
  801e4c:	e13fc815 	stw	r4,-224(fp)
  801e50:	e17fc915 	stw	r5,-220(fp)
				sprintf(print, "Elev: %5.2f ft", height);
  801e54:	e13fdf84 	addi	r4,fp,-130
  801e58:	01402074 	movhi	r5,129
  801e5c:	294aa404 	addi	r5,r5,10896
  801e60:	e1bfc817 	ldw	r6,-224(fp)
  801e64:	e1ffc917 	ldw	r7,-220(fp)
  801e68:	08073ec0 	call	8073ec <sprintf>
				WriteLCD(print);
  801e6c:	e13fdf84 	addi	r4,fp,-130
  801e70:	08001f00 	call	8001f0 <WriteLCD>
			};
			lat_to_deg(packet_GGA.latitude, latitude);
  801e74:	e0bfe3c4 	addi	r2,fp,-113
  801e78:	11000404 	addi	r4,r2,16
  801e7c:	e17ffa04 	addi	r5,fp,-24
  801e80:	08015240 	call	801524 <lat_to_deg>
			long_to_deg(packet_GGA.longitude, longitude);
  801e84:	e0bfe3c4 	addi	r2,fp,-113
  801e88:	11000784 	addi	r4,r2,30
  801e8c:	e17ffd04 	addi	r5,fp,-12
  801e90:	08018d40 	call	8018d4 <long_to_deg>
			printf("Latitude :  %d deg, %d.%05d min\n", latitude[0], latitude[1], latitude[2]);
  801e94:	e17ffa17 	ldw	r5,-24(fp)
  801e98:	e1bffb17 	ldw	r6,-20(fp)
  801e9c:	e1fffc17 	ldw	r7,-16(fp)
  801ea0:	01002074 	movhi	r4,129
  801ea4:	210aa804 	addi	r4,r4,10912
  801ea8:	08070a00 	call	8070a0 <printf>
			printf("Longitude: %d deg, %d.%05d min\n", longitude[0], longitude[1], longitude[2]);
  801eac:	e17ffd17 	ldw	r5,-12(fp)
  801eb0:	e1bffe17 	ldw	r6,-8(fp)
  801eb4:	e1ffff17 	ldw	r7,-4(fp)
  801eb8:	01002074 	movhi	r4,129
  801ebc:	210ab104 	addi	r4,r4,10948
  801ec0:	08070a00 	call	8070a0 <printf>
		}
	};
  801ec4:	003f9106 	br	801d0c <main+0x88>

00801ec8 <pow>:
  801ec8:	deffee04 	addi	sp,sp,-72
  801ecc:	ddc01015 	stw	r23,64(sp)
  801ed0:	05c02074 	movhi	r23,129
  801ed4:	bdd34b04 	addi	r23,r23,19756
  801ed8:	dd800f15 	stw	r22,60(sp)
  801edc:	dd400e15 	stw	r21,56(sp)
  801ee0:	dd000d15 	stw	r20,52(sp)
  801ee4:	dcc00c15 	stw	r19,48(sp)
  801ee8:	dc800b15 	stw	r18,44(sp)
  801eec:	dc400a15 	stw	r17,40(sp)
  801ef0:	dc000915 	stw	r16,36(sp)
  801ef4:	2029883a 	mov	r20,r4
  801ef8:	dfc01115 	stw	ra,68(sp)
  801efc:	3025883a 	mov	r18,r6
  801f00:	282b883a 	mov	r21,r5
  801f04:	3827883a 	mov	r19,r7
  801f08:	08023500 	call	802350 <__ieee754_pow>
  801f0c:	b9000017 	ldw	r4,0(r23)
  801f10:	05bfffc4 	movi	r22,-1
  801f14:	1021883a 	mov	r16,r2
  801f18:	1823883a 	mov	r17,r3
  801f1c:	25800426 	beq	r4,r22,801f30 <pow+0x68>
  801f20:	9009883a 	mov	r4,r18
  801f24:	980b883a 	mov	r5,r19
  801f28:	080394c0 	call	80394c <__isnand>
  801f2c:	10000d26 	beq	r2,zero,801f64 <pow+0x9c>
  801f30:	8005883a 	mov	r2,r16
  801f34:	8807883a 	mov	r3,r17
  801f38:	dfc01117 	ldw	ra,68(sp)
  801f3c:	ddc01017 	ldw	r23,64(sp)
  801f40:	dd800f17 	ldw	r22,60(sp)
  801f44:	dd400e17 	ldw	r21,56(sp)
  801f48:	dd000d17 	ldw	r20,52(sp)
  801f4c:	dcc00c17 	ldw	r19,48(sp)
  801f50:	dc800b17 	ldw	r18,44(sp)
  801f54:	dc400a17 	ldw	r17,40(sp)
  801f58:	dc000917 	ldw	r16,36(sp)
  801f5c:	dec01204 	addi	sp,sp,72
  801f60:	f800283a 	ret
  801f64:	a009883a 	mov	r4,r20
  801f68:	a80b883a 	mov	r5,r21
  801f6c:	080394c0 	call	80394c <__isnand>
  801f70:	1000151e 	bne	r2,zero,801fc8 <pow+0x100>
  801f74:	000d883a 	mov	r6,zero
  801f78:	000f883a 	mov	r7,zero
  801f7c:	a009883a 	mov	r4,r20
  801f80:	a80b883a 	mov	r5,r21
  801f84:	08048c80 	call	8048c8 <__eqdf2>
  801f88:	1000541e 	bne	r2,zero,8020dc <pow+0x214>
  801f8c:	000d883a 	mov	r6,zero
  801f90:	000f883a 	mov	r7,zero
  801f94:	9009883a 	mov	r4,r18
  801f98:	980b883a 	mov	r5,r19
  801f9c:	08048c80 	call	8048c8 <__eqdf2>
  801fa0:	10002c1e 	bne	r2,zero,802054 <pow+0x18c>
  801fa4:	b8800017 	ldw	r2,0(r23)
  801fa8:	d8000615 	stw	zero,24(sp)
  801fac:	d8000715 	stw	zero,28(sp)
  801fb0:	10001226 	beq	r2,zero,801ffc <pow+0x134>
  801fb4:	008ffc34 	movhi	r2,16368
  801fb8:	d8800715 	stw	r2,28(sp)
  801fbc:	dc000617 	ldw	r16,24(sp)
  801fc0:	dc400717 	ldw	r17,28(sp)
  801fc4:	003fda06 	br	801f30 <pow+0x68>
  801fc8:	000d883a 	mov	r6,zero
  801fcc:	000f883a 	mov	r7,zero
  801fd0:	9009883a 	mov	r4,r18
  801fd4:	980b883a 	mov	r5,r19
  801fd8:	08048c80 	call	8048c8 <__eqdf2>
  801fdc:	103fd41e 	bne	r2,zero,801f30 <pow+0x68>
  801fe0:	b8c00017 	ldw	r3,0(r23)
  801fe4:	010ffc34 	movhi	r4,16368
  801fe8:	d8000615 	stw	zero,24(sp)
  801fec:	d9000715 	stw	r4,28(sp)
  801ff0:	1d801526 	beq	r3,r22,802048 <pow+0x180>
  801ff4:	00800084 	movi	r2,2
  801ff8:	18801326 	beq	r3,r2,802048 <pow+0x180>
  801ffc:	00802074 	movhi	r2,129
  802000:	108abe04 	addi	r2,r2,11000
  802004:	00c00044 	movi	r3,1
  802008:	d809883a 	mov	r4,sp
  80200c:	dcc00515 	stw	r19,20(sp)
  802010:	dd400315 	stw	r21,12(sp)
  802014:	d8800115 	stw	r2,4(sp)
  802018:	d8c00015 	stw	r3,0(sp)
  80201c:	dc800415 	stw	r18,16(sp)
  802020:	dd000215 	stw	r20,8(sp)
  802024:	d8000815 	stw	zero,32(sp)
  802028:	080397c0 	call	80397c <matherr>
  80202c:	10002726 	beq	r2,zero,8020cc <pow+0x204>
  802030:	d8800817 	ldw	r2,32(sp)
  802034:	103fe126 	beq	r2,zero,801fbc <pow+0xf4>
  802038:	080536c0 	call	80536c <__errno>
  80203c:	d8c00817 	ldw	r3,32(sp)
  802040:	10c00015 	stw	r3,0(r2)
  802044:	003fdd06 	br	801fbc <pow+0xf4>
  802048:	d9000715 	stw	r4,28(sp)
  80204c:	d8000615 	stw	zero,24(sp)
  802050:	003fda06 	br	801fbc <pow+0xf4>
  802054:	9009883a 	mov	r4,r18
  802058:	980b883a 	mov	r5,r19
  80205c:	08039300 	call	803930 <finite>
  802060:	103fb326 	beq	r2,zero,801f30 <pow+0x68>
  802064:	000d883a 	mov	r6,zero
  802068:	000f883a 	mov	r7,zero
  80206c:	9009883a 	mov	r4,r18
  802070:	980b883a 	mov	r5,r19
  802074:	0804a600 	call	804a60 <__ltdf2>
  802078:	103fad0e 	bge	r2,zero,801f30 <pow+0x68>
  80207c:	b9000017 	ldw	r4,0(r23)
  802080:	00800044 	movi	r2,1
  802084:	00c02074 	movhi	r3,129
  802088:	18cabe04 	addi	r3,r3,11000
  80208c:	d8800015 	stw	r2,0(sp)
  802090:	d8c00115 	stw	r3,4(sp)
  802094:	dd400315 	stw	r21,12(sp)
  802098:	dcc00515 	stw	r19,20(sp)
  80209c:	d8000815 	stw	zero,32(sp)
  8020a0:	dd000215 	stw	r20,8(sp)
  8020a4:	dc800415 	stw	r18,16(sp)
  8020a8:	20005626 	beq	r4,zero,802204 <pow+0x33c>
  8020ac:	00bffc34 	movhi	r2,65520
  8020b0:	d8800715 	stw	r2,28(sp)
  8020b4:	00800084 	movi	r2,2
  8020b8:	d8000615 	stw	zero,24(sp)
  8020bc:	20800326 	beq	r4,r2,8020cc <pow+0x204>
  8020c0:	d809883a 	mov	r4,sp
  8020c4:	080397c0 	call	80397c <matherr>
  8020c8:	103fd91e 	bne	r2,zero,802030 <pow+0x168>
  8020cc:	080536c0 	call	80536c <__errno>
  8020d0:	00c00844 	movi	r3,33
  8020d4:	10c00015 	stw	r3,0(r2)
  8020d8:	003fd506 	br	802030 <pow+0x168>
  8020dc:	8009883a 	mov	r4,r16
  8020e0:	880b883a 	mov	r5,r17
  8020e4:	08039300 	call	803930 <finite>
  8020e8:	10002426 	beq	r2,zero,80217c <pow+0x2b4>
  8020ec:	000d883a 	mov	r6,zero
  8020f0:	000f883a 	mov	r7,zero
  8020f4:	8009883a 	mov	r4,r16
  8020f8:	880b883a 	mov	r5,r17
  8020fc:	08048c80 	call	8048c8 <__eqdf2>
  802100:	103f8b1e 	bne	r2,zero,801f30 <pow+0x68>
  802104:	a009883a 	mov	r4,r20
  802108:	a80b883a 	mov	r5,r21
  80210c:	08039300 	call	803930 <finite>
  802110:	103f8726 	beq	r2,zero,801f30 <pow+0x68>
  802114:	9009883a 	mov	r4,r18
  802118:	980b883a 	mov	r5,r19
  80211c:	08039300 	call	803930 <finite>
  802120:	103f8326 	beq	r2,zero,801f30 <pow+0x68>
  802124:	b9000017 	ldw	r4,0(r23)
  802128:	00800104 	movi	r2,4
  80212c:	d8800015 	stw	r2,0(sp)
  802130:	00c02074 	movhi	r3,129
  802134:	18cabe04 	addi	r3,r3,11000
  802138:	00800084 	movi	r2,2
  80213c:	d8c00115 	stw	r3,4(sp)
  802140:	dd400315 	stw	r21,12(sp)
  802144:	dcc00515 	stw	r19,20(sp)
  802148:	d8000815 	stw	zero,32(sp)
  80214c:	dd000215 	stw	r20,8(sp)
  802150:	dc800415 	stw	r18,16(sp)
  802154:	d8000615 	stw	zero,24(sp)
  802158:	d8000715 	stw	zero,28(sp)
  80215c:	20800326 	beq	r4,r2,80216c <pow+0x2a4>
  802160:	d809883a 	mov	r4,sp
  802164:	080397c0 	call	80397c <matherr>
  802168:	103fb11e 	bne	r2,zero,802030 <pow+0x168>
  80216c:	080536c0 	call	80536c <__errno>
  802170:	00c00884 	movi	r3,34
  802174:	10c00015 	stw	r3,0(r2)
  802178:	003fad06 	br	802030 <pow+0x168>
  80217c:	a009883a 	mov	r4,r20
  802180:	a80b883a 	mov	r5,r21
  802184:	08039300 	call	803930 <finite>
  802188:	103fd826 	beq	r2,zero,8020ec <pow+0x224>
  80218c:	9009883a 	mov	r4,r18
  802190:	980b883a 	mov	r5,r19
  802194:	08039300 	call	803930 <finite>
  802198:	103fd426 	beq	r2,zero,8020ec <pow+0x224>
  80219c:	880b883a 	mov	r5,r17
  8021a0:	8009883a 	mov	r4,r16
  8021a4:	080394c0 	call	80394c <__isnand>
  8021a8:	10001926 	beq	r2,zero,802210 <pow+0x348>
  8021ac:	bc000017 	ldw	r16,0(r23)
  8021b0:	00800044 	movi	r2,1
  8021b4:	00c02074 	movhi	r3,129
  8021b8:	18cabe04 	addi	r3,r3,11000
  8021bc:	d8800015 	stw	r2,0(sp)
  8021c0:	d8c00115 	stw	r3,4(sp)
  8021c4:	dd400315 	stw	r21,12(sp)
  8021c8:	dcc00515 	stw	r19,20(sp)
  8021cc:	d8000815 	stw	zero,32(sp)
  8021d0:	dd000215 	stw	r20,8(sp)
  8021d4:	dc800415 	stw	r18,16(sp)
  8021d8:	80000a26 	beq	r16,zero,802204 <pow+0x33c>
  8021dc:	0009883a 	mov	r4,zero
  8021e0:	000d883a 	mov	r6,zero
  8021e4:	000b883a 	mov	r5,zero
  8021e8:	000f883a 	mov	r7,zero
  8021ec:	08046700 	call	804670 <__divdf3>
  8021f0:	d8800615 	stw	r2,24(sp)
  8021f4:	00800084 	movi	r2,2
  8021f8:	d8c00715 	stw	r3,28(sp)
  8021fc:	80bfb01e 	bne	r16,r2,8020c0 <pow+0x1f8>
  802200:	003fb206 	br	8020cc <pow+0x204>
  802204:	d8000615 	stw	zero,24(sp)
  802208:	d8000715 	stw	zero,28(sp)
  80220c:	003fac06 	br	8020c0 <pow+0x1f8>
  802210:	b8800017 	ldw	r2,0(r23)
  802214:	00c000c4 	movi	r3,3
  802218:	01002074 	movhi	r4,129
  80221c:	210abe04 	addi	r4,r4,11000
  802220:	d8c00015 	stw	r3,0(sp)
  802224:	d9000115 	stw	r4,4(sp)
  802228:	d8000815 	stw	zero,32(sp)
  80222c:	dd000215 	stw	r20,8(sp)
  802230:	dd400315 	stw	r21,12(sp)
  802234:	dc800415 	stw	r18,16(sp)
  802238:	dcc00515 	stw	r19,20(sp)
  80223c:	1000251e 	bne	r2,zero,8022d4 <pow+0x40c>
  802240:	05b80034 	movhi	r22,57344
  802244:	0091fc34 	movhi	r2,18416
  802248:	10bfffc4 	addi	r2,r2,-1
  80224c:	000d883a 	mov	r6,zero
  802250:	000f883a 	mov	r7,zero
  802254:	a80b883a 	mov	r5,r21
  802258:	a009883a 	mov	r4,r20
  80225c:	d8800715 	stw	r2,28(sp)
  802260:	dd800615 	stw	r22,24(sp)
  802264:	0804a600 	call	804a60 <__ltdf2>
  802268:	103fbd0e 	bge	r2,zero,802160 <pow+0x298>
  80226c:	0005883a 	mov	r2,zero
  802270:	00cff834 	movhi	r3,16352
  802274:	180f883a 	mov	r7,r3
  802278:	100d883a 	mov	r6,r2
  80227c:	980b883a 	mov	r5,r19
  802280:	9009883a 	mov	r4,r18
  802284:	08042ac0 	call	8042ac <__muldf3>
  802288:	1009883a 	mov	r4,r2
  80228c:	180b883a 	mov	r5,r3
  802290:	1021883a 	mov	r16,r2
  802294:	1823883a 	mov	r17,r3
  802298:	08039940 	call	803994 <rint>
  80229c:	180f883a 	mov	r7,r3
  8022a0:	8009883a 	mov	r4,r16
  8022a4:	880b883a 	mov	r5,r17
  8022a8:	100d883a 	mov	r6,r2
  8022ac:	08049500 	call	804950 <__nedf2>
  8022b0:	10000426 	beq	r2,zero,8022c4 <pow+0x3fc>
  8022b4:	00b1fc34 	movhi	r2,51184
  8022b8:	10bfffc4 	addi	r2,r2,-1
  8022bc:	dd800615 	stw	r22,24(sp)
  8022c0:	d8800715 	stw	r2,28(sp)
  8022c4:	b8c00017 	ldw	r3,0(r23)
  8022c8:	00800084 	movi	r2,2
  8022cc:	18bfa41e 	bne	r3,r2,802160 <pow+0x298>
  8022d0:	003fa606 	br	80216c <pow+0x2a4>
  8022d4:	009ffc34 	movhi	r2,32752
  8022d8:	000d883a 	mov	r6,zero
  8022dc:	000f883a 	mov	r7,zero
  8022e0:	a80b883a 	mov	r5,r21
  8022e4:	a009883a 	mov	r4,r20
  8022e8:	d8800715 	stw	r2,28(sp)
  8022ec:	d8000615 	stw	zero,24(sp)
  8022f0:	0804a600 	call	804a60 <__ltdf2>
  8022f4:	103ff30e 	bge	r2,zero,8022c4 <pow+0x3fc>
  8022f8:	0005883a 	mov	r2,zero
  8022fc:	00cff834 	movhi	r3,16352
  802300:	180f883a 	mov	r7,r3
  802304:	100d883a 	mov	r6,r2
  802308:	980b883a 	mov	r5,r19
  80230c:	9009883a 	mov	r4,r18
  802310:	08042ac0 	call	8042ac <__muldf3>
  802314:	1009883a 	mov	r4,r2
  802318:	180b883a 	mov	r5,r3
  80231c:	1021883a 	mov	r16,r2
  802320:	1823883a 	mov	r17,r3
  802324:	08039940 	call	803994 <rint>
  802328:	180f883a 	mov	r7,r3
  80232c:	8009883a 	mov	r4,r16
  802330:	880b883a 	mov	r5,r17
  802334:	100d883a 	mov	r6,r2
  802338:	08049500 	call	804950 <__nedf2>
  80233c:	103fe126 	beq	r2,zero,8022c4 <pow+0x3fc>
  802340:	00bffc34 	movhi	r2,65520
  802344:	d8800715 	stw	r2,28(sp)
  802348:	d8000615 	stw	zero,24(sp)
  80234c:	003fdd06 	br	8022c4 <pow+0x3fc>

00802350 <__ieee754_pow>:
  802350:	deffbb04 	addi	sp,sp,-276
  802354:	3005883a 	mov	r2,r6
  802358:	dd404015 	stw	r21,256(sp)
  80235c:	dd003f15 	stw	r20,252(sp)
  802360:	d9802815 	stw	r6,160(sp)
  802364:	2029883a 	mov	r20,r4
  802368:	282b883a 	mov	r21,r5
  80236c:	3009883a 	mov	r4,r6
  802370:	380b883a 	mov	r5,r7
  802374:	01a00034 	movhi	r6,32768
  802378:	31bfffc4 	addi	r6,r6,-1
  80237c:	dc003b15 	stw	r16,236(sp)
  802380:	29a0703a 	and	r16,r5,r6
  802384:	1404b03a 	or	r2,r2,r16
  802388:	dd804115 	stw	r22,260(sp)
  80238c:	dc403c15 	stw	r17,240(sp)
  802390:	d9c02915 	stw	r7,164(sp)
  802394:	382d883a 	mov	r22,r7
  802398:	dfc04415 	stw	ra,272(sp)
  80239c:	200f883a 	mov	r7,r4
  8023a0:	df004315 	stw	fp,268(sp)
  8023a4:	ddc04215 	stw	r23,264(sp)
  8023a8:	dcc03e15 	stw	r19,248(sp)
  8023ac:	dc803d15 	stw	r18,244(sp)
  8023b0:	a023883a 	mov	r17,r20
  8023b4:	2809883a 	mov	r4,r5
  8023b8:	10000826 	beq	r2,zero,8023dc <__ieee754_pow+0x8c>
  8023bc:	a9a4703a 	and	r18,r21,r6
  8023c0:	009ffc34 	movhi	r2,32752
  8023c4:	a827883a 	mov	r19,r21
  8023c8:	1480180e 	bge	r2,r18,80242c <__ieee754_pow+0xdc>
  8023cc:	00b00434 	movhi	r2,49168
  8023d0:	9085883a 	add	r2,r18,r2
  8023d4:	8884b03a 	or	r2,r17,r2
  8023d8:	1000321e 	bne	r2,zero,8024a4 <__ieee754_pow+0x154>
  8023dc:	0009883a 	mov	r4,zero
  8023e0:	014ffc34 	movhi	r5,16368
  8023e4:	d9002815 	stw	r4,160(sp)
  8023e8:	d9402915 	stw	r5,164(sp)
  8023ec:	d9002817 	ldw	r4,160(sp)
  8023f0:	d9402917 	ldw	r5,164(sp)
  8023f4:	2005883a 	mov	r2,r4
  8023f8:	2807883a 	mov	r3,r5
  8023fc:	dfc04417 	ldw	ra,272(sp)
  802400:	df004317 	ldw	fp,268(sp)
  802404:	ddc04217 	ldw	r23,264(sp)
  802408:	dd804117 	ldw	r22,260(sp)
  80240c:	dd404017 	ldw	r21,256(sp)
  802410:	dd003f17 	ldw	r20,252(sp)
  802414:	dcc03e17 	ldw	r19,248(sp)
  802418:	dc803d17 	ldw	r18,244(sp)
  80241c:	dc403c17 	ldw	r17,240(sp)
  802420:	dc003b17 	ldw	r16,236(sp)
  802424:	dec04504 	addi	sp,sp,276
  802428:	f800283a 	ret
  80242c:	90802b26 	beq	r18,r2,8024dc <__ieee754_pow+0x18c>
  802430:	143fe616 	blt	r2,r16,8023cc <__ieee754_pow+0x7c>
  802434:	80806126 	beq	r16,r2,8025bc <__ieee754_pow+0x26c>
  802438:	982e403a 	cmpge	r23,r19,zero
  80243c:	b8004e26 	beq	r23,zero,802578 <__ieee754_pow+0x228>
  802440:	0039883a 	mov	fp,zero
  802444:	3800281e 	bne	r7,zero,8024e8 <__ieee754_pow+0x198>
  802448:	009ffc34 	movhi	r2,32752
  80244c:	80804f26 	beq	r16,r2,80258c <__ieee754_pow+0x23c>
  802450:	008ffc34 	movhi	r2,16368
  802454:	80808226 	beq	r16,r2,802660 <__ieee754_pow+0x310>
  802458:	00900034 	movhi	r2,16384
  80245c:	20828426 	beq	r4,r2,802e70 <__ieee754_pow+0xb20>
  802460:	008ff834 	movhi	r2,16352
  802464:	2080201e 	bne	r4,r2,8024e8 <__ieee754_pow+0x198>
  802468:	98001f16 	blt	r19,zero,8024e8 <__ieee754_pow+0x198>
  80246c:	a80b883a 	mov	r5,r21
  802470:	a009883a 	mov	r4,r20
  802474:	dfc04417 	ldw	ra,272(sp)
  802478:	df004317 	ldw	fp,268(sp)
  80247c:	ddc04217 	ldw	r23,264(sp)
  802480:	dd804117 	ldw	r22,260(sp)
  802484:	dd404017 	ldw	r21,256(sp)
  802488:	dd003f17 	ldw	r20,252(sp)
  80248c:	dcc03e17 	ldw	r19,248(sp)
  802490:	dc803d17 	ldw	r18,244(sp)
  802494:	dc403c17 	ldw	r17,240(sp)
  802498:	dc003b17 	ldw	r16,236(sp)
  80249c:	dec04504 	addi	sp,sp,276
  8024a0:	08036501 	jmpi	803650 <__ieee754_sqrt>
  8024a4:	01002074 	movhi	r4,129
  8024a8:	210b2404 	addi	r4,r4,11408
  8024ac:	dfc04417 	ldw	ra,272(sp)
  8024b0:	df004317 	ldw	fp,268(sp)
  8024b4:	ddc04217 	ldw	r23,264(sp)
  8024b8:	dd804117 	ldw	r22,260(sp)
  8024bc:	dd404017 	ldw	r21,256(sp)
  8024c0:	dd003f17 	ldw	r20,252(sp)
  8024c4:	dcc03e17 	ldw	r19,248(sp)
  8024c8:	dc803d17 	ldw	r18,244(sp)
  8024cc:	dc403c17 	ldw	r17,240(sp)
  8024d0:	dc003b17 	ldw	r16,236(sp)
  8024d4:	dec04504 	addi	sp,sp,276
  8024d8:	08039841 	jmpi	803984 <nan>
  8024dc:	a03fbb1e 	bne	r20,zero,8023cc <__ieee754_pow+0x7c>
  8024e0:	003fd306 	br	802430 <__ieee754_pow+0xe0>
  8024e4:	0039883a 	mov	fp,zero
  8024e8:	a009883a 	mov	r4,r20
  8024ec:	a80b883a 	mov	r5,r21
  8024f0:	08039180 	call	803918 <fabs>
  8024f4:	1015883a 	mov	r10,r2
  8024f8:	1817883a 	mov	r11,r3
  8024fc:	88001226 	beq	r17,zero,802548 <__ieee754_pow+0x1f8>
  802500:	9804d7fa 	srli	r2,r19,31
  802504:	10bfffc4 	addi	r2,r2,-1
  802508:	1706b03a 	or	r3,r2,fp
  80250c:	d8802515 	stw	r2,148(sp)
  802510:	18002c1e 	bne	r3,zero,8025c4 <__ieee754_pow+0x274>
  802514:	a80f883a 	mov	r7,r21
  802518:	a009883a 	mov	r4,r20
  80251c:	a80b883a 	mov	r5,r21
  802520:	a00d883a 	mov	r6,r20
  802524:	08041b80 	call	8041b8 <__subdf3>
  802528:	1009883a 	mov	r4,r2
  80252c:	180b883a 	mov	r5,r3
  802530:	100d883a 	mov	r6,r2
  802534:	180f883a 	mov	r7,r3
  802538:	08046700 	call	804670 <__divdf3>
  80253c:	d8802815 	stw	r2,160(sp)
  802540:	d8c02915 	stw	r3,164(sp)
  802544:	003fa906 	br	8023ec <__ieee754_pow+0x9c>
  802548:	009ffc34 	movhi	r2,32752
  80254c:	90800326 	beq	r18,r2,80255c <__ieee754_pow+0x20c>
  802550:	90000226 	beq	r18,zero,80255c <__ieee754_pow+0x20c>
  802554:	008ffc34 	movhi	r2,16368
  802558:	90bfe91e 	bne	r18,r2,802500 <__ieee754_pow+0x1b0>
  80255c:	b0026316 	blt	r22,zero,802eec <__ieee754_pow+0xb9c>
  802560:	5011883a 	mov	r8,r10
  802564:	5813883a 	mov	r9,r11
  802568:	b8023126 	beq	r23,zero,802e30 <__ieee754_pow+0xae0>
  80256c:	da002815 	stw	r8,160(sp)
  802570:	da402915 	stw	r9,164(sp)
  802574:	003f9d06 	br	8023ec <__ieee754_pow+0x9c>
  802578:	0090d034 	movhi	r2,17216
  80257c:	10bfffc4 	addi	r2,r2,-1
  802580:	1400270e 	bge	r2,r16,802620 <__ieee754_pow+0x2d0>
  802584:	07000084 	movi	fp,2
  802588:	003fae06 	br	802444 <__ieee754_pow+0xf4>
  80258c:	00b00434 	movhi	r2,49168
  802590:	9085883a 	add	r2,r18,r2
  802594:	8884b03a 	or	r2,r17,r2
  802598:	103f9026 	beq	r2,zero,8023dc <__ieee754_pow+0x8c>
  80259c:	008ffc34 	movhi	r2,16368
  8025a0:	10bfffc4 	addi	r2,r2,-1
  8025a4:	1482d00e 	bge	r2,r18,8030e8 <__ieee754_pow+0xd98>
  8025a8:	b03f900e 	bge	r22,zero,8023ec <__ieee754_pow+0x9c>
  8025ac:	0005883a 	mov	r2,zero
  8025b0:	d8802815 	stw	r2,160(sp)
  8025b4:	d8802915 	stw	r2,164(sp)
  8025b8:	003f8c06 	br	8023ec <__ieee754_pow+0x9c>
  8025bc:	383f9e26 	beq	r7,zero,802438 <__ieee754_pow+0xe8>
  8025c0:	003f8206 	br	8023cc <__ieee754_pow+0x7c>
  8025c4:	00907834 	movhi	r2,16864
  8025c8:	1400290e 	bge	r2,r16,802670 <__ieee754_pow+0x320>
  8025cc:	0090fc34 	movhi	r2,17392
  8025d0:	1402500e 	bge	r2,r16,802f14 <__ieee754_pow+0xbc4>
  8025d4:	008ffc34 	movhi	r2,16368
  8025d8:	10bfffc4 	addi	r2,r2,-1
  8025dc:	14800b0e 	bge	r2,r18,80260c <__ieee754_pow+0x2bc>
  8025e0:	05800b0e 	bge	zero,r22,802610 <__ieee754_pow+0x2c0>
  8025e4:	00a20034 	movhi	r2,34816
  8025e8:	109d6704 	addi	r2,r2,30108
  8025ec:	00df8e34 	movhi	r3,32312
  8025f0:	18f90f04 	addi	r3,r3,-7108
  8025f4:	100d883a 	mov	r6,r2
  8025f8:	180f883a 	mov	r7,r3
  8025fc:	1009883a 	mov	r4,r2
  802600:	180b883a 	mov	r5,r3
  802604:	08042ac0 	call	8042ac <__muldf3>
  802608:	003fcc06 	br	80253c <__ieee754_pow+0x1ec>
  80260c:	b03ff516 	blt	r22,zero,8025e4 <__ieee754_pow+0x294>
  802610:	0007883a 	mov	r3,zero
  802614:	d8c02815 	stw	r3,160(sp)
  802618:	d8c02915 	stw	r3,164(sp)
  80261c:	003f7306 	br	8023ec <__ieee754_pow+0x9c>
  802620:	008ffc34 	movhi	r2,16368
  802624:	10bfffc4 	addi	r2,r2,-1
  802628:	143f850e 	bge	r2,r16,802440 <__ieee754_pow+0xf0>
  80262c:	8005d53a 	srai	r2,r16,20
  802630:	01400504 	movi	r5,20
  802634:	10ff0044 	addi	r3,r2,-1023
  802638:	28c3e10e 	bge	r5,r3,8035c0 <__ieee754_pow+0x1270>
  80263c:	00800d04 	movi	r2,52
  802640:	10c5c83a 	sub	r2,r2,r3
  802644:	3886d83a 	srl	r3,r7,r2
  802648:	1884983a 	sll	r2,r3,r2
  80264c:	38bf7c1e 	bne	r7,r2,802440 <__ieee754_pow+0xf0>
  802650:	18c0004c 	andi	r3,r3,1
  802654:	00800084 	movi	r2,2
  802658:	10f9c83a 	sub	fp,r2,r3
  80265c:	003f7906 	br	802444 <__ieee754_pow+0xf4>
  802660:	b0038516 	blt	r22,zero,803478 <__ieee754_pow+0x1128>
  802664:	dd002815 	stw	r20,160(sp)
  802668:	dd402915 	stw	r21,164(sp)
  80266c:	003f5f06 	br	8023ec <__ieee754_pow+0x9c>
  802670:	00800434 	movhi	r2,16
  802674:	10bfffc4 	addi	r2,r2,-1
  802678:	1482900e 	bge	r2,r18,8030bc <__ieee754_pow+0xd6c>
  80267c:	000b883a 	mov	r5,zero
  802680:	9005d53a 	srai	r2,r18,20
  802684:	00c00434 	movhi	r3,16
  802688:	18ffffc4 	addi	r3,r3,-1
  80268c:	90c8703a 	and	r4,r18,r3
  802690:	2887883a 	add	r3,r5,r2
  802694:	18bf0044 	addi	r2,r3,-1023
  802698:	d8800015 	stw	r2,0(sp)
  80269c:	00800134 	movhi	r2,4
  8026a0:	10a62384 	addi	r2,r2,-26482
  8026a4:	250ffc34 	orhi	r20,r4,16368
  8026a8:	1101ee0e 	bge	r2,r4,802e64 <__ieee754_pow+0xb14>
  8026ac:	00800334 	movhi	r2,12
  8026b0:	10ad9e44 	addi	r2,r2,-18823
  8026b4:	1101e716 	blt	r2,r4,802e54 <__ieee754_pow+0xb04>
  8026b8:	01000044 	movi	r4,1
  8026bc:	04000334 	movhi	r16,12
  8026c0:	200890fa 	slli	r4,r4,3
  8026c4:	da800115 	stw	r10,4(sp)
  8026c8:	dd000215 	stw	r20,8(sp)
  8026cc:	d9002c15 	stw	r4,176(sp)
  8026d0:	d9402c17 	ldw	r5,176(sp)
  8026d4:	01002074 	movhi	r4,129
  8026d8:	210abf04 	addi	r4,r4,11004
  8026dc:	a02bd07a 	srai	r21,r20,1
  8026e0:	2909883a 	add	r4,r5,r4
  8026e4:	25800017 	ldw	r22,0(r4)
  8026e8:	25c00117 	ldw	r23,4(r4)
  8026ec:	a00b883a 	mov	r5,r20
  8026f0:	5009883a 	mov	r4,r10
  8026f4:	b00d883a 	mov	r6,r22
  8026f8:	b80f883a 	mov	r7,r23
  8026fc:	08041b80 	call	8041b8 <__subdf3>
  802700:	d9000117 	ldw	r4,4(sp)
  802704:	a00b883a 	mov	r5,r20
  802708:	b00d883a 	mov	r6,r22
  80270c:	b80f883a 	mov	r7,r23
  802710:	1025883a 	mov	r18,r2
  802714:	1827883a 	mov	r19,r3
  802718:	08042380 	call	804238 <__adddf3>
  80271c:	0011883a 	mov	r8,zero
  802720:	024ffc34 	movhi	r9,16368
  802724:	480b883a 	mov	r5,r9
  802728:	4009883a 	mov	r4,r8
  80272c:	180f883a 	mov	r7,r3
  802730:	100d883a 	mov	r6,r2
  802734:	08046700 	call	804670 <__divdf3>
  802738:	d8c02e15 	stw	r3,184(sp)
  80273c:	d8800f15 	stw	r2,60(sp)
  802740:	d8802d15 	stw	r2,180(sp)
  802744:	d8802e17 	ldw	r2,184(sp)
  802748:	d9800f17 	ldw	r6,60(sp)
  80274c:	9009883a 	mov	r4,r18
  802750:	980b883a 	mov	r5,r19
  802754:	100f883a 	mov	r7,r2
  802758:	dc800b15 	stw	r18,44(sp)
  80275c:	dcc00c15 	stw	r19,48(sp)
  802760:	d8801015 	stw	r2,64(sp)
  802764:	08042ac0 	call	8042ac <__muldf3>
  802768:	d8c03015 	stw	r3,192(sp)
  80276c:	d9003017 	ldw	r4,192(sp)
  802770:	d8802f15 	stw	r2,188(sp)
  802774:	d8800315 	stw	r2,12(sp)
  802778:	ad480034 	orhi	r21,r21,8192
  80277c:	0005883a 	mov	r2,zero
  802780:	ac2b883a 	add	r21,r21,r16
  802784:	000b883a 	mov	r5,zero
  802788:	1021883a 	mov	r16,r2
  80278c:	2005883a 	mov	r2,r4
  802790:	800d883a 	mov	r6,r16
  802794:	a80f883a 	mov	r7,r21
  802798:	d9000415 	stw	r4,16(sp)
  80279c:	d9002715 	stw	r4,156(sp)
  8027a0:	d9402615 	stw	r5,152(sp)
  8027a4:	d9401615 	stw	r5,88(sp)
  8027a8:	d9001715 	stw	r4,92(sp)
  8027ac:	100b883a 	mov	r5,r2
  8027b0:	0009883a 	mov	r4,zero
  8027b4:	08042ac0 	call	8042ac <__muldf3>
  8027b8:	d9000b17 	ldw	r4,44(sp)
  8027bc:	980b883a 	mov	r5,r19
  8027c0:	180f883a 	mov	r7,r3
  8027c4:	100d883a 	mov	r6,r2
  8027c8:	08041b80 	call	8041b8 <__subdf3>
  8027cc:	8009883a 	mov	r4,r16
  8027d0:	a80b883a 	mov	r5,r21
  8027d4:	b80f883a 	mov	r7,r23
  8027d8:	b00d883a 	mov	r6,r22
  8027dc:	1021883a 	mov	r16,r2
  8027e0:	1823883a 	mov	r17,r3
  8027e4:	08041b80 	call	8041b8 <__subdf3>
  8027e8:	d9000117 	ldw	r4,4(sp)
  8027ec:	a00b883a 	mov	r5,r20
  8027f0:	180f883a 	mov	r7,r3
  8027f4:	100d883a 	mov	r6,r2
  8027f8:	08041b80 	call	8041b8 <__subdf3>
  8027fc:	d9001617 	ldw	r4,88(sp)
  802800:	d9402717 	ldw	r5,156(sp)
  802804:	180f883a 	mov	r7,r3
  802808:	100d883a 	mov	r6,r2
  80280c:	08042ac0 	call	8042ac <__muldf3>
  802810:	180f883a 	mov	r7,r3
  802814:	880b883a 	mov	r5,r17
  802818:	8009883a 	mov	r4,r16
  80281c:	100d883a 	mov	r6,r2
  802820:	08041b80 	call	8041b8 <__subdf3>
  802824:	d9000f17 	ldw	r4,60(sp)
  802828:	d9402e17 	ldw	r5,184(sp)
  80282c:	180f883a 	mov	r7,r3
  802830:	100d883a 	mov	r6,r2
  802834:	08042ac0 	call	8042ac <__muldf3>
  802838:	d9000317 	ldw	r4,12(sp)
  80283c:	d9403017 	ldw	r5,192(sp)
  802840:	d8803115 	stw	r2,196(sp)
  802844:	200d883a 	mov	r6,r4
  802848:	280f883a 	mov	r7,r5
  80284c:	d8c03215 	stw	r3,200(sp)
  802850:	08042ac0 	call	8042ac <__muldf3>
  802854:	1009883a 	mov	r4,r2
  802858:	180b883a 	mov	r5,r3
  80285c:	100d883a 	mov	r6,r2
  802860:	180f883a 	mov	r7,r3
  802864:	1021883a 	mov	r16,r2
  802868:	1823883a 	mov	r17,r3
  80286c:	08042ac0 	call	8042ac <__muldf3>
  802870:	02129174 	movhi	r8,19013
  802874:	4213bbc4 	addi	r8,r8,20207
  802878:	024ff2b4 	movhi	r9,16330
  80287c:	4a5f8a04 	addi	r9,r9,32296
  802880:	480f883a 	mov	r7,r9
  802884:	8009883a 	mov	r4,r16
  802888:	880b883a 	mov	r5,r17
  80288c:	400d883a 	mov	r6,r8
  802890:	1029883a 	mov	r20,r2
  802894:	182b883a 	mov	r21,r3
  802898:	08042ac0 	call	8042ac <__muldf3>
  80289c:	0224f2b4 	movhi	r8,37834
  8028a0:	4236d944 	addi	r8,r8,-9371
  8028a4:	024ff3b4 	movhi	r9,16334
  8028a8:	4a619284 	addi	r9,r9,-31158
  8028ac:	480f883a 	mov	r7,r9
  8028b0:	400d883a 	mov	r6,r8
  8028b4:	180b883a 	mov	r5,r3
  8028b8:	1009883a 	mov	r4,r2
  8028bc:	08042380 	call	804238 <__adddf3>
  8028c0:	180f883a 	mov	r7,r3
  8028c4:	8009883a 	mov	r4,r16
  8028c8:	880b883a 	mov	r5,r17
  8028cc:	100d883a 	mov	r6,r2
  8028d0:	08042ac0 	call	8042ac <__muldf3>
  8028d4:	022a4774 	movhi	r8,43293
  8028d8:	42104044 	addi	r8,r8,16641
  8028dc:	024ff474 	movhi	r9,16337
  8028e0:	4a5d1804 	addi	r9,r9,29792
  8028e4:	480f883a 	mov	r7,r9
  8028e8:	400d883a 	mov	r6,r8
  8028ec:	180b883a 	mov	r5,r3
  8028f0:	1009883a 	mov	r4,r2
  8028f4:	08042380 	call	804238 <__adddf3>
  8028f8:	180f883a 	mov	r7,r3
  8028fc:	8009883a 	mov	r4,r16
  802900:	880b883a 	mov	r5,r17
  802904:	100d883a 	mov	r6,r2
  802908:	08042ac0 	call	8042ac <__muldf3>
  80290c:	021463f4 	movhi	r8,20879
  802910:	42099344 	addi	r8,r8,9805
  802914:	024ff574 	movhi	r9,16341
  802918:	4a555544 	addi	r9,r9,21845
  80291c:	480f883a 	mov	r7,r9
  802920:	400d883a 	mov	r6,r8
  802924:	180b883a 	mov	r5,r3
  802928:	1009883a 	mov	r4,r2
  80292c:	08042380 	call	804238 <__adddf3>
  802930:	180f883a 	mov	r7,r3
  802934:	8009883a 	mov	r4,r16
  802938:	880b883a 	mov	r5,r17
  80293c:	100d883a 	mov	r6,r2
  802940:	08042ac0 	call	8042ac <__muldf3>
  802944:	0236dc34 	movhi	r8,56176
  802948:	422affc4 	addi	r8,r8,-21505
  80294c:	024ff6f4 	movhi	r9,16347
  802950:	4a5b6d84 	addi	r9,r9,28086
  802954:	480f883a 	mov	r7,r9
  802958:	400d883a 	mov	r6,r8
  80295c:	180b883a 	mov	r5,r3
  802960:	1009883a 	mov	r4,r2
  802964:	08042380 	call	804238 <__adddf3>
  802968:	180f883a 	mov	r7,r3
  80296c:	8009883a 	mov	r4,r16
  802970:	880b883a 	mov	r5,r17
  802974:	100d883a 	mov	r6,r2
  802978:	08042ac0 	call	8042ac <__muldf3>
  80297c:	020cccf4 	movhi	r8,13107
  802980:	420cc0c4 	addi	r8,r8,13059
  802984:	024ff8f4 	movhi	r9,16355
  802988:	4a4cccc4 	addi	r9,r9,13107
  80298c:	480f883a 	mov	r7,r9
  802990:	400d883a 	mov	r6,r8
  802994:	180b883a 	mov	r5,r3
  802998:	1009883a 	mov	r4,r2
  80299c:	08042380 	call	804238 <__adddf3>
  8029a0:	180f883a 	mov	r7,r3
  8029a4:	a80b883a 	mov	r5,r21
  8029a8:	a009883a 	mov	r4,r20
  8029ac:	100d883a 	mov	r6,r2
  8029b0:	08042ac0 	call	8042ac <__muldf3>
  8029b4:	d9000317 	ldw	r4,12(sp)
  8029b8:	d9403017 	ldw	r5,192(sp)
  8029bc:	d9801617 	ldw	r6,88(sp)
  8029c0:	d9c02717 	ldw	r7,156(sp)
  8029c4:	1021883a 	mov	r16,r2
  8029c8:	1823883a 	mov	r17,r3
  8029cc:	08042380 	call	804238 <__adddf3>
  8029d0:	d9003117 	ldw	r4,196(sp)
  8029d4:	d9403217 	ldw	r5,200(sp)
  8029d8:	180f883a 	mov	r7,r3
  8029dc:	100d883a 	mov	r6,r2
  8029e0:	d9001415 	stw	r4,80(sp)
  8029e4:	d9401515 	stw	r5,84(sp)
  8029e8:	08042ac0 	call	8042ac <__muldf3>
  8029ec:	180f883a 	mov	r7,r3
  8029f0:	8009883a 	mov	r4,r16
  8029f4:	880b883a 	mov	r5,r17
  8029f8:	100d883a 	mov	r6,r2
  8029fc:	08042380 	call	804238 <__adddf3>
  802a00:	d9001617 	ldw	r4,88(sp)
  802a04:	d9402717 	ldw	r5,156(sp)
  802a08:	d8803315 	stw	r2,204(sp)
  802a0c:	200d883a 	mov	r6,r4
  802a10:	280f883a 	mov	r7,r5
  802a14:	d8c03415 	stw	r3,208(sp)
  802a18:	08042ac0 	call	8042ac <__muldf3>
  802a1c:	182f883a 	mov	r23,r3
  802a20:	05500234 	movhi	r21,16392
  802a24:	0029883a 	mov	r20,zero
  802a28:	b80b883a 	mov	r5,r23
  802a2c:	a00d883a 	mov	r6,r20
  802a30:	a80f883a 	mov	r7,r21
  802a34:	1009883a 	mov	r4,r2
  802a38:	d8800715 	stw	r2,28(sp)
  802a3c:	d8c00815 	stw	r3,32(sp)
  802a40:	08042380 	call	804238 <__adddf3>
  802a44:	d9003317 	ldw	r4,204(sp)
  802a48:	d9403417 	ldw	r5,208(sp)
  802a4c:	180f883a 	mov	r7,r3
  802a50:	100d883a 	mov	r6,r2
  802a54:	d9000515 	stw	r4,20(sp)
  802a58:	d9400615 	stw	r5,24(sp)
  802a5c:	08042380 	call	804238 <__adddf3>
  802a60:	d9001617 	ldw	r4,88(sp)
  802a64:	d9402717 	ldw	r5,156(sp)
  802a68:	0025883a 	mov	r18,zero
  802a6c:	900d883a 	mov	r6,r18
  802a70:	180f883a 	mov	r7,r3
  802a74:	1823883a 	mov	r17,r3
  802a78:	08042ac0 	call	8042ac <__muldf3>
  802a7c:	d9001417 	ldw	r4,80(sp)
  802a80:	d9403217 	ldw	r5,200(sp)
  802a84:	880f883a 	mov	r7,r17
  802a88:	900d883a 	mov	r6,r18
  802a8c:	d8803515 	stw	r2,212(sp)
  802a90:	d8c03615 	stw	r3,216(sp)
  802a94:	08042ac0 	call	8042ac <__muldf3>
  802a98:	a80f883a 	mov	r7,r21
  802a9c:	880b883a 	mov	r5,r17
  802aa0:	000d883a 	mov	r6,zero
  802aa4:	9009883a 	mov	r4,r18
  802aa8:	1021883a 	mov	r16,r2
  802aac:	1823883a 	mov	r17,r3
  802ab0:	08041b80 	call	8041b8 <__subdf3>
  802ab4:	d9800717 	ldw	r6,28(sp)
  802ab8:	b80f883a 	mov	r7,r23
  802abc:	180b883a 	mov	r5,r3
  802ac0:	1009883a 	mov	r4,r2
  802ac4:	08041b80 	call	8041b8 <__subdf3>
  802ac8:	d9000517 	ldw	r4,20(sp)
  802acc:	d9403417 	ldw	r5,208(sp)
  802ad0:	180f883a 	mov	r7,r3
  802ad4:	100d883a 	mov	r6,r2
  802ad8:	08041b80 	call	8041b8 <__subdf3>
  802adc:	d9000317 	ldw	r4,12(sp)
  802ae0:	d9403017 	ldw	r5,192(sp)
  802ae4:	180f883a 	mov	r7,r3
  802ae8:	100d883a 	mov	r6,r2
  802aec:	08042ac0 	call	8042ac <__muldf3>
  802af0:	180f883a 	mov	r7,r3
  802af4:	880b883a 	mov	r5,r17
  802af8:	8009883a 	mov	r4,r16
  802afc:	100d883a 	mov	r6,r2
  802b00:	08042380 	call	804238 <__adddf3>
  802b04:	102d883a 	mov	r22,r2
  802b08:	d9003617 	ldw	r4,216(sp)
  802b0c:	d8803517 	ldw	r2,212(sp)
  802b10:	d9403617 	ldw	r5,216(sp)
  802b14:	182f883a 	mov	r23,r3
  802b18:	b00d883a 	mov	r6,r22
  802b1c:	b80f883a 	mov	r7,r23
  802b20:	d9000a15 	stw	r4,40(sp)
  802b24:	1009883a 	mov	r4,r2
  802b28:	054ffbf4 	movhi	r21,16367
  802b2c:	ad71c244 	addi	r21,r21,-14583
  802b30:	dd800d15 	stw	r22,52(sp)
  802b34:	ddc00e15 	stw	r23,56(sp)
  802b38:	05380034 	movhi	r20,57344
  802b3c:	d8800915 	stw	r2,36(sp)
  802b40:	08042380 	call	804238 <__adddf3>
  802b44:	180b883a 	mov	r5,r3
  802b48:	a00d883a 	mov	r6,r20
  802b4c:	a80f883a 	mov	r7,r21
  802b50:	9009883a 	mov	r4,r18
  802b54:	1823883a 	mov	r17,r3
  802b58:	08042ac0 	call	8042ac <__muldf3>
  802b5c:	020516f4 	movhi	r8,5211
  802b60:	42007d44 	addi	r8,r8,501
  802b64:	026f8fb4 	movhi	r9,48702
  802b68:	4a4bf804 	addi	r9,r9,12256
  802b6c:	480f883a 	mov	r7,r9
  802b70:	400d883a 	mov	r6,r8
  802b74:	880b883a 	mov	r5,r17
  802b78:	9009883a 	mov	r4,r18
  802b7c:	d8803715 	stw	r2,220(sp)
  802b80:	d8c03815 	stw	r3,224(sp)
  802b84:	08042ac0 	call	8042ac <__muldf3>
  802b88:	d9800917 	ldw	r6,36(sp)
  802b8c:	d9c03617 	ldw	r7,216(sp)
  802b90:	880b883a 	mov	r5,r17
  802b94:	9009883a 	mov	r4,r18
  802b98:	1021883a 	mov	r16,r2
  802b9c:	1823883a 	mov	r17,r3
  802ba0:	08041b80 	call	8041b8 <__subdf3>
  802ba4:	d9000d17 	ldw	r4,52(sp)
  802ba8:	b80b883a 	mov	r5,r23
  802bac:	180f883a 	mov	r7,r3
  802bb0:	100d883a 	mov	r6,r2
  802bb4:	08041b80 	call	8041b8 <__subdf3>
  802bb8:	180b883a 	mov	r5,r3
  802bbc:	a80f883a 	mov	r7,r21
  802bc0:	01b70eb4 	movhi	r6,56378
  802bc4:	3180ff44 	addi	r6,r6,1021
  802bc8:	1009883a 	mov	r4,r2
  802bcc:	08042ac0 	call	8042ac <__muldf3>
  802bd0:	180f883a 	mov	r7,r3
  802bd4:	880b883a 	mov	r5,r17
  802bd8:	8009883a 	mov	r4,r16
  802bdc:	100d883a 	mov	r6,r2
  802be0:	08042380 	call	804238 <__adddf3>
  802be4:	d9402c17 	ldw	r5,176(sp)
  802be8:	01002074 	movhi	r4,129
  802bec:	210ac304 	addi	r4,r4,11020
  802bf0:	2909883a 	add	r4,r5,r4
  802bf4:	22400117 	ldw	r9,4(r4)
  802bf8:	22000017 	ldw	r8,0(r4)
  802bfc:	180b883a 	mov	r5,r3
  802c00:	480f883a 	mov	r7,r9
  802c04:	400d883a 	mov	r6,r8
  802c08:	1009883a 	mov	r4,r2
  802c0c:	08042380 	call	804238 <__adddf3>
  802c10:	d9000017 	ldw	r4,0(sp)
  802c14:	182f883a 	mov	r23,r3
  802c18:	102d883a 	mov	r22,r2
  802c1c:	0804b700 	call	804b70 <__floatsidf>
  802c20:	d9402c17 	ldw	r5,176(sp)
  802c24:	01002074 	movhi	r4,129
  802c28:	210ac704 	addi	r4,r4,11036
  802c2c:	b00d883a 	mov	r6,r22
  802c30:	2911883a 	add	r8,r5,r4
  802c34:	d9003717 	ldw	r4,220(sp)
  802c38:	d9403817 	ldw	r5,224(sp)
  802c3c:	45000017 	ldw	r20,0(r8)
  802c40:	d9002315 	stw	r4,140(sp)
  802c44:	d9003817 	ldw	r4,224(sp)
  802c48:	45400117 	ldw	r21,4(r8)
  802c4c:	b80f883a 	mov	r7,r23
  802c50:	d9002415 	stw	r4,144(sp)
  802c54:	d9002317 	ldw	r4,140(sp)
  802c58:	1021883a 	mov	r16,r2
  802c5c:	1823883a 	mov	r17,r3
  802c60:	dd802115 	stw	r22,132(sp)
  802c64:	ddc02215 	stw	r23,136(sp)
  802c68:	08042380 	call	804238 <__adddf3>
  802c6c:	180b883a 	mov	r5,r3
  802c70:	1009883a 	mov	r4,r2
  802c74:	a00d883a 	mov	r6,r20
  802c78:	a80f883a 	mov	r7,r21
  802c7c:	08042380 	call	804238 <__adddf3>
  802c80:	180f883a 	mov	r7,r3
  802c84:	8009883a 	mov	r4,r16
  802c88:	880b883a 	mov	r5,r17
  802c8c:	100d883a 	mov	r6,r2
  802c90:	08042380 	call	804238 <__adddf3>
  802c94:	180b883a 	mov	r5,r3
  802c98:	0009883a 	mov	r4,zero
  802c9c:	800d883a 	mov	r6,r16
  802ca0:	880f883a 	mov	r7,r17
  802ca4:	d9001b15 	stw	r4,108(sp)
  802ca8:	d8c01c15 	stw	r3,112(sp)
  802cac:	08041b80 	call	8041b8 <__subdf3>
  802cb0:	180b883a 	mov	r5,r3
  802cb4:	a80f883a 	mov	r7,r21
  802cb8:	1009883a 	mov	r4,r2
  802cbc:	a00d883a 	mov	r6,r20
  802cc0:	08041b80 	call	8041b8 <__subdf3>
  802cc4:	d9802317 	ldw	r6,140(sp)
  802cc8:	d9c03817 	ldw	r7,224(sp)
  802ccc:	180b883a 	mov	r5,r3
  802cd0:	1009883a 	mov	r4,r2
  802cd4:	08041b80 	call	8041b8 <__subdf3>
  802cd8:	d9002117 	ldw	r4,132(sp)
  802cdc:	1011883a 	mov	r8,r2
  802ce0:	1813883a 	mov	r9,r3
  802ce4:	b80b883a 	mov	r5,r23
  802ce8:	480f883a 	mov	r7,r9
  802cec:	400d883a 	mov	r6,r8
  802cf0:	08041b80 	call	8041b8 <__subdf3>
  802cf4:	1823883a 	mov	r17,r3
  802cf8:	d8c02517 	ldw	r3,148(sp)
  802cfc:	1021883a 	mov	r16,r2
  802d00:	e0bfffc4 	addi	r2,fp,-1
  802d04:	1884b03a 	or	r2,r3,r2
  802d08:	1000731e 	bne	r2,zero,802ed8 <__ieee754_pow+0xb88>
  802d0c:	0009883a 	mov	r4,zero
  802d10:	016ffc34 	movhi	r5,49136
  802d14:	d9001915 	stw	r4,100(sp)
  802d18:	d9401a15 	stw	r5,104(sp)
  802d1c:	d9402917 	ldw	r5,164(sp)
  802d20:	d9002817 	ldw	r4,160(sp)
  802d24:	0029883a 	mov	r20,zero
  802d28:	a00d883a 	mov	r6,r20
  802d2c:	280f883a 	mov	r7,r5
  802d30:	2827883a 	mov	r19,r5
  802d34:	08041b80 	call	8041b8 <__subdf3>
  802d38:	d9001b17 	ldw	r4,108(sp)
  802d3c:	d9401c17 	ldw	r5,112(sp)
  802d40:	180f883a 	mov	r7,r3
  802d44:	100d883a 	mov	r6,r2
  802d48:	08042ac0 	call	8042ac <__muldf3>
  802d4c:	d9c02917 	ldw	r7,164(sp)
  802d50:	d9802817 	ldw	r6,160(sp)
  802d54:	880b883a 	mov	r5,r17
  802d58:	8009883a 	mov	r4,r16
  802d5c:	1823883a 	mov	r17,r3
  802d60:	1021883a 	mov	r16,r2
  802d64:	08042ac0 	call	8042ac <__muldf3>
  802d68:	180f883a 	mov	r7,r3
  802d6c:	880b883a 	mov	r5,r17
  802d70:	8009883a 	mov	r4,r16
  802d74:	100d883a 	mov	r6,r2
  802d78:	08042380 	call	804238 <__adddf3>
  802d7c:	d9401c17 	ldw	r5,112(sp)
  802d80:	d9001b17 	ldw	r4,108(sp)
  802d84:	a00d883a 	mov	r6,r20
  802d88:	980f883a 	mov	r7,r19
  802d8c:	1029883a 	mov	r20,r2
  802d90:	182b883a 	mov	r21,r3
  802d94:	08042ac0 	call	8042ac <__muldf3>
  802d98:	1025883a 	mov	r18,r2
  802d9c:	1827883a 	mov	r19,r3
  802da0:	a009883a 	mov	r4,r20
  802da4:	a80b883a 	mov	r5,r21
  802da8:	900d883a 	mov	r6,r18
  802dac:	980f883a 	mov	r7,r19
  802db0:	dd001d15 	stw	r20,116(sp)
  802db4:	dc801f15 	stw	r18,124(sp)
  802db8:	dd401e15 	stw	r21,120(sp)
  802dbc:	dcc02015 	stw	r19,128(sp)
  802dc0:	08042380 	call	804238 <__adddf3>
  802dc4:	1823883a 	mov	r17,r3
  802dc8:	01102434 	movhi	r4,16528
  802dcc:	213fffc4 	addi	r4,r4,-1
  802dd0:	1021883a 	mov	r16,r2
  802dd4:	182f883a 	mov	r23,r3
  802dd8:	dc401815 	stw	r17,96(sp)
  802ddc:	100b883a 	mov	r5,r2
  802de0:	20c02c0e 	bge	r4,r3,802e94 <__ieee754_pow+0xb44>
  802de4:	00afdc34 	movhi	r2,49008
  802de8:	1885883a 	add	r2,r3,r2
  802dec:	2884b03a 	or	r2,r5,r2
  802df0:	1001a626 	beq	r2,zero,80348c <__ieee754_pow+0x113c>
  802df4:	04220034 	movhi	r16,34816
  802df8:	841d6704 	addi	r16,r16,30108
  802dfc:	045f8e34 	movhi	r17,32312
  802e00:	8c790f04 	addi	r17,r17,-7108
  802e04:	d9401a17 	ldw	r5,104(sp)
  802e08:	d9001917 	ldw	r4,100(sp)
  802e0c:	800d883a 	mov	r6,r16
  802e10:	880f883a 	mov	r7,r17
  802e14:	08042ac0 	call	8042ac <__muldf3>
  802e18:	180b883a 	mov	r5,r3
  802e1c:	800d883a 	mov	r6,r16
  802e20:	880f883a 	mov	r7,r17
  802e24:	1009883a 	mov	r4,r2
  802e28:	08042ac0 	call	8042ac <__muldf3>
  802e2c:	003dc306 	br	80253c <__ieee754_pow+0x1ec>
  802e30:	00b00434 	movhi	r2,49168
  802e34:	9085883a 	add	r2,r18,r2
  802e38:	e084b03a 	or	r2,fp,r2
  802e3c:	1000af1e 	bne	r2,zero,8030fc <__ieee754_pow+0xdac>
  802e40:	480f883a 	mov	r7,r9
  802e44:	4009883a 	mov	r4,r8
  802e48:	480b883a 	mov	r5,r9
  802e4c:	400d883a 	mov	r6,r8
  802e50:	003db406 	br	802524 <__ieee754_pow+0x1d4>
  802e54:	00bffc34 	movhi	r2,65520
  802e58:	18ff0084 	addi	r3,r3,-1022
  802e5c:	a0a9883a 	add	r20,r20,r2
  802e60:	d8c00015 	stw	r3,0(sp)
  802e64:	0009883a 	mov	r4,zero
  802e68:	04000234 	movhi	r16,8
  802e6c:	003e1406 	br	8026c0 <__ieee754_pow+0x370>
  802e70:	a80f883a 	mov	r7,r21
  802e74:	a009883a 	mov	r4,r20
  802e78:	a80b883a 	mov	r5,r21
  802e7c:	a00d883a 	mov	r6,r20
  802e80:	08042ac0 	call	8042ac <__muldf3>
  802e84:	180b883a 	mov	r5,r3
  802e88:	d8802815 	stw	r2,160(sp)
  802e8c:	d9402915 	stw	r5,164(sp)
  802e90:	003d5606 	br	8023ec <__ieee754_pow+0x9c>
  802e94:	d9001817 	ldw	r4,96(sp)
  802e98:	00a00034 	movhi	r2,32768
  802e9c:	10bfffc4 	addi	r2,r2,-1
  802ea0:	00d02474 	movhi	r3,16529
  802ea4:	18f2ffc4 	addi	r3,r3,-13313
  802ea8:	20b8703a 	and	fp,r4,r2
  802eac:	1f009d0e 	bge	r3,fp,803124 <__ieee754_pow+0xdd4>
  802eb0:	008fdbf4 	movhi	r2,16239
  802eb4:	108d0004 	addi	r2,r2,13312
  802eb8:	2085883a 	add	r2,r4,r2
  802ebc:	1144b03a 	or	r2,r2,r5
  802ec0:	1001c626 	beq	r2,zero,8035dc <__ieee754_pow+0x128c>
  802ec4:	0430be74 	movhi	r16,49913
  802ec8:	843cd644 	addi	r16,r16,-3239
  802ecc:	04406974 	movhi	r17,421
  802ed0:	8c5b87c4 	addi	r17,r17,28191
  802ed4:	003fcb06 	br	802e04 <__ieee754_pow+0xab4>
  802ed8:	0005883a 	mov	r2,zero
  802edc:	00cffc34 	movhi	r3,16368
  802ee0:	d8801915 	stw	r2,100(sp)
  802ee4:	d8c01a15 	stw	r3,104(sp)
  802ee8:	003f8c06 	br	802d1c <__ieee754_pow+0x9cc>
  802eec:	0005883a 	mov	r2,zero
  802ef0:	00cffc34 	movhi	r3,16368
  802ef4:	180b883a 	mov	r5,r3
  802ef8:	580f883a 	mov	r7,r11
  802efc:	1009883a 	mov	r4,r2
  802f00:	500d883a 	mov	r6,r10
  802f04:	08046700 	call	804670 <__divdf3>
  802f08:	1011883a 	mov	r8,r2
  802f0c:	1813883a 	mov	r9,r3
  802f10:	003d9506 	br	802568 <__ieee754_pow+0x218>
  802f14:	008ffc34 	movhi	r2,16368
  802f18:	10bfff84 	addi	r2,r2,-2
  802f1c:	14bdbb0e 	bge	r2,r18,80260c <__ieee754_pow+0x2bc>
  802f20:	008ffc34 	movhi	r2,16368
  802f24:	14bdae16 	blt	r2,r18,8025e0 <__ieee754_pow+0x290>
  802f28:	580b883a 	mov	r5,r11
  802f2c:	5009883a 	mov	r4,r10
  802f30:	000d883a 	mov	r6,zero
  802f34:	100f883a 	mov	r7,r2
  802f38:	08041b80 	call	8041b8 <__subdf3>
  802f3c:	1021883a 	mov	r16,r2
  802f40:	1823883a 	mov	r17,r3
  802f44:	00980034 	movhi	r2,24576
  802f48:	00cffdf4 	movhi	r3,16375
  802f4c:	18c551c4 	addi	r3,r3,5447
  802f50:	8009883a 	mov	r4,r16
  802f54:	880b883a 	mov	r5,r17
  802f58:	180f883a 	mov	r7,r3
  802f5c:	100d883a 	mov	r6,r2
  802f60:	08042ac0 	call	8042ac <__muldf3>
  802f64:	023e17b4 	movhi	r8,63582
  802f68:	4237d104 	addi	r8,r8,-8380
  802f6c:	024f9574 	movhi	r9,15957
  802f70:	4a6b82c4 	addi	r9,r9,-20981
  802f74:	480f883a 	mov	r7,r9
  802f78:	400d883a 	mov	r6,r8
  802f7c:	8009883a 	mov	r4,r16
  802f80:	880b883a 	mov	r5,r17
  802f84:	102d883a 	mov	r22,r2
  802f88:	182f883a 	mov	r23,r3
  802f8c:	08042ac0 	call	8042ac <__muldf3>
  802f90:	8009883a 	mov	r4,r16
  802f94:	880b883a 	mov	r5,r17
  802f98:	800d883a 	mov	r6,r16
  802f9c:	880f883a 	mov	r7,r17
  802fa0:	d8802a15 	stw	r2,168(sp)
  802fa4:	d8c02b15 	stw	r3,172(sp)
  802fa8:	08042ac0 	call	8042ac <__muldf3>
  802fac:	0011883a 	mov	r8,zero
  802fb0:	026ff434 	movhi	r9,49104
  802fb4:	480f883a 	mov	r7,r9
  802fb8:	8009883a 	mov	r4,r16
  802fbc:	880b883a 	mov	r5,r17
  802fc0:	400d883a 	mov	r6,r8
  802fc4:	1029883a 	mov	r20,r2
  802fc8:	182b883a 	mov	r21,r3
  802fcc:	08042ac0 	call	8042ac <__muldf3>
  802fd0:	02155574 	movhi	r8,21845
  802fd4:	42155544 	addi	r8,r8,21845
  802fd8:	024ff574 	movhi	r9,16341
  802fdc:	4a555544 	addi	r9,r9,21845
  802fe0:	480f883a 	mov	r7,r9
  802fe4:	400d883a 	mov	r6,r8
  802fe8:	180b883a 	mov	r5,r3
  802fec:	1009883a 	mov	r4,r2
  802ff0:	08042380 	call	804238 <__adddf3>
  802ff4:	180f883a 	mov	r7,r3
  802ff8:	8009883a 	mov	r4,r16
  802ffc:	880b883a 	mov	r5,r17
  803000:	100d883a 	mov	r6,r2
  803004:	08042ac0 	call	8042ac <__muldf3>
  803008:	0011883a 	mov	r8,zero
  80300c:	024ff834 	movhi	r9,16352
  803010:	480b883a 	mov	r5,r9
  803014:	4009883a 	mov	r4,r8
  803018:	180f883a 	mov	r7,r3
  80301c:	100d883a 	mov	r6,r2
  803020:	08041b80 	call	8041b8 <__subdf3>
  803024:	180f883a 	mov	r7,r3
  803028:	a80b883a 	mov	r5,r21
  80302c:	a009883a 	mov	r4,r20
  803030:	100d883a 	mov	r6,r2
  803034:	08042ac0 	call	8042ac <__muldf3>
  803038:	02194b34 	movhi	r8,25900
  80303c:	4220bf84 	addi	r8,r8,-32002
  803040:	026ffdf4 	movhi	r9,49143
  803044:	4a4551c4 	addi	r9,r9,5447
  803048:	480f883a 	mov	r7,r9
  80304c:	400d883a 	mov	r6,r8
  803050:	180b883a 	mov	r5,r3
  803054:	1009883a 	mov	r4,r2
  803058:	08042ac0 	call	8042ac <__muldf3>
  80305c:	d9402b17 	ldw	r5,172(sp)
  803060:	d9002a17 	ldw	r4,168(sp)
  803064:	180f883a 	mov	r7,r3
  803068:	100d883a 	mov	r6,r2
  80306c:	08042380 	call	804238 <__adddf3>
  803070:	100d883a 	mov	r6,r2
  803074:	b009883a 	mov	r4,r22
  803078:	b80b883a 	mov	r5,r23
  80307c:	180f883a 	mov	r7,r3
  803080:	1021883a 	mov	r16,r2
  803084:	1823883a 	mov	r17,r3
  803088:	08042380 	call	804238 <__adddf3>
  80308c:	180b883a 	mov	r5,r3
  803090:	0009883a 	mov	r4,zero
  803094:	b00d883a 	mov	r6,r22
  803098:	b80f883a 	mov	r7,r23
  80309c:	d9001b15 	stw	r4,108(sp)
  8030a0:	d8c01c15 	stw	r3,112(sp)
  8030a4:	08041b80 	call	8041b8 <__subdf3>
  8030a8:	1011883a 	mov	r8,r2
  8030ac:	1813883a 	mov	r9,r3
  8030b0:	8009883a 	mov	r4,r16
  8030b4:	880b883a 	mov	r5,r17
  8030b8:	003f0b06 	br	802ce8 <__ieee754_pow+0x998>
  8030bc:	0005883a 	mov	r2,zero
  8030c0:	00d0d034 	movhi	r3,17216
  8030c4:	580b883a 	mov	r5,r11
  8030c8:	5009883a 	mov	r4,r10
  8030cc:	180f883a 	mov	r7,r3
  8030d0:	100d883a 	mov	r6,r2
  8030d4:	08042ac0 	call	8042ac <__muldf3>
  8030d8:	1015883a 	mov	r10,r2
  8030dc:	1825883a 	mov	r18,r3
  8030e0:	017ff2c4 	movi	r5,-53
  8030e4:	003d6606 	br	802680 <__ieee754_pow+0x330>
  8030e8:	b03d300e 	bge	r22,zero,8025ac <__ieee754_pow+0x25c>
  8030ec:	d9402917 	ldw	r5,164(sp)
  8030f0:	28e0003c 	xorhi	r3,r5,32768
  8030f4:	d8c02915 	stw	r3,164(sp)
  8030f8:	003cbc06 	br	8023ec <__ieee754_pow+0x9c>
  8030fc:	00800044 	movi	r2,1
  803100:	e0bd1a1e 	bne	fp,r2,80256c <__ieee754_pow+0x21c>
  803104:	48e0003c 	xorhi	r3,r9,32768
  803108:	da002815 	stw	r8,160(sp)
  80310c:	d8c02915 	stw	r3,164(sp)
  803110:	003cb606 	br	8023ec <__ieee754_pow+0x9c>
  803114:	d9001817 	ldw	r4,96(sp)
  803118:	00a00034 	movhi	r2,32768
  80311c:	10bfffc4 	addi	r2,r2,-1
  803120:	20b8703a 	and	fp,r4,r2
  803124:	008ff834 	movhi	r2,16352
  803128:	1700fc16 	blt	r2,fp,80351c <__ieee754_pow+0x11cc>
  80312c:	0039883a 	mov	fp,zero
  803130:	d8001315 	stw	zero,76(sp)
  803134:	0025883a 	mov	r18,zero
  803138:	0005883a 	mov	r2,zero
  80313c:	00cff9b4 	movhi	r3,16358
  803140:	18cb90c4 	addi	r3,r3,11843
  803144:	9009883a 	mov	r4,r18
  803148:	b80b883a 	mov	r5,r23
  80314c:	180f883a 	mov	r7,r3
  803150:	100d883a 	mov	r6,r2
  803154:	08042ac0 	call	8042ac <__muldf3>
  803158:	d9c02017 	ldw	r7,128(sp)
  80315c:	d9801f17 	ldw	r6,124(sp)
  803160:	9009883a 	mov	r4,r18
  803164:	b80b883a 	mov	r5,r23
  803168:	b823883a 	mov	r17,r23
  80316c:	102d883a 	mov	r22,r2
  803170:	182f883a 	mov	r23,r3
  803174:	08041b80 	call	8041b8 <__subdf3>
  803178:	d9401e17 	ldw	r5,120(sp)
  80317c:	d9001d17 	ldw	r4,116(sp)
  803180:	180f883a 	mov	r7,r3
  803184:	100d883a 	mov	r6,r2
  803188:	08041b80 	call	8041b8 <__subdf3>
  80318c:	023fbeb4 	movhi	r8,65274
  803190:	420e7bc4 	addi	r8,r8,14831
  803194:	024ff9b4 	movhi	r9,16358
  803198:	4a4b9084 	addi	r9,r9,11842
  80319c:	480f883a 	mov	r7,r9
  8031a0:	400d883a 	mov	r6,r8
  8031a4:	180b883a 	mov	r5,r3
  8031a8:	1009883a 	mov	r4,r2
  8031ac:	08042ac0 	call	8042ac <__muldf3>
  8031b0:	02032a34 	movhi	r8,3240
  8031b4:	421b0e44 	addi	r8,r8,27705
  8031b8:	026f8834 	movhi	r9,48672
  8031bc:	4a571844 	addi	r9,r9,23649
  8031c0:	480f883a 	mov	r7,r9
  8031c4:	400d883a 	mov	r6,r8
  8031c8:	9009883a 	mov	r4,r18
  8031cc:	880b883a 	mov	r5,r17
  8031d0:	1021883a 	mov	r16,r2
  8031d4:	1823883a 	mov	r17,r3
  8031d8:	08042ac0 	call	8042ac <__muldf3>
  8031dc:	180f883a 	mov	r7,r3
  8031e0:	880b883a 	mov	r5,r17
  8031e4:	8009883a 	mov	r4,r16
  8031e8:	100d883a 	mov	r6,r2
  8031ec:	08042380 	call	804238 <__adddf3>
  8031f0:	100d883a 	mov	r6,r2
  8031f4:	b009883a 	mov	r4,r22
  8031f8:	b80b883a 	mov	r5,r23
  8031fc:	180f883a 	mov	r7,r3
  803200:	1021883a 	mov	r16,r2
  803204:	1823883a 	mov	r17,r3
  803208:	08042380 	call	804238 <__adddf3>
  80320c:	1009883a 	mov	r4,r2
  803210:	180b883a 	mov	r5,r3
  803214:	b00d883a 	mov	r6,r22
  803218:	b80f883a 	mov	r7,r23
  80321c:	d8803915 	stw	r2,228(sp)
  803220:	d8c03a15 	stw	r3,232(sp)
  803224:	d8801115 	stw	r2,68(sp)
  803228:	d8c01215 	stw	r3,72(sp)
  80322c:	08041b80 	call	8041b8 <__subdf3>
  803230:	180f883a 	mov	r7,r3
  803234:	8009883a 	mov	r4,r16
  803238:	880b883a 	mov	r5,r17
  80323c:	100d883a 	mov	r6,r2
  803240:	08041b80 	call	8041b8 <__subdf3>
  803244:	d9001117 	ldw	r4,68(sp)
  803248:	d9403a17 	ldw	r5,232(sp)
  80324c:	1029883a 	mov	r20,r2
  803250:	200d883a 	mov	r6,r4
  803254:	280f883a 	mov	r7,r5
  803258:	182b883a 	mov	r21,r3
  80325c:	08042ac0 	call	8042ac <__muldf3>
  803260:	1021883a 	mov	r16,r2
  803264:	1823883a 	mov	r17,r3
  803268:	009caff4 	movhi	r2,29375
  80326c:	10a93404 	addi	r2,r2,-23344
  803270:	00cf99b4 	movhi	r3,15974
  803274:	18cdda44 	addi	r3,r3,14185
  803278:	8009883a 	mov	r4,r16
  80327c:	880b883a 	mov	r5,r17
  803280:	180f883a 	mov	r7,r3
  803284:	100d883a 	mov	r6,r2
  803288:	08042ac0 	call	8042ac <__muldf3>
  80328c:	023174b4 	movhi	r8,50642
  803290:	421afc44 	addi	r8,r8,27633
  803294:	024faf34 	movhi	r9,16060
  803298:	4a6f5044 	addi	r9,r9,-17087
  80329c:	480f883a 	mov	r7,r9
  8032a0:	400d883a 	mov	r6,r8
  8032a4:	180b883a 	mov	r5,r3
  8032a8:	1009883a 	mov	r4,r2
  8032ac:	08041b80 	call	8041b8 <__subdf3>
  8032b0:	180f883a 	mov	r7,r3
  8032b4:	8009883a 	mov	r4,r16
  8032b8:	880b883a 	mov	r5,r17
  8032bc:	100d883a 	mov	r6,r2
  8032c0:	08042ac0 	call	8042ac <__muldf3>
  8032c4:	022bc9b4 	movhi	r8,44838
  8032c8:	42378b04 	addi	r8,r8,-8660
  8032cc:	024fc474 	movhi	r9,16145
  8032d0:	4a559a84 	addi	r9,r9,22122
  8032d4:	480f883a 	mov	r7,r9
  8032d8:	400d883a 	mov	r6,r8
  8032dc:	180b883a 	mov	r5,r3
  8032e0:	1009883a 	mov	r4,r2
  8032e4:	08042380 	call	804238 <__adddf3>
  8032e8:	180f883a 	mov	r7,r3
  8032ec:	8009883a 	mov	r4,r16
  8032f0:	880b883a 	mov	r5,r17
  8032f4:	100d883a 	mov	r6,r2
  8032f8:	08042ac0 	call	8042ac <__muldf3>
  8032fc:	0205aff4 	movhi	r8,5823
  803300:	422f64c4 	addi	r8,r8,-17005
  803304:	024fd9f4 	movhi	r9,16231
  803308:	4a705b04 	addi	r9,r9,-16020
  80330c:	480f883a 	mov	r7,r9
  803310:	400d883a 	mov	r6,r8
  803314:	180b883a 	mov	r5,r3
  803318:	1009883a 	mov	r4,r2
  80331c:	08041b80 	call	8041b8 <__subdf3>
  803320:	180f883a 	mov	r7,r3
  803324:	8009883a 	mov	r4,r16
  803328:	880b883a 	mov	r5,r17
  80332c:	100d883a 	mov	r6,r2
  803330:	08042ac0 	call	8042ac <__muldf3>
  803334:	02155574 	movhi	r8,21845
  803338:	42154f84 	addi	r8,r8,21822
  80333c:	024ff174 	movhi	r9,16325
  803340:	4a555544 	addi	r9,r9,21845
  803344:	480f883a 	mov	r7,r9
  803348:	400d883a 	mov	r6,r8
  80334c:	180b883a 	mov	r5,r3
  803350:	1009883a 	mov	r4,r2
  803354:	08042380 	call	804238 <__adddf3>
  803358:	180f883a 	mov	r7,r3
  80335c:	8009883a 	mov	r4,r16
  803360:	880b883a 	mov	r5,r17
  803364:	100d883a 	mov	r6,r2
  803368:	08042ac0 	call	8042ac <__muldf3>
  80336c:	d9001117 	ldw	r4,68(sp)
  803370:	d9403a17 	ldw	r5,232(sp)
  803374:	180f883a 	mov	r7,r3
  803378:	100d883a 	mov	r6,r2
  80337c:	08041b80 	call	8041b8 <__subdf3>
  803380:	d9001117 	ldw	r4,68(sp)
  803384:	d9403a17 	ldw	r5,232(sp)
  803388:	100d883a 	mov	r6,r2
  80338c:	180f883a 	mov	r7,r3
  803390:	1021883a 	mov	r16,r2
  803394:	1823883a 	mov	r17,r3
  803398:	08042ac0 	call	8042ac <__muldf3>
  80339c:	0011883a 	mov	r8,zero
  8033a0:	02500034 	movhi	r9,16384
  8033a4:	480f883a 	mov	r7,r9
  8033a8:	400d883a 	mov	r6,r8
  8033ac:	8009883a 	mov	r4,r16
  8033b0:	880b883a 	mov	r5,r17
  8033b4:	1021883a 	mov	r16,r2
  8033b8:	1823883a 	mov	r17,r3
  8033bc:	08041b80 	call	8041b8 <__subdf3>
  8033c0:	180f883a 	mov	r7,r3
  8033c4:	880b883a 	mov	r5,r17
  8033c8:	8009883a 	mov	r4,r16
  8033cc:	100d883a 	mov	r6,r2
  8033d0:	08046700 	call	804670 <__divdf3>
  8033d4:	d9001117 	ldw	r4,68(sp)
  8033d8:	d9403a17 	ldw	r5,232(sp)
  8033dc:	a00d883a 	mov	r6,r20
  8033e0:	a80f883a 	mov	r7,r21
  8033e4:	1025883a 	mov	r18,r2
  8033e8:	1827883a 	mov	r19,r3
  8033ec:	08042ac0 	call	8042ac <__muldf3>
  8033f0:	180f883a 	mov	r7,r3
  8033f4:	a009883a 	mov	r4,r20
  8033f8:	a80b883a 	mov	r5,r21
  8033fc:	100d883a 	mov	r6,r2
  803400:	08042380 	call	804238 <__adddf3>
  803404:	180f883a 	mov	r7,r3
  803408:	980b883a 	mov	r5,r19
  80340c:	9009883a 	mov	r4,r18
  803410:	100d883a 	mov	r6,r2
  803414:	08041b80 	call	8041b8 <__subdf3>
  803418:	d9801117 	ldw	r6,68(sp)
  80341c:	d9c03a17 	ldw	r7,232(sp)
  803420:	180b883a 	mov	r5,r3
  803424:	1009883a 	mov	r4,r2
  803428:	08041b80 	call	8041b8 <__subdf3>
  80342c:	0011883a 	mov	r8,zero
  803430:	024ffc34 	movhi	r9,16368
  803434:	480b883a 	mov	r5,r9
  803438:	180f883a 	mov	r7,r3
  80343c:	4009883a 	mov	r4,r8
  803440:	100d883a 	mov	r6,r2
  803444:	08041b80 	call	8041b8 <__subdf3>
  803448:	100b883a 	mov	r5,r2
  80344c:	d8801317 	ldw	r2,76(sp)
  803450:	10d5883a 	add	r10,r2,r3
  803454:	5005d53a 	srai	r2,r10,20
  803458:	0080720e 	bge	zero,r2,803624 <__ieee754_pow+0x12d4>
  80345c:	2811883a 	mov	r8,r5
  803460:	5013883a 	mov	r9,r10
  803464:	d9c01a17 	ldw	r7,104(sp)
  803468:	d9801917 	ldw	r6,100(sp)
  80346c:	480b883a 	mov	r5,r9
  803470:	4009883a 	mov	r4,r8
  803474:	003e8206 	br	802e80 <__ieee754_pow+0xb30>
  803478:	0009883a 	mov	r4,zero
  80347c:	800b883a 	mov	r5,r16
  803480:	a80f883a 	mov	r7,r21
  803484:	a00d883a 	mov	r6,r20
  803488:	003c2b06 	br	802538 <__ieee754_pow+0x1e8>
  80348c:	d9001d17 	ldw	r4,116(sp)
  803490:	00994b34 	movhi	r2,25900
  803494:	10a0bf84 	addi	r2,r2,-32002
  803498:	00cf25f4 	movhi	r3,15511
  80349c:	18c551c4 	addi	r3,r3,5447
  8034a0:	a80b883a 	mov	r5,r21
  8034a4:	180f883a 	mov	r7,r3
  8034a8:	100d883a 	mov	r6,r2
  8034ac:	08042380 	call	804238 <__adddf3>
  8034b0:	d9801f17 	ldw	r6,124(sp)
  8034b4:	880b883a 	mov	r5,r17
  8034b8:	8009883a 	mov	r4,r16
  8034bc:	980f883a 	mov	r7,r19
  8034c0:	1021883a 	mov	r16,r2
  8034c4:	1823883a 	mov	r17,r3
  8034c8:	08041b80 	call	8041b8 <__subdf3>
  8034cc:	180f883a 	mov	r7,r3
  8034d0:	880b883a 	mov	r5,r17
  8034d4:	8009883a 	mov	r4,r16
  8034d8:	100d883a 	mov	r6,r2
  8034dc:	08049d80 	call	8049d8 <__gtdf2>
  8034e0:	00bf0c0e 	bge	zero,r2,803114 <__ieee754_pow+0xdc4>
  8034e4:	04220034 	movhi	r16,34816
  8034e8:	841d6704 	addi	r16,r16,30108
  8034ec:	045f8e34 	movhi	r17,32312
  8034f0:	8c790f04 	addi	r17,r17,-7108
  8034f4:	d9401a17 	ldw	r5,104(sp)
  8034f8:	d9001917 	ldw	r4,100(sp)
  8034fc:	800d883a 	mov	r6,r16
  803500:	880f883a 	mov	r7,r17
  803504:	08042ac0 	call	8042ac <__muldf3>
  803508:	180b883a 	mov	r5,r3
  80350c:	800d883a 	mov	r6,r16
  803510:	880f883a 	mov	r7,r17
  803514:	1009883a 	mov	r4,r2
  803518:	003e5906 	br	802e80 <__ieee754_pow+0xb30>
  80351c:	e005d53a 	srai	r2,fp,20
  803520:	01800434 	movhi	r6,16
  803524:	d9401817 	ldw	r5,96(sp)
  803528:	10bf0084 	addi	r2,r2,-1022
  80352c:	308dd83a 	sra	r6,r6,r2
  803530:	02000434 	movhi	r8,16
  803534:	423fffc4 	addi	r8,r8,-1
  803538:	0005883a 	mov	r2,zero
  80353c:	298d883a 	add	r6,r5,r6
  803540:	318b883a 	add	r5,r6,r6
  803544:	320e703a 	and	r7,r6,r8
  803548:	1013883a 	mov	r9,r2
  80354c:	280ad57a 	srli	r5,r5,21
  803550:	d8801817 	ldw	r2,96(sp)
  803554:	01000504 	movi	r4,20
  803558:	297f0044 	addi	r5,r5,-1023
  80355c:	4151d83a 	sra	r8,r8,r5
  803560:	39c00434 	orhi	r7,r7,16
  803564:	2149c83a 	sub	r4,r4,r5
  803568:	0210303a 	nor	r8,zero,r8
  80356c:	3939d83a 	sra	fp,r7,r4
  803570:	320e703a 	and	r7,r6,r8
  803574:	10002916 	blt	r2,zero,80361c <__ieee754_pow+0x12cc>
  803578:	d9402017 	ldw	r5,128(sp)
  80357c:	d9001f17 	ldw	r4,124(sp)
  803580:	480d883a 	mov	r6,r9
  803584:	08041b80 	call	8041b8 <__subdf3>
  803588:	180b883a 	mov	r5,r3
  80358c:	d9402015 	stw	r5,128(sp)
  803590:	280f883a 	mov	r7,r5
  803594:	d9001d17 	ldw	r4,116(sp)
  803598:	d9401e17 	ldw	r5,120(sp)
  80359c:	1007883a 	mov	r3,r2
  8035a0:	180d883a 	mov	r6,r3
  8035a4:	d8801f15 	stw	r2,124(sp)
  8035a8:	08042380 	call	804238 <__adddf3>
  8035ac:	180b883a 	mov	r5,r3
  8035b0:	e006953a 	slli	r3,fp,20
  8035b4:	282f883a 	mov	r23,r5
  8035b8:	d8c01315 	stw	r3,76(sp)
  8035bc:	003edd06 	br	803134 <__ieee754_pow+0xde4>
  8035c0:	383bc81e 	bne	r7,zero,8024e4 <__ieee754_pow+0x194>
  8035c4:	28c5c83a 	sub	r2,r5,r3
  8035c8:	8087d83a 	sra	r3,r16,r2
  8035cc:	1884983a 	sll	r2,r3,r2
  8035d0:	80801b26 	beq	r16,r2,803640 <__ieee754_pow+0x12f0>
  8035d4:	0039883a 	mov	fp,zero
  8035d8:	003b9d06 	br	802450 <__ieee754_pow+0x100>
  8035dc:	d9801f17 	ldw	r6,124(sp)
  8035e0:	8009883a 	mov	r4,r16
  8035e4:	880b883a 	mov	r5,r17
  8035e8:	980f883a 	mov	r7,r19
  8035ec:	08041b80 	call	8041b8 <__subdf3>
  8035f0:	d9001d17 	ldw	r4,116(sp)
  8035f4:	a80b883a 	mov	r5,r21
  8035f8:	180f883a 	mov	r7,r3
  8035fc:	100d883a 	mov	r6,r2
  803600:	0804ae80 	call	804ae8 <__ledf2>
  803604:	00bfc516 	blt	zero,r2,80351c <__ieee754_pow+0x11cc>
  803608:	0430be74 	movhi	r16,49913
  80360c:	843cd644 	addi	r16,r16,-3239
  803610:	04406974 	movhi	r17,421
  803614:	8c5b87c4 	addi	r17,r17,28191
  803618:	003fb606 	br	8034f4 <__ieee754_pow+0x11a4>
  80361c:	0739c83a 	sub	fp,zero,fp
  803620:	003fd506 	br	803578 <__ieee754_pow+0x1228>
  803624:	2809883a 	mov	r4,r5
  803628:	e00d883a 	mov	r6,fp
  80362c:	180b883a 	mov	r5,r3
  803630:	0803ba40 	call	803ba4 <scalbn>
  803634:	1011883a 	mov	r8,r2
  803638:	1813883a 	mov	r9,r3
  80363c:	003f8906 	br	803464 <__ieee754_pow+0x1114>
  803640:	18c0004c 	andi	r3,r3,1
  803644:	00800084 	movi	r2,2
  803648:	10f9c83a 	sub	fp,r2,r3
  80364c:	003b8006 	br	802450 <__ieee754_pow+0x100>

00803650 <__ieee754_sqrt>:
  803650:	defffd04 	addi	sp,sp,-12
  803654:	dc000015 	stw	r16,0(sp)
  803658:	009ffc34 	movhi	r2,32752
  80365c:	2021883a 	mov	r16,r4
  803660:	291ffc2c 	andhi	r4,r5,32752
  803664:	dc400115 	stw	r17,4(sp)
  803668:	dfc00215 	stw	ra,8(sp)
  80366c:	2823883a 	mov	r17,r5
  803670:	280f883a 	mov	r7,r5
  803674:	2807883a 	mov	r3,r5
  803678:	8011883a 	mov	r8,r16
  80367c:	20807d26 	beq	r4,r2,803874 <__ieee754_sqrt+0x224>
  803680:	01408d0e 	bge	zero,r5,8038b8 <__ieee754_sqrt+0x268>
  803684:	380dd53a 	srai	r6,r7,20
  803688:	3000131e 	bne	r6,zero,8036d8 <__ieee754_sqrt+0x88>
  80368c:	1800041e 	bne	r3,zero,8036a0 <__ieee754_sqrt+0x50>
  803690:	400ed2fa 	srli	r7,r8,11
  803694:	31bffac4 	addi	r6,r6,-21
  803698:	4010957a 	slli	r8,r8,21
  80369c:	383ffc26 	beq	r7,zero,803690 <__ieee754_sqrt+0x40>
  8036a0:	3880042c 	andhi	r2,r7,16
  8036a4:	1000991e 	bne	r2,zero,80390c <__ieee754_sqrt+0x2bc>
  8036a8:	0009883a 	mov	r4,zero
  8036ac:	39cf883a 	add	r7,r7,r7
  8036b0:	3880042c 	andhi	r2,r7,16
  8036b4:	21000044 	addi	r4,r4,1
  8036b8:	103ffc26 	beq	r2,zero,8036ac <__ieee754_sqrt+0x5c>
  8036bc:	00800804 	movi	r2,32
  8036c0:	1105c83a 	sub	r2,r2,r4
  8036c4:	4086d83a 	srl	r3,r8,r2
  8036c8:	4110983a 	sll	r8,r8,r4
  8036cc:	3105c83a 	sub	r2,r6,r4
  8036d0:	38ceb03a 	or	r7,r7,r3
  8036d4:	11800044 	addi	r6,r2,1
  8036d8:	31bf0044 	addi	r6,r6,-1023
  8036dc:	30c0004c 	andi	r3,r6,1
  8036e0:	00800434 	movhi	r2,16
  8036e4:	10bfffc4 	addi	r2,r2,-1
  8036e8:	3884703a 	and	r2,r7,r2
  8036ec:	1807003a 	cmpeq	r3,r3,zero
  8036f0:	11000434 	orhi	r4,r2,16
  8036f4:	18005426 	beq	r3,zero,803848 <__ieee754_sqrt+0x1f8>
  8036f8:	4004d7fa 	srli	r2,r8,31
  8036fc:	4207883a 	add	r3,r8,r8
  803700:	02800834 	movhi	r10,32
  803704:	1105883a 	add	r2,r2,r4
  803708:	2089883a 	add	r4,r4,r2
  80370c:	0011883a 	mov	r8,zero
  803710:	000b883a 	mov	r5,zero
  803714:	0013883a 	mov	r9,zero
  803718:	02c00584 	movi	r11,22
  80371c:	520f883a 	add	r7,r10,r8
  803720:	1804d7fa 	srli	r2,r3,31
  803724:	4a400044 	addi	r9,r9,1
  803728:	18c7883a 	add	r3,r3,r3
  80372c:	21c00316 	blt	r4,r7,80373c <__ieee754_sqrt+0xec>
  803730:	21c9c83a 	sub	r4,r4,r7
  803734:	2a8b883a 	add	r5,r5,r10
  803738:	51d1883a 	add	r8,r10,r7
  80373c:	1105883a 	add	r2,r2,r4
  803740:	5014d07a 	srli	r10,r10,1
  803744:	2089883a 	add	r4,r4,r2
  803748:	4afff41e 	bne	r9,r11,80371c <__ieee754_sqrt+0xcc>
  80374c:	02600034 	movhi	r9,32768
  803750:	0017883a 	mov	r11,zero
  803754:	0019883a 	mov	r12,zero
  803758:	0015883a 	mov	r10,zero
  80375c:	4821883a 	mov	r16,r9
  803760:	03c00804 	movi	r15,32
  803764:	00000806 	br	803788 <__ieee754_sqrt+0x138>
  803768:	22003426 	beq	r4,r8,80383c <__ieee754_sqrt+0x1ec>
  80376c:	1804d7fa 	srli	r2,r3,31
  803770:	52800044 	addi	r10,r10,1
  803774:	18c7883a 	add	r3,r3,r3
  803778:	1105883a 	add	r2,r2,r4
  80377c:	2089883a 	add	r4,r4,r2
  803780:	4812d07a 	srli	r9,r9,1
  803784:	53c01326 	beq	r10,r15,8037d4 <__ieee754_sqrt+0x184>
  803788:	4acf883a 	add	r7,r9,r11
  80378c:	413ff60e 	bge	r8,r4,803768 <__ieee754_sqrt+0x118>
  803790:	38a0002c 	andhi	r2,r7,32768
  803794:	3a57883a 	add	r11,r7,r9
  803798:	14002426 	beq	r2,r16,80382c <__ieee754_sqrt+0x1dc>
  80379c:	4005883a 	mov	r2,r8
  8037a0:	2209c83a 	sub	r4,r4,r8
  8037a4:	19c0012e 	bgeu	r3,r7,8037ac <__ieee754_sqrt+0x15c>
  8037a8:	213fffc4 	addi	r4,r4,-1
  8037ac:	19c7c83a 	sub	r3,r3,r7
  8037b0:	1011883a 	mov	r8,r2
  8037b4:	1804d7fa 	srli	r2,r3,31
  8037b8:	52800044 	addi	r10,r10,1
  8037bc:	6259883a 	add	r12,r12,r9
  8037c0:	1105883a 	add	r2,r2,r4
  8037c4:	18c7883a 	add	r3,r3,r3
  8037c8:	2089883a 	add	r4,r4,r2
  8037cc:	4812d07a 	srli	r9,r9,1
  8037d0:	53ffed1e 	bne	r10,r15,803788 <__ieee754_sqrt+0x138>
  8037d4:	20c4b03a 	or	r2,r4,r3
  8037d8:	1000201e 	bne	r2,zero,80385c <__ieee754_sqrt+0x20c>
  8037dc:	600ed07a 	srli	r7,r12,1
  8037e0:	2880004c 	andi	r2,r5,1
  8037e4:	1005003a 	cmpeq	r2,r2,zero
  8037e8:	1000011e 	bne	r2,zero,8037f0 <__ieee754_sqrt+0x1a0>
  8037ec:	39e00034 	orhi	r7,r7,32768
  8037f0:	300dd07a 	srai	r6,r6,1
  8037f4:	280bd07a 	srai	r5,r5,1
  8037f8:	010ff834 	movhi	r4,16352
  8037fc:	300c953a 	slli	r6,r6,20
  803800:	290b883a 	add	r5,r5,r4
  803804:	3821883a 	mov	r16,r7
  803808:	299d883a 	add	r14,r5,r6
  80380c:	7023883a 	mov	r17,r14
  803810:	8005883a 	mov	r2,r16
  803814:	8807883a 	mov	r3,r17
  803818:	dfc00217 	ldw	ra,8(sp)
  80381c:	dc400117 	ldw	r17,4(sp)
  803820:	dc000017 	ldw	r16,0(sp)
  803824:	dec00304 	addi	sp,sp,12
  803828:	f800283a 	ret
  80382c:	5884703a 	and	r2,r11,r2
  803830:	103fda1e 	bne	r2,zero,80379c <__ieee754_sqrt+0x14c>
  803834:	40800044 	addi	r2,r8,1
  803838:	003fd906 	br	8037a0 <__ieee754_sqrt+0x150>
  80383c:	19ffd42e 	bgeu	r3,r7,803790 <__ieee754_sqrt+0x140>
  803840:	2011883a 	mov	r8,r4
  803844:	003fc906 	br	80376c <__ieee754_sqrt+0x11c>
  803848:	4004d7fa 	srli	r2,r8,31
  80384c:	4211883a 	add	r8,r8,r8
  803850:	1105883a 	add	r2,r2,r4
  803854:	2089883a 	add	r4,r4,r2
  803858:	003fa706 	br	8036f8 <__ieee754_sqrt+0xa8>
  80385c:	00bfffc4 	movi	r2,-1
  803860:	60802726 	beq	r12,r2,803900 <__ieee754_sqrt+0x2b0>
  803864:	6080004c 	andi	r2,r12,1
  803868:	6085883a 	add	r2,r12,r2
  80386c:	100ed07a 	srli	r7,r2,1
  803870:	003fdb06 	br	8037e0 <__ieee754_sqrt+0x190>
  803874:	8009883a 	mov	r4,r16
  803878:	800d883a 	mov	r6,r16
  80387c:	08042ac0 	call	8042ac <__muldf3>
  803880:	180f883a 	mov	r7,r3
  803884:	880b883a 	mov	r5,r17
  803888:	8009883a 	mov	r4,r16
  80388c:	100d883a 	mov	r6,r2
  803890:	08042380 	call	804238 <__adddf3>
  803894:	1021883a 	mov	r16,r2
  803898:	1823883a 	mov	r17,r3
  80389c:	8005883a 	mov	r2,r16
  8038a0:	8807883a 	mov	r3,r17
  8038a4:	dfc00217 	ldw	ra,8(sp)
  8038a8:	dc400117 	ldw	r17,4(sp)
  8038ac:	dc000017 	ldw	r16,0(sp)
  8038b0:	dec00304 	addi	sp,sp,12
  8038b4:	f800283a 	ret
  8038b8:	00a00034 	movhi	r2,32768
  8038bc:	10bfffc4 	addi	r2,r2,-1
  8038c0:	2884703a 	and	r2,r5,r2
  8038c4:	8084b03a 	or	r2,r16,r2
  8038c8:	103fd126 	beq	r2,zero,803810 <__ieee754_sqrt+0x1c0>
  8038cc:	283f6d26 	beq	r5,zero,803684 <__ieee754_sqrt+0x34>
  8038d0:	280f883a 	mov	r7,r5
  8038d4:	8009883a 	mov	r4,r16
  8038d8:	800d883a 	mov	r6,r16
  8038dc:	08041b80 	call	8041b8 <__subdf3>
  8038e0:	1009883a 	mov	r4,r2
  8038e4:	180b883a 	mov	r5,r3
  8038e8:	100d883a 	mov	r6,r2
  8038ec:	180f883a 	mov	r7,r3
  8038f0:	08046700 	call	804670 <__divdf3>
  8038f4:	1021883a 	mov	r16,r2
  8038f8:	1823883a 	mov	r17,r3
  8038fc:	003fc406 	br	803810 <__ieee754_sqrt+0x1c0>
  803900:	29400044 	addi	r5,r5,1
  803904:	000f883a 	mov	r7,zero
  803908:	003fb506 	br	8037e0 <__ieee754_sqrt+0x190>
  80390c:	0009883a 	mov	r4,zero
  803910:	00800804 	movi	r2,32
  803914:	003f6b06 	br	8036c4 <__ieee754_sqrt+0x74>

00803918 <fabs>:
  803918:	01e00034 	movhi	r7,32768
  80391c:	39ffffc4 	addi	r7,r7,-1
  803920:	394e703a 	and	r7,r7,r5
  803924:	2005883a 	mov	r2,r4
  803928:	3807883a 	mov	r3,r7
  80392c:	f800283a 	ret

00803930 <finite>:
  803930:	00a00034 	movhi	r2,32768
  803934:	10bfffc4 	addi	r2,r2,-1
  803938:	2884703a 	and	r2,r5,r2
  80393c:	01600434 	movhi	r5,32784
  803940:	1145883a 	add	r2,r2,r5
  803944:	1004d7fa 	srli	r2,r2,31
  803948:	f800283a 	ret

0080394c <__isnand>:
  80394c:	200d883a 	mov	r6,r4
  803950:	0109c83a 	sub	r4,zero,r4
  803954:	2188b03a 	or	r4,r4,r6
  803958:	2008d7fa 	srli	r4,r4,31
  80395c:	00a00034 	movhi	r2,32768
  803960:	10bfffc4 	addi	r2,r2,-1
  803964:	1144703a 	and	r2,r2,r5
  803968:	2088b03a 	or	r4,r4,r2
  80396c:	009ffc34 	movhi	r2,32752
  803970:	1105c83a 	sub	r2,r2,r4
  803974:	1004d7fa 	srli	r2,r2,31
  803978:	f800283a 	ret

0080397c <matherr>:
  80397c:	0005883a 	mov	r2,zero
  803980:	f800283a 	ret

00803984 <nan>:
  803984:	015ffe34 	movhi	r5,32760
  803988:	0005883a 	mov	r2,zero
  80398c:	2807883a 	mov	r3,r5
  803990:	f800283a 	ret

00803994 <rint>:
  803994:	2015883a 	mov	r10,r4
  803998:	2809d53a 	srai	r4,r5,20
  80399c:	defff904 	addi	sp,sp,-28
  8039a0:	034004c4 	movi	r13,19
  8039a4:	2101ffcc 	andi	r4,r4,2047
  8039a8:	227f0044 	addi	r9,r4,-1023
  8039ac:	dc800415 	stw	r18,16(sp)
  8039b0:	dfc00615 	stw	ra,24(sp)
  8039b4:	dcc00515 	stw	r19,20(sp)
  8039b8:	dc400315 	stw	r17,12(sp)
  8039bc:	dc000215 	stw	r16,8(sp)
  8039c0:	2817883a 	mov	r11,r5
  8039c4:	500d883a 	mov	r6,r10
  8039c8:	2824d7fa 	srli	r18,r5,31
  8039cc:	6a403016 	blt	r13,r9,803a90 <rint+0xfc>
  8039d0:	48004916 	blt	r9,zero,803af8 <rint+0x164>
  8039d4:	00800434 	movhi	r2,16
  8039d8:	10bfffc4 	addi	r2,r2,-1
  8039dc:	1247d83a 	sra	r3,r2,r9
  8039e0:	2809883a 	mov	r4,r5
  8039e4:	1944703a 	and	r2,r3,r5
  8039e8:	5084b03a 	or	r2,r10,r2
  8039ec:	10001f26 	beq	r2,zero,803a6c <rint+0xd8>
  8039f0:	180ad07a 	srli	r5,r3,1
  8039f4:	5944703a 	and	r2,r11,r5
  8039f8:	5084b03a 	or	r2,r10,r2
  8039fc:	10000626 	beq	r2,zero,803a18 <rint+0x84>
  803a00:	4b406626 	beq	r9,r13,803b9c <rint+0x208>
  803a04:	00c000b4 	movhi	r3,2
  803a08:	1a47d83a 	sra	r3,r3,r9
  803a0c:	0144303a 	nor	r2,zero,r5
  803a10:	5884703a 	and	r2,r11,r2
  803a14:	10c8b03a 	or	r4,r2,r3
  803a18:	900690fa 	slli	r3,r18,3
  803a1c:	00802074 	movhi	r2,129
  803a20:	108acb04 	addi	r2,r2,11052
  803a24:	200f883a 	mov	r7,r4
  803a28:	1887883a 	add	r3,r3,r2
  803a2c:	1c000017 	ldw	r16,0(r3)
  803a30:	1c400117 	ldw	r17,4(r3)
  803a34:	8009883a 	mov	r4,r16
  803a38:	880b883a 	mov	r5,r17
  803a3c:	08042380 	call	804238 <__adddf3>
  803a40:	d8800015 	stw	r2,0(sp)
  803a44:	d8c00115 	stw	r3,4(sp)
  803a48:	d8800017 	ldw	r2,0(sp)
  803a4c:	d8c00117 	ldw	r3,4(sp)
  803a50:	880f883a 	mov	r7,r17
  803a54:	800d883a 	mov	r6,r16
  803a58:	180b883a 	mov	r5,r3
  803a5c:	1009883a 	mov	r4,r2
  803a60:	08041b80 	call	8041b8 <__subdf3>
  803a64:	1015883a 	mov	r10,r2
  803a68:	1817883a 	mov	r11,r3
  803a6c:	5005883a 	mov	r2,r10
  803a70:	5807883a 	mov	r3,r11
  803a74:	dfc00617 	ldw	ra,24(sp)
  803a78:	dcc00517 	ldw	r19,20(sp)
  803a7c:	dc800417 	ldw	r18,16(sp)
  803a80:	dc400317 	ldw	r17,12(sp)
  803a84:	dc000217 	ldw	r16,8(sp)
  803a88:	dec00704 	addi	sp,sp,28
  803a8c:	f800283a 	ret
  803a90:	00800cc4 	movi	r2,51
  803a94:	12400f16 	blt	r2,r9,803ad4 <rint+0x140>
  803a98:	213efb44 	addi	r4,r4,-1043
  803a9c:	00bfffc4 	movi	r2,-1
  803aa0:	1104d83a 	srl	r2,r2,r4
  803aa4:	5086703a 	and	r3,r10,r2
  803aa8:	183ff026 	beq	r3,zero,803a6c <rint+0xd8>
  803aac:	100ad07a 	srli	r5,r2,1
  803ab0:	5144703a 	and	r2,r10,r5
  803ab4:	10000526 	beq	r2,zero,803acc <rint+0x138>
  803ab8:	00d00034 	movhi	r3,16384
  803abc:	1907d83a 	sra	r3,r3,r4
  803ac0:	0144303a 	nor	r2,zero,r5
  803ac4:	5084703a 	and	r2,r10,r2
  803ac8:	10ccb03a 	or	r6,r2,r3
  803acc:	5809883a 	mov	r4,r11
  803ad0:	003fd106 	br	803a18 <rint+0x84>
  803ad4:	00810004 	movi	r2,1024
  803ad8:	48bfe41e 	bne	r9,r2,803a6c <rint+0xd8>
  803adc:	5009883a 	mov	r4,r10
  803ae0:	500d883a 	mov	r6,r10
  803ae4:	280f883a 	mov	r7,r5
  803ae8:	08042380 	call	804238 <__adddf3>
  803aec:	1015883a 	mov	r10,r2
  803af0:	1817883a 	mov	r11,r3
  803af4:	003fdd06 	br	803a6c <rint+0xd8>
  803af8:	04e00034 	movhi	r19,32768
  803afc:	9cffffc4 	addi	r19,r19,-1
  803b00:	2cc4703a 	and	r2,r5,r19
  803b04:	5084b03a 	or	r2,r10,r2
  803b08:	103fd826 	beq	r2,zero,803a6c <rint+0xd8>
  803b0c:	00c00434 	movhi	r3,16
  803b10:	18ffffc4 	addi	r3,r3,-1
  803b14:	28c6703a 	and	r3,r5,r3
  803b18:	50c6b03a 	or	r3,r10,r3
  803b1c:	00cdc83a 	sub	r6,zero,r3
  803b20:	900a90fa 	slli	r5,r18,3
  803b24:	1986b03a 	or	r3,r3,r6
  803b28:	01002074 	movhi	r4,129
  803b2c:	210acb04 	addi	r4,r4,11052
  803b30:	1806d33a 	srli	r3,r3,12
  803b34:	290b883a 	add	r5,r5,r4
  803b38:	2c000017 	ldw	r16,0(r5)
  803b3c:	2c400117 	ldw	r17,4(r5)
  803b40:	593fffac 	andhi	r4,r11,65534
  803b44:	18c0022c 	andhi	r3,r3,8
  803b48:	1906b03a 	or	r3,r3,r4
  803b4c:	500d883a 	mov	r6,r10
  803b50:	180f883a 	mov	r7,r3
  803b54:	8009883a 	mov	r4,r16
  803b58:	880b883a 	mov	r5,r17
  803b5c:	08042380 	call	804238 <__adddf3>
  803b60:	d8800015 	stw	r2,0(sp)
  803b64:	d8c00115 	stw	r3,4(sp)
  803b68:	d8800017 	ldw	r2,0(sp)
  803b6c:	d8c00117 	ldw	r3,4(sp)
  803b70:	880f883a 	mov	r7,r17
  803b74:	800d883a 	mov	r6,r16
  803b78:	180b883a 	mov	r5,r3
  803b7c:	1009883a 	mov	r4,r2
  803b80:	08041b80 	call	8041b8 <__subdf3>
  803b84:	901297fa 	slli	r9,r18,31
  803b88:	98d0703a 	and	r8,r19,r3
  803b8c:	1015883a 	mov	r10,r2
  803b90:	4250b03a 	or	r8,r8,r9
  803b94:	4017883a 	mov	r11,r8
  803b98:	003fb406 	br	803a6c <rint+0xd8>
  803b9c:	01900034 	movhi	r6,16384
  803ba0:	003f9d06 	br	803a18 <rint+0x84>

00803ba4 <scalbn>:
  803ba4:	2011883a 	mov	r8,r4
  803ba8:	291ffc2c 	andhi	r4,r5,32752
  803bac:	2009d53a 	srai	r4,r4,20
  803bb0:	defffd04 	addi	sp,sp,-12
  803bb4:	dc000015 	stw	r16,0(sp)
  803bb8:	dfc00215 	stw	ra,8(sp)
  803bbc:	dc400115 	stw	r17,4(sp)
  803bc0:	2813883a 	mov	r9,r5
  803bc4:	2815883a 	mov	r10,r5
  803bc8:	3021883a 	mov	r16,r6
  803bcc:	2000281e 	bne	r4,zero,803c70 <scalbn+0xcc>
  803bd0:	00a00034 	movhi	r2,32768
  803bd4:	10bfffc4 	addi	r2,r2,-1
  803bd8:	2884703a 	and	r2,r5,r2
  803bdc:	4084b03a 	or	r2,r8,r2
  803be0:	10001826 	beq	r2,zero,803c44 <scalbn+0xa0>
  803be4:	0005883a 	mov	r2,zero
  803be8:	00d0d434 	movhi	r3,17232
  803bec:	4009883a 	mov	r4,r8
  803bf0:	100d883a 	mov	r6,r2
  803bf4:	180f883a 	mov	r7,r3
  803bf8:	08042ac0 	call	8042ac <__muldf3>
  803bfc:	100b883a 	mov	r5,r2
  803c00:	1011883a 	mov	r8,r2
  803c04:	00bffff4 	movhi	r2,65535
  803c08:	108f2c04 	addi	r2,r2,15536
  803c0c:	180d883a 	mov	r6,r3
  803c10:	1813883a 	mov	r9,r3
  803c14:	8080120e 	bge	r16,r2,803c60 <scalbn+0xbc>
  803c18:	00b0be74 	movhi	r2,49913
  803c1c:	10bcd644 	addi	r2,r2,-3239
  803c20:	00c06974 	movhi	r3,421
  803c24:	18db87c4 	addi	r3,r3,28191
  803c28:	2809883a 	mov	r4,r5
  803c2c:	180f883a 	mov	r7,r3
  803c30:	300b883a 	mov	r5,r6
  803c34:	100d883a 	mov	r6,r2
  803c38:	08042ac0 	call	8042ac <__muldf3>
  803c3c:	1011883a 	mov	r8,r2
  803c40:	1813883a 	mov	r9,r3
  803c44:	4005883a 	mov	r2,r8
  803c48:	4807883a 	mov	r3,r9
  803c4c:	dfc00217 	ldw	ra,8(sp)
  803c50:	dc400117 	ldw	r17,4(sp)
  803c54:	dc000017 	ldw	r16,0(sp)
  803c58:	dec00304 	addi	sp,sp,12
  803c5c:	f800283a 	ret
  803c60:	189ffc2c 	andhi	r2,r3,32752
  803c64:	1005d53a 	srai	r2,r2,20
  803c68:	1815883a 	mov	r10,r3
  803c6c:	113ff284 	addi	r4,r2,-54
  803c70:	0081ffc4 	movi	r2,2047
  803c74:	20801126 	beq	r4,r2,803cbc <scalbn+0x118>
  803c78:	2409883a 	add	r4,r4,r16
  803c7c:	0081ff84 	movi	r2,2046
  803c80:	11001c16 	blt	r2,r4,803cf4 <scalbn+0x150>
  803c84:	0100290e 	bge	zero,r4,803d2c <scalbn+0x188>
  803c88:	200a953a 	slli	r5,r4,20
  803c8c:	01200434 	movhi	r4,32784
  803c90:	213fffc4 	addi	r4,r4,-1
  803c94:	5108703a 	and	r4,r10,r4
  803c98:	2148b03a 	or	r4,r4,r5
  803c9c:	2013883a 	mov	r9,r4
  803ca0:	4005883a 	mov	r2,r8
  803ca4:	4807883a 	mov	r3,r9
  803ca8:	dfc00217 	ldw	ra,8(sp)
  803cac:	dc400117 	ldw	r17,4(sp)
  803cb0:	dc000017 	ldw	r16,0(sp)
  803cb4:	dec00304 	addi	sp,sp,12
  803cb8:	f800283a 	ret
  803cbc:	480f883a 	mov	r7,r9
  803cc0:	4009883a 	mov	r4,r8
  803cc4:	480b883a 	mov	r5,r9
  803cc8:	400d883a 	mov	r6,r8
  803ccc:	08042380 	call	804238 <__adddf3>
  803cd0:	1011883a 	mov	r8,r2
  803cd4:	1813883a 	mov	r9,r3
  803cd8:	4005883a 	mov	r2,r8
  803cdc:	4807883a 	mov	r3,r9
  803ce0:	dfc00217 	ldw	ra,8(sp)
  803ce4:	dc400117 	ldw	r17,4(sp)
  803ce8:	dc000017 	ldw	r16,0(sp)
  803cec:	dec00304 	addi	sp,sp,12
  803cf0:	f800283a 	ret
  803cf4:	04220034 	movhi	r16,34816
  803cf8:	841d6704 	addi	r16,r16,30108
  803cfc:	045f8e34 	movhi	r17,32312
  803d00:	8c790f04 	addi	r17,r17,-7108
  803d04:	480f883a 	mov	r7,r9
  803d08:	400d883a 	mov	r6,r8
  803d0c:	8009883a 	mov	r4,r16
  803d10:	880b883a 	mov	r5,r17
  803d14:	0803d840 	call	803d84 <copysign>
  803d18:	180b883a 	mov	r5,r3
  803d1c:	800d883a 	mov	r6,r16
  803d20:	880f883a 	mov	r7,r17
  803d24:	1009883a 	mov	r4,r2
  803d28:	003fc306 	br	803c38 <scalbn+0x94>
  803d2c:	00bff284 	movi	r2,-54
  803d30:	11000716 	blt	r2,r4,803d50 <scalbn+0x1ac>
  803d34:	00b0d414 	movui	r2,50000
  803d38:	143fee16 	blt	r2,r16,803cf4 <scalbn+0x150>
  803d3c:	0430be74 	movhi	r16,49913
  803d40:	843cd644 	addi	r16,r16,-3239
  803d44:	04406974 	movhi	r17,421
  803d48:	8c5b87c4 	addi	r17,r17,28191
  803d4c:	003fed06 	br	803d04 <scalbn+0x160>
  803d50:	21000d84 	addi	r4,r4,54
  803d54:	2008953a 	slli	r4,r4,20
  803d58:	01e00434 	movhi	r7,32784
  803d5c:	39ffffc4 	addi	r7,r7,-1
  803d60:	51ce703a 	and	r7,r10,r7
  803d64:	390eb03a 	or	r7,r7,r4
  803d68:	024f2434 	movhi	r9,15504
  803d6c:	4009883a 	mov	r4,r8
  803d70:	0011883a 	mov	r8,zero
  803d74:	380b883a 	mov	r5,r7
  803d78:	400d883a 	mov	r6,r8
  803d7c:	480f883a 	mov	r7,r9
  803d80:	003fad06 	br	803c38 <scalbn+0x94>

00803d84 <copysign>:
  803d84:	3813883a 	mov	r9,r7
  803d88:	01e00034 	movhi	r7,32768
  803d8c:	39ffffc4 	addi	r7,r7,-1
  803d90:	394e703a 	and	r7,r7,r5
  803d94:	4aa0002c 	andhi	r10,r9,32768
  803d98:	3a8eb03a 	or	r7,r7,r10
  803d9c:	2005883a 	mov	r2,r4
  803da0:	3807883a 	mov	r3,r7
  803da4:	f800283a 	ret

00803da8 <_fpadd_parts>:
  803da8:	defff804 	addi	sp,sp,-32
  803dac:	dcc00315 	stw	r19,12(sp)
  803db0:	2027883a 	mov	r19,r4
  803db4:	21000017 	ldw	r4,0(r4)
  803db8:	00c00044 	movi	r3,1
  803dbc:	dd400515 	stw	r21,20(sp)
  803dc0:	dd000415 	stw	r20,16(sp)
  803dc4:	ddc00715 	stw	r23,28(sp)
  803dc8:	dd800615 	stw	r22,24(sp)
  803dcc:	dc800215 	stw	r18,8(sp)
  803dd0:	dc400115 	stw	r17,4(sp)
  803dd4:	dc000015 	stw	r16,0(sp)
  803dd8:	282b883a 	mov	r21,r5
  803ddc:	3029883a 	mov	r20,r6
  803de0:	1900632e 	bgeu	r3,r4,803f70 <_fpadd_parts+0x1c8>
  803de4:	28800017 	ldw	r2,0(r5)
  803de8:	1880812e 	bgeu	r3,r2,803ff0 <_fpadd_parts+0x248>
  803dec:	00c00104 	movi	r3,4
  803df0:	20c0dc26 	beq	r4,r3,804164 <_fpadd_parts+0x3bc>
  803df4:	10c07e26 	beq	r2,r3,803ff0 <_fpadd_parts+0x248>
  803df8:	00c00084 	movi	r3,2
  803dfc:	10c06726 	beq	r2,r3,803f9c <_fpadd_parts+0x1f4>
  803e00:	20c07b26 	beq	r4,r3,803ff0 <_fpadd_parts+0x248>
  803e04:	9dc00217 	ldw	r23,8(r19)
  803e08:	28c00217 	ldw	r3,8(r5)
  803e0c:	9c400317 	ldw	r17,12(r19)
  803e10:	2bc00317 	ldw	r15,12(r5)
  803e14:	b8cdc83a 	sub	r6,r23,r3
  803e18:	9c800417 	ldw	r18,16(r19)
  803e1c:	2c000417 	ldw	r16,16(r5)
  803e20:	3009883a 	mov	r4,r6
  803e24:	30009716 	blt	r6,zero,804084 <_fpadd_parts+0x2dc>
  803e28:	00800fc4 	movi	r2,63
  803e2c:	11806b16 	blt	r2,r6,803fdc <_fpadd_parts+0x234>
  803e30:	0100a40e 	bge	zero,r4,8040c4 <_fpadd_parts+0x31c>
  803e34:	35bff804 	addi	r22,r6,-32
  803e38:	b000bc16 	blt	r22,zero,80412c <_fpadd_parts+0x384>
  803e3c:	8596d83a 	srl	r11,r16,r22
  803e40:	0019883a 	mov	r12,zero
  803e44:	0013883a 	mov	r9,zero
  803e48:	01000044 	movi	r4,1
  803e4c:	0015883a 	mov	r10,zero
  803e50:	b000be16 	blt	r22,zero,80414c <_fpadd_parts+0x3a4>
  803e54:	2590983a 	sll	r8,r4,r22
  803e58:	000f883a 	mov	r7,zero
  803e5c:	00bfffc4 	movi	r2,-1
  803e60:	3889883a 	add	r4,r7,r2
  803e64:	408b883a 	add	r5,r8,r2
  803e68:	21cd803a 	cmpltu	r6,r4,r7
  803e6c:	314b883a 	add	r5,r6,r5
  803e70:	7904703a 	and	r2,r15,r4
  803e74:	8146703a 	and	r3,r16,r5
  803e78:	10c4b03a 	or	r2,r2,r3
  803e7c:	10000226 	beq	r2,zero,803e88 <_fpadd_parts+0xe0>
  803e80:	02400044 	movi	r9,1
  803e84:	0015883a 	mov	r10,zero
  803e88:	5a5eb03a 	or	r15,r11,r9
  803e8c:	62a0b03a 	or	r16,r12,r10
  803e90:	99400117 	ldw	r5,4(r19)
  803e94:	a8800117 	ldw	r2,4(r21)
  803e98:	28806e26 	beq	r5,r2,804054 <_fpadd_parts+0x2ac>
  803e9c:	28006626 	beq	r5,zero,804038 <_fpadd_parts+0x290>
  803ea0:	7c45c83a 	sub	r2,r15,r17
  803ea4:	7889803a 	cmpltu	r4,r15,r2
  803ea8:	8487c83a 	sub	r3,r16,r18
  803eac:	1909c83a 	sub	r4,r3,r4
  803eb0:	100d883a 	mov	r6,r2
  803eb4:	200f883a 	mov	r7,r4
  803eb8:	38007716 	blt	r7,zero,804098 <_fpadd_parts+0x2f0>
  803ebc:	a5c00215 	stw	r23,8(r20)
  803ec0:	a1c00415 	stw	r7,16(r20)
  803ec4:	a0000115 	stw	zero,4(r20)
  803ec8:	a1800315 	stw	r6,12(r20)
  803ecc:	a2000317 	ldw	r8,12(r20)
  803ed0:	a2400417 	ldw	r9,16(r20)
  803ed4:	00bfffc4 	movi	r2,-1
  803ed8:	408b883a 	add	r5,r8,r2
  803edc:	2a09803a 	cmpltu	r4,r5,r8
  803ee0:	488d883a 	add	r6,r9,r2
  803ee4:	01c40034 	movhi	r7,4096
  803ee8:	39ffffc4 	addi	r7,r7,-1
  803eec:	218d883a 	add	r6,r4,r6
  803ef0:	39801736 	bltu	r7,r6,803f50 <_fpadd_parts+0x1a8>
  803ef4:	31c06526 	beq	r6,r7,80408c <_fpadd_parts+0x2e4>
  803ef8:	a3000217 	ldw	r12,8(r20)
  803efc:	4209883a 	add	r4,r8,r8
  803f00:	00bfffc4 	movi	r2,-1
  803f04:	220f803a 	cmpltu	r7,r4,r8
  803f08:	4a4b883a 	add	r5,r9,r9
  803f0c:	394f883a 	add	r7,r7,r5
  803f10:	2095883a 	add	r10,r4,r2
  803f14:	3897883a 	add	r11,r7,r2
  803f18:	510d803a 	cmpltu	r6,r10,r4
  803f1c:	6099883a 	add	r12,r12,r2
  803f20:	32d7883a 	add	r11,r6,r11
  803f24:	00840034 	movhi	r2,4096
  803f28:	10bfffc4 	addi	r2,r2,-1
  803f2c:	2011883a 	mov	r8,r4
  803f30:	3813883a 	mov	r9,r7
  803f34:	a1000315 	stw	r4,12(r20)
  803f38:	a1c00415 	stw	r7,16(r20)
  803f3c:	a3000215 	stw	r12,8(r20)
  803f40:	12c00336 	bltu	r2,r11,803f50 <_fpadd_parts+0x1a8>
  803f44:	58bfed1e 	bne	r11,r2,803efc <_fpadd_parts+0x154>
  803f48:	00bfff84 	movi	r2,-2
  803f4c:	12bfeb2e 	bgeu	r2,r10,803efc <_fpadd_parts+0x154>
  803f50:	a2800417 	ldw	r10,16(r20)
  803f54:	008000c4 	movi	r2,3
  803f58:	00c80034 	movhi	r3,8192
  803f5c:	18ffffc4 	addi	r3,r3,-1
  803f60:	a2400317 	ldw	r9,12(r20)
  803f64:	a0800015 	stw	r2,0(r20)
  803f68:	1a802336 	bltu	r3,r10,803ff8 <_fpadd_parts+0x250>
  803f6c:	a027883a 	mov	r19,r20
  803f70:	9805883a 	mov	r2,r19
  803f74:	ddc00717 	ldw	r23,28(sp)
  803f78:	dd800617 	ldw	r22,24(sp)
  803f7c:	dd400517 	ldw	r21,20(sp)
  803f80:	dd000417 	ldw	r20,16(sp)
  803f84:	dcc00317 	ldw	r19,12(sp)
  803f88:	dc800217 	ldw	r18,8(sp)
  803f8c:	dc400117 	ldw	r17,4(sp)
  803f90:	dc000017 	ldw	r16,0(sp)
  803f94:	dec00804 	addi	sp,sp,32
  803f98:	f800283a 	ret
  803f9c:	20fff41e 	bne	r4,r3,803f70 <_fpadd_parts+0x1c8>
  803fa0:	31000015 	stw	r4,0(r6)
  803fa4:	98800117 	ldw	r2,4(r19)
  803fa8:	30800115 	stw	r2,4(r6)
  803fac:	98c00217 	ldw	r3,8(r19)
  803fb0:	30c00215 	stw	r3,8(r6)
  803fb4:	98800317 	ldw	r2,12(r19)
  803fb8:	30800315 	stw	r2,12(r6)
  803fbc:	98c00417 	ldw	r3,16(r19)
  803fc0:	30c00415 	stw	r3,16(r6)
  803fc4:	98800117 	ldw	r2,4(r19)
  803fc8:	28c00117 	ldw	r3,4(r5)
  803fcc:	3027883a 	mov	r19,r6
  803fd0:	10c4703a 	and	r2,r2,r3
  803fd4:	30800115 	stw	r2,4(r6)
  803fd8:	003fe506 	br	803f70 <_fpadd_parts+0x1c8>
  803fdc:	1dc02616 	blt	r3,r23,804078 <_fpadd_parts+0x2d0>
  803fe0:	0023883a 	mov	r17,zero
  803fe4:	182f883a 	mov	r23,r3
  803fe8:	0025883a 	mov	r18,zero
  803fec:	003fa806 	br	803e90 <_fpadd_parts+0xe8>
  803ff0:	a827883a 	mov	r19,r21
  803ff4:	003fde06 	br	803f70 <_fpadd_parts+0x1c8>
  803ff8:	01800044 	movi	r6,1
  803ffc:	500497fa 	slli	r2,r10,31
  804000:	4808d07a 	srli	r4,r9,1
  804004:	518ad83a 	srl	r5,r10,r6
  804008:	a2000217 	ldw	r8,8(r20)
  80400c:	1108b03a 	or	r4,r2,r4
  804010:	0007883a 	mov	r3,zero
  804014:	4984703a 	and	r2,r9,r6
  804018:	208cb03a 	or	r6,r4,r2
  80401c:	28ceb03a 	or	r7,r5,r3
  804020:	42000044 	addi	r8,r8,1
  804024:	a027883a 	mov	r19,r20
  804028:	a1c00415 	stw	r7,16(r20)
  80402c:	a2000215 	stw	r8,8(r20)
  804030:	a1800315 	stw	r6,12(r20)
  804034:	003fce06 	br	803f70 <_fpadd_parts+0x1c8>
  804038:	8bc5c83a 	sub	r2,r17,r15
  80403c:	8889803a 	cmpltu	r4,r17,r2
  804040:	9407c83a 	sub	r3,r18,r16
  804044:	1909c83a 	sub	r4,r3,r4
  804048:	100d883a 	mov	r6,r2
  80404c:	200f883a 	mov	r7,r4
  804050:	003f9906 	br	803eb8 <_fpadd_parts+0x110>
  804054:	8bc5883a 	add	r2,r17,r15
  804058:	1449803a 	cmpltu	r4,r2,r17
  80405c:	9407883a 	add	r3,r18,r16
  804060:	20c9883a 	add	r4,r4,r3
  804064:	a1400115 	stw	r5,4(r20)
  804068:	a5c00215 	stw	r23,8(r20)
  80406c:	a0800315 	stw	r2,12(r20)
  804070:	a1000415 	stw	r4,16(r20)
  804074:	003fb606 	br	803f50 <_fpadd_parts+0x1a8>
  804078:	001f883a 	mov	r15,zero
  80407c:	0021883a 	mov	r16,zero
  804080:	003f8306 	br	803e90 <_fpadd_parts+0xe8>
  804084:	018dc83a 	sub	r6,zero,r6
  804088:	003f6706 	br	803e28 <_fpadd_parts+0x80>
  80408c:	00bfff84 	movi	r2,-2
  804090:	117faf36 	bltu	r2,r5,803f50 <_fpadd_parts+0x1a8>
  804094:	003f9806 	br	803ef8 <_fpadd_parts+0x150>
  804098:	0005883a 	mov	r2,zero
  80409c:	1189c83a 	sub	r4,r2,r6
  8040a0:	1105803a 	cmpltu	r2,r2,r4
  8040a4:	01cbc83a 	sub	r5,zero,r7
  8040a8:	2885c83a 	sub	r2,r5,r2
  8040ac:	01800044 	movi	r6,1
  8040b0:	a1800115 	stw	r6,4(r20)
  8040b4:	a5c00215 	stw	r23,8(r20)
  8040b8:	a1000315 	stw	r4,12(r20)
  8040bc:	a0800415 	stw	r2,16(r20)
  8040c0:	003f8206 	br	803ecc <_fpadd_parts+0x124>
  8040c4:	203f7226 	beq	r4,zero,803e90 <_fpadd_parts+0xe8>
  8040c8:	35bff804 	addi	r22,r6,-32
  8040cc:	b9af883a 	add	r23,r23,r6
  8040d0:	b0003116 	blt	r22,zero,804198 <_fpadd_parts+0x3f0>
  8040d4:	959ad83a 	srl	r13,r18,r22
  8040d8:	001d883a 	mov	r14,zero
  8040dc:	000f883a 	mov	r7,zero
  8040e0:	01000044 	movi	r4,1
  8040e4:	0011883a 	mov	r8,zero
  8040e8:	b0002516 	blt	r22,zero,804180 <_fpadd_parts+0x3d8>
  8040ec:	2594983a 	sll	r10,r4,r22
  8040f0:	0013883a 	mov	r9,zero
  8040f4:	00bfffc4 	movi	r2,-1
  8040f8:	4889883a 	add	r4,r9,r2
  8040fc:	508b883a 	add	r5,r10,r2
  804100:	224d803a 	cmpltu	r6,r4,r9
  804104:	314b883a 	add	r5,r6,r5
  804108:	8904703a 	and	r2,r17,r4
  80410c:	9146703a 	and	r3,r18,r5
  804110:	10c4b03a 	or	r2,r2,r3
  804114:	10000226 	beq	r2,zero,804120 <_fpadd_parts+0x378>
  804118:	01c00044 	movi	r7,1
  80411c:	0011883a 	mov	r8,zero
  804120:	69e2b03a 	or	r17,r13,r7
  804124:	7224b03a 	or	r18,r14,r8
  804128:	003f5906 	br	803e90 <_fpadd_parts+0xe8>
  80412c:	8407883a 	add	r3,r16,r16
  804130:	008007c4 	movi	r2,31
  804134:	1185c83a 	sub	r2,r2,r6
  804138:	1886983a 	sll	r3,r3,r2
  80413c:	7996d83a 	srl	r11,r15,r6
  804140:	8198d83a 	srl	r12,r16,r6
  804144:	1ad6b03a 	or	r11,r3,r11
  804148:	003f3e06 	br	803e44 <_fpadd_parts+0x9c>
  80414c:	2006d07a 	srli	r3,r4,1
  804150:	008007c4 	movi	r2,31
  804154:	1185c83a 	sub	r2,r2,r6
  804158:	1890d83a 	srl	r8,r3,r2
  80415c:	218e983a 	sll	r7,r4,r6
  804160:	003f3e06 	br	803e5c <_fpadd_parts+0xb4>
  804164:	113f821e 	bne	r2,r4,803f70 <_fpadd_parts+0x1c8>
  804168:	28c00117 	ldw	r3,4(r5)
  80416c:	98800117 	ldw	r2,4(r19)
  804170:	10ff7f26 	beq	r2,r3,803f70 <_fpadd_parts+0x1c8>
  804174:	04c02074 	movhi	r19,129
  804178:	9ccacf04 	addi	r19,r19,11068
  80417c:	003f7c06 	br	803f70 <_fpadd_parts+0x1c8>
  804180:	2006d07a 	srli	r3,r4,1
  804184:	008007c4 	movi	r2,31
  804188:	1185c83a 	sub	r2,r2,r6
  80418c:	1894d83a 	srl	r10,r3,r2
  804190:	2192983a 	sll	r9,r4,r6
  804194:	003fd706 	br	8040f4 <_fpadd_parts+0x34c>
  804198:	9487883a 	add	r3,r18,r18
  80419c:	008007c4 	movi	r2,31
  8041a0:	1185c83a 	sub	r2,r2,r6
  8041a4:	1886983a 	sll	r3,r3,r2
  8041a8:	899ad83a 	srl	r13,r17,r6
  8041ac:	919cd83a 	srl	r14,r18,r6
  8041b0:	1b5ab03a 	or	r13,r3,r13
  8041b4:	003fc906 	br	8040dc <_fpadd_parts+0x334>

008041b8 <__subdf3>:
  8041b8:	deffea04 	addi	sp,sp,-88
  8041bc:	dcc01415 	stw	r19,80(sp)
  8041c0:	dcc00404 	addi	r19,sp,16
  8041c4:	2011883a 	mov	r8,r4
  8041c8:	2813883a 	mov	r9,r5
  8041cc:	dc401315 	stw	r17,76(sp)
  8041d0:	d809883a 	mov	r4,sp
  8041d4:	980b883a 	mov	r5,r19
  8041d8:	dc400904 	addi	r17,sp,36
  8041dc:	dfc01515 	stw	ra,84(sp)
  8041e0:	da400115 	stw	r9,4(sp)
  8041e4:	d9c00315 	stw	r7,12(sp)
  8041e8:	da000015 	stw	r8,0(sp)
  8041ec:	d9800215 	stw	r6,8(sp)
  8041f0:	080516c0 	call	80516c <__unpack_d>
  8041f4:	d9000204 	addi	r4,sp,8
  8041f8:	880b883a 	mov	r5,r17
  8041fc:	080516c0 	call	80516c <__unpack_d>
  804200:	d8800a17 	ldw	r2,40(sp)
  804204:	880b883a 	mov	r5,r17
  804208:	9809883a 	mov	r4,r19
  80420c:	d9800e04 	addi	r6,sp,56
  804210:	1080005c 	xori	r2,r2,1
  804214:	d8800a15 	stw	r2,40(sp)
  804218:	0803da80 	call	803da8 <_fpadd_parts>
  80421c:	1009883a 	mov	r4,r2
  804220:	0804e580 	call	804e58 <__pack_d>
  804224:	dfc01517 	ldw	ra,84(sp)
  804228:	dcc01417 	ldw	r19,80(sp)
  80422c:	dc401317 	ldw	r17,76(sp)
  804230:	dec01604 	addi	sp,sp,88
  804234:	f800283a 	ret

00804238 <__adddf3>:
  804238:	deffea04 	addi	sp,sp,-88
  80423c:	dcc01415 	stw	r19,80(sp)
  804240:	dcc00404 	addi	r19,sp,16
  804244:	2011883a 	mov	r8,r4
  804248:	2813883a 	mov	r9,r5
  80424c:	dc401315 	stw	r17,76(sp)
  804250:	d809883a 	mov	r4,sp
  804254:	980b883a 	mov	r5,r19
  804258:	dc400904 	addi	r17,sp,36
  80425c:	dfc01515 	stw	ra,84(sp)
  804260:	da400115 	stw	r9,4(sp)
  804264:	d9c00315 	stw	r7,12(sp)
  804268:	da000015 	stw	r8,0(sp)
  80426c:	d9800215 	stw	r6,8(sp)
  804270:	080516c0 	call	80516c <__unpack_d>
  804274:	d9000204 	addi	r4,sp,8
  804278:	880b883a 	mov	r5,r17
  80427c:	080516c0 	call	80516c <__unpack_d>
  804280:	d9800e04 	addi	r6,sp,56
  804284:	9809883a 	mov	r4,r19
  804288:	880b883a 	mov	r5,r17
  80428c:	0803da80 	call	803da8 <_fpadd_parts>
  804290:	1009883a 	mov	r4,r2
  804294:	0804e580 	call	804e58 <__pack_d>
  804298:	dfc01517 	ldw	ra,84(sp)
  80429c:	dcc01417 	ldw	r19,80(sp)
  8042a0:	dc401317 	ldw	r17,76(sp)
  8042a4:	dec01604 	addi	sp,sp,88
  8042a8:	f800283a 	ret

008042ac <__muldf3>:
  8042ac:	deffe004 	addi	sp,sp,-128
  8042b0:	dc401815 	stw	r17,96(sp)
  8042b4:	dc400404 	addi	r17,sp,16
  8042b8:	2011883a 	mov	r8,r4
  8042bc:	2813883a 	mov	r9,r5
  8042c0:	dc001715 	stw	r16,92(sp)
  8042c4:	d809883a 	mov	r4,sp
  8042c8:	880b883a 	mov	r5,r17
  8042cc:	dc000904 	addi	r16,sp,36
  8042d0:	dfc01f15 	stw	ra,124(sp)
  8042d4:	da400115 	stw	r9,4(sp)
  8042d8:	d9c00315 	stw	r7,12(sp)
  8042dc:	da000015 	stw	r8,0(sp)
  8042e0:	d9800215 	stw	r6,8(sp)
  8042e4:	ddc01e15 	stw	r23,120(sp)
  8042e8:	dd801d15 	stw	r22,116(sp)
  8042ec:	dd401c15 	stw	r21,112(sp)
  8042f0:	dd001b15 	stw	r20,108(sp)
  8042f4:	dcc01a15 	stw	r19,104(sp)
  8042f8:	dc801915 	stw	r18,100(sp)
  8042fc:	080516c0 	call	80516c <__unpack_d>
  804300:	d9000204 	addi	r4,sp,8
  804304:	800b883a 	mov	r5,r16
  804308:	080516c0 	call	80516c <__unpack_d>
  80430c:	d9000417 	ldw	r4,16(sp)
  804310:	00800044 	movi	r2,1
  804314:	1100102e 	bgeu	r2,r4,804358 <__muldf3+0xac>
  804318:	d8c00917 	ldw	r3,36(sp)
  80431c:	10c0062e 	bgeu	r2,r3,804338 <__muldf3+0x8c>
  804320:	00800104 	movi	r2,4
  804324:	20800a26 	beq	r4,r2,804350 <__muldf3+0xa4>
  804328:	1880cc26 	beq	r3,r2,80465c <__muldf3+0x3b0>
  80432c:	00800084 	movi	r2,2
  804330:	20800926 	beq	r4,r2,804358 <__muldf3+0xac>
  804334:	1880191e 	bne	r3,r2,80439c <__muldf3+0xf0>
  804338:	d8c00a17 	ldw	r3,40(sp)
  80433c:	d8800517 	ldw	r2,20(sp)
  804340:	8009883a 	mov	r4,r16
  804344:	10c4c03a 	cmpne	r2,r2,r3
  804348:	d8800a15 	stw	r2,40(sp)
  80434c:	00000706 	br	80436c <__muldf3+0xc0>
  804350:	00800084 	movi	r2,2
  804354:	1880c326 	beq	r3,r2,804664 <__muldf3+0x3b8>
  804358:	d8800517 	ldw	r2,20(sp)
  80435c:	d8c00a17 	ldw	r3,40(sp)
  804360:	8809883a 	mov	r4,r17
  804364:	10c4c03a 	cmpne	r2,r2,r3
  804368:	d8800515 	stw	r2,20(sp)
  80436c:	0804e580 	call	804e58 <__pack_d>
  804370:	dfc01f17 	ldw	ra,124(sp)
  804374:	ddc01e17 	ldw	r23,120(sp)
  804378:	dd801d17 	ldw	r22,116(sp)
  80437c:	dd401c17 	ldw	r21,112(sp)
  804380:	dd001b17 	ldw	r20,108(sp)
  804384:	dcc01a17 	ldw	r19,104(sp)
  804388:	dc801917 	ldw	r18,100(sp)
  80438c:	dc401817 	ldw	r17,96(sp)
  804390:	dc001717 	ldw	r16,92(sp)
  804394:	dec02004 	addi	sp,sp,128
  804398:	f800283a 	ret
  80439c:	dd800717 	ldw	r22,28(sp)
  8043a0:	dc800c17 	ldw	r18,48(sp)
  8043a4:	002b883a 	mov	r21,zero
  8043a8:	0023883a 	mov	r17,zero
  8043ac:	a80b883a 	mov	r5,r21
  8043b0:	b00d883a 	mov	r6,r22
  8043b4:	880f883a 	mov	r7,r17
  8043b8:	ddc00817 	ldw	r23,32(sp)
  8043bc:	dcc00d17 	ldw	r19,52(sp)
  8043c0:	9009883a 	mov	r4,r18
  8043c4:	0804d400 	call	804d40 <__muldi3>
  8043c8:	001b883a 	mov	r13,zero
  8043cc:	680f883a 	mov	r7,r13
  8043d0:	b009883a 	mov	r4,r22
  8043d4:	000b883a 	mov	r5,zero
  8043d8:	980d883a 	mov	r6,r19
  8043dc:	b82d883a 	mov	r22,r23
  8043e0:	002f883a 	mov	r23,zero
  8043e4:	db401615 	stw	r13,88(sp)
  8043e8:	d8801315 	stw	r2,76(sp)
  8043ec:	d8c01415 	stw	r3,80(sp)
  8043f0:	dcc01515 	stw	r19,84(sp)
  8043f4:	0804d400 	call	804d40 <__muldi3>
  8043f8:	b00d883a 	mov	r6,r22
  8043fc:	000b883a 	mov	r5,zero
  804400:	9009883a 	mov	r4,r18
  804404:	b80f883a 	mov	r7,r23
  804408:	1021883a 	mov	r16,r2
  80440c:	1823883a 	mov	r17,r3
  804410:	0804d400 	call	804d40 <__muldi3>
  804414:	8085883a 	add	r2,r16,r2
  804418:	140d803a 	cmpltu	r6,r2,r16
  80441c:	88c7883a 	add	r3,r17,r3
  804420:	30cd883a 	add	r6,r6,r3
  804424:	1029883a 	mov	r20,r2
  804428:	302b883a 	mov	r21,r6
  80442c:	da801317 	ldw	r10,76(sp)
  804430:	dac01417 	ldw	r11,80(sp)
  804434:	db001517 	ldw	r12,84(sp)
  804438:	db401617 	ldw	r13,88(sp)
  80443c:	3440612e 	bgeu	r6,r17,8045c4 <__muldf3+0x318>
  804440:	0009883a 	mov	r4,zero
  804444:	5105883a 	add	r2,r10,r4
  804448:	128d803a 	cmpltu	r6,r2,r10
  80444c:	5d07883a 	add	r3,r11,r20
  804450:	30cd883a 	add	r6,r6,r3
  804454:	0021883a 	mov	r16,zero
  804458:	04400044 	movi	r17,1
  80445c:	1025883a 	mov	r18,r2
  804460:	3027883a 	mov	r19,r6
  804464:	32c06236 	bltu	r6,r11,8045f0 <__muldf3+0x344>
  804468:	59807a26 	beq	r11,r6,804654 <__muldf3+0x3a8>
  80446c:	680b883a 	mov	r5,r13
  804470:	b80f883a 	mov	r7,r23
  804474:	6009883a 	mov	r4,r12
  804478:	b00d883a 	mov	r6,r22
  80447c:	0804d400 	call	804d40 <__muldi3>
  804480:	1009883a 	mov	r4,r2
  804484:	000f883a 	mov	r7,zero
  804488:	1545883a 	add	r2,r2,r21
  80448c:	1111803a 	cmpltu	r8,r2,r4
  804490:	19c7883a 	add	r3,r3,r7
  804494:	40c7883a 	add	r3,r8,r3
  804498:	88cb883a 	add	r5,r17,r3
  80449c:	d8c00617 	ldw	r3,24(sp)
  8044a0:	8089883a 	add	r4,r16,r2
  8044a4:	d8800b17 	ldw	r2,44(sp)
  8044a8:	18c00104 	addi	r3,r3,4
  8044ac:	240d803a 	cmpltu	r6,r4,r16
  8044b0:	10c7883a 	add	r3,r2,r3
  8044b4:	2013883a 	mov	r9,r4
  8044b8:	d8800a17 	ldw	r2,40(sp)
  8044bc:	d9000517 	ldw	r4,20(sp)
  8044c0:	314d883a 	add	r6,r6,r5
  8044c4:	3015883a 	mov	r10,r6
  8044c8:	2088c03a 	cmpne	r4,r4,r2
  8044cc:	00880034 	movhi	r2,8192
  8044d0:	10bfffc4 	addi	r2,r2,-1
  8044d4:	d9000f15 	stw	r4,60(sp)
  8044d8:	d8c01015 	stw	r3,64(sp)
  8044dc:	1180162e 	bgeu	r2,r6,804538 <__muldf3+0x28c>
  8044e0:	1811883a 	mov	r8,r3
  8044e4:	101f883a 	mov	r15,r2
  8044e8:	980497fa 	slli	r2,r19,31
  8044ec:	9016d07a 	srli	r11,r18,1
  8044f0:	500697fa 	slli	r3,r10,31
  8044f4:	480cd07a 	srli	r6,r9,1
  8044f8:	500ed07a 	srli	r7,r10,1
  8044fc:	12d6b03a 	or	r11,r2,r11
  804500:	00800044 	movi	r2,1
  804504:	198cb03a 	or	r6,r3,r6
  804508:	4888703a 	and	r4,r9,r2
  80450c:	9818d07a 	srli	r12,r19,1
  804510:	001b883a 	mov	r13,zero
  804514:	03a00034 	movhi	r14,32768
  804518:	3013883a 	mov	r9,r6
  80451c:	3815883a 	mov	r10,r7
  804520:	4091883a 	add	r8,r8,r2
  804524:	20000226 	beq	r4,zero,804530 <__muldf3+0x284>
  804528:	5b64b03a 	or	r18,r11,r13
  80452c:	63a6b03a 	or	r19,r12,r14
  804530:	7abfed36 	bltu	r15,r10,8044e8 <__muldf3+0x23c>
  804534:	da001015 	stw	r8,64(sp)
  804538:	00840034 	movhi	r2,4096
  80453c:	10bfffc4 	addi	r2,r2,-1
  804540:	12801436 	bltu	r2,r10,804594 <__muldf3+0x2e8>
  804544:	da001017 	ldw	r8,64(sp)
  804548:	101f883a 	mov	r15,r2
  80454c:	4a45883a 	add	r2,r9,r9
  804550:	124d803a 	cmpltu	r6,r2,r9
  804554:	5287883a 	add	r3,r10,r10
  804558:	9497883a 	add	r11,r18,r18
  80455c:	5c8f803a 	cmpltu	r7,r11,r18
  804560:	9cd9883a 	add	r12,r19,r19
  804564:	01000044 	movi	r4,1
  804568:	30cd883a 	add	r6,r6,r3
  80456c:	3b0f883a 	add	r7,r7,r12
  804570:	423fffc4 	addi	r8,r8,-1
  804574:	1013883a 	mov	r9,r2
  804578:	3015883a 	mov	r10,r6
  80457c:	111ab03a 	or	r13,r2,r4
  804580:	98003016 	blt	r19,zero,804644 <__muldf3+0x398>
  804584:	5825883a 	mov	r18,r11
  804588:	3827883a 	mov	r19,r7
  80458c:	7abfef2e 	bgeu	r15,r10,80454c <__muldf3+0x2a0>
  804590:	da001015 	stw	r8,64(sp)
  804594:	00803fc4 	movi	r2,255
  804598:	488e703a 	and	r7,r9,r2
  80459c:	00802004 	movi	r2,128
  8045a0:	0007883a 	mov	r3,zero
  8045a4:	0011883a 	mov	r8,zero
  8045a8:	38801826 	beq	r7,r2,80460c <__muldf3+0x360>
  8045ac:	008000c4 	movi	r2,3
  8045b0:	d9000e04 	addi	r4,sp,56
  8045b4:	da801215 	stw	r10,72(sp)
  8045b8:	d8800e15 	stw	r2,56(sp)
  8045bc:	da401115 	stw	r9,68(sp)
  8045c0:	003f6a06 	br	80436c <__muldf3+0xc0>
  8045c4:	89802126 	beq	r17,r6,80464c <__muldf3+0x3a0>
  8045c8:	0009883a 	mov	r4,zero
  8045cc:	5105883a 	add	r2,r10,r4
  8045d0:	128d803a 	cmpltu	r6,r2,r10
  8045d4:	5d07883a 	add	r3,r11,r20
  8045d8:	30cd883a 	add	r6,r6,r3
  8045dc:	0021883a 	mov	r16,zero
  8045e0:	0023883a 	mov	r17,zero
  8045e4:	1025883a 	mov	r18,r2
  8045e8:	3027883a 	mov	r19,r6
  8045ec:	32ff9e2e 	bgeu	r6,r11,804468 <__muldf3+0x1bc>
  8045f0:	00800044 	movi	r2,1
  8045f4:	8089883a 	add	r4,r16,r2
  8045f8:	240d803a 	cmpltu	r6,r4,r16
  8045fc:	344d883a 	add	r6,r6,r17
  804600:	2021883a 	mov	r16,r4
  804604:	3023883a 	mov	r17,r6
  804608:	003f9806 	br	80446c <__muldf3+0x1c0>
  80460c:	403fe71e 	bne	r8,zero,8045ac <__muldf3+0x300>
  804610:	01004004 	movi	r4,256
  804614:	4904703a 	and	r2,r9,r4
  804618:	10c4b03a 	or	r2,r2,r3
  80461c:	103fe31e 	bne	r2,zero,8045ac <__muldf3+0x300>
  804620:	94c4b03a 	or	r2,r18,r19
  804624:	103fe126 	beq	r2,zero,8045ac <__muldf3+0x300>
  804628:	49c5883a 	add	r2,r9,r7
  80462c:	1251803a 	cmpltu	r8,r2,r9
  804630:	4291883a 	add	r8,r8,r10
  804634:	013fc004 	movi	r4,-256
  804638:	1112703a 	and	r9,r2,r4
  80463c:	4015883a 	mov	r10,r8
  804640:	003fda06 	br	8045ac <__muldf3+0x300>
  804644:	6813883a 	mov	r9,r13
  804648:	003fce06 	br	804584 <__muldf3+0x2d8>
  80464c:	143f7c36 	bltu	r2,r16,804440 <__muldf3+0x194>
  804650:	003fdd06 	br	8045c8 <__muldf3+0x31c>
  804654:	12bf852e 	bgeu	r2,r10,80446c <__muldf3+0x1c0>
  804658:	003fe506 	br	8045f0 <__muldf3+0x344>
  80465c:	00800084 	movi	r2,2
  804660:	20bf351e 	bne	r4,r2,804338 <__muldf3+0x8c>
  804664:	01002074 	movhi	r4,129
  804668:	210acf04 	addi	r4,r4,11068
  80466c:	003f3f06 	br	80436c <__muldf3+0xc0>

00804670 <__divdf3>:
  804670:	deffed04 	addi	sp,sp,-76
  804674:	dcc01115 	stw	r19,68(sp)
  804678:	dcc00404 	addi	r19,sp,16
  80467c:	2011883a 	mov	r8,r4
  804680:	2813883a 	mov	r9,r5
  804684:	dc000e15 	stw	r16,56(sp)
  804688:	d809883a 	mov	r4,sp
  80468c:	980b883a 	mov	r5,r19
  804690:	dc000904 	addi	r16,sp,36
  804694:	dfc01215 	stw	ra,72(sp)
  804698:	da400115 	stw	r9,4(sp)
  80469c:	d9c00315 	stw	r7,12(sp)
  8046a0:	da000015 	stw	r8,0(sp)
  8046a4:	d9800215 	stw	r6,8(sp)
  8046a8:	dc801015 	stw	r18,64(sp)
  8046ac:	dc400f15 	stw	r17,60(sp)
  8046b0:	080516c0 	call	80516c <__unpack_d>
  8046b4:	d9000204 	addi	r4,sp,8
  8046b8:	800b883a 	mov	r5,r16
  8046bc:	080516c0 	call	80516c <__unpack_d>
  8046c0:	d9000417 	ldw	r4,16(sp)
  8046c4:	00800044 	movi	r2,1
  8046c8:	11000b2e 	bgeu	r2,r4,8046f8 <__divdf3+0x88>
  8046cc:	d9400917 	ldw	r5,36(sp)
  8046d0:	1140762e 	bgeu	r2,r5,8048ac <__divdf3+0x23c>
  8046d4:	d8800517 	ldw	r2,20(sp)
  8046d8:	d8c00a17 	ldw	r3,40(sp)
  8046dc:	01800104 	movi	r6,4
  8046e0:	10c4f03a 	xor	r2,r2,r3
  8046e4:	d8800515 	stw	r2,20(sp)
  8046e8:	21800226 	beq	r4,r6,8046f4 <__divdf3+0x84>
  8046ec:	00800084 	movi	r2,2
  8046f0:	2080141e 	bne	r4,r2,804744 <__divdf3+0xd4>
  8046f4:	29000926 	beq	r5,r4,80471c <__divdf3+0xac>
  8046f8:	9809883a 	mov	r4,r19
  8046fc:	0804e580 	call	804e58 <__pack_d>
  804700:	dfc01217 	ldw	ra,72(sp)
  804704:	dcc01117 	ldw	r19,68(sp)
  804708:	dc801017 	ldw	r18,64(sp)
  80470c:	dc400f17 	ldw	r17,60(sp)
  804710:	dc000e17 	ldw	r16,56(sp)
  804714:	dec01304 	addi	sp,sp,76
  804718:	f800283a 	ret
  80471c:	01002074 	movhi	r4,129
  804720:	210acf04 	addi	r4,r4,11068
  804724:	0804e580 	call	804e58 <__pack_d>
  804728:	dfc01217 	ldw	ra,72(sp)
  80472c:	dcc01117 	ldw	r19,68(sp)
  804730:	dc801017 	ldw	r18,64(sp)
  804734:	dc400f17 	ldw	r17,60(sp)
  804738:	dc000e17 	ldw	r16,56(sp)
  80473c:	dec01304 	addi	sp,sp,76
  804740:	f800283a 	ret
  804744:	29805b26 	beq	r5,r6,8048b4 <__divdf3+0x244>
  804748:	28802d26 	beq	r5,r2,804800 <__divdf3+0x190>
  80474c:	d8c00617 	ldw	r3,24(sp)
  804750:	d8800b17 	ldw	r2,44(sp)
  804754:	d9c00817 	ldw	r7,32(sp)
  804758:	dc400d17 	ldw	r17,52(sp)
  80475c:	188bc83a 	sub	r5,r3,r2
  804760:	d9800717 	ldw	r6,28(sp)
  804764:	dc000c17 	ldw	r16,48(sp)
  804768:	d9400615 	stw	r5,24(sp)
  80476c:	3c403836 	bltu	r7,r17,804850 <__divdf3+0x1e0>
  804770:	89c03626 	beq	r17,r7,80484c <__divdf3+0x1dc>
  804774:	0015883a 	mov	r10,zero
  804778:	001d883a 	mov	r14,zero
  80477c:	02c40034 	movhi	r11,4096
  804780:	001f883a 	mov	r15,zero
  804784:	003f883a 	mov	ra,zero
  804788:	04800f44 	movi	r18,61
  80478c:	00000f06 	br	8047cc <__divdf3+0x15c>
  804790:	601d883a 	mov	r14,r12
  804794:	681f883a 	mov	r15,r13
  804798:	400d883a 	mov	r6,r8
  80479c:	100f883a 	mov	r7,r2
  8047a0:	3191883a 	add	r8,r6,r6
  8047a4:	5808d07a 	srli	r4,r11,1
  8047a8:	4185803a 	cmpltu	r2,r8,r6
  8047ac:	39d3883a 	add	r9,r7,r7
  8047b0:	28c6b03a 	or	r3,r5,r3
  8047b4:	1245883a 	add	r2,r2,r9
  8047b8:	1815883a 	mov	r10,r3
  8047bc:	2017883a 	mov	r11,r4
  8047c0:	400d883a 	mov	r6,r8
  8047c4:	100f883a 	mov	r7,r2
  8047c8:	fc801726 	beq	ra,r18,804828 <__divdf3+0x1b8>
  8047cc:	580a97fa 	slli	r5,r11,31
  8047d0:	5006d07a 	srli	r3,r10,1
  8047d4:	ffc00044 	addi	ra,ra,1
  8047d8:	3c7ff136 	bltu	r7,r17,8047a0 <__divdf3+0x130>
  8047dc:	3411c83a 	sub	r8,r6,r16
  8047e0:	3205803a 	cmpltu	r2,r6,r8
  8047e4:	3c53c83a 	sub	r9,r7,r17
  8047e8:	7298b03a 	or	r12,r14,r10
  8047ec:	7adab03a 	or	r13,r15,r11
  8047f0:	4885c83a 	sub	r2,r9,r2
  8047f4:	89ffe61e 	bne	r17,r7,804790 <__divdf3+0x120>
  8047f8:	343fe936 	bltu	r6,r16,8047a0 <__divdf3+0x130>
  8047fc:	003fe406 	br	804790 <__divdf3+0x120>
  804800:	9809883a 	mov	r4,r19
  804804:	d9800415 	stw	r6,16(sp)
  804808:	0804e580 	call	804e58 <__pack_d>
  80480c:	dfc01217 	ldw	ra,72(sp)
  804810:	dcc01117 	ldw	r19,68(sp)
  804814:	dc801017 	ldw	r18,64(sp)
  804818:	dc400f17 	ldw	r17,60(sp)
  80481c:	dc000e17 	ldw	r16,56(sp)
  804820:	dec01304 	addi	sp,sp,76
  804824:	f800283a 	ret
  804828:	00803fc4 	movi	r2,255
  80482c:	7090703a 	and	r8,r14,r2
  804830:	00802004 	movi	r2,128
  804834:	0007883a 	mov	r3,zero
  804838:	0013883a 	mov	r9,zero
  80483c:	40800d26 	beq	r8,r2,804874 <__divdf3+0x204>
  804840:	dbc00815 	stw	r15,32(sp)
  804844:	db800715 	stw	r14,28(sp)
  804848:	003fab06 	br	8046f8 <__divdf3+0x88>
  80484c:	343fc92e 	bgeu	r6,r16,804774 <__divdf3+0x104>
  804850:	3185883a 	add	r2,r6,r6
  804854:	1189803a 	cmpltu	r4,r2,r6
  804858:	39c7883a 	add	r3,r7,r7
  80485c:	20c9883a 	add	r4,r4,r3
  804860:	297fffc4 	addi	r5,r5,-1
  804864:	100d883a 	mov	r6,r2
  804868:	200f883a 	mov	r7,r4
  80486c:	d9400615 	stw	r5,24(sp)
  804870:	003fc006 	br	804774 <__divdf3+0x104>
  804874:	483ff21e 	bne	r9,zero,804840 <__divdf3+0x1d0>
  804878:	01004004 	movi	r4,256
  80487c:	7104703a 	and	r2,r14,r4
  804880:	10c4b03a 	or	r2,r2,r3
  804884:	103fee1e 	bne	r2,zero,804840 <__divdf3+0x1d0>
  804888:	31c4b03a 	or	r2,r6,r7
  80488c:	103fec26 	beq	r2,zero,804840 <__divdf3+0x1d0>
  804890:	7205883a 	add	r2,r14,r8
  804894:	1391803a 	cmpltu	r8,r2,r14
  804898:	43d1883a 	add	r8,r8,r15
  80489c:	013fc004 	movi	r4,-256
  8048a0:	111c703a 	and	r14,r2,r4
  8048a4:	401f883a 	mov	r15,r8
  8048a8:	003fe506 	br	804840 <__divdf3+0x1d0>
  8048ac:	8009883a 	mov	r4,r16
  8048b0:	003f9206 	br	8046fc <__divdf3+0x8c>
  8048b4:	9809883a 	mov	r4,r19
  8048b8:	d8000715 	stw	zero,28(sp)
  8048bc:	d8000815 	stw	zero,32(sp)
  8048c0:	d8000615 	stw	zero,24(sp)
  8048c4:	003f8d06 	br	8046fc <__divdf3+0x8c>

008048c8 <__eqdf2>:
  8048c8:	deffef04 	addi	sp,sp,-68
  8048cc:	dc400f15 	stw	r17,60(sp)
  8048d0:	dc400404 	addi	r17,sp,16
  8048d4:	2005883a 	mov	r2,r4
  8048d8:	2807883a 	mov	r3,r5
  8048dc:	dc000e15 	stw	r16,56(sp)
  8048e0:	d809883a 	mov	r4,sp
  8048e4:	880b883a 	mov	r5,r17
  8048e8:	dc000904 	addi	r16,sp,36
  8048ec:	d8c00115 	stw	r3,4(sp)
  8048f0:	d8800015 	stw	r2,0(sp)
  8048f4:	d9800215 	stw	r6,8(sp)
  8048f8:	dfc01015 	stw	ra,64(sp)
  8048fc:	d9c00315 	stw	r7,12(sp)
  804900:	080516c0 	call	80516c <__unpack_d>
  804904:	d9000204 	addi	r4,sp,8
  804908:	800b883a 	mov	r5,r16
  80490c:	080516c0 	call	80516c <__unpack_d>
  804910:	d8800417 	ldw	r2,16(sp)
  804914:	00c00044 	movi	r3,1
  804918:	180d883a 	mov	r6,r3
  80491c:	1880062e 	bgeu	r3,r2,804938 <__eqdf2+0x70>
  804920:	d8800917 	ldw	r2,36(sp)
  804924:	8809883a 	mov	r4,r17
  804928:	800b883a 	mov	r5,r16
  80492c:	1880022e 	bgeu	r3,r2,804938 <__eqdf2+0x70>
  804930:	08052a40 	call	8052a4 <__fpcmp_parts_d>
  804934:	100d883a 	mov	r6,r2
  804938:	3005883a 	mov	r2,r6
  80493c:	dfc01017 	ldw	ra,64(sp)
  804940:	dc400f17 	ldw	r17,60(sp)
  804944:	dc000e17 	ldw	r16,56(sp)
  804948:	dec01104 	addi	sp,sp,68
  80494c:	f800283a 	ret

00804950 <__nedf2>:
  804950:	deffef04 	addi	sp,sp,-68
  804954:	dc400f15 	stw	r17,60(sp)
  804958:	dc400404 	addi	r17,sp,16
  80495c:	2005883a 	mov	r2,r4
  804960:	2807883a 	mov	r3,r5
  804964:	dc000e15 	stw	r16,56(sp)
  804968:	d809883a 	mov	r4,sp
  80496c:	880b883a 	mov	r5,r17
  804970:	dc000904 	addi	r16,sp,36
  804974:	d8c00115 	stw	r3,4(sp)
  804978:	d8800015 	stw	r2,0(sp)
  80497c:	d9800215 	stw	r6,8(sp)
  804980:	dfc01015 	stw	ra,64(sp)
  804984:	d9c00315 	stw	r7,12(sp)
  804988:	080516c0 	call	80516c <__unpack_d>
  80498c:	d9000204 	addi	r4,sp,8
  804990:	800b883a 	mov	r5,r16
  804994:	080516c0 	call	80516c <__unpack_d>
  804998:	d8800417 	ldw	r2,16(sp)
  80499c:	00c00044 	movi	r3,1
  8049a0:	180d883a 	mov	r6,r3
  8049a4:	1880062e 	bgeu	r3,r2,8049c0 <__nedf2+0x70>
  8049a8:	d8800917 	ldw	r2,36(sp)
  8049ac:	8809883a 	mov	r4,r17
  8049b0:	800b883a 	mov	r5,r16
  8049b4:	1880022e 	bgeu	r3,r2,8049c0 <__nedf2+0x70>
  8049b8:	08052a40 	call	8052a4 <__fpcmp_parts_d>
  8049bc:	100d883a 	mov	r6,r2
  8049c0:	3005883a 	mov	r2,r6
  8049c4:	dfc01017 	ldw	ra,64(sp)
  8049c8:	dc400f17 	ldw	r17,60(sp)
  8049cc:	dc000e17 	ldw	r16,56(sp)
  8049d0:	dec01104 	addi	sp,sp,68
  8049d4:	f800283a 	ret

008049d8 <__gtdf2>:
  8049d8:	deffef04 	addi	sp,sp,-68
  8049dc:	dc400f15 	stw	r17,60(sp)
  8049e0:	dc400404 	addi	r17,sp,16
  8049e4:	2005883a 	mov	r2,r4
  8049e8:	2807883a 	mov	r3,r5
  8049ec:	dc000e15 	stw	r16,56(sp)
  8049f0:	d809883a 	mov	r4,sp
  8049f4:	880b883a 	mov	r5,r17
  8049f8:	dc000904 	addi	r16,sp,36
  8049fc:	d8c00115 	stw	r3,4(sp)
  804a00:	d8800015 	stw	r2,0(sp)
  804a04:	d9800215 	stw	r6,8(sp)
  804a08:	dfc01015 	stw	ra,64(sp)
  804a0c:	d9c00315 	stw	r7,12(sp)
  804a10:	080516c0 	call	80516c <__unpack_d>
  804a14:	d9000204 	addi	r4,sp,8
  804a18:	800b883a 	mov	r5,r16
  804a1c:	080516c0 	call	80516c <__unpack_d>
  804a20:	d8800417 	ldw	r2,16(sp)
  804a24:	00c00044 	movi	r3,1
  804a28:	01bfffc4 	movi	r6,-1
  804a2c:	1880062e 	bgeu	r3,r2,804a48 <__gtdf2+0x70>
  804a30:	d8800917 	ldw	r2,36(sp)
  804a34:	8809883a 	mov	r4,r17
  804a38:	800b883a 	mov	r5,r16
  804a3c:	1880022e 	bgeu	r3,r2,804a48 <__gtdf2+0x70>
  804a40:	08052a40 	call	8052a4 <__fpcmp_parts_d>
  804a44:	100d883a 	mov	r6,r2
  804a48:	3005883a 	mov	r2,r6
  804a4c:	dfc01017 	ldw	ra,64(sp)
  804a50:	dc400f17 	ldw	r17,60(sp)
  804a54:	dc000e17 	ldw	r16,56(sp)
  804a58:	dec01104 	addi	sp,sp,68
  804a5c:	f800283a 	ret

00804a60 <__ltdf2>:
  804a60:	deffef04 	addi	sp,sp,-68
  804a64:	dc400f15 	stw	r17,60(sp)
  804a68:	dc400404 	addi	r17,sp,16
  804a6c:	2005883a 	mov	r2,r4
  804a70:	2807883a 	mov	r3,r5
  804a74:	dc000e15 	stw	r16,56(sp)
  804a78:	d809883a 	mov	r4,sp
  804a7c:	880b883a 	mov	r5,r17
  804a80:	dc000904 	addi	r16,sp,36
  804a84:	d8c00115 	stw	r3,4(sp)
  804a88:	d8800015 	stw	r2,0(sp)
  804a8c:	d9800215 	stw	r6,8(sp)
  804a90:	dfc01015 	stw	ra,64(sp)
  804a94:	d9c00315 	stw	r7,12(sp)
  804a98:	080516c0 	call	80516c <__unpack_d>
  804a9c:	d9000204 	addi	r4,sp,8
  804aa0:	800b883a 	mov	r5,r16
  804aa4:	080516c0 	call	80516c <__unpack_d>
  804aa8:	d8800417 	ldw	r2,16(sp)
  804aac:	00c00044 	movi	r3,1
  804ab0:	180d883a 	mov	r6,r3
  804ab4:	1880062e 	bgeu	r3,r2,804ad0 <__ltdf2+0x70>
  804ab8:	d8800917 	ldw	r2,36(sp)
  804abc:	8809883a 	mov	r4,r17
  804ac0:	800b883a 	mov	r5,r16
  804ac4:	1880022e 	bgeu	r3,r2,804ad0 <__ltdf2+0x70>
  804ac8:	08052a40 	call	8052a4 <__fpcmp_parts_d>
  804acc:	100d883a 	mov	r6,r2
  804ad0:	3005883a 	mov	r2,r6
  804ad4:	dfc01017 	ldw	ra,64(sp)
  804ad8:	dc400f17 	ldw	r17,60(sp)
  804adc:	dc000e17 	ldw	r16,56(sp)
  804ae0:	dec01104 	addi	sp,sp,68
  804ae4:	f800283a 	ret

00804ae8 <__ledf2>:
  804ae8:	deffef04 	addi	sp,sp,-68
  804aec:	dc400f15 	stw	r17,60(sp)
  804af0:	dc400404 	addi	r17,sp,16
  804af4:	2005883a 	mov	r2,r4
  804af8:	2807883a 	mov	r3,r5
  804afc:	dc000e15 	stw	r16,56(sp)
  804b00:	d809883a 	mov	r4,sp
  804b04:	880b883a 	mov	r5,r17
  804b08:	dc000904 	addi	r16,sp,36
  804b0c:	d8c00115 	stw	r3,4(sp)
  804b10:	d8800015 	stw	r2,0(sp)
  804b14:	d9800215 	stw	r6,8(sp)
  804b18:	dfc01015 	stw	ra,64(sp)
  804b1c:	d9c00315 	stw	r7,12(sp)
  804b20:	080516c0 	call	80516c <__unpack_d>
  804b24:	d9000204 	addi	r4,sp,8
  804b28:	800b883a 	mov	r5,r16
  804b2c:	080516c0 	call	80516c <__unpack_d>
  804b30:	d8800417 	ldw	r2,16(sp)
  804b34:	00c00044 	movi	r3,1
  804b38:	180d883a 	mov	r6,r3
  804b3c:	1880062e 	bgeu	r3,r2,804b58 <__ledf2+0x70>
  804b40:	d8800917 	ldw	r2,36(sp)
  804b44:	8809883a 	mov	r4,r17
  804b48:	800b883a 	mov	r5,r16
  804b4c:	1880022e 	bgeu	r3,r2,804b58 <__ledf2+0x70>
  804b50:	08052a40 	call	8052a4 <__fpcmp_parts_d>
  804b54:	100d883a 	mov	r6,r2
  804b58:	3005883a 	mov	r2,r6
  804b5c:	dfc01017 	ldw	ra,64(sp)
  804b60:	dc400f17 	ldw	r17,60(sp)
  804b64:	dc000e17 	ldw	r16,56(sp)
  804b68:	dec01104 	addi	sp,sp,68
  804b6c:	f800283a 	ret

00804b70 <__floatsidf>:
  804b70:	2006d7fa 	srli	r3,r4,31
  804b74:	defff604 	addi	sp,sp,-40
  804b78:	008000c4 	movi	r2,3
  804b7c:	dfc00915 	stw	ra,36(sp)
  804b80:	dcc00815 	stw	r19,32(sp)
  804b84:	dc800715 	stw	r18,28(sp)
  804b88:	dc400615 	stw	r17,24(sp)
  804b8c:	dc000515 	stw	r16,20(sp)
  804b90:	d8800015 	stw	r2,0(sp)
  804b94:	d8c00115 	stw	r3,4(sp)
  804b98:	20000f1e 	bne	r4,zero,804bd8 <__floatsidf+0x68>
  804b9c:	00800084 	movi	r2,2
  804ba0:	d8800015 	stw	r2,0(sp)
  804ba4:	d809883a 	mov	r4,sp
  804ba8:	0804e580 	call	804e58 <__pack_d>
  804bac:	1009883a 	mov	r4,r2
  804bb0:	180b883a 	mov	r5,r3
  804bb4:	2005883a 	mov	r2,r4
  804bb8:	2807883a 	mov	r3,r5
  804bbc:	dfc00917 	ldw	ra,36(sp)
  804bc0:	dcc00817 	ldw	r19,32(sp)
  804bc4:	dc800717 	ldw	r18,28(sp)
  804bc8:	dc400617 	ldw	r17,24(sp)
  804bcc:	dc000517 	ldw	r16,20(sp)
  804bd0:	dec00a04 	addi	sp,sp,40
  804bd4:	f800283a 	ret
  804bd8:	00800f04 	movi	r2,60
  804bdc:	1807003a 	cmpeq	r3,r3,zero
  804be0:	d8800215 	stw	r2,8(sp)
  804be4:	18001126 	beq	r3,zero,804c2c <__floatsidf+0xbc>
  804be8:	0027883a 	mov	r19,zero
  804bec:	2025883a 	mov	r18,r4
  804bf0:	d9000315 	stw	r4,12(sp)
  804bf4:	dcc00415 	stw	r19,16(sp)
  804bf8:	0804dd80 	call	804dd8 <__clzsi2>
  804bfc:	11000744 	addi	r4,r2,29
  804c00:	013fe80e 	bge	zero,r4,804ba4 <__floatsidf+0x34>
  804c04:	10bfff44 	addi	r2,r2,-3
  804c08:	10000c16 	blt	r2,zero,804c3c <__floatsidf+0xcc>
  804c0c:	90a2983a 	sll	r17,r18,r2
  804c10:	0021883a 	mov	r16,zero
  804c14:	d8800217 	ldw	r2,8(sp)
  804c18:	dc400415 	stw	r17,16(sp)
  804c1c:	dc000315 	stw	r16,12(sp)
  804c20:	1105c83a 	sub	r2,r2,r4
  804c24:	d8800215 	stw	r2,8(sp)
  804c28:	003fde06 	br	804ba4 <__floatsidf+0x34>
  804c2c:	00a00034 	movhi	r2,32768
  804c30:	20800a26 	beq	r4,r2,804c5c <__floatsidf+0xec>
  804c34:	0109c83a 	sub	r4,zero,r4
  804c38:	003feb06 	br	804be8 <__floatsidf+0x78>
  804c3c:	9006d07a 	srli	r3,r18,1
  804c40:	008007c4 	movi	r2,31
  804c44:	1105c83a 	sub	r2,r2,r4
  804c48:	1886d83a 	srl	r3,r3,r2
  804c4c:	9922983a 	sll	r17,r19,r4
  804c50:	9120983a 	sll	r16,r18,r4
  804c54:	1c62b03a 	or	r17,r3,r17
  804c58:	003fee06 	br	804c14 <__floatsidf+0xa4>
  804c5c:	0009883a 	mov	r4,zero
  804c60:	01707834 	movhi	r5,49632
  804c64:	003fd306 	br	804bb4 <__floatsidf+0x44>

00804c68 <__fixdfsi>:
  804c68:	defff804 	addi	sp,sp,-32
  804c6c:	2005883a 	mov	r2,r4
  804c70:	2807883a 	mov	r3,r5
  804c74:	d809883a 	mov	r4,sp
  804c78:	d9400204 	addi	r5,sp,8
  804c7c:	d8c00115 	stw	r3,4(sp)
  804c80:	d8800015 	stw	r2,0(sp)
  804c84:	dfc00715 	stw	ra,28(sp)
  804c88:	080516c0 	call	80516c <__unpack_d>
  804c8c:	d8c00217 	ldw	r3,8(sp)
  804c90:	00800084 	movi	r2,2
  804c94:	1880051e 	bne	r3,r2,804cac <__fixdfsi+0x44>
  804c98:	0007883a 	mov	r3,zero
  804c9c:	1805883a 	mov	r2,r3
  804ca0:	dfc00717 	ldw	ra,28(sp)
  804ca4:	dec00804 	addi	sp,sp,32
  804ca8:	f800283a 	ret
  804cac:	00800044 	movi	r2,1
  804cb0:	10fff92e 	bgeu	r2,r3,804c98 <__fixdfsi+0x30>
  804cb4:	00800104 	movi	r2,4
  804cb8:	18800426 	beq	r3,r2,804ccc <__fixdfsi+0x64>
  804cbc:	d8c00417 	ldw	r3,16(sp)
  804cc0:	183ff516 	blt	r3,zero,804c98 <__fixdfsi+0x30>
  804cc4:	00800784 	movi	r2,30
  804cc8:	10c0080e 	bge	r2,r3,804cec <__fixdfsi+0x84>
  804ccc:	d8800317 	ldw	r2,12(sp)
  804cd0:	1000121e 	bne	r2,zero,804d1c <__fixdfsi+0xb4>
  804cd4:	00e00034 	movhi	r3,32768
  804cd8:	18ffffc4 	addi	r3,r3,-1
  804cdc:	1805883a 	mov	r2,r3
  804ce0:	dfc00717 	ldw	ra,28(sp)
  804ce4:	dec00804 	addi	sp,sp,32
  804ce8:	f800283a 	ret
  804cec:	00800f04 	movi	r2,60
  804cf0:	10d1c83a 	sub	r8,r2,r3
  804cf4:	40bff804 	addi	r2,r8,-32
  804cf8:	d9800517 	ldw	r6,20(sp)
  804cfc:	d9c00617 	ldw	r7,24(sp)
  804d00:	10000816 	blt	r2,zero,804d24 <__fixdfsi+0xbc>
  804d04:	3888d83a 	srl	r4,r7,r2
  804d08:	d8800317 	ldw	r2,12(sp)
  804d0c:	2007883a 	mov	r3,r4
  804d10:	103fe226 	beq	r2,zero,804c9c <__fixdfsi+0x34>
  804d14:	0107c83a 	sub	r3,zero,r4
  804d18:	003fe006 	br	804c9c <__fixdfsi+0x34>
  804d1c:	00e00034 	movhi	r3,32768
  804d20:	003fde06 	br	804c9c <__fixdfsi+0x34>
  804d24:	39c7883a 	add	r3,r7,r7
  804d28:	008007c4 	movi	r2,31
  804d2c:	1205c83a 	sub	r2,r2,r8
  804d30:	1886983a 	sll	r3,r3,r2
  804d34:	3208d83a 	srl	r4,r6,r8
  804d38:	1908b03a 	or	r4,r3,r4
  804d3c:	003ff206 	br	804d08 <__fixdfsi+0xa0>

00804d40 <__muldi3>:
  804d40:	2011883a 	mov	r8,r4
  804d44:	427fffcc 	andi	r9,r8,65535
  804d48:	4018d43a 	srli	r12,r8,16
  804d4c:	32bfffcc 	andi	r10,r6,65535
  804d50:	3016d43a 	srli	r11,r6,16
  804d54:	4a85383a 	mul	r2,r9,r10
  804d58:	6295383a 	mul	r10,r12,r10
  804d5c:	4ad3383a 	mul	r9,r9,r11
  804d60:	113fffcc 	andi	r4,r2,65535
  804d64:	1004d43a 	srli	r2,r2,16
  804d68:	4a93883a 	add	r9,r9,r10
  804d6c:	3807883a 	mov	r3,r7
  804d70:	1245883a 	add	r2,r2,r9
  804d74:	280f883a 	mov	r7,r5
  804d78:	180b883a 	mov	r5,r3
  804d7c:	1006943a 	slli	r3,r2,16
  804d80:	defffd04 	addi	sp,sp,-12
  804d84:	dc800215 	stw	r18,8(sp)
  804d88:	1907883a 	add	r3,r3,r4
  804d8c:	dc400115 	stw	r17,4(sp)
  804d90:	dc000015 	stw	r16,0(sp)
  804d94:	4165383a 	mul	r18,r8,r5
  804d98:	31e3383a 	mul	r17,r6,r7
  804d9c:	1012d43a 	srli	r9,r2,16
  804da0:	62d9383a 	mul	r12,r12,r11
  804da4:	181f883a 	mov	r15,r3
  804da8:	1280022e 	bgeu	r2,r10,804db4 <__muldi3+0x74>
  804dac:	00800074 	movhi	r2,1
  804db0:	6099883a 	add	r12,r12,r2
  804db4:	624d883a 	add	r6,r12,r9
  804db8:	9187883a 	add	r3,r18,r6
  804dbc:	88c7883a 	add	r3,r17,r3
  804dc0:	7805883a 	mov	r2,r15
  804dc4:	dc800217 	ldw	r18,8(sp)
  804dc8:	dc400117 	ldw	r17,4(sp)
  804dcc:	dc000017 	ldw	r16,0(sp)
  804dd0:	dec00304 	addi	sp,sp,12
  804dd4:	f800283a 	ret

00804dd8 <__clzsi2>:
  804dd8:	00bfffd4 	movui	r2,65535
  804ddc:	11000e36 	bltu	r2,r4,804e18 <__clzsi2+0x40>
  804de0:	00803fc4 	movi	r2,255
  804de4:	01400204 	movi	r5,8
  804de8:	0007883a 	mov	r3,zero
  804dec:	11001036 	bltu	r2,r4,804e30 <__clzsi2+0x58>
  804df0:	000b883a 	mov	r5,zero
  804df4:	20c6d83a 	srl	r3,r4,r3
  804df8:	00802074 	movhi	r2,129
  804dfc:	108ad404 	addi	r2,r2,11088
  804e00:	1887883a 	add	r3,r3,r2
  804e04:	18800003 	ldbu	r2,0(r3)
  804e08:	00c00804 	movi	r3,32
  804e0c:	2885883a 	add	r2,r5,r2
  804e10:	1885c83a 	sub	r2,r3,r2
  804e14:	f800283a 	ret
  804e18:	01400404 	movi	r5,16
  804e1c:	00804034 	movhi	r2,256
  804e20:	10bfffc4 	addi	r2,r2,-1
  804e24:	2807883a 	mov	r3,r5
  804e28:	113ff22e 	bgeu	r2,r4,804df4 <__clzsi2+0x1c>
  804e2c:	01400604 	movi	r5,24
  804e30:	2807883a 	mov	r3,r5
  804e34:	20c6d83a 	srl	r3,r4,r3
  804e38:	00802074 	movhi	r2,129
  804e3c:	108ad404 	addi	r2,r2,11088
  804e40:	1887883a 	add	r3,r3,r2
  804e44:	18800003 	ldbu	r2,0(r3)
  804e48:	00c00804 	movi	r3,32
  804e4c:	2885883a 	add	r2,r5,r2
  804e50:	1885c83a 	sub	r2,r3,r2
  804e54:	f800283a 	ret

00804e58 <__pack_d>:
  804e58:	20c00017 	ldw	r3,0(r4)
  804e5c:	defffd04 	addi	sp,sp,-12
  804e60:	dc000015 	stw	r16,0(sp)
  804e64:	dc800215 	stw	r18,8(sp)
  804e68:	dc400115 	stw	r17,4(sp)
  804e6c:	00800044 	movi	r2,1
  804e70:	22000317 	ldw	r8,12(r4)
  804e74:	001f883a 	mov	r15,zero
  804e78:	22400417 	ldw	r9,16(r4)
  804e7c:	24000117 	ldw	r16,4(r4)
  804e80:	10c0552e 	bgeu	r2,r3,804fd8 <__pack_d+0x180>
  804e84:	00800104 	movi	r2,4
  804e88:	18804f26 	beq	r3,r2,804fc8 <__pack_d+0x170>
  804e8c:	00800084 	movi	r2,2
  804e90:	18800226 	beq	r3,r2,804e9c <__pack_d+0x44>
  804e94:	4244b03a 	or	r2,r8,r9
  804e98:	10001a1e 	bne	r2,zero,804f04 <__pack_d+0xac>
  804e9c:	000d883a 	mov	r6,zero
  804ea0:	000f883a 	mov	r7,zero
  804ea4:	0011883a 	mov	r8,zero
  804ea8:	00800434 	movhi	r2,16
  804eac:	10bfffc4 	addi	r2,r2,-1
  804eb0:	301d883a 	mov	r14,r6
  804eb4:	3884703a 	and	r2,r7,r2
  804eb8:	400a953a 	slli	r5,r8,20
  804ebc:	79bffc2c 	andhi	r6,r15,65520
  804ec0:	308cb03a 	or	r6,r6,r2
  804ec4:	00e00434 	movhi	r3,32784
  804ec8:	18ffffc4 	addi	r3,r3,-1
  804ecc:	800497fa 	slli	r2,r16,31
  804ed0:	30c6703a 	and	r3,r6,r3
  804ed4:	1946b03a 	or	r3,r3,r5
  804ed8:	01600034 	movhi	r5,32768
  804edc:	297fffc4 	addi	r5,r5,-1
  804ee0:	194a703a 	and	r5,r3,r5
  804ee4:	288ab03a 	or	r5,r5,r2
  804ee8:	2807883a 	mov	r3,r5
  804eec:	7005883a 	mov	r2,r14
  804ef0:	dc800217 	ldw	r18,8(sp)
  804ef4:	dc400117 	ldw	r17,4(sp)
  804ef8:	dc000017 	ldw	r16,0(sp)
  804efc:	dec00304 	addi	sp,sp,12
  804f00:	f800283a 	ret
  804f04:	21000217 	ldw	r4,8(r4)
  804f08:	00bf0084 	movi	r2,-1022
  804f0c:	20803f16 	blt	r4,r2,80500c <__pack_d+0x1b4>
  804f10:	0080ffc4 	movi	r2,1023
  804f14:	11002c16 	blt	r2,r4,804fc8 <__pack_d+0x170>
  804f18:	00803fc4 	movi	r2,255
  804f1c:	408c703a 	and	r6,r8,r2
  804f20:	00802004 	movi	r2,128
  804f24:	0007883a 	mov	r3,zero
  804f28:	000f883a 	mov	r7,zero
  804f2c:	2280ffc4 	addi	r10,r4,1023
  804f30:	30801e26 	beq	r6,r2,804fac <__pack_d+0x154>
  804f34:	00801fc4 	movi	r2,127
  804f38:	4089883a 	add	r4,r8,r2
  804f3c:	220d803a 	cmpltu	r6,r4,r8
  804f40:	324d883a 	add	r6,r6,r9
  804f44:	2011883a 	mov	r8,r4
  804f48:	3013883a 	mov	r9,r6
  804f4c:	00880034 	movhi	r2,8192
  804f50:	10bfffc4 	addi	r2,r2,-1
  804f54:	12400d36 	bltu	r2,r9,804f8c <__pack_d+0x134>
  804f58:	4804963a 	slli	r2,r9,24
  804f5c:	400cd23a 	srli	r6,r8,8
  804f60:	480ed23a 	srli	r7,r9,8
  804f64:	013fffc4 	movi	r4,-1
  804f68:	118cb03a 	or	r6,r2,r6
  804f6c:	01400434 	movhi	r5,16
  804f70:	297fffc4 	addi	r5,r5,-1
  804f74:	3104703a 	and	r2,r6,r4
  804f78:	3946703a 	and	r3,r7,r5
  804f7c:	5201ffcc 	andi	r8,r10,2047
  804f80:	100d883a 	mov	r6,r2
  804f84:	180f883a 	mov	r7,r3
  804f88:	003fc706 	br	804ea8 <__pack_d+0x50>
  804f8c:	480897fa 	slli	r4,r9,31
  804f90:	4004d07a 	srli	r2,r8,1
  804f94:	4806d07a 	srli	r3,r9,1
  804f98:	52800044 	addi	r10,r10,1
  804f9c:	2084b03a 	or	r2,r4,r2
  804fa0:	1011883a 	mov	r8,r2
  804fa4:	1813883a 	mov	r9,r3
  804fa8:	003feb06 	br	804f58 <__pack_d+0x100>
  804fac:	383fe11e 	bne	r7,zero,804f34 <__pack_d+0xdc>
  804fb0:	01004004 	movi	r4,256
  804fb4:	4104703a 	and	r2,r8,r4
  804fb8:	10c4b03a 	or	r2,r2,r3
  804fbc:	103fe326 	beq	r2,zero,804f4c <__pack_d+0xf4>
  804fc0:	3005883a 	mov	r2,r6
  804fc4:	003fdc06 	br	804f38 <__pack_d+0xe0>
  804fc8:	000d883a 	mov	r6,zero
  804fcc:	000f883a 	mov	r7,zero
  804fd0:	0201ffc4 	movi	r8,2047
  804fd4:	003fb406 	br	804ea8 <__pack_d+0x50>
  804fd8:	0005883a 	mov	r2,zero
  804fdc:	00c00234 	movhi	r3,8
  804fe0:	408cb03a 	or	r6,r8,r2
  804fe4:	48ceb03a 	or	r7,r9,r3
  804fe8:	013fffc4 	movi	r4,-1
  804fec:	01400434 	movhi	r5,16
  804ff0:	297fffc4 	addi	r5,r5,-1
  804ff4:	3104703a 	and	r2,r6,r4
  804ff8:	3946703a 	and	r3,r7,r5
  804ffc:	100d883a 	mov	r6,r2
  805000:	180f883a 	mov	r7,r3
  805004:	0201ffc4 	movi	r8,2047
  805008:	003fa706 	br	804ea8 <__pack_d+0x50>
  80500c:	1109c83a 	sub	r4,r2,r4
  805010:	00800e04 	movi	r2,56
  805014:	11004316 	blt	r2,r4,805124 <__pack_d+0x2cc>
  805018:	21fff804 	addi	r7,r4,-32
  80501c:	38004516 	blt	r7,zero,805134 <__pack_d+0x2dc>
  805020:	49d8d83a 	srl	r12,r9,r7
  805024:	001b883a 	mov	r13,zero
  805028:	0023883a 	mov	r17,zero
  80502c:	01400044 	movi	r5,1
  805030:	0025883a 	mov	r18,zero
  805034:	38004716 	blt	r7,zero,805154 <__pack_d+0x2fc>
  805038:	29d6983a 	sll	r11,r5,r7
  80503c:	0015883a 	mov	r10,zero
  805040:	00bfffc4 	movi	r2,-1
  805044:	5089883a 	add	r4,r10,r2
  805048:	588b883a 	add	r5,r11,r2
  80504c:	228d803a 	cmpltu	r6,r4,r10
  805050:	314b883a 	add	r5,r6,r5
  805054:	4104703a 	and	r2,r8,r4
  805058:	4946703a 	and	r3,r9,r5
  80505c:	10c4b03a 	or	r2,r2,r3
  805060:	10000226 	beq	r2,zero,80506c <__pack_d+0x214>
  805064:	04400044 	movi	r17,1
  805068:	0025883a 	mov	r18,zero
  80506c:	00803fc4 	movi	r2,255
  805070:	644eb03a 	or	r7,r12,r17
  805074:	3892703a 	and	r9,r7,r2
  805078:	00802004 	movi	r2,128
  80507c:	6c90b03a 	or	r8,r13,r18
  805080:	0015883a 	mov	r10,zero
  805084:	48801626 	beq	r9,r2,8050e0 <__pack_d+0x288>
  805088:	01001fc4 	movi	r4,127
  80508c:	3905883a 	add	r2,r7,r4
  805090:	11cd803a 	cmpltu	r6,r2,r7
  805094:	320d883a 	add	r6,r6,r8
  805098:	100f883a 	mov	r7,r2
  80509c:	00840034 	movhi	r2,4096
  8050a0:	10bfffc4 	addi	r2,r2,-1
  8050a4:	3011883a 	mov	r8,r6
  8050a8:	0007883a 	mov	r3,zero
  8050ac:	11801b36 	bltu	r2,r6,80511c <__pack_d+0x2c4>
  8050b0:	4004963a 	slli	r2,r8,24
  8050b4:	3808d23a 	srli	r4,r7,8
  8050b8:	400ad23a 	srli	r5,r8,8
  8050bc:	1813883a 	mov	r9,r3
  8050c0:	1108b03a 	or	r4,r2,r4
  8050c4:	00bfffc4 	movi	r2,-1
  8050c8:	00c00434 	movhi	r3,16
  8050cc:	18ffffc4 	addi	r3,r3,-1
  8050d0:	208c703a 	and	r6,r4,r2
  8050d4:	28ce703a 	and	r7,r5,r3
  8050d8:	4a01ffcc 	andi	r8,r9,2047
  8050dc:	003f7206 	br	804ea8 <__pack_d+0x50>
  8050e0:	503fe91e 	bne	r10,zero,805088 <__pack_d+0x230>
  8050e4:	01004004 	movi	r4,256
  8050e8:	3904703a 	and	r2,r7,r4
  8050ec:	0007883a 	mov	r3,zero
  8050f0:	10c4b03a 	or	r2,r2,r3
  8050f4:	10000626 	beq	r2,zero,805110 <__pack_d+0x2b8>
  8050f8:	3a45883a 	add	r2,r7,r9
  8050fc:	11cd803a 	cmpltu	r6,r2,r7
  805100:	320d883a 	add	r6,r6,r8
  805104:	100f883a 	mov	r7,r2
  805108:	3011883a 	mov	r8,r6
  80510c:	0007883a 	mov	r3,zero
  805110:	00840034 	movhi	r2,4096
  805114:	10bfffc4 	addi	r2,r2,-1
  805118:	123fe52e 	bgeu	r2,r8,8050b0 <__pack_d+0x258>
  80511c:	00c00044 	movi	r3,1
  805120:	003fe306 	br	8050b0 <__pack_d+0x258>
  805124:	0009883a 	mov	r4,zero
  805128:	0013883a 	mov	r9,zero
  80512c:	000b883a 	mov	r5,zero
  805130:	003fe406 	br	8050c4 <__pack_d+0x26c>
  805134:	4a47883a 	add	r3,r9,r9
  805138:	008007c4 	movi	r2,31
  80513c:	1105c83a 	sub	r2,r2,r4
  805140:	1886983a 	sll	r3,r3,r2
  805144:	4118d83a 	srl	r12,r8,r4
  805148:	491ad83a 	srl	r13,r9,r4
  80514c:	1b18b03a 	or	r12,r3,r12
  805150:	003fb506 	br	805028 <__pack_d+0x1d0>
  805154:	2806d07a 	srli	r3,r5,1
  805158:	008007c4 	movi	r2,31
  80515c:	1105c83a 	sub	r2,r2,r4
  805160:	1896d83a 	srl	r11,r3,r2
  805164:	2914983a 	sll	r10,r5,r4
  805168:	003fb506 	br	805040 <__pack_d+0x1e8>

0080516c <__unpack_d>:
  80516c:	20c00117 	ldw	r3,4(r4)
  805170:	22400017 	ldw	r9,0(r4)
  805174:	00800434 	movhi	r2,16
  805178:	10bfffc4 	addi	r2,r2,-1
  80517c:	1808d53a 	srli	r4,r3,20
  805180:	180cd7fa 	srli	r6,r3,31
  805184:	1894703a 	and	r10,r3,r2
  805188:	2201ffcc 	andi	r8,r4,2047
  80518c:	281b883a 	mov	r13,r5
  805190:	4817883a 	mov	r11,r9
  805194:	29800115 	stw	r6,4(r5)
  805198:	5019883a 	mov	r12,r10
  80519c:	40001e1e 	bne	r8,zero,805218 <__unpack_d+0xac>
  8051a0:	4a84b03a 	or	r2,r9,r10
  8051a4:	10001926 	beq	r2,zero,80520c <__unpack_d+0xa0>
  8051a8:	4804d63a 	srli	r2,r9,24
  8051ac:	500c923a 	slli	r6,r10,8
  8051b0:	013f0084 	movi	r4,-1022
  8051b4:	00c40034 	movhi	r3,4096
  8051b8:	18ffffc4 	addi	r3,r3,-1
  8051bc:	118cb03a 	or	r6,r2,r6
  8051c0:	008000c4 	movi	r2,3
  8051c4:	480a923a 	slli	r5,r9,8
  8051c8:	68800015 	stw	r2,0(r13)
  8051cc:	69000215 	stw	r4,8(r13)
  8051d0:	19800b36 	bltu	r3,r6,805200 <__unpack_d+0x94>
  8051d4:	200f883a 	mov	r7,r4
  8051d8:	1811883a 	mov	r8,r3
  8051dc:	2945883a 	add	r2,r5,r5
  8051e0:	1149803a 	cmpltu	r4,r2,r5
  8051e4:	3187883a 	add	r3,r6,r6
  8051e8:	20c9883a 	add	r4,r4,r3
  8051ec:	100b883a 	mov	r5,r2
  8051f0:	200d883a 	mov	r6,r4
  8051f4:	39ffffc4 	addi	r7,r7,-1
  8051f8:	413ff82e 	bgeu	r8,r4,8051dc <__unpack_d+0x70>
  8051fc:	69c00215 	stw	r7,8(r13)
  805200:	69800415 	stw	r6,16(r13)
  805204:	69400315 	stw	r5,12(r13)
  805208:	f800283a 	ret
  80520c:	00800084 	movi	r2,2
  805210:	28800015 	stw	r2,0(r5)
  805214:	f800283a 	ret
  805218:	0081ffc4 	movi	r2,2047
  80521c:	40800f26 	beq	r8,r2,80525c <__unpack_d+0xf0>
  805220:	480cd63a 	srli	r6,r9,24
  805224:	5006923a 	slli	r3,r10,8
  805228:	4804923a 	slli	r2,r9,8
  80522c:	0009883a 	mov	r4,zero
  805230:	30c6b03a 	or	r3,r6,r3
  805234:	01440034 	movhi	r5,4096
  805238:	110cb03a 	or	r6,r2,r4
  80523c:	423f0044 	addi	r8,r8,-1023
  805240:	194eb03a 	or	r7,r3,r5
  805244:	008000c4 	movi	r2,3
  805248:	69c00415 	stw	r7,16(r13)
  80524c:	6a000215 	stw	r8,8(r13)
  805250:	68800015 	stw	r2,0(r13)
  805254:	69800315 	stw	r6,12(r13)
  805258:	f800283a 	ret
  80525c:	4a84b03a 	or	r2,r9,r10
  805260:	1000031e 	bne	r2,zero,805270 <__unpack_d+0x104>
  805264:	00800104 	movi	r2,4
  805268:	28800015 	stw	r2,0(r5)
  80526c:	f800283a 	ret
  805270:	0009883a 	mov	r4,zero
  805274:	01400234 	movhi	r5,8
  805278:	4904703a 	and	r2,r9,r4
  80527c:	5146703a 	and	r3,r10,r5
  805280:	10c4b03a 	or	r2,r2,r3
  805284:	10000526 	beq	r2,zero,80529c <__unpack_d+0x130>
  805288:	00800044 	movi	r2,1
  80528c:	68800015 	stw	r2,0(r13)
  805290:	6b000415 	stw	r12,16(r13)
  805294:	6ac00315 	stw	r11,12(r13)
  805298:	f800283a 	ret
  80529c:	68000015 	stw	zero,0(r13)
  8052a0:	003ffb06 	br	805290 <__unpack_d+0x124>

008052a4 <__fpcmp_parts_d>:
  8052a4:	21800017 	ldw	r6,0(r4)
  8052a8:	00c00044 	movi	r3,1
  8052ac:	19800a2e 	bgeu	r3,r6,8052d8 <__fpcmp_parts_d+0x34>
  8052b0:	28800017 	ldw	r2,0(r5)
  8052b4:	1880082e 	bgeu	r3,r2,8052d8 <__fpcmp_parts_d+0x34>
  8052b8:	00c00104 	movi	r3,4
  8052bc:	30c02626 	beq	r6,r3,805358 <__fpcmp_parts_d+0xb4>
  8052c0:	10c02226 	beq	r2,r3,80534c <__fpcmp_parts_d+0xa8>
  8052c4:	00c00084 	movi	r3,2
  8052c8:	30c00526 	beq	r6,r3,8052e0 <__fpcmp_parts_d+0x3c>
  8052cc:	10c0071e 	bne	r2,r3,8052ec <__fpcmp_parts_d+0x48>
  8052d0:	20800117 	ldw	r2,4(r4)
  8052d4:	1000091e 	bne	r2,zero,8052fc <__fpcmp_parts_d+0x58>
  8052d8:	00800044 	movi	r2,1
  8052dc:	f800283a 	ret
  8052e0:	10c01a1e 	bne	r2,r3,80534c <__fpcmp_parts_d+0xa8>
  8052e4:	0005883a 	mov	r2,zero
  8052e8:	f800283a 	ret
  8052ec:	22000117 	ldw	r8,4(r4)
  8052f0:	28800117 	ldw	r2,4(r5)
  8052f4:	40800326 	beq	r8,r2,805304 <__fpcmp_parts_d+0x60>
  8052f8:	403ff726 	beq	r8,zero,8052d8 <__fpcmp_parts_d+0x34>
  8052fc:	00bfffc4 	movi	r2,-1
  805300:	f800283a 	ret
  805304:	20c00217 	ldw	r3,8(r4)
  805308:	28800217 	ldw	r2,8(r5)
  80530c:	10fffa16 	blt	r2,r3,8052f8 <__fpcmp_parts_d+0x54>
  805310:	18800916 	blt	r3,r2,805338 <__fpcmp_parts_d+0x94>
  805314:	21c00417 	ldw	r7,16(r4)
  805318:	28c00417 	ldw	r3,16(r5)
  80531c:	21800317 	ldw	r6,12(r4)
  805320:	28800317 	ldw	r2,12(r5)
  805324:	19fff436 	bltu	r3,r7,8052f8 <__fpcmp_parts_d+0x54>
  805328:	38c00526 	beq	r7,r3,805340 <__fpcmp_parts_d+0x9c>
  80532c:	38c00236 	bltu	r7,r3,805338 <__fpcmp_parts_d+0x94>
  805330:	19ffec1e 	bne	r3,r7,8052e4 <__fpcmp_parts_d+0x40>
  805334:	30bfeb2e 	bgeu	r6,r2,8052e4 <__fpcmp_parts_d+0x40>
  805338:	403fe71e 	bne	r8,zero,8052d8 <__fpcmp_parts_d+0x34>
  80533c:	003fef06 	br	8052fc <__fpcmp_parts_d+0x58>
  805340:	11bffa2e 	bgeu	r2,r6,80532c <__fpcmp_parts_d+0x88>
  805344:	403fe426 	beq	r8,zero,8052d8 <__fpcmp_parts_d+0x34>
  805348:	003fec06 	br	8052fc <__fpcmp_parts_d+0x58>
  80534c:	28800117 	ldw	r2,4(r5)
  805350:	103fe11e 	bne	r2,zero,8052d8 <__fpcmp_parts_d+0x34>
  805354:	003fe906 	br	8052fc <__fpcmp_parts_d+0x58>
  805358:	11bfdd1e 	bne	r2,r6,8052d0 <__fpcmp_parts_d+0x2c>
  80535c:	28c00117 	ldw	r3,4(r5)
  805360:	20800117 	ldw	r2,4(r4)
  805364:	1885c83a 	sub	r2,r3,r2
  805368:	f800283a 	ret

0080536c <__errno>:
  80536c:	00c02074 	movhi	r3,129
  805370:	18d34c04 	addi	r3,r3,19760
  805374:	18800017 	ldw	r2,0(r3)
  805378:	f800283a 	ret

0080537c <_fclose_r>:
  80537c:	defffc04 	addi	sp,sp,-16
  805380:	dc400115 	stw	r17,4(sp)
  805384:	dc000015 	stw	r16,0(sp)
  805388:	dfc00315 	stw	ra,12(sp)
  80538c:	dc800215 	stw	r18,8(sp)
  805390:	2821883a 	mov	r16,r5
  805394:	2023883a 	mov	r17,r4
  805398:	28002926 	beq	r5,zero,805440 <_fclose_r+0xc4>
  80539c:	08057280 	call	805728 <__sfp_lock_acquire>
  8053a0:	88000226 	beq	r17,zero,8053ac <_fclose_r+0x30>
  8053a4:	88800e17 	ldw	r2,56(r17)
  8053a8:	10002d26 	beq	r2,zero,805460 <_fclose_r+0xe4>
  8053ac:	8080030f 	ldh	r2,12(r16)
  8053b0:	10002226 	beq	r2,zero,80543c <_fclose_r+0xc0>
  8053b4:	8809883a 	mov	r4,r17
  8053b8:	800b883a 	mov	r5,r16
  8053bc:	08054a00 	call	8054a0 <_fflush_r>
  8053c0:	1025883a 	mov	r18,r2
  8053c4:	80800b17 	ldw	r2,44(r16)
  8053c8:	10000426 	beq	r2,zero,8053dc <_fclose_r+0x60>
  8053cc:	81400717 	ldw	r5,28(r16)
  8053d0:	8809883a 	mov	r4,r17
  8053d4:	103ee83a 	callr	r2
  8053d8:	10002a16 	blt	r2,zero,805484 <_fclose_r+0x108>
  8053dc:	8080030b 	ldhu	r2,12(r16)
  8053e0:	1080200c 	andi	r2,r2,128
  8053e4:	1000231e 	bne	r2,zero,805474 <_fclose_r+0xf8>
  8053e8:	81400c17 	ldw	r5,48(r16)
  8053ec:	28000526 	beq	r5,zero,805404 <_fclose_r+0x88>
  8053f0:	80801004 	addi	r2,r16,64
  8053f4:	28800226 	beq	r5,r2,805400 <_fclose_r+0x84>
  8053f8:	8809883a 	mov	r4,r17
  8053fc:	0805c2c0 	call	805c2c <_free_r>
  805400:	80000c15 	stw	zero,48(r16)
  805404:	81401117 	ldw	r5,68(r16)
  805408:	28000326 	beq	r5,zero,805418 <_fclose_r+0x9c>
  80540c:	8809883a 	mov	r4,r17
  805410:	0805c2c0 	call	805c2c <_free_r>
  805414:	80001115 	stw	zero,68(r16)
  805418:	8000030d 	sth	zero,12(r16)
  80541c:	080572c0 	call	80572c <__sfp_lock_release>
  805420:	9005883a 	mov	r2,r18
  805424:	dfc00317 	ldw	ra,12(sp)
  805428:	dc800217 	ldw	r18,8(sp)
  80542c:	dc400117 	ldw	r17,4(sp)
  805430:	dc000017 	ldw	r16,0(sp)
  805434:	dec00404 	addi	sp,sp,16
  805438:	f800283a 	ret
  80543c:	080572c0 	call	80572c <__sfp_lock_release>
  805440:	0025883a 	mov	r18,zero
  805444:	9005883a 	mov	r2,r18
  805448:	dfc00317 	ldw	ra,12(sp)
  80544c:	dc800217 	ldw	r18,8(sp)
  805450:	dc400117 	ldw	r17,4(sp)
  805454:	dc000017 	ldw	r16,0(sp)
  805458:	dec00404 	addi	sp,sp,16
  80545c:	f800283a 	ret
  805460:	8809883a 	mov	r4,r17
  805464:	08057380 	call	805738 <__sinit>
  805468:	8080030f 	ldh	r2,12(r16)
  80546c:	103fd11e 	bne	r2,zero,8053b4 <_fclose_r+0x38>
  805470:	003ff206 	br	80543c <_fclose_r+0xc0>
  805474:	81400417 	ldw	r5,16(r16)
  805478:	8809883a 	mov	r4,r17
  80547c:	0805c2c0 	call	805c2c <_free_r>
  805480:	003fd906 	br	8053e8 <_fclose_r+0x6c>
  805484:	04bfffc4 	movi	r18,-1
  805488:	003fd406 	br	8053dc <_fclose_r+0x60>

0080548c <fclose>:
  80548c:	00802074 	movhi	r2,129
  805490:	10934c04 	addi	r2,r2,19760
  805494:	200b883a 	mov	r5,r4
  805498:	11000017 	ldw	r4,0(r2)
  80549c:	080537c1 	jmpi	80537c <_fclose_r>

008054a0 <_fflush_r>:
  8054a0:	defffb04 	addi	sp,sp,-20
  8054a4:	dcc00315 	stw	r19,12(sp)
  8054a8:	dc800215 	stw	r18,8(sp)
  8054ac:	dfc00415 	stw	ra,16(sp)
  8054b0:	dc400115 	stw	r17,4(sp)
  8054b4:	dc000015 	stw	r16,0(sp)
  8054b8:	2027883a 	mov	r19,r4
  8054bc:	2825883a 	mov	r18,r5
  8054c0:	20000226 	beq	r4,zero,8054cc <_fflush_r+0x2c>
  8054c4:	20800e17 	ldw	r2,56(r4)
  8054c8:	10005626 	beq	r2,zero,805624 <_fflush_r+0x184>
  8054cc:	9100030b 	ldhu	r4,12(r18)
  8054d0:	20ffffcc 	andi	r3,r4,65535
  8054d4:	18e0001c 	xori	r3,r3,32768
  8054d8:	18e00004 	addi	r3,r3,-32768
  8054dc:	1880020c 	andi	r2,r3,8
  8054e0:	1000261e 	bne	r2,zero,80557c <_fflush_r+0xdc>
  8054e4:	90c00117 	ldw	r3,4(r18)
  8054e8:	20820014 	ori	r2,r4,2048
  8054ec:	9080030d 	sth	r2,12(r18)
  8054f0:	1009883a 	mov	r4,r2
  8054f4:	00c0400e 	bge	zero,r3,8055f8 <_fflush_r+0x158>
  8054f8:	92000a17 	ldw	r8,40(r18)
  8054fc:	40004026 	beq	r8,zero,805600 <_fflush_r+0x160>
  805500:	2084000c 	andi	r2,r4,4096
  805504:	10005326 	beq	r2,zero,805654 <_fflush_r+0x1b4>
  805508:	94001417 	ldw	r16,80(r18)
  80550c:	9080030b 	ldhu	r2,12(r18)
  805510:	1080010c 	andi	r2,r2,4
  805514:	1000481e 	bne	r2,zero,805638 <_fflush_r+0x198>
  805518:	91400717 	ldw	r5,28(r18)
  80551c:	9809883a 	mov	r4,r19
  805520:	800d883a 	mov	r6,r16
  805524:	000f883a 	mov	r7,zero
  805528:	403ee83a 	callr	r8
  80552c:	8080261e 	bne	r16,r2,8055c8 <_fflush_r+0x128>
  805530:	9080030b 	ldhu	r2,12(r18)
  805534:	91000417 	ldw	r4,16(r18)
  805538:	90000115 	stw	zero,4(r18)
  80553c:	10bdffcc 	andi	r2,r2,63487
  805540:	10ffffcc 	andi	r3,r2,65535
  805544:	18c4000c 	andi	r3,r3,4096
  805548:	9080030d 	sth	r2,12(r18)
  80554c:	91000015 	stw	r4,0(r18)
  805550:	18002b26 	beq	r3,zero,805600 <_fflush_r+0x160>
  805554:	0007883a 	mov	r3,zero
  805558:	1805883a 	mov	r2,r3
  80555c:	94001415 	stw	r16,80(r18)
  805560:	dfc00417 	ldw	ra,16(sp)
  805564:	dcc00317 	ldw	r19,12(sp)
  805568:	dc800217 	ldw	r18,8(sp)
  80556c:	dc400117 	ldw	r17,4(sp)
  805570:	dc000017 	ldw	r16,0(sp)
  805574:	dec00504 	addi	sp,sp,20
  805578:	f800283a 	ret
  80557c:	94400417 	ldw	r17,16(r18)
  805580:	88001f26 	beq	r17,zero,805600 <_fflush_r+0x160>
  805584:	90800017 	ldw	r2,0(r18)
  805588:	18c000cc 	andi	r3,r3,3
  80558c:	94400015 	stw	r17,0(r18)
  805590:	1461c83a 	sub	r16,r2,r17
  805594:	18002526 	beq	r3,zero,80562c <_fflush_r+0x18c>
  805598:	0005883a 	mov	r2,zero
  80559c:	90800215 	stw	r2,8(r18)
  8055a0:	0400170e 	bge	zero,r16,805600 <_fflush_r+0x160>
  8055a4:	90c00917 	ldw	r3,36(r18)
  8055a8:	91400717 	ldw	r5,28(r18)
  8055ac:	880d883a 	mov	r6,r17
  8055b0:	800f883a 	mov	r7,r16
  8055b4:	9809883a 	mov	r4,r19
  8055b8:	183ee83a 	callr	r3
  8055bc:	88a3883a 	add	r17,r17,r2
  8055c0:	80a1c83a 	sub	r16,r16,r2
  8055c4:	00bff616 	blt	zero,r2,8055a0 <_fflush_r+0x100>
  8055c8:	9080030b 	ldhu	r2,12(r18)
  8055cc:	00ffffc4 	movi	r3,-1
  8055d0:	10801014 	ori	r2,r2,64
  8055d4:	9080030d 	sth	r2,12(r18)
  8055d8:	1805883a 	mov	r2,r3
  8055dc:	dfc00417 	ldw	ra,16(sp)
  8055e0:	dcc00317 	ldw	r19,12(sp)
  8055e4:	dc800217 	ldw	r18,8(sp)
  8055e8:	dc400117 	ldw	r17,4(sp)
  8055ec:	dc000017 	ldw	r16,0(sp)
  8055f0:	dec00504 	addi	sp,sp,20
  8055f4:	f800283a 	ret
  8055f8:	90800f17 	ldw	r2,60(r18)
  8055fc:	00bfbe16 	blt	zero,r2,8054f8 <_fflush_r+0x58>
  805600:	0007883a 	mov	r3,zero
  805604:	1805883a 	mov	r2,r3
  805608:	dfc00417 	ldw	ra,16(sp)
  80560c:	dcc00317 	ldw	r19,12(sp)
  805610:	dc800217 	ldw	r18,8(sp)
  805614:	dc400117 	ldw	r17,4(sp)
  805618:	dc000017 	ldw	r16,0(sp)
  80561c:	dec00504 	addi	sp,sp,20
  805620:	f800283a 	ret
  805624:	08057380 	call	805738 <__sinit>
  805628:	003fa806 	br	8054cc <_fflush_r+0x2c>
  80562c:	90800517 	ldw	r2,20(r18)
  805630:	90800215 	stw	r2,8(r18)
  805634:	003fda06 	br	8055a0 <_fflush_r+0x100>
  805638:	90800117 	ldw	r2,4(r18)
  80563c:	90c00c17 	ldw	r3,48(r18)
  805640:	80a1c83a 	sub	r16,r16,r2
  805644:	183fb426 	beq	r3,zero,805518 <_fflush_r+0x78>
  805648:	90800f17 	ldw	r2,60(r18)
  80564c:	80a1c83a 	sub	r16,r16,r2
  805650:	003fb106 	br	805518 <_fflush_r+0x78>
  805654:	91400717 	ldw	r5,28(r18)
  805658:	9809883a 	mov	r4,r19
  80565c:	000d883a 	mov	r6,zero
  805660:	01c00044 	movi	r7,1
  805664:	403ee83a 	callr	r8
  805668:	1021883a 	mov	r16,r2
  80566c:	00bfffc4 	movi	r2,-1
  805670:	80800226 	beq	r16,r2,80567c <_fflush_r+0x1dc>
  805674:	92000a17 	ldw	r8,40(r18)
  805678:	003fa406 	br	80550c <_fflush_r+0x6c>
  80567c:	98c00017 	ldw	r3,0(r19)
  805680:	00800744 	movi	r2,29
  805684:	18bfde26 	beq	r3,r2,805600 <_fflush_r+0x160>
  805688:	9080030b 	ldhu	r2,12(r18)
  80568c:	8007883a 	mov	r3,r16
  805690:	10801014 	ori	r2,r2,64
  805694:	9080030d 	sth	r2,12(r18)
  805698:	003fcf06 	br	8055d8 <_fflush_r+0x138>

0080569c <fflush>:
  80569c:	01402034 	movhi	r5,128
  8056a0:	29552804 	addi	r5,r5,21664
  8056a4:	2007883a 	mov	r3,r4
  8056a8:	20000526 	beq	r4,zero,8056c0 <fflush+0x24>
  8056ac:	00802074 	movhi	r2,129
  8056b0:	10934c04 	addi	r2,r2,19760
  8056b4:	11000017 	ldw	r4,0(r2)
  8056b8:	180b883a 	mov	r5,r3
  8056bc:	08054a01 	jmpi	8054a0 <_fflush_r>
  8056c0:	00802074 	movhi	r2,129
  8056c4:	10934d04 	addi	r2,r2,19764
  8056c8:	11000017 	ldw	r4,0(r2)
  8056cc:	08064141 	jmpi	806414 <_fwalk_reent>

008056d0 <std>:
  8056d0:	00802034 	movhi	r2,128
  8056d4:	109d3004 	addi	r2,r2,29888
  8056d8:	20800b15 	stw	r2,44(r4)
  8056dc:	00802034 	movhi	r2,128
  8056e0:	109d6b04 	addi	r2,r2,30124
  8056e4:	20800815 	stw	r2,32(r4)
  8056e8:	00c02034 	movhi	r3,128
  8056ec:	18dd4c04 	addi	r3,r3,30000
  8056f0:	00802034 	movhi	r2,128
  8056f4:	109d3204 	addi	r2,r2,29896
  8056f8:	2140030d 	sth	r5,12(r4)
  8056fc:	2180038d 	sth	r6,14(r4)
  805700:	20c00915 	stw	r3,36(r4)
  805704:	20800a15 	stw	r2,40(r4)
  805708:	20000015 	stw	zero,0(r4)
  80570c:	20000115 	stw	zero,4(r4)
  805710:	20000215 	stw	zero,8(r4)
  805714:	20000415 	stw	zero,16(r4)
  805718:	20000515 	stw	zero,20(r4)
  80571c:	20000615 	stw	zero,24(r4)
  805720:	21000715 	stw	r4,28(r4)
  805724:	f800283a 	ret

00805728 <__sfp_lock_acquire>:
  805728:	f800283a 	ret

0080572c <__sfp_lock_release>:
  80572c:	f800283a 	ret

00805730 <__sinit_lock_acquire>:
  805730:	f800283a 	ret

00805734 <__sinit_lock_release>:
  805734:	f800283a 	ret

00805738 <__sinit>:
  805738:	20800e17 	ldw	r2,56(r4)
  80573c:	defffd04 	addi	sp,sp,-12
  805740:	dc400115 	stw	r17,4(sp)
  805744:	dc000015 	stw	r16,0(sp)
  805748:	dfc00215 	stw	ra,8(sp)
  80574c:	04400044 	movi	r17,1
  805750:	01400104 	movi	r5,4
  805754:	000d883a 	mov	r6,zero
  805758:	2021883a 	mov	r16,r4
  80575c:	2200bb04 	addi	r8,r4,748
  805760:	200f883a 	mov	r7,r4
  805764:	10000526 	beq	r2,zero,80577c <__sinit+0x44>
  805768:	dfc00217 	ldw	ra,8(sp)
  80576c:	dc400117 	ldw	r17,4(sp)
  805770:	dc000017 	ldw	r16,0(sp)
  805774:	dec00304 	addi	sp,sp,12
  805778:	f800283a 	ret
  80577c:	21000117 	ldw	r4,4(r4)
  805780:	00802034 	movhi	r2,128
  805784:	10960704 	addi	r2,r2,22556
  805788:	00c000c4 	movi	r3,3
  80578c:	80800f15 	stw	r2,60(r16)
  805790:	80c0b915 	stw	r3,740(r16)
  805794:	8200ba15 	stw	r8,744(r16)
  805798:	84400e15 	stw	r17,56(r16)
  80579c:	8000b815 	stw	zero,736(r16)
  8057a0:	08056d00 	call	8056d0 <std>
  8057a4:	81000217 	ldw	r4,8(r16)
  8057a8:	880d883a 	mov	r6,r17
  8057ac:	800f883a 	mov	r7,r16
  8057b0:	01400284 	movi	r5,10
  8057b4:	08056d00 	call	8056d0 <std>
  8057b8:	81000317 	ldw	r4,12(r16)
  8057bc:	800f883a 	mov	r7,r16
  8057c0:	01400484 	movi	r5,18
  8057c4:	01800084 	movi	r6,2
  8057c8:	dfc00217 	ldw	ra,8(sp)
  8057cc:	dc400117 	ldw	r17,4(sp)
  8057d0:	dc000017 	ldw	r16,0(sp)
  8057d4:	dec00304 	addi	sp,sp,12
  8057d8:	08056d01 	jmpi	8056d0 <std>

008057dc <__fp_lock>:
  8057dc:	0005883a 	mov	r2,zero
  8057e0:	f800283a 	ret

008057e4 <__fp_unlock>:
  8057e4:	0005883a 	mov	r2,zero
  8057e8:	f800283a 	ret

008057ec <__fp_unlock_all>:
  8057ec:	00802074 	movhi	r2,129
  8057f0:	10934c04 	addi	r2,r2,19760
  8057f4:	11000017 	ldw	r4,0(r2)
  8057f8:	01402034 	movhi	r5,128
  8057fc:	2955f904 	addi	r5,r5,22500
  805800:	08064dc1 	jmpi	8064dc <_fwalk>

00805804 <__fp_lock_all>:
  805804:	00802074 	movhi	r2,129
  805808:	10934c04 	addi	r2,r2,19760
  80580c:	11000017 	ldw	r4,0(r2)
  805810:	01402034 	movhi	r5,128
  805814:	2955f704 	addi	r5,r5,22492
  805818:	08064dc1 	jmpi	8064dc <_fwalk>

0080581c <_cleanup_r>:
  80581c:	01402034 	movhi	r5,128
  805820:	29552304 	addi	r5,r5,21644
  805824:	08064dc1 	jmpi	8064dc <_fwalk>

00805828 <_cleanup>:
  805828:	00802074 	movhi	r2,129
  80582c:	10934d04 	addi	r2,r2,19764
  805830:	11000017 	ldw	r4,0(r2)
  805834:	080581c1 	jmpi	80581c <_cleanup_r>

00805838 <__sfmoreglue>:
  805838:	defffc04 	addi	sp,sp,-16
  80583c:	dc400115 	stw	r17,4(sp)
  805840:	2c401724 	muli	r17,r5,92
  805844:	dc800215 	stw	r18,8(sp)
  805848:	2825883a 	mov	r18,r5
  80584c:	89400304 	addi	r5,r17,12
  805850:	dc000015 	stw	r16,0(sp)
  805854:	dfc00315 	stw	ra,12(sp)
  805858:	08068500 	call	806850 <_malloc_r>
  80585c:	0021883a 	mov	r16,zero
  805860:	880d883a 	mov	r6,r17
  805864:	000b883a 	mov	r5,zero
  805868:	10000626 	beq	r2,zero,805884 <__sfmoreglue+0x4c>
  80586c:	11000304 	addi	r4,r2,12
  805870:	14800115 	stw	r18,4(r2)
  805874:	10000015 	stw	zero,0(r2)
  805878:	11000215 	stw	r4,8(r2)
  80587c:	1021883a 	mov	r16,r2
  805880:	0806f900 	call	806f90 <memset>
  805884:	8005883a 	mov	r2,r16
  805888:	dfc00317 	ldw	ra,12(sp)
  80588c:	dc800217 	ldw	r18,8(sp)
  805890:	dc400117 	ldw	r17,4(sp)
  805894:	dc000017 	ldw	r16,0(sp)
  805898:	dec00404 	addi	sp,sp,16
  80589c:	f800283a 	ret

008058a0 <__sfp>:
  8058a0:	defffd04 	addi	sp,sp,-12
  8058a4:	00802074 	movhi	r2,129
  8058a8:	10934d04 	addi	r2,r2,19764
  8058ac:	dc000015 	stw	r16,0(sp)
  8058b0:	14000017 	ldw	r16,0(r2)
  8058b4:	dc400115 	stw	r17,4(sp)
  8058b8:	dfc00215 	stw	ra,8(sp)
  8058bc:	80800e17 	ldw	r2,56(r16)
  8058c0:	2023883a 	mov	r17,r4
  8058c4:	10002626 	beq	r2,zero,805960 <__sfp+0xc0>
  8058c8:	8400b804 	addi	r16,r16,736
  8058cc:	80800117 	ldw	r2,4(r16)
  8058d0:	81000217 	ldw	r4,8(r16)
  8058d4:	10ffffc4 	addi	r3,r2,-1
  8058d8:	18000916 	blt	r3,zero,805900 <__sfp+0x60>
  8058dc:	2080030f 	ldh	r2,12(r4)
  8058e0:	10000b26 	beq	r2,zero,805910 <__sfp+0x70>
  8058e4:	017fffc4 	movi	r5,-1
  8058e8:	00000206 	br	8058f4 <__sfp+0x54>
  8058ec:	2080030f 	ldh	r2,12(r4)
  8058f0:	10000726 	beq	r2,zero,805910 <__sfp+0x70>
  8058f4:	18ffffc4 	addi	r3,r3,-1
  8058f8:	21001704 	addi	r4,r4,92
  8058fc:	197ffb1e 	bne	r3,r5,8058ec <__sfp+0x4c>
  805900:	80800017 	ldw	r2,0(r16)
  805904:	10001926 	beq	r2,zero,80596c <__sfp+0xcc>
  805908:	1021883a 	mov	r16,r2
  80590c:	003fef06 	br	8058cc <__sfp+0x2c>
  805910:	00bfffc4 	movi	r2,-1
  805914:	00c00044 	movi	r3,1
  805918:	2080038d 	sth	r2,14(r4)
  80591c:	20c0030d 	sth	r3,12(r4)
  805920:	20000015 	stw	zero,0(r4)
  805924:	20000215 	stw	zero,8(r4)
  805928:	20000115 	stw	zero,4(r4)
  80592c:	20000415 	stw	zero,16(r4)
  805930:	20000515 	stw	zero,20(r4)
  805934:	20000615 	stw	zero,24(r4)
  805938:	20000c15 	stw	zero,48(r4)
  80593c:	20000d15 	stw	zero,52(r4)
  805940:	20001115 	stw	zero,68(r4)
  805944:	20001215 	stw	zero,72(r4)
  805948:	2005883a 	mov	r2,r4
  80594c:	dfc00217 	ldw	ra,8(sp)
  805950:	dc400117 	ldw	r17,4(sp)
  805954:	dc000017 	ldw	r16,0(sp)
  805958:	dec00304 	addi	sp,sp,12
  80595c:	f800283a 	ret
  805960:	8009883a 	mov	r4,r16
  805964:	08057380 	call	805738 <__sinit>
  805968:	003fd706 	br	8058c8 <__sfp+0x28>
  80596c:	8809883a 	mov	r4,r17
  805970:	01400104 	movi	r5,4
  805974:	08058380 	call	805838 <__sfmoreglue>
  805978:	80800015 	stw	r2,0(r16)
  80597c:	103fe21e 	bne	r2,zero,805908 <__sfp+0x68>
  805980:	00800304 	movi	r2,12
  805984:	0009883a 	mov	r4,zero
  805988:	88800015 	stw	r2,0(r17)
  80598c:	003fee06 	br	805948 <__sfp+0xa8>

00805990 <_fopen_r>:
  805990:	defffa04 	addi	sp,sp,-24
  805994:	dcc00415 	stw	r19,16(sp)
  805998:	2827883a 	mov	r19,r5
  80599c:	300b883a 	mov	r5,r6
  8059a0:	d80d883a 	mov	r6,sp
  8059a4:	dc800315 	stw	r18,12(sp)
  8059a8:	dc400215 	stw	r17,8(sp)
  8059ac:	dc000115 	stw	r16,4(sp)
  8059b0:	dfc00515 	stw	ra,20(sp)
  8059b4:	2021883a 	mov	r16,r4
  8059b8:	080af240 	call	80af24 <__sflags>
  8059bc:	1025883a 	mov	r18,r2
  8059c0:	8009883a 	mov	r4,r16
  8059c4:	0023883a 	mov	r17,zero
  8059c8:	1000081e 	bne	r2,zero,8059ec <_fopen_r+0x5c>
  8059cc:	8805883a 	mov	r2,r17
  8059d0:	dfc00517 	ldw	ra,20(sp)
  8059d4:	dcc00417 	ldw	r19,16(sp)
  8059d8:	dc800317 	ldw	r18,12(sp)
  8059dc:	dc400217 	ldw	r17,8(sp)
  8059e0:	dc000117 	ldw	r16,4(sp)
  8059e4:	dec00604 	addi	sp,sp,24
  8059e8:	f800283a 	ret
  8059ec:	08058a00 	call	8058a0 <__sfp>
  8059f0:	1023883a 	mov	r17,r2
  8059f4:	980b883a 	mov	r5,r19
  8059f8:	8009883a 	mov	r4,r16
  8059fc:	01c06d84 	movi	r7,438
  805a00:	103ff226 	beq	r2,zero,8059cc <_fopen_r+0x3c>
  805a04:	d9800017 	ldw	r6,0(sp)
  805a08:	08070280 	call	807028 <_open_r>
  805a0c:	10001816 	blt	r2,zero,805a70 <_fopen_r+0xe0>
  805a10:	00c02034 	movhi	r3,128
  805a14:	18dd4c04 	addi	r3,r3,30000
  805a18:	923fffcc 	andi	r8,r18,65535
  805a1c:	8880038d 	sth	r2,14(r17)
  805a20:	00802034 	movhi	r2,128
  805a24:	109d6b04 	addi	r2,r2,30124
  805a28:	88800815 	stw	r2,32(r17)
  805a2c:	88c00915 	stw	r3,36(r17)
  805a30:	00802034 	movhi	r2,128
  805a34:	109d3204 	addi	r2,r2,29896
  805a38:	00c02034 	movhi	r3,128
  805a3c:	18dd3004 	addi	r3,r3,29888
  805a40:	4200400c 	andi	r8,r8,256
  805a44:	8c80030d 	sth	r18,12(r17)
  805a48:	8009883a 	mov	r4,r16
  805a4c:	880b883a 	mov	r5,r17
  805a50:	000d883a 	mov	r6,zero
  805a54:	01c00084 	movi	r7,2
  805a58:	88800a15 	stw	r2,40(r17)
  805a5c:	88c00b15 	stw	r3,44(r17)
  805a60:	8c400715 	stw	r17,28(r17)
  805a64:	403fd926 	beq	r8,zero,8059cc <_fopen_r+0x3c>
  805a68:	0805f400 	call	805f40 <_fseek_r>
  805a6c:	003fd706 	br	8059cc <_fopen_r+0x3c>
  805a70:	08057280 	call	805728 <__sfp_lock_acquire>
  805a74:	8800030d 	sth	zero,12(r17)
  805a78:	080572c0 	call	80572c <__sfp_lock_release>
  805a7c:	0023883a 	mov	r17,zero
  805a80:	003fd206 	br	8059cc <_fopen_r+0x3c>

00805a84 <fopen>:
  805a84:	01802074 	movhi	r6,129
  805a88:	31934c04 	addi	r6,r6,19760
  805a8c:	2007883a 	mov	r3,r4
  805a90:	31000017 	ldw	r4,0(r6)
  805a94:	280d883a 	mov	r6,r5
  805a98:	180b883a 	mov	r5,r3
  805a9c:	08059901 	jmpi	805990 <_fopen_r>

00805aa0 <fprintf>:
  805aa0:	defffc04 	addi	sp,sp,-16
  805aa4:	dfc00115 	stw	ra,4(sp)
  805aa8:	d9800215 	stw	r6,8(sp)
  805aac:	d9c00315 	stw	r7,12(sp)
  805ab0:	d8800204 	addi	r2,sp,8
  805ab4:	100d883a 	mov	r6,r2
  805ab8:	d8800015 	stw	r2,0(sp)
  805abc:	08095100 	call	809510 <__vfprintf_internal>
  805ac0:	dfc00117 	ldw	ra,4(sp)
  805ac4:	dec00404 	addi	sp,sp,16
  805ac8:	f800283a 	ret

00805acc <_fprintf_r>:
  805acc:	defffd04 	addi	sp,sp,-12
  805ad0:	2807883a 	mov	r3,r5
  805ad4:	dfc00115 	stw	ra,4(sp)
  805ad8:	d9c00215 	stw	r7,8(sp)
  805adc:	d8800204 	addi	r2,sp,8
  805ae0:	300b883a 	mov	r5,r6
  805ae4:	1809883a 	mov	r4,r3
  805ae8:	100d883a 	mov	r6,r2
  805aec:	d8800015 	stw	r2,0(sp)
  805af0:	08095100 	call	809510 <__vfprintf_internal>
  805af4:	dfc00117 	ldw	ra,4(sp)
  805af8:	dec00304 	addi	sp,sp,12
  805afc:	f800283a 	ret

00805b00 <_malloc_trim_r>:
  805b00:	defffb04 	addi	sp,sp,-20
  805b04:	dcc00315 	stw	r19,12(sp)
  805b08:	04c02074 	movhi	r19,129
  805b0c:	9ccd4b04 	addi	r19,r19,13612
  805b10:	dc800215 	stw	r18,8(sp)
  805b14:	dc400115 	stw	r17,4(sp)
  805b18:	dc000015 	stw	r16,0(sp)
  805b1c:	2823883a 	mov	r17,r5
  805b20:	2025883a 	mov	r18,r4
  805b24:	dfc00415 	stw	ra,16(sp)
  805b28:	080e9a40 	call	80e9a4 <__malloc_lock>
  805b2c:	98800217 	ldw	r2,8(r19)
  805b30:	9009883a 	mov	r4,r18
  805b34:	000b883a 	mov	r5,zero
  805b38:	10c00117 	ldw	r3,4(r2)
  805b3c:	00bfff04 	movi	r2,-4
  805b40:	18a0703a 	and	r16,r3,r2
  805b44:	8463c83a 	sub	r17,r16,r17
  805b48:	8c43fbc4 	addi	r17,r17,4079
  805b4c:	8822d33a 	srli	r17,r17,12
  805b50:	0083ffc4 	movi	r2,4095
  805b54:	8c7fffc4 	addi	r17,r17,-1
  805b58:	8822933a 	slli	r17,r17,12
  805b5c:	1440060e 	bge	r2,r17,805b78 <_malloc_trim_r+0x78>
  805b60:	080737c0 	call	80737c <_sbrk_r>
  805b64:	98c00217 	ldw	r3,8(r19)
  805b68:	9009883a 	mov	r4,r18
  805b6c:	044bc83a 	sub	r5,zero,r17
  805b70:	80c7883a 	add	r3,r16,r3
  805b74:	10c00926 	beq	r2,r3,805b9c <_malloc_trim_r+0x9c>
  805b78:	080e9c40 	call	80e9c4 <__malloc_unlock>
  805b7c:	0005883a 	mov	r2,zero
  805b80:	dfc00417 	ldw	ra,16(sp)
  805b84:	dcc00317 	ldw	r19,12(sp)
  805b88:	dc800217 	ldw	r18,8(sp)
  805b8c:	dc400117 	ldw	r17,4(sp)
  805b90:	dc000017 	ldw	r16,0(sp)
  805b94:	dec00504 	addi	sp,sp,20
  805b98:	f800283a 	ret
  805b9c:	9009883a 	mov	r4,r18
  805ba0:	080737c0 	call	80737c <_sbrk_r>
  805ba4:	844dc83a 	sub	r6,r16,r17
  805ba8:	00ffffc4 	movi	r3,-1
  805bac:	9009883a 	mov	r4,r18
  805bb0:	000b883a 	mov	r5,zero
  805bb4:	01c02074 	movhi	r7,129
  805bb8:	39da7e04 	addi	r7,r7,27128
  805bbc:	31800054 	ori	r6,r6,1
  805bc0:	10c00926 	beq	r2,r3,805be8 <_malloc_trim_r+0xe8>
  805bc4:	38800017 	ldw	r2,0(r7)
  805bc8:	98c00217 	ldw	r3,8(r19)
  805bcc:	9009883a 	mov	r4,r18
  805bd0:	1445c83a 	sub	r2,r2,r17
  805bd4:	38800015 	stw	r2,0(r7)
  805bd8:	19800115 	stw	r6,4(r3)
  805bdc:	080e9c40 	call	80e9c4 <__malloc_unlock>
  805be0:	00800044 	movi	r2,1
  805be4:	003fe606 	br	805b80 <_malloc_trim_r+0x80>
  805be8:	080737c0 	call	80737c <_sbrk_r>
  805bec:	99800217 	ldw	r6,8(r19)
  805bf0:	100f883a 	mov	r7,r2
  805bf4:	9009883a 	mov	r4,r18
  805bf8:	1187c83a 	sub	r3,r2,r6
  805bfc:	008003c4 	movi	r2,15
  805c00:	19400054 	ori	r5,r3,1
  805c04:	10ffdc0e 	bge	r2,r3,805b78 <_malloc_trim_r+0x78>
  805c08:	00802074 	movhi	r2,129
  805c0c:	10934f04 	addi	r2,r2,19772
  805c10:	10c00017 	ldw	r3,0(r2)
  805c14:	00802074 	movhi	r2,129
  805c18:	109a7e04 	addi	r2,r2,27128
  805c1c:	31400115 	stw	r5,4(r6)
  805c20:	38c7c83a 	sub	r3,r7,r3
  805c24:	10c00015 	stw	r3,0(r2)
  805c28:	003fd306 	br	805b78 <_malloc_trim_r+0x78>

00805c2c <_free_r>:
  805c2c:	defffd04 	addi	sp,sp,-12
  805c30:	dc400115 	stw	r17,4(sp)
  805c34:	dc000015 	stw	r16,0(sp)
  805c38:	dfc00215 	stw	ra,8(sp)
  805c3c:	2821883a 	mov	r16,r5
  805c40:	2023883a 	mov	r17,r4
  805c44:	28005a26 	beq	r5,zero,805db0 <_free_r+0x184>
  805c48:	080e9a40 	call	80e9a4 <__malloc_lock>
  805c4c:	823ffe04 	addi	r8,r16,-8
  805c50:	41400117 	ldw	r5,4(r8)
  805c54:	00bfff84 	movi	r2,-2
  805c58:	02802074 	movhi	r10,129
  805c5c:	528d4b04 	addi	r10,r10,13612
  805c60:	288e703a 	and	r7,r5,r2
  805c64:	41cd883a 	add	r6,r8,r7
  805c68:	30c00117 	ldw	r3,4(r6)
  805c6c:	51000217 	ldw	r4,8(r10)
  805c70:	00bfff04 	movi	r2,-4
  805c74:	1892703a 	and	r9,r3,r2
  805c78:	5017883a 	mov	r11,r10
  805c7c:	31006726 	beq	r6,r4,805e1c <_free_r+0x1f0>
  805c80:	2880004c 	andi	r2,r5,1
  805c84:	1005003a 	cmpeq	r2,r2,zero
  805c88:	32400115 	stw	r9,4(r6)
  805c8c:	10001a1e 	bne	r2,zero,805cf8 <_free_r+0xcc>
  805c90:	000b883a 	mov	r5,zero
  805c94:	3247883a 	add	r3,r6,r9
  805c98:	18800117 	ldw	r2,4(r3)
  805c9c:	1080004c 	andi	r2,r2,1
  805ca0:	1000231e 	bne	r2,zero,805d30 <_free_r+0x104>
  805ca4:	280ac03a 	cmpne	r5,r5,zero
  805ca8:	3a4f883a 	add	r7,r7,r9
  805cac:	2800451e 	bne	r5,zero,805dc4 <_free_r+0x198>
  805cb0:	31000217 	ldw	r4,8(r6)
  805cb4:	00802074 	movhi	r2,129
  805cb8:	108d4d04 	addi	r2,r2,13620
  805cbc:	20807b26 	beq	r4,r2,805eac <_free_r+0x280>
  805cc0:	30800317 	ldw	r2,12(r6)
  805cc4:	3a07883a 	add	r3,r7,r8
  805cc8:	19c00015 	stw	r7,0(r3)
  805ccc:	11000215 	stw	r4,8(r2)
  805cd0:	20800315 	stw	r2,12(r4)
  805cd4:	38800054 	ori	r2,r7,1
  805cd8:	40800115 	stw	r2,4(r8)
  805cdc:	28001a26 	beq	r5,zero,805d48 <_free_r+0x11c>
  805ce0:	8809883a 	mov	r4,r17
  805ce4:	dfc00217 	ldw	ra,8(sp)
  805ce8:	dc400117 	ldw	r17,4(sp)
  805cec:	dc000017 	ldw	r16,0(sp)
  805cf0:	dec00304 	addi	sp,sp,12
  805cf4:	080e9c41 	jmpi	80e9c4 <__malloc_unlock>
  805cf8:	80bffe17 	ldw	r2,-8(r16)
  805cfc:	50c00204 	addi	r3,r10,8
  805d00:	4091c83a 	sub	r8,r8,r2
  805d04:	41000217 	ldw	r4,8(r8)
  805d08:	388f883a 	add	r7,r7,r2
  805d0c:	20c06126 	beq	r4,r3,805e94 <_free_r+0x268>
  805d10:	40800317 	ldw	r2,12(r8)
  805d14:	3247883a 	add	r3,r6,r9
  805d18:	000b883a 	mov	r5,zero
  805d1c:	11000215 	stw	r4,8(r2)
  805d20:	20800315 	stw	r2,12(r4)
  805d24:	18800117 	ldw	r2,4(r3)
  805d28:	1080004c 	andi	r2,r2,1
  805d2c:	103fdd26 	beq	r2,zero,805ca4 <_free_r+0x78>
  805d30:	38800054 	ori	r2,r7,1
  805d34:	3a07883a 	add	r3,r7,r8
  805d38:	280ac03a 	cmpne	r5,r5,zero
  805d3c:	40800115 	stw	r2,4(r8)
  805d40:	19c00015 	stw	r7,0(r3)
  805d44:	283fe61e 	bne	r5,zero,805ce0 <_free_r+0xb4>
  805d48:	00807fc4 	movi	r2,511
  805d4c:	11c01f2e 	bgeu	r2,r7,805dcc <_free_r+0x1a0>
  805d50:	3806d27a 	srli	r3,r7,9
  805d54:	1800481e 	bne	r3,zero,805e78 <_free_r+0x24c>
  805d58:	3804d0fa 	srli	r2,r7,3
  805d5c:	100690fa 	slli	r3,r2,3
  805d60:	1acd883a 	add	r6,r3,r11
  805d64:	31400217 	ldw	r5,8(r6)
  805d68:	31405926 	beq	r6,r5,805ed0 <_free_r+0x2a4>
  805d6c:	28800117 	ldw	r2,4(r5)
  805d70:	00ffff04 	movi	r3,-4
  805d74:	10c4703a 	and	r2,r2,r3
  805d78:	3880022e 	bgeu	r7,r2,805d84 <_free_r+0x158>
  805d7c:	29400217 	ldw	r5,8(r5)
  805d80:	317ffa1e 	bne	r6,r5,805d6c <_free_r+0x140>
  805d84:	29800317 	ldw	r6,12(r5)
  805d88:	41800315 	stw	r6,12(r8)
  805d8c:	41400215 	stw	r5,8(r8)
  805d90:	8809883a 	mov	r4,r17
  805d94:	2a000315 	stw	r8,12(r5)
  805d98:	32000215 	stw	r8,8(r6)
  805d9c:	dfc00217 	ldw	ra,8(sp)
  805da0:	dc400117 	ldw	r17,4(sp)
  805da4:	dc000017 	ldw	r16,0(sp)
  805da8:	dec00304 	addi	sp,sp,12
  805dac:	080e9c41 	jmpi	80e9c4 <__malloc_unlock>
  805db0:	dfc00217 	ldw	ra,8(sp)
  805db4:	dc400117 	ldw	r17,4(sp)
  805db8:	dc000017 	ldw	r16,0(sp)
  805dbc:	dec00304 	addi	sp,sp,12
  805dc0:	f800283a 	ret
  805dc4:	31000217 	ldw	r4,8(r6)
  805dc8:	003fbd06 	br	805cc0 <_free_r+0x94>
  805dcc:	3806d0fa 	srli	r3,r7,3
  805dd0:	00800044 	movi	r2,1
  805dd4:	51400117 	ldw	r5,4(r10)
  805dd8:	180890fa 	slli	r4,r3,3
  805ddc:	1807d0ba 	srai	r3,r3,2
  805de0:	22c9883a 	add	r4,r4,r11
  805de4:	21800217 	ldw	r6,8(r4)
  805de8:	10c4983a 	sll	r2,r2,r3
  805dec:	41000315 	stw	r4,12(r8)
  805df0:	41800215 	stw	r6,8(r8)
  805df4:	288ab03a 	or	r5,r5,r2
  805df8:	22000215 	stw	r8,8(r4)
  805dfc:	8809883a 	mov	r4,r17
  805e00:	51400115 	stw	r5,4(r10)
  805e04:	32000315 	stw	r8,12(r6)
  805e08:	dfc00217 	ldw	ra,8(sp)
  805e0c:	dc400117 	ldw	r17,4(sp)
  805e10:	dc000017 	ldw	r16,0(sp)
  805e14:	dec00304 	addi	sp,sp,12
  805e18:	080e9c41 	jmpi	80e9c4 <__malloc_unlock>
  805e1c:	2880004c 	andi	r2,r5,1
  805e20:	3a4d883a 	add	r6,r7,r9
  805e24:	1000071e 	bne	r2,zero,805e44 <_free_r+0x218>
  805e28:	80bffe17 	ldw	r2,-8(r16)
  805e2c:	4091c83a 	sub	r8,r8,r2
  805e30:	41000317 	ldw	r4,12(r8)
  805e34:	40c00217 	ldw	r3,8(r8)
  805e38:	308d883a 	add	r6,r6,r2
  805e3c:	20c00215 	stw	r3,8(r4)
  805e40:	19000315 	stw	r4,12(r3)
  805e44:	00802074 	movhi	r2,129
  805e48:	10934e04 	addi	r2,r2,19768
  805e4c:	11000017 	ldw	r4,0(r2)
  805e50:	30c00054 	ori	r3,r6,1
  805e54:	52000215 	stw	r8,8(r10)
  805e58:	40c00115 	stw	r3,4(r8)
  805e5c:	313fa036 	bltu	r6,r4,805ce0 <_free_r+0xb4>
  805e60:	00802074 	movhi	r2,129
  805e64:	109a7204 	addi	r2,r2,27080
  805e68:	11400017 	ldw	r5,0(r2)
  805e6c:	8809883a 	mov	r4,r17
  805e70:	0805b000 	call	805b00 <_malloc_trim_r>
  805e74:	003f9a06 	br	805ce0 <_free_r+0xb4>
  805e78:	00800104 	movi	r2,4
  805e7c:	10c0072e 	bgeu	r2,r3,805e9c <_free_r+0x270>
  805e80:	00800504 	movi	r2,20
  805e84:	10c01936 	bltu	r2,r3,805eec <_free_r+0x2c0>
  805e88:	188016c4 	addi	r2,r3,91
  805e8c:	100690fa 	slli	r3,r2,3
  805e90:	003fb306 	br	805d60 <_free_r+0x134>
  805e94:	01400044 	movi	r5,1
  805e98:	003f7e06 	br	805c94 <_free_r+0x68>
  805e9c:	3804d1ba 	srli	r2,r7,6
  805ea0:	10800e04 	addi	r2,r2,56
  805ea4:	100690fa 	slli	r3,r2,3
  805ea8:	003fad06 	br	805d60 <_free_r+0x134>
  805eac:	22000315 	stw	r8,12(r4)
  805eb0:	22000215 	stw	r8,8(r4)
  805eb4:	3a05883a 	add	r2,r7,r8
  805eb8:	38c00054 	ori	r3,r7,1
  805ebc:	11c00015 	stw	r7,0(r2)
  805ec0:	41000215 	stw	r4,8(r8)
  805ec4:	40c00115 	stw	r3,4(r8)
  805ec8:	41000315 	stw	r4,12(r8)
  805ecc:	003f8406 	br	805ce0 <_free_r+0xb4>
  805ed0:	1005d0ba 	srai	r2,r2,2
  805ed4:	00c00044 	movi	r3,1
  805ed8:	51000117 	ldw	r4,4(r10)
  805edc:	1886983a 	sll	r3,r3,r2
  805ee0:	20c8b03a 	or	r4,r4,r3
  805ee4:	51000115 	stw	r4,4(r10)
  805ee8:	003fa706 	br	805d88 <_free_r+0x15c>
  805eec:	00801504 	movi	r2,84
  805ef0:	10c00436 	bltu	r2,r3,805f04 <_free_r+0x2d8>
  805ef4:	3804d33a 	srli	r2,r7,12
  805ef8:	10801b84 	addi	r2,r2,110
  805efc:	100690fa 	slli	r3,r2,3
  805f00:	003f9706 	br	805d60 <_free_r+0x134>
  805f04:	00805504 	movi	r2,340
  805f08:	10c00436 	bltu	r2,r3,805f1c <_free_r+0x2f0>
  805f0c:	3804d3fa 	srli	r2,r7,15
  805f10:	10801dc4 	addi	r2,r2,119
  805f14:	100690fa 	slli	r3,r2,3
  805f18:	003f9106 	br	805d60 <_free_r+0x134>
  805f1c:	00815504 	movi	r2,1364
  805f20:	10c0032e 	bgeu	r2,r3,805f30 <_free_r+0x304>
  805f24:	00801f84 	movi	r2,126
  805f28:	00c0fc04 	movi	r3,1008
  805f2c:	003f8c06 	br	805d60 <_free_r+0x134>
  805f30:	3804d4ba 	srli	r2,r7,18
  805f34:	10801f04 	addi	r2,r2,124
  805f38:	100690fa 	slli	r3,r2,3
  805f3c:	003f8806 	br	805d60 <_free_r+0x134>

00805f40 <_fseek_r>:
  805f40:	deffe804 	addi	sp,sp,-96
  805f44:	dd801515 	stw	r22,84(sp)
  805f48:	dcc01215 	stw	r19,72(sp)
  805f4c:	dc801115 	stw	r18,68(sp)
  805f50:	dc000f15 	stw	r16,60(sp)
  805f54:	dfc01715 	stw	ra,92(sp)
  805f58:	ddc01615 	stw	r23,88(sp)
  805f5c:	dd401415 	stw	r21,80(sp)
  805f60:	dd001315 	stw	r20,76(sp)
  805f64:	dc401015 	stw	r17,64(sp)
  805f68:	2025883a 	mov	r18,r4
  805f6c:	2821883a 	mov	r16,r5
  805f70:	302d883a 	mov	r22,r6
  805f74:	3827883a 	mov	r19,r7
  805f78:	20000226 	beq	r4,zero,805f84 <_fseek_r+0x44>
  805f7c:	20800e17 	ldw	r2,56(r4)
  805f80:	10007826 	beq	r2,zero,806164 <_fseek_r+0x224>
  805f84:	8080030b 	ldhu	r2,12(r16)
  805f88:	00c04204 	movi	r3,264
  805f8c:	1080420c 	andi	r2,r2,264
  805f90:	10c07926 	beq	r2,r3,806178 <_fseek_r+0x238>
  805f94:	85400a17 	ldw	r21,40(r16)
  805f98:	a800ea26 	beq	r21,zero,806344 <_fseek_r+0x404>
  805f9c:	00800044 	movi	r2,1
  805fa0:	98805f26 	beq	r19,r2,806120 <_fseek_r+0x1e0>
  805fa4:	00800084 	movi	r2,2
  805fa8:	98801026 	beq	r19,r2,805fec <_fseek_r+0xac>
  805fac:	98000f26 	beq	r19,zero,805fec <_fseek_r+0xac>
  805fb0:	00800584 	movi	r2,22
  805fb4:	013fffc4 	movi	r4,-1
  805fb8:	90800015 	stw	r2,0(r18)
  805fbc:	2005883a 	mov	r2,r4
  805fc0:	dfc01717 	ldw	ra,92(sp)
  805fc4:	ddc01617 	ldw	r23,88(sp)
  805fc8:	dd801517 	ldw	r22,84(sp)
  805fcc:	dd401417 	ldw	r21,80(sp)
  805fd0:	dd001317 	ldw	r20,76(sp)
  805fd4:	dcc01217 	ldw	r19,72(sp)
  805fd8:	dc801117 	ldw	r18,68(sp)
  805fdc:	dc401017 	ldw	r17,64(sp)
  805fe0:	dc000f17 	ldw	r16,60(sp)
  805fe4:	dec01804 	addi	sp,sp,96
  805fe8:	f800283a 	ret
  805fec:	81800417 	ldw	r6,16(r16)
  805ff0:	0023883a 	mov	r17,zero
  805ff4:	002f883a 	mov	r23,zero
  805ff8:	3000a626 	beq	r6,zero,806294 <_fseek_r+0x354>
  805ffc:	8100030b 	ldhu	r4,12(r16)
  806000:	2082068c 	andi	r2,r4,2074
  806004:	1000081e 	bne	r2,zero,806028 <_fseek_r+0xe8>
  806008:	2081000c 	andi	r2,r4,1024
  80600c:	10001b1e 	bne	r2,zero,80607c <_fseek_r+0x13c>
  806010:	00802034 	movhi	r2,128
  806014:	109d3204 	addi	r2,r2,29896
  806018:	a8800926 	beq	r21,r2,806040 <_fseek_r+0x100>
  80601c:	8080030b 	ldhu	r2,12(r16)
  806020:	10820014 	ori	r2,r2,2048
  806024:	8080030d 	sth	r2,12(r16)
  806028:	9009883a 	mov	r4,r18
  80602c:	800b883a 	mov	r5,r16
  806030:	08054a00 	call	8054a0 <_fflush_r>
  806034:	1000a326 	beq	r2,zero,8062c4 <_fseek_r+0x384>
  806038:	013fffc4 	movi	r4,-1
  80603c:	003fdf06 	br	805fbc <_fseek_r+0x7c>
  806040:	8140038f 	ldh	r5,14(r16)
  806044:	283ff516 	blt	r5,zero,80601c <_fseek_r+0xdc>
  806048:	9009883a 	mov	r4,r18
  80604c:	d80d883a 	mov	r6,sp
  806050:	08063a00 	call	8063a0 <_fstat_r>
  806054:	103ff11e 	bne	r2,zero,80601c <_fseek_r+0xdc>
  806058:	d8800117 	ldw	r2,4(sp)
  80605c:	00e00014 	movui	r3,32768
  806060:	10bc000c 	andi	r2,r2,61440
  806064:	10ffed1e 	bne	r2,r3,80601c <_fseek_r+0xdc>
  806068:	80c0030b 	ldhu	r3,12(r16)
  80606c:	00810004 	movi	r2,1024
  806070:	80801315 	stw	r2,76(r16)
  806074:	1886b03a 	or	r3,r3,r2
  806078:	80c0030d 	sth	r3,12(r16)
  80607c:	9800701e 	bne	r19,zero,806240 <_fseek_r+0x300>
  806080:	b029883a 	mov	r20,r22
  806084:	b804c03a 	cmpne	r2,r23,zero
  806088:	10003f1e 	bne	r2,zero,806188 <_fseek_r+0x248>
  80608c:	8100030b 	ldhu	r4,12(r16)
  806090:	2084000c 	andi	r2,r4,4096
  806094:	1000a126 	beq	r2,zero,80631c <_fseek_r+0x3dc>
  806098:	81801417 	ldw	r6,80(r16)
  80609c:	80c00117 	ldw	r3,4(r16)
  8060a0:	81400c17 	ldw	r5,48(r16)
  8060a4:	30e3c83a 	sub	r17,r6,r3
  8060a8:	28008026 	beq	r5,zero,8062ac <_fseek_r+0x36c>
  8060ac:	81c00f17 	ldw	r7,60(r16)
  8060b0:	89e3c83a 	sub	r17,r17,r7
  8060b4:	80800e17 	ldw	r2,56(r16)
  8060b8:	81800417 	ldw	r6,16(r16)
  8060bc:	88c7883a 	add	r3,r17,r3
  8060c0:	1185c83a 	sub	r2,r2,r6
  8060c4:	11cf883a 	add	r7,r2,r7
  8060c8:	1887c83a 	sub	r3,r3,r2
  8060cc:	2088000c 	andi	r2,r4,8192
  8060d0:	10003e1e 	bne	r2,zero,8061cc <_fseek_r+0x28c>
  8060d4:	a0c03d16 	blt	r20,r3,8061cc <_fseek_r+0x28c>
  8060d8:	38c5883a 	add	r2,r7,r3
  8060dc:	a0803b2e 	bgeu	r20,r2,8061cc <_fseek_r+0x28c>
  8060e0:	a0c5c83a 	sub	r2,r20,r3
  8060e4:	3887c83a 	sub	r3,r7,r2
  8060e8:	3085883a 	add	r2,r6,r2
  8060ec:	80800015 	stw	r2,0(r16)
  8060f0:	80c00115 	stw	r3,4(r16)
  8060f4:	28000526 	beq	r5,zero,80610c <_fseek_r+0x1cc>
  8060f8:	80801004 	addi	r2,r16,64
  8060fc:	28800226 	beq	r5,r2,806108 <_fseek_r+0x1c8>
  806100:	9009883a 	mov	r4,r18
  806104:	0805c2c0 	call	805c2c <_free_r>
  806108:	80000c15 	stw	zero,48(r16)
  80610c:	8080030b 	ldhu	r2,12(r16)
  806110:	0009883a 	mov	r4,zero
  806114:	10bff7cc 	andi	r2,r2,65503
  806118:	8080030d 	sth	r2,12(r16)
  80611c:	003fa706 	br	805fbc <_fseek_r+0x7c>
  806120:	9009883a 	mov	r4,r18
  806124:	800b883a 	mov	r5,r16
  806128:	08054a00 	call	8054a0 <_fflush_r>
  80612c:	8100030b 	ldhu	r4,12(r16)
  806130:	2084000c 	andi	r2,r4,4096
  806134:	10008726 	beq	r2,zero,806354 <_fseek_r+0x414>
  806138:	84401417 	ldw	r17,80(r16)
  80613c:	2080010c 	andi	r2,r4,4
  806140:	1000171e 	bne	r2,zero,8061a0 <_fseek_r+0x260>
  806144:	2080020c 	andi	r2,r4,8
  806148:	10003b26 	beq	r2,zero,806238 <_fseek_r+0x2f8>
  80614c:	80800017 	ldw	r2,0(r16)
  806150:	10003926 	beq	r2,zero,806238 <_fseek_r+0x2f8>
  806154:	81800417 	ldw	r6,16(r16)
  806158:	1185c83a 	sub	r2,r2,r6
  80615c:	88a3883a 	add	r17,r17,r2
  806160:	00001606 	br	8061bc <_fseek_r+0x27c>
  806164:	08057380 	call	805738 <__sinit>
  806168:	8080030b 	ldhu	r2,12(r16)
  80616c:	00c04204 	movi	r3,264
  806170:	1080420c 	andi	r2,r2,264
  806174:	10ff871e 	bne	r2,r3,805f94 <_fseek_r+0x54>
  806178:	9009883a 	mov	r4,r18
  80617c:	800b883a 	mov	r5,r16
  806180:	08054a00 	call	8054a0 <_fflush_r>
  806184:	003f8306 	br	805f94 <_fseek_r+0x54>
  806188:	81400c17 	ldw	r5,48(r16)
  80618c:	28004526 	beq	r5,zero,8062a4 <_fseek_r+0x364>
  806190:	8100030b 	ldhu	r4,12(r16)
  806194:	80c00117 	ldw	r3,4(r16)
  806198:	81c00f17 	ldw	r7,60(r16)
  80619c:	003fc506 	br	8060b4 <_fseek_r+0x174>
  8061a0:	80c00117 	ldw	r3,4(r16)
  8061a4:	80800c17 	ldw	r2,48(r16)
  8061a8:	88e3c83a 	sub	r17,r17,r3
  8061ac:	10002226 	beq	r2,zero,806238 <_fseek_r+0x2f8>
  8061b0:	81c00f17 	ldw	r7,60(r16)
  8061b4:	81800417 	ldw	r6,16(r16)
  8061b8:	89e3c83a 	sub	r17,r17,r7
  8061bc:	b46d883a 	add	r22,r22,r17
  8061c0:	0027883a 	mov	r19,zero
  8061c4:	05c00044 	movi	r23,1
  8061c8:	003f8b06 	br	805ff8 <_fseek_r+0xb8>
  8061cc:	80801317 	ldw	r2,76(r16)
  8061d0:	81400717 	ldw	r5,28(r16)
  8061d4:	9009883a 	mov	r4,r18
  8061d8:	0085c83a 	sub	r2,zero,r2
  8061dc:	a0a2703a 	and	r17,r20,r2
  8061e0:	880d883a 	mov	r6,r17
  8061e4:	000f883a 	mov	r7,zero
  8061e8:	a83ee83a 	callr	r21
  8061ec:	00ffffc4 	movi	r3,-1
  8061f0:	10ff8d26 	beq	r2,r3,806028 <_fseek_r+0xe8>
  8061f4:	80800417 	ldw	r2,16(r16)
  8061f8:	81400c17 	ldw	r5,48(r16)
  8061fc:	80000115 	stw	zero,4(r16)
  806200:	80800015 	stw	r2,0(r16)
  806204:	28000526 	beq	r5,zero,80621c <_fseek_r+0x2dc>
  806208:	80801004 	addi	r2,r16,64
  80620c:	28800226 	beq	r5,r2,806218 <_fseek_r+0x2d8>
  806210:	9009883a 	mov	r4,r18
  806214:	0805c2c0 	call	805c2c <_free_r>
  806218:	80000c15 	stw	zero,48(r16)
  80621c:	8080030b 	ldhu	r2,12(r16)
  806220:	a463c83a 	sub	r17,r20,r17
  806224:	10bff7cc 	andi	r2,r2,65503
  806228:	8080030d 	sth	r2,12(r16)
  80622c:	88000c1e 	bne	r17,zero,806260 <_fseek_r+0x320>
  806230:	0009883a 	mov	r4,zero
  806234:	003f6106 	br	805fbc <_fseek_r+0x7c>
  806238:	81800417 	ldw	r6,16(r16)
  80623c:	003fdf06 	br	8061bc <_fseek_r+0x27c>
  806240:	8140038f 	ldh	r5,14(r16)
  806244:	9009883a 	mov	r4,r18
  806248:	d80d883a 	mov	r6,sp
  80624c:	08063a00 	call	8063a0 <_fstat_r>
  806250:	103f751e 	bne	r2,zero,806028 <_fseek_r+0xe8>
  806254:	d8800417 	ldw	r2,16(sp)
  806258:	b0a9883a 	add	r20,r22,r2
  80625c:	003f8906 	br	806084 <_fseek_r+0x144>
  806260:	9009883a 	mov	r4,r18
  806264:	800b883a 	mov	r5,r16
  806268:	080713c0 	call	80713c <__srefill_r>
  80626c:	103f6e1e 	bne	r2,zero,806028 <_fseek_r+0xe8>
  806270:	80c00117 	ldw	r3,4(r16)
  806274:	1c7f6c36 	bltu	r3,r17,806028 <_fseek_r+0xe8>
  806278:	80800017 	ldw	r2,0(r16)
  80627c:	1c47c83a 	sub	r3,r3,r17
  806280:	0009883a 	mov	r4,zero
  806284:	1445883a 	add	r2,r2,r17
  806288:	80c00115 	stw	r3,4(r16)
  80628c:	80800015 	stw	r2,0(r16)
  806290:	003f4a06 	br	805fbc <_fseek_r+0x7c>
  806294:	9009883a 	mov	r4,r18
  806298:	800b883a 	mov	r5,r16
  80629c:	08066bc0 	call	8066bc <__smakebuf_r>
  8062a0:	003f5606 	br	805ffc <_fseek_r+0xbc>
  8062a4:	8100030b 	ldhu	r4,12(r16)
  8062a8:	80c00117 	ldw	r3,4(r16)
  8062ac:	80800017 	ldw	r2,0(r16)
  8062b0:	81800417 	ldw	r6,16(r16)
  8062b4:	1185c83a 	sub	r2,r2,r6
  8062b8:	10cf883a 	add	r7,r2,r3
  8062bc:	8887c83a 	sub	r3,r17,r2
  8062c0:	003f8206 	br	8060cc <_fseek_r+0x18c>
  8062c4:	81400717 	ldw	r5,28(r16)
  8062c8:	b00d883a 	mov	r6,r22
  8062cc:	980f883a 	mov	r7,r19
  8062d0:	9009883a 	mov	r4,r18
  8062d4:	a83ee83a 	callr	r21
  8062d8:	00ffffc4 	movi	r3,-1
  8062dc:	10ff5626 	beq	r2,r3,806038 <_fseek_r+0xf8>
  8062e0:	81400c17 	ldw	r5,48(r16)
  8062e4:	28000526 	beq	r5,zero,8062fc <_fseek_r+0x3bc>
  8062e8:	80801004 	addi	r2,r16,64
  8062ec:	28800226 	beq	r5,r2,8062f8 <_fseek_r+0x3b8>
  8062f0:	9009883a 	mov	r4,r18
  8062f4:	0805c2c0 	call	805c2c <_free_r>
  8062f8:	80000c15 	stw	zero,48(r16)
  8062fc:	8080030b 	ldhu	r2,12(r16)
  806300:	80c00417 	ldw	r3,16(r16)
  806304:	0009883a 	mov	r4,zero
  806308:	10bdf7cc 	andi	r2,r2,63455
  80630c:	8080030d 	sth	r2,12(r16)
  806310:	80c00015 	stw	r3,0(r16)
  806314:	80000115 	stw	zero,4(r16)
  806318:	003f2806 	br	805fbc <_fseek_r+0x7c>
  80631c:	81400717 	ldw	r5,28(r16)
  806320:	000d883a 	mov	r6,zero
  806324:	9009883a 	mov	r4,r18
  806328:	01c00044 	movi	r7,1
  80632c:	a83ee83a 	callr	r21
  806330:	100d883a 	mov	r6,r2
  806334:	00bfffc4 	movi	r2,-1
  806338:	30bf3b26 	beq	r6,r2,806028 <_fseek_r+0xe8>
  80633c:	8100030b 	ldhu	r4,12(r16)
  806340:	003f5606 	br	80609c <_fseek_r+0x15c>
  806344:	00800744 	movi	r2,29
  806348:	013fffc4 	movi	r4,-1
  80634c:	90800015 	stw	r2,0(r18)
  806350:	003f1a06 	br	805fbc <_fseek_r+0x7c>
  806354:	81400717 	ldw	r5,28(r16)
  806358:	980f883a 	mov	r7,r19
  80635c:	9009883a 	mov	r4,r18
  806360:	000d883a 	mov	r6,zero
  806364:	a83ee83a 	callr	r21
  806368:	1023883a 	mov	r17,r2
  80636c:	00bfffc4 	movi	r2,-1
  806370:	88bf3126 	beq	r17,r2,806038 <_fseek_r+0xf8>
  806374:	8100030b 	ldhu	r4,12(r16)
  806378:	003f7006 	br	80613c <_fseek_r+0x1fc>

0080637c <fseek>:
  80637c:	00802074 	movhi	r2,129
  806380:	10934c04 	addi	r2,r2,19760
  806384:	2013883a 	mov	r9,r4
  806388:	11000017 	ldw	r4,0(r2)
  80638c:	2805883a 	mov	r2,r5
  806390:	300f883a 	mov	r7,r6
  806394:	480b883a 	mov	r5,r9
  806398:	100d883a 	mov	r6,r2
  80639c:	0805f401 	jmpi	805f40 <_fseek_r>

008063a0 <_fstat_r>:
  8063a0:	defffd04 	addi	sp,sp,-12
  8063a4:	dc000015 	stw	r16,0(sp)
  8063a8:	04002074 	movhi	r16,129
  8063ac:	841a7104 	addi	r16,r16,27076
  8063b0:	dc400115 	stw	r17,4(sp)
  8063b4:	80000015 	stw	zero,0(r16)
  8063b8:	2023883a 	mov	r17,r4
  8063bc:	2809883a 	mov	r4,r5
  8063c0:	300b883a 	mov	r5,r6
  8063c4:	dfc00215 	stw	ra,8(sp)
  8063c8:	080e4a80 	call	80e4a8 <fstat>
  8063cc:	1007883a 	mov	r3,r2
  8063d0:	00bfffc4 	movi	r2,-1
  8063d4:	18800626 	beq	r3,r2,8063f0 <_fstat_r+0x50>
  8063d8:	1805883a 	mov	r2,r3
  8063dc:	dfc00217 	ldw	ra,8(sp)
  8063e0:	dc400117 	ldw	r17,4(sp)
  8063e4:	dc000017 	ldw	r16,0(sp)
  8063e8:	dec00304 	addi	sp,sp,12
  8063ec:	f800283a 	ret
  8063f0:	80800017 	ldw	r2,0(r16)
  8063f4:	103ff826 	beq	r2,zero,8063d8 <_fstat_r+0x38>
  8063f8:	88800015 	stw	r2,0(r17)
  8063fc:	1805883a 	mov	r2,r3
  806400:	dfc00217 	ldw	ra,8(sp)
  806404:	dc400117 	ldw	r17,4(sp)
  806408:	dc000017 	ldw	r16,0(sp)
  80640c:	dec00304 	addi	sp,sp,12
  806410:	f800283a 	ret

00806414 <_fwalk_reent>:
  806414:	defff704 	addi	sp,sp,-36
  806418:	dcc00315 	stw	r19,12(sp)
  80641c:	24c0b804 	addi	r19,r4,736
  806420:	dd800615 	stw	r22,24(sp)
  806424:	dd400515 	stw	r21,20(sp)
  806428:	dfc00815 	stw	ra,32(sp)
  80642c:	ddc00715 	stw	r23,28(sp)
  806430:	dd000415 	stw	r20,16(sp)
  806434:	dc800215 	stw	r18,8(sp)
  806438:	dc400115 	stw	r17,4(sp)
  80643c:	dc000015 	stw	r16,0(sp)
  806440:	202b883a 	mov	r21,r4
  806444:	282d883a 	mov	r22,r5
  806448:	08057280 	call	805728 <__sfp_lock_acquire>
  80644c:	98002126 	beq	r19,zero,8064d4 <_fwalk_reent+0xc0>
  806450:	002f883a 	mov	r23,zero
  806454:	9c800117 	ldw	r18,4(r19)
  806458:	9c000217 	ldw	r16,8(r19)
  80645c:	90bfffc4 	addi	r2,r18,-1
  806460:	10000d16 	blt	r2,zero,806498 <_fwalk_reent+0x84>
  806464:	0023883a 	mov	r17,zero
  806468:	053fffc4 	movi	r20,-1
  80646c:	8080030f 	ldh	r2,12(r16)
  806470:	8c400044 	addi	r17,r17,1
  806474:	10000626 	beq	r2,zero,806490 <_fwalk_reent+0x7c>
  806478:	8080038f 	ldh	r2,14(r16)
  80647c:	800b883a 	mov	r5,r16
  806480:	a809883a 	mov	r4,r21
  806484:	15000226 	beq	r2,r20,806490 <_fwalk_reent+0x7c>
  806488:	b03ee83a 	callr	r22
  80648c:	b8aeb03a 	or	r23,r23,r2
  806490:	84001704 	addi	r16,r16,92
  806494:	947ff51e 	bne	r18,r17,80646c <_fwalk_reent+0x58>
  806498:	9cc00017 	ldw	r19,0(r19)
  80649c:	983fed1e 	bne	r19,zero,806454 <_fwalk_reent+0x40>
  8064a0:	080572c0 	call	80572c <__sfp_lock_release>
  8064a4:	b805883a 	mov	r2,r23
  8064a8:	dfc00817 	ldw	ra,32(sp)
  8064ac:	ddc00717 	ldw	r23,28(sp)
  8064b0:	dd800617 	ldw	r22,24(sp)
  8064b4:	dd400517 	ldw	r21,20(sp)
  8064b8:	dd000417 	ldw	r20,16(sp)
  8064bc:	dcc00317 	ldw	r19,12(sp)
  8064c0:	dc800217 	ldw	r18,8(sp)
  8064c4:	dc400117 	ldw	r17,4(sp)
  8064c8:	dc000017 	ldw	r16,0(sp)
  8064cc:	dec00904 	addi	sp,sp,36
  8064d0:	f800283a 	ret
  8064d4:	002f883a 	mov	r23,zero
  8064d8:	003ff106 	br	8064a0 <_fwalk_reent+0x8c>

008064dc <_fwalk>:
  8064dc:	defff804 	addi	sp,sp,-32
  8064e0:	dcc00315 	stw	r19,12(sp)
  8064e4:	24c0b804 	addi	r19,r4,736
  8064e8:	dd400515 	stw	r21,20(sp)
  8064ec:	dfc00715 	stw	ra,28(sp)
  8064f0:	dd800615 	stw	r22,24(sp)
  8064f4:	dd000415 	stw	r20,16(sp)
  8064f8:	dc800215 	stw	r18,8(sp)
  8064fc:	dc400115 	stw	r17,4(sp)
  806500:	dc000015 	stw	r16,0(sp)
  806504:	282b883a 	mov	r21,r5
  806508:	08057280 	call	805728 <__sfp_lock_acquire>
  80650c:	98001f26 	beq	r19,zero,80658c <_fwalk+0xb0>
  806510:	002d883a 	mov	r22,zero
  806514:	9c800117 	ldw	r18,4(r19)
  806518:	9c000217 	ldw	r16,8(r19)
  80651c:	90bfffc4 	addi	r2,r18,-1
  806520:	10000c16 	blt	r2,zero,806554 <_fwalk+0x78>
  806524:	0023883a 	mov	r17,zero
  806528:	053fffc4 	movi	r20,-1
  80652c:	8080030f 	ldh	r2,12(r16)
  806530:	8c400044 	addi	r17,r17,1
  806534:	10000526 	beq	r2,zero,80654c <_fwalk+0x70>
  806538:	8080038f 	ldh	r2,14(r16)
  80653c:	8009883a 	mov	r4,r16
  806540:	15000226 	beq	r2,r20,80654c <_fwalk+0x70>
  806544:	a83ee83a 	callr	r21
  806548:	b0acb03a 	or	r22,r22,r2
  80654c:	84001704 	addi	r16,r16,92
  806550:	947ff61e 	bne	r18,r17,80652c <_fwalk+0x50>
  806554:	9cc00017 	ldw	r19,0(r19)
  806558:	983fee1e 	bne	r19,zero,806514 <_fwalk+0x38>
  80655c:	080572c0 	call	80572c <__sfp_lock_release>
  806560:	b005883a 	mov	r2,r22
  806564:	dfc00717 	ldw	ra,28(sp)
  806568:	dd800617 	ldw	r22,24(sp)
  80656c:	dd400517 	ldw	r21,20(sp)
  806570:	dd000417 	ldw	r20,16(sp)
  806574:	dcc00317 	ldw	r19,12(sp)
  806578:	dc800217 	ldw	r18,8(sp)
  80657c:	dc400117 	ldw	r17,4(sp)
  806580:	dc000017 	ldw	r16,0(sp)
  806584:	dec00804 	addi	sp,sp,32
  806588:	f800283a 	ret
  80658c:	002d883a 	mov	r22,zero
  806590:	003ff206 	br	80655c <_fwalk+0x80>

00806594 <getc>:
  806594:	defffd04 	addi	sp,sp,-12
  806598:	dc400115 	stw	r17,4(sp)
  80659c:	04402074 	movhi	r17,129
  8065a0:	8c534c04 	addi	r17,r17,19760
  8065a4:	88c00017 	ldw	r3,0(r17)
  8065a8:	dc000015 	stw	r16,0(sp)
  8065ac:	dfc00215 	stw	ra,8(sp)
  8065b0:	2021883a 	mov	r16,r4
  8065b4:	18000326 	beq	r3,zero,8065c4 <getc+0x30>
  8065b8:	18800e17 	ldw	r2,56(r3)
  8065bc:	1809883a 	mov	r4,r3
  8065c0:	10000e26 	beq	r2,zero,8065fc <getc+0x68>
  8065c4:	80800117 	ldw	r2,4(r16)
  8065c8:	800b883a 	mov	r5,r16
  8065cc:	10bfffc4 	addi	r2,r2,-1
  8065d0:	80800115 	stw	r2,4(r16)
  8065d4:	10000f16 	blt	r2,zero,806614 <getc+0x80>
  8065d8:	80c00017 	ldw	r3,0(r16)
  8065dc:	18800003 	ldbu	r2,0(r3)
  8065e0:	18c00044 	addi	r3,r3,1
  8065e4:	80c00015 	stw	r3,0(r16)
  8065e8:	dfc00217 	ldw	ra,8(sp)
  8065ec:	dc400117 	ldw	r17,4(sp)
  8065f0:	dc000017 	ldw	r16,0(sp)
  8065f4:	dec00304 	addi	sp,sp,12
  8065f8:	f800283a 	ret
  8065fc:	08057380 	call	805738 <__sinit>
  806600:	80800117 	ldw	r2,4(r16)
  806604:	800b883a 	mov	r5,r16
  806608:	10bfffc4 	addi	r2,r2,-1
  80660c:	80800115 	stw	r2,4(r16)
  806610:	103ff10e 	bge	r2,zero,8065d8 <getc+0x44>
  806614:	89000017 	ldw	r4,0(r17)
  806618:	dfc00217 	ldw	ra,8(sp)
  80661c:	dc400117 	ldw	r17,4(sp)
  806620:	dc000017 	ldw	r16,0(sp)
  806624:	dec00304 	addi	sp,sp,12
  806628:	080731c1 	jmpi	80731c <__srget_r>

0080662c <_getc_r>:
  80662c:	defffd04 	addi	sp,sp,-12
  806630:	dc400115 	stw	r17,4(sp)
  806634:	dc000015 	stw	r16,0(sp)
  806638:	dfc00215 	stw	ra,8(sp)
  80663c:	2021883a 	mov	r16,r4
  806640:	2823883a 	mov	r17,r5
  806644:	20000226 	beq	r4,zero,806650 <_getc_r+0x24>
  806648:	20800e17 	ldw	r2,56(r4)
  80664c:	10000f26 	beq	r2,zero,80668c <_getc_r+0x60>
  806650:	88800117 	ldw	r2,4(r17)
  806654:	8009883a 	mov	r4,r16
  806658:	880b883a 	mov	r5,r17
  80665c:	10bfffc4 	addi	r2,r2,-1
  806660:	88800115 	stw	r2,4(r17)
  806664:	10001016 	blt	r2,zero,8066a8 <_getc_r+0x7c>
  806668:	88c00017 	ldw	r3,0(r17)
  80666c:	18800003 	ldbu	r2,0(r3)
  806670:	18c00044 	addi	r3,r3,1
  806674:	88c00015 	stw	r3,0(r17)
  806678:	dfc00217 	ldw	ra,8(sp)
  80667c:	dc400117 	ldw	r17,4(sp)
  806680:	dc000017 	ldw	r16,0(sp)
  806684:	dec00304 	addi	sp,sp,12
  806688:	f800283a 	ret
  80668c:	08057380 	call	805738 <__sinit>
  806690:	88800117 	ldw	r2,4(r17)
  806694:	8009883a 	mov	r4,r16
  806698:	880b883a 	mov	r5,r17
  80669c:	10bfffc4 	addi	r2,r2,-1
  8066a0:	88800115 	stw	r2,4(r17)
  8066a4:	103ff00e 	bge	r2,zero,806668 <_getc_r+0x3c>
  8066a8:	dfc00217 	ldw	ra,8(sp)
  8066ac:	dc400117 	ldw	r17,4(sp)
  8066b0:	dc000017 	ldw	r16,0(sp)
  8066b4:	dec00304 	addi	sp,sp,12
  8066b8:	080731c1 	jmpi	80731c <__srget_r>

008066bc <__smakebuf_r>:
  8066bc:	2880030b 	ldhu	r2,12(r5)
  8066c0:	deffed04 	addi	sp,sp,-76
  8066c4:	dc401015 	stw	r17,64(sp)
  8066c8:	1080008c 	andi	r2,r2,2
  8066cc:	dc000f15 	stw	r16,60(sp)
  8066d0:	dfc01215 	stw	ra,72(sp)
  8066d4:	dc801115 	stw	r18,68(sp)
  8066d8:	2821883a 	mov	r16,r5
  8066dc:	2023883a 	mov	r17,r4
  8066e0:	10000b26 	beq	r2,zero,806710 <__smakebuf_r+0x54>
  8066e4:	28c010c4 	addi	r3,r5,67
  8066e8:	00800044 	movi	r2,1
  8066ec:	28800515 	stw	r2,20(r5)
  8066f0:	28c00415 	stw	r3,16(r5)
  8066f4:	28c00015 	stw	r3,0(r5)
  8066f8:	dfc01217 	ldw	ra,72(sp)
  8066fc:	dc801117 	ldw	r18,68(sp)
  806700:	dc401017 	ldw	r17,64(sp)
  806704:	dc000f17 	ldw	r16,60(sp)
  806708:	dec01304 	addi	sp,sp,76
  80670c:	f800283a 	ret
  806710:	2940038f 	ldh	r5,14(r5)
  806714:	28002116 	blt	r5,zero,80679c <__smakebuf_r+0xe0>
  806718:	d80d883a 	mov	r6,sp
  80671c:	08063a00 	call	8063a0 <_fstat_r>
  806720:	10001e16 	blt	r2,zero,80679c <__smakebuf_r+0xe0>
  806724:	d8800117 	ldw	r2,4(sp)
  806728:	00e00014 	movui	r3,32768
  80672c:	113c000c 	andi	r4,r2,61440
  806730:	20c03126 	beq	r4,r3,8067f8 <__smakebuf_r+0x13c>
  806734:	8080030b 	ldhu	r2,12(r16)
  806738:	00c80004 	movi	r3,8192
  80673c:	10820014 	ori	r2,r2,2048
  806740:	8080030d 	sth	r2,12(r16)
  806744:	20c01e26 	beq	r4,r3,8067c0 <__smakebuf_r+0x104>
  806748:	04810004 	movi	r18,1024
  80674c:	8809883a 	mov	r4,r17
  806750:	900b883a 	mov	r5,r18
  806754:	08068500 	call	806850 <_malloc_r>
  806758:	1009883a 	mov	r4,r2
  80675c:	10003126 	beq	r2,zero,806824 <__smakebuf_r+0x168>
  806760:	80c0030b 	ldhu	r3,12(r16)
  806764:	00802034 	movhi	r2,128
  806768:	10960704 	addi	r2,r2,22556
  80676c:	88800f15 	stw	r2,60(r17)
  806770:	18c02014 	ori	r3,r3,128
  806774:	84800515 	stw	r18,20(r16)
  806778:	80c0030d 	sth	r3,12(r16)
  80677c:	81000415 	stw	r4,16(r16)
  806780:	81000015 	stw	r4,0(r16)
  806784:	dfc01217 	ldw	ra,72(sp)
  806788:	dc801117 	ldw	r18,68(sp)
  80678c:	dc401017 	ldw	r17,64(sp)
  806790:	dc000f17 	ldw	r16,60(sp)
  806794:	dec01304 	addi	sp,sp,76
  806798:	f800283a 	ret
  80679c:	80c0030b 	ldhu	r3,12(r16)
  8067a0:	1880200c 	andi	r2,r3,128
  8067a4:	10000426 	beq	r2,zero,8067b8 <__smakebuf_r+0xfc>
  8067a8:	04801004 	movi	r18,64
  8067ac:	18820014 	ori	r2,r3,2048
  8067b0:	8080030d 	sth	r2,12(r16)
  8067b4:	003fe506 	br	80674c <__smakebuf_r+0x90>
  8067b8:	04810004 	movi	r18,1024
  8067bc:	003ffb06 	br	8067ac <__smakebuf_r+0xf0>
  8067c0:	8140038f 	ldh	r5,14(r16)
  8067c4:	8809883a 	mov	r4,r17
  8067c8:	080b4600 	call	80b460 <_isatty_r>
  8067cc:	103fde26 	beq	r2,zero,806748 <__smakebuf_r+0x8c>
  8067d0:	8080030b 	ldhu	r2,12(r16)
  8067d4:	80c010c4 	addi	r3,r16,67
  8067d8:	04810004 	movi	r18,1024
  8067dc:	10800054 	ori	r2,r2,1
  8067e0:	8080030d 	sth	r2,12(r16)
  8067e4:	00800044 	movi	r2,1
  8067e8:	80c00415 	stw	r3,16(r16)
  8067ec:	80800515 	stw	r2,20(r16)
  8067f0:	80c00015 	stw	r3,0(r16)
  8067f4:	003fd506 	br	80674c <__smakebuf_r+0x90>
  8067f8:	80c00a17 	ldw	r3,40(r16)
  8067fc:	00802034 	movhi	r2,128
  806800:	109d3204 	addi	r2,r2,29896
  806804:	18bfcb1e 	bne	r3,r2,806734 <__smakebuf_r+0x78>
  806808:	8080030b 	ldhu	r2,12(r16)
  80680c:	00c10004 	movi	r3,1024
  806810:	1825883a 	mov	r18,r3
  806814:	10c4b03a 	or	r2,r2,r3
  806818:	8080030d 	sth	r2,12(r16)
  80681c:	80c01315 	stw	r3,76(r16)
  806820:	003fca06 	br	80674c <__smakebuf_r+0x90>
  806824:	8100030b 	ldhu	r4,12(r16)
  806828:	2080800c 	andi	r2,r4,512
  80682c:	103fb21e 	bne	r2,zero,8066f8 <__smakebuf_r+0x3c>
  806830:	80c010c4 	addi	r3,r16,67
  806834:	21000094 	ori	r4,r4,2
  806838:	00800044 	movi	r2,1
  80683c:	80800515 	stw	r2,20(r16)
  806840:	8100030d 	sth	r4,12(r16)
  806844:	80c00415 	stw	r3,16(r16)
  806848:	80c00015 	stw	r3,0(r16)
  80684c:	003faa06 	br	8066f8 <__smakebuf_r+0x3c>

00806850 <_malloc_r>:
  806850:	defff604 	addi	sp,sp,-40
  806854:	28c002c4 	addi	r3,r5,11
  806858:	00800584 	movi	r2,22
  80685c:	dc800215 	stw	r18,8(sp)
  806860:	dfc00915 	stw	ra,36(sp)
  806864:	df000815 	stw	fp,32(sp)
  806868:	ddc00715 	stw	r23,28(sp)
  80686c:	dd800615 	stw	r22,24(sp)
  806870:	dd400515 	stw	r21,20(sp)
  806874:	dd000415 	stw	r20,16(sp)
  806878:	dcc00315 	stw	r19,12(sp)
  80687c:	dc400115 	stw	r17,4(sp)
  806880:	dc000015 	stw	r16,0(sp)
  806884:	2025883a 	mov	r18,r4
  806888:	10c01236 	bltu	r2,r3,8068d4 <_malloc_r+0x84>
  80688c:	04400404 	movi	r17,16
  806890:	8940142e 	bgeu	r17,r5,8068e4 <_malloc_r+0x94>
  806894:	00800304 	movi	r2,12
  806898:	0007883a 	mov	r3,zero
  80689c:	90800015 	stw	r2,0(r18)
  8068a0:	1805883a 	mov	r2,r3
  8068a4:	dfc00917 	ldw	ra,36(sp)
  8068a8:	df000817 	ldw	fp,32(sp)
  8068ac:	ddc00717 	ldw	r23,28(sp)
  8068b0:	dd800617 	ldw	r22,24(sp)
  8068b4:	dd400517 	ldw	r21,20(sp)
  8068b8:	dd000417 	ldw	r20,16(sp)
  8068bc:	dcc00317 	ldw	r19,12(sp)
  8068c0:	dc800217 	ldw	r18,8(sp)
  8068c4:	dc400117 	ldw	r17,4(sp)
  8068c8:	dc000017 	ldw	r16,0(sp)
  8068cc:	dec00a04 	addi	sp,sp,40
  8068d0:	f800283a 	ret
  8068d4:	00bffe04 	movi	r2,-8
  8068d8:	18a2703a 	and	r17,r3,r2
  8068dc:	883fed16 	blt	r17,zero,806894 <_malloc_r+0x44>
  8068e0:	897fec36 	bltu	r17,r5,806894 <_malloc_r+0x44>
  8068e4:	9009883a 	mov	r4,r18
  8068e8:	080e9a40 	call	80e9a4 <__malloc_lock>
  8068ec:	00807dc4 	movi	r2,503
  8068f0:	14402b2e 	bgeu	r2,r17,8069a0 <_malloc_r+0x150>
  8068f4:	8806d27a 	srli	r3,r17,9
  8068f8:	18003f1e 	bne	r3,zero,8069f8 <_malloc_r+0x1a8>
  8068fc:	880cd0fa 	srli	r6,r17,3
  806900:	300490fa 	slli	r2,r6,3
  806904:	02c02074 	movhi	r11,129
  806908:	5acd4b04 	addi	r11,r11,13612
  80690c:	12cb883a 	add	r5,r2,r11
  806910:	2c000317 	ldw	r16,12(r5)
  806914:	580f883a 	mov	r7,r11
  806918:	2c00041e 	bne	r5,r16,80692c <_malloc_r+0xdc>
  80691c:	00000a06 	br	806948 <_malloc_r+0xf8>
  806920:	1800860e 	bge	r3,zero,806b3c <_malloc_r+0x2ec>
  806924:	84000317 	ldw	r16,12(r16)
  806928:	2c000726 	beq	r5,r16,806948 <_malloc_r+0xf8>
  80692c:	80800117 	ldw	r2,4(r16)
  806930:	00ffff04 	movi	r3,-4
  806934:	10c8703a 	and	r4,r2,r3
  806938:	2447c83a 	sub	r3,r4,r17
  80693c:	008003c4 	movi	r2,15
  806940:	10fff70e 	bge	r2,r3,806920 <_malloc_r+0xd0>
  806944:	31bfffc4 	addi	r6,r6,-1
  806948:	32400044 	addi	r9,r6,1
  80694c:	02802074 	movhi	r10,129
  806950:	528d4d04 	addi	r10,r10,13620
  806954:	54000217 	ldw	r16,8(r10)
  806958:	8280a026 	beq	r16,r10,806bdc <_malloc_r+0x38c>
  80695c:	80800117 	ldw	r2,4(r16)
  806960:	00ffff04 	movi	r3,-4
  806964:	10ca703a 	and	r5,r2,r3
  806968:	2c4dc83a 	sub	r6,r5,r17
  80696c:	008003c4 	movi	r2,15
  806970:	11808316 	blt	r2,r6,806b80 <_malloc_r+0x330>
  806974:	52800315 	stw	r10,12(r10)
  806978:	52800215 	stw	r10,8(r10)
  80697c:	30002916 	blt	r6,zero,806a24 <_malloc_r+0x1d4>
  806980:	8147883a 	add	r3,r16,r5
  806984:	18800117 	ldw	r2,4(r3)
  806988:	9009883a 	mov	r4,r18
  80698c:	10800054 	ori	r2,r2,1
  806990:	18800115 	stw	r2,4(r3)
  806994:	080e9c40 	call	80e9c4 <__malloc_unlock>
  806998:	80c00204 	addi	r3,r16,8
  80699c:	003fc006 	br	8068a0 <_malloc_r+0x50>
  8069a0:	02c02074 	movhi	r11,129
  8069a4:	5acd4b04 	addi	r11,r11,13612
  8069a8:	8ac5883a 	add	r2,r17,r11
  8069ac:	14000317 	ldw	r16,12(r2)
  8069b0:	580f883a 	mov	r7,r11
  8069b4:	8806d0fa 	srli	r3,r17,3
  8069b8:	14006c26 	beq	r2,r16,806b6c <_malloc_r+0x31c>
  8069bc:	80c00117 	ldw	r3,4(r16)
  8069c0:	00bfff04 	movi	r2,-4
  8069c4:	81800317 	ldw	r6,12(r16)
  8069c8:	1886703a 	and	r3,r3,r2
  8069cc:	80c7883a 	add	r3,r16,r3
  8069d0:	18800117 	ldw	r2,4(r3)
  8069d4:	81400217 	ldw	r5,8(r16)
  8069d8:	9009883a 	mov	r4,r18
  8069dc:	10800054 	ori	r2,r2,1
  8069e0:	18800115 	stw	r2,4(r3)
  8069e4:	31400215 	stw	r5,8(r6)
  8069e8:	29800315 	stw	r6,12(r5)
  8069ec:	080e9c40 	call	80e9c4 <__malloc_unlock>
  8069f0:	80c00204 	addi	r3,r16,8
  8069f4:	003faa06 	br	8068a0 <_malloc_r+0x50>
  8069f8:	00800104 	movi	r2,4
  8069fc:	10c0052e 	bgeu	r2,r3,806a14 <_malloc_r+0x1c4>
  806a00:	00800504 	movi	r2,20
  806a04:	10c07836 	bltu	r2,r3,806be8 <_malloc_r+0x398>
  806a08:	198016c4 	addi	r6,r3,91
  806a0c:	300490fa 	slli	r2,r6,3
  806a10:	003fbc06 	br	806904 <_malloc_r+0xb4>
  806a14:	8804d1ba 	srli	r2,r17,6
  806a18:	11800e04 	addi	r6,r2,56
  806a1c:	300490fa 	slli	r2,r6,3
  806a20:	003fb806 	br	806904 <_malloc_r+0xb4>
  806a24:	00807fc4 	movi	r2,511
  806a28:	1140bb36 	bltu	r2,r5,806d18 <_malloc_r+0x4c8>
  806a2c:	2806d0fa 	srli	r3,r5,3
  806a30:	573ffe04 	addi	fp,r10,-8
  806a34:	00800044 	movi	r2,1
  806a38:	180890fa 	slli	r4,r3,3
  806a3c:	1807d0ba 	srai	r3,r3,2
  806a40:	e1c00117 	ldw	r7,4(fp)
  806a44:	5909883a 	add	r4,r11,r4
  806a48:	21400217 	ldw	r5,8(r4)
  806a4c:	10c4983a 	sll	r2,r2,r3
  806a50:	81000315 	stw	r4,12(r16)
  806a54:	81400215 	stw	r5,8(r16)
  806a58:	388eb03a 	or	r7,r7,r2
  806a5c:	2c000315 	stw	r16,12(r5)
  806a60:	24000215 	stw	r16,8(r4)
  806a64:	e1c00115 	stw	r7,4(fp)
  806a68:	4807883a 	mov	r3,r9
  806a6c:	4800cd16 	blt	r9,zero,806da4 <_malloc_r+0x554>
  806a70:	1807d0ba 	srai	r3,r3,2
  806a74:	00800044 	movi	r2,1
  806a78:	10c8983a 	sll	r4,r2,r3
  806a7c:	39004436 	bltu	r7,r4,806b90 <_malloc_r+0x340>
  806a80:	21c4703a 	and	r2,r4,r7
  806a84:	10000a1e 	bne	r2,zero,806ab0 <_malloc_r+0x260>
  806a88:	2109883a 	add	r4,r4,r4
  806a8c:	00bfff04 	movi	r2,-4
  806a90:	4884703a 	and	r2,r9,r2
  806a94:	3906703a 	and	r3,r7,r4
  806a98:	12400104 	addi	r9,r2,4
  806a9c:	1800041e 	bne	r3,zero,806ab0 <_malloc_r+0x260>
  806aa0:	2109883a 	add	r4,r4,r4
  806aa4:	3904703a 	and	r2,r7,r4
  806aa8:	4a400104 	addi	r9,r9,4
  806aac:	103ffc26 	beq	r2,zero,806aa0 <_malloc_r+0x250>
  806ab0:	480490fa 	slli	r2,r9,3
  806ab4:	4819883a 	mov	r12,r9
  806ab8:	023fff04 	movi	r8,-4
  806abc:	589b883a 	add	r13,r11,r2
  806ac0:	6807883a 	mov	r3,r13
  806ac4:	014003c4 	movi	r5,15
  806ac8:	1c000317 	ldw	r16,12(r3)
  806acc:	1c00041e 	bne	r3,r16,806ae0 <_malloc_r+0x290>
  806ad0:	0000a706 	br	806d70 <_malloc_r+0x520>
  806ad4:	3000ab0e 	bge	r6,zero,806d84 <_malloc_r+0x534>
  806ad8:	84000317 	ldw	r16,12(r16)
  806adc:	1c00a426 	beq	r3,r16,806d70 <_malloc_r+0x520>
  806ae0:	80800117 	ldw	r2,4(r16)
  806ae4:	1204703a 	and	r2,r2,r8
  806ae8:	144dc83a 	sub	r6,r2,r17
  806aec:	29bff90e 	bge	r5,r6,806ad4 <_malloc_r+0x284>
  806af0:	81000317 	ldw	r4,12(r16)
  806af4:	80c00217 	ldw	r3,8(r16)
  806af8:	89400054 	ori	r5,r17,1
  806afc:	8445883a 	add	r2,r16,r17
  806b00:	20c00215 	stw	r3,8(r4)
  806b04:	19000315 	stw	r4,12(r3)
  806b08:	81400115 	stw	r5,4(r16)
  806b0c:	1187883a 	add	r3,r2,r6
  806b10:	31000054 	ori	r4,r6,1
  806b14:	50800315 	stw	r2,12(r10)
  806b18:	50800215 	stw	r2,8(r10)
  806b1c:	19800015 	stw	r6,0(r3)
  806b20:	11000115 	stw	r4,4(r2)
  806b24:	12800215 	stw	r10,8(r2)
  806b28:	12800315 	stw	r10,12(r2)
  806b2c:	9009883a 	mov	r4,r18
  806b30:	080e9c40 	call	80e9c4 <__malloc_unlock>
  806b34:	80c00204 	addi	r3,r16,8
  806b38:	003f5906 	br	8068a0 <_malloc_r+0x50>
  806b3c:	8109883a 	add	r4,r16,r4
  806b40:	20800117 	ldw	r2,4(r4)
  806b44:	80c00217 	ldw	r3,8(r16)
  806b48:	81400317 	ldw	r5,12(r16)
  806b4c:	10800054 	ori	r2,r2,1
  806b50:	20800115 	stw	r2,4(r4)
  806b54:	28c00215 	stw	r3,8(r5)
  806b58:	19400315 	stw	r5,12(r3)
  806b5c:	9009883a 	mov	r4,r18
  806b60:	080e9c40 	call	80e9c4 <__malloc_unlock>
  806b64:	80c00204 	addi	r3,r16,8
  806b68:	003f4d06 	br	8068a0 <_malloc_r+0x50>
  806b6c:	80800204 	addi	r2,r16,8
  806b70:	14000317 	ldw	r16,12(r2)
  806b74:	143f911e 	bne	r2,r16,8069bc <_malloc_r+0x16c>
  806b78:	1a400084 	addi	r9,r3,2
  806b7c:	003f7306 	br	80694c <_malloc_r+0xfc>
  806b80:	88c00054 	ori	r3,r17,1
  806b84:	8445883a 	add	r2,r16,r17
  806b88:	80c00115 	stw	r3,4(r16)
  806b8c:	003fdf06 	br	806b0c <_malloc_r+0x2bc>
  806b90:	e4000217 	ldw	r16,8(fp)
  806b94:	00bfff04 	movi	r2,-4
  806b98:	80c00117 	ldw	r3,4(r16)
  806b9c:	802d883a 	mov	r22,r16
  806ba0:	18aa703a 	and	r21,r3,r2
  806ba4:	ac401636 	bltu	r21,r17,806c00 <_malloc_r+0x3b0>
  806ba8:	ac49c83a 	sub	r4,r21,r17
  806bac:	008003c4 	movi	r2,15
  806bb0:	1100130e 	bge	r2,r4,806c00 <_malloc_r+0x3b0>
  806bb4:	88800054 	ori	r2,r17,1
  806bb8:	8447883a 	add	r3,r16,r17
  806bbc:	80800115 	stw	r2,4(r16)
  806bc0:	20800054 	ori	r2,r4,1
  806bc4:	18800115 	stw	r2,4(r3)
  806bc8:	e0c00215 	stw	r3,8(fp)
  806bcc:	9009883a 	mov	r4,r18
  806bd0:	080e9c40 	call	80e9c4 <__malloc_unlock>
  806bd4:	80c00204 	addi	r3,r16,8
  806bd8:	003f3106 	br	8068a0 <_malloc_r+0x50>
  806bdc:	39c00117 	ldw	r7,4(r7)
  806be0:	573ffe04 	addi	fp,r10,-8
  806be4:	003fa006 	br	806a68 <_malloc_r+0x218>
  806be8:	00801504 	movi	r2,84
  806bec:	10c06736 	bltu	r2,r3,806d8c <_malloc_r+0x53c>
  806bf0:	8804d33a 	srli	r2,r17,12
  806bf4:	11801b84 	addi	r6,r2,110
  806bf8:	300490fa 	slli	r2,r6,3
  806bfc:	003f4106 	br	806904 <_malloc_r+0xb4>
  806c00:	d0a72717 	ldw	r2,-25444(gp)
  806c04:	d0e00417 	ldw	r3,-32752(gp)
  806c08:	053fffc4 	movi	r20,-1
  806c0c:	10800404 	addi	r2,r2,16
  806c10:	88a7883a 	add	r19,r17,r2
  806c14:	1d000326 	beq	r3,r20,806c24 <_malloc_r+0x3d4>
  806c18:	98c3ffc4 	addi	r3,r19,4095
  806c1c:	00bc0004 	movi	r2,-4096
  806c20:	18a6703a 	and	r19,r3,r2
  806c24:	9009883a 	mov	r4,r18
  806c28:	980b883a 	mov	r5,r19
  806c2c:	080737c0 	call	80737c <_sbrk_r>
  806c30:	1009883a 	mov	r4,r2
  806c34:	15000426 	beq	r2,r20,806c48 <_malloc_r+0x3f8>
  806c38:	854b883a 	add	r5,r16,r21
  806c3c:	1029883a 	mov	r20,r2
  806c40:	11405a2e 	bgeu	r2,r5,806dac <_malloc_r+0x55c>
  806c44:	87000c26 	beq	r16,fp,806c78 <_malloc_r+0x428>
  806c48:	e4000217 	ldw	r16,8(fp)
  806c4c:	80c00117 	ldw	r3,4(r16)
  806c50:	00bfff04 	movi	r2,-4
  806c54:	1884703a 	and	r2,r3,r2
  806c58:	14400336 	bltu	r2,r17,806c68 <_malloc_r+0x418>
  806c5c:	1449c83a 	sub	r4,r2,r17
  806c60:	008003c4 	movi	r2,15
  806c64:	113fd316 	blt	r2,r4,806bb4 <_malloc_r+0x364>
  806c68:	9009883a 	mov	r4,r18
  806c6c:	080e9c40 	call	80e9c4 <__malloc_unlock>
  806c70:	0007883a 	mov	r3,zero
  806c74:	003f0a06 	br	8068a0 <_malloc_r+0x50>
  806c78:	05c02074 	movhi	r23,129
  806c7c:	bdda7e04 	addi	r23,r23,27128
  806c80:	b8800017 	ldw	r2,0(r23)
  806c84:	988d883a 	add	r6,r19,r2
  806c88:	b9800015 	stw	r6,0(r23)
  806c8c:	d0e00417 	ldw	r3,-32752(gp)
  806c90:	00bfffc4 	movi	r2,-1
  806c94:	18808e26 	beq	r3,r2,806ed0 <_malloc_r+0x680>
  806c98:	2145c83a 	sub	r2,r4,r5
  806c9c:	3085883a 	add	r2,r6,r2
  806ca0:	b8800015 	stw	r2,0(r23)
  806ca4:	20c001cc 	andi	r3,r4,7
  806ca8:	18005f1e 	bne	r3,zero,806e28 <_malloc_r+0x5d8>
  806cac:	000b883a 	mov	r5,zero
  806cb0:	a4c5883a 	add	r2,r20,r19
  806cb4:	1083ffcc 	andi	r2,r2,4095
  806cb8:	00c40004 	movi	r3,4096
  806cbc:	1887c83a 	sub	r3,r3,r2
  806cc0:	28e7883a 	add	r19,r5,r3
  806cc4:	9009883a 	mov	r4,r18
  806cc8:	980b883a 	mov	r5,r19
  806ccc:	080737c0 	call	80737c <_sbrk_r>
  806cd0:	1007883a 	mov	r3,r2
  806cd4:	00bfffc4 	movi	r2,-1
  806cd8:	18807a26 	beq	r3,r2,806ec4 <_malloc_r+0x674>
  806cdc:	1d05c83a 	sub	r2,r3,r20
  806ce0:	9885883a 	add	r2,r19,r2
  806ce4:	10c00054 	ori	r3,r2,1
  806ce8:	b8800017 	ldw	r2,0(r23)
  806cec:	a021883a 	mov	r16,r20
  806cf0:	a0c00115 	stw	r3,4(r20)
  806cf4:	9885883a 	add	r2,r19,r2
  806cf8:	b8800015 	stw	r2,0(r23)
  806cfc:	e5000215 	stw	r20,8(fp)
  806d00:	b7003626 	beq	r22,fp,806ddc <_malloc_r+0x58c>
  806d04:	018003c4 	movi	r6,15
  806d08:	35404b36 	bltu	r6,r21,806e38 <_malloc_r+0x5e8>
  806d0c:	00800044 	movi	r2,1
  806d10:	a0800115 	stw	r2,4(r20)
  806d14:	003fcd06 	br	806c4c <_malloc_r+0x3fc>
  806d18:	2808d27a 	srli	r4,r5,9
  806d1c:	2000371e 	bne	r4,zero,806dfc <_malloc_r+0x5ac>
  806d20:	2808d0fa 	srli	r4,r5,3
  806d24:	200690fa 	slli	r3,r4,3
  806d28:	1ad1883a 	add	r8,r3,r11
  806d2c:	41800217 	ldw	r6,8(r8)
  806d30:	41805b26 	beq	r8,r6,806ea0 <_malloc_r+0x650>
  806d34:	30800117 	ldw	r2,4(r6)
  806d38:	00ffff04 	movi	r3,-4
  806d3c:	10c4703a 	and	r2,r2,r3
  806d40:	2880022e 	bgeu	r5,r2,806d4c <_malloc_r+0x4fc>
  806d44:	31800217 	ldw	r6,8(r6)
  806d48:	41bffa1e 	bne	r8,r6,806d34 <_malloc_r+0x4e4>
  806d4c:	32000317 	ldw	r8,12(r6)
  806d50:	39c00117 	ldw	r7,4(r7)
  806d54:	82000315 	stw	r8,12(r16)
  806d58:	81800215 	stw	r6,8(r16)
  806d5c:	07002074 	movhi	fp,129
  806d60:	e70d4b04 	addi	fp,fp,13612
  806d64:	34000315 	stw	r16,12(r6)
  806d68:	44000215 	stw	r16,8(r8)
  806d6c:	003f3e06 	br	806a68 <_malloc_r+0x218>
  806d70:	63000044 	addi	r12,r12,1
  806d74:	608000cc 	andi	r2,r12,3
  806d78:	10005d26 	beq	r2,zero,806ef0 <_malloc_r+0x6a0>
  806d7c:	18c00204 	addi	r3,r3,8
  806d80:	003f5106 	br	806ac8 <_malloc_r+0x278>
  806d84:	8089883a 	add	r4,r16,r2
  806d88:	003f6d06 	br	806b40 <_malloc_r+0x2f0>
  806d8c:	00805504 	movi	r2,340
  806d90:	10c02036 	bltu	r2,r3,806e14 <_malloc_r+0x5c4>
  806d94:	8804d3fa 	srli	r2,r17,15
  806d98:	11801dc4 	addi	r6,r2,119
  806d9c:	300490fa 	slli	r2,r6,3
  806da0:	003ed806 	br	806904 <_malloc_r+0xb4>
  806da4:	48c000c4 	addi	r3,r9,3
  806da8:	003f3106 	br	806a70 <_malloc_r+0x220>
  806dac:	05c02074 	movhi	r23,129
  806db0:	bdda7e04 	addi	r23,r23,27128
  806db4:	b8800017 	ldw	r2,0(r23)
  806db8:	988d883a 	add	r6,r19,r2
  806dbc:	b9800015 	stw	r6,0(r23)
  806dc0:	293fb21e 	bne	r5,r4,806c8c <_malloc_r+0x43c>
  806dc4:	2083ffcc 	andi	r2,r4,4095
  806dc8:	103fb01e 	bne	r2,zero,806c8c <_malloc_r+0x43c>
  806dcc:	e4000217 	ldw	r16,8(fp)
  806dd0:	9d45883a 	add	r2,r19,r21
  806dd4:	10800054 	ori	r2,r2,1
  806dd8:	80800115 	stw	r2,4(r16)
  806ddc:	b8c00017 	ldw	r3,0(r23)
  806de0:	d0a72817 	ldw	r2,-25440(gp)
  806de4:	10c0012e 	bgeu	r2,r3,806dec <_malloc_r+0x59c>
  806de8:	d0e72815 	stw	r3,-25440(gp)
  806dec:	d0a72917 	ldw	r2,-25436(gp)
  806df0:	10ff962e 	bgeu	r2,r3,806c4c <_malloc_r+0x3fc>
  806df4:	d0e72915 	stw	r3,-25436(gp)
  806df8:	003f9406 	br	806c4c <_malloc_r+0x3fc>
  806dfc:	00800104 	movi	r2,4
  806e00:	11001e36 	bltu	r2,r4,806e7c <_malloc_r+0x62c>
  806e04:	2804d1ba 	srli	r2,r5,6
  806e08:	11000e04 	addi	r4,r2,56
  806e0c:	200690fa 	slli	r3,r4,3
  806e10:	003fc506 	br	806d28 <_malloc_r+0x4d8>
  806e14:	00815504 	movi	r2,1364
  806e18:	10c01d2e 	bgeu	r2,r3,806e90 <_malloc_r+0x640>
  806e1c:	01801f84 	movi	r6,126
  806e20:	0080fc04 	movi	r2,1008
  806e24:	003eb706 	br	806904 <_malloc_r+0xb4>
  806e28:	00800204 	movi	r2,8
  806e2c:	10cbc83a 	sub	r5,r2,r3
  806e30:	2169883a 	add	r20,r4,r5
  806e34:	003f9e06 	br	806cb0 <_malloc_r+0x460>
  806e38:	00bffe04 	movi	r2,-8
  806e3c:	a93ffd04 	addi	r4,r21,-12
  806e40:	2088703a 	and	r4,r4,r2
  806e44:	b10b883a 	add	r5,r22,r4
  806e48:	00c00144 	movi	r3,5
  806e4c:	28c00215 	stw	r3,8(r5)
  806e50:	28c00115 	stw	r3,4(r5)
  806e54:	b0800117 	ldw	r2,4(r22)
  806e58:	1080004c 	andi	r2,r2,1
  806e5c:	2084b03a 	or	r2,r4,r2
  806e60:	b0800115 	stw	r2,4(r22)
  806e64:	313fdd2e 	bgeu	r6,r4,806ddc <_malloc_r+0x58c>
  806e68:	b1400204 	addi	r5,r22,8
  806e6c:	9009883a 	mov	r4,r18
  806e70:	0805c2c0 	call	805c2c <_free_r>
  806e74:	e4000217 	ldw	r16,8(fp)
  806e78:	003fd806 	br	806ddc <_malloc_r+0x58c>
  806e7c:	00800504 	movi	r2,20
  806e80:	11001536 	bltu	r2,r4,806ed8 <_malloc_r+0x688>
  806e84:	210016c4 	addi	r4,r4,91
  806e88:	200690fa 	slli	r3,r4,3
  806e8c:	003fa606 	br	806d28 <_malloc_r+0x4d8>
  806e90:	8804d4ba 	srli	r2,r17,18
  806e94:	11801f04 	addi	r6,r2,124
  806e98:	300490fa 	slli	r2,r6,3
  806e9c:	003e9906 	br	806904 <_malloc_r+0xb4>
  806ea0:	2009d0ba 	srai	r4,r4,2
  806ea4:	01402074 	movhi	r5,129
  806ea8:	294d4b04 	addi	r5,r5,13612
  806eac:	00c00044 	movi	r3,1
  806eb0:	28800117 	ldw	r2,4(r5)
  806eb4:	1906983a 	sll	r3,r3,r4
  806eb8:	10c4b03a 	or	r2,r2,r3
  806ebc:	28800115 	stw	r2,4(r5)
  806ec0:	003fa306 	br	806d50 <_malloc_r+0x500>
  806ec4:	0027883a 	mov	r19,zero
  806ec8:	00c00044 	movi	r3,1
  806ecc:	003f8606 	br	806ce8 <_malloc_r+0x498>
  806ed0:	d1200415 	stw	r4,-32752(gp)
  806ed4:	003f7306 	br	806ca4 <_malloc_r+0x454>
  806ed8:	00801504 	movi	r2,84
  806edc:	11001936 	bltu	r2,r4,806f44 <_malloc_r+0x6f4>
  806ee0:	2804d33a 	srli	r2,r5,12
  806ee4:	11001b84 	addi	r4,r2,110
  806ee8:	200690fa 	slli	r3,r4,3
  806eec:	003f8e06 	br	806d28 <_malloc_r+0x4d8>
  806ef0:	480b883a 	mov	r5,r9
  806ef4:	6807883a 	mov	r3,r13
  806ef8:	288000cc 	andi	r2,r5,3
  806efc:	18fffe04 	addi	r3,r3,-8
  806f00:	297fffc4 	addi	r5,r5,-1
  806f04:	10001526 	beq	r2,zero,806f5c <_malloc_r+0x70c>
  806f08:	18800217 	ldw	r2,8(r3)
  806f0c:	10fffa26 	beq	r2,r3,806ef8 <_malloc_r+0x6a8>
  806f10:	2109883a 	add	r4,r4,r4
  806f14:	393f1e36 	bltu	r7,r4,806b90 <_malloc_r+0x340>
  806f18:	203f1d26 	beq	r4,zero,806b90 <_malloc_r+0x340>
  806f1c:	21c4703a 	and	r2,r4,r7
  806f20:	10000226 	beq	r2,zero,806f2c <_malloc_r+0x6dc>
  806f24:	6013883a 	mov	r9,r12
  806f28:	003ee106 	br	806ab0 <_malloc_r+0x260>
  806f2c:	2109883a 	add	r4,r4,r4
  806f30:	3904703a 	and	r2,r7,r4
  806f34:	63000104 	addi	r12,r12,4
  806f38:	103ffc26 	beq	r2,zero,806f2c <_malloc_r+0x6dc>
  806f3c:	6013883a 	mov	r9,r12
  806f40:	003edb06 	br	806ab0 <_malloc_r+0x260>
  806f44:	00805504 	movi	r2,340
  806f48:	11000836 	bltu	r2,r4,806f6c <_malloc_r+0x71c>
  806f4c:	2804d3fa 	srli	r2,r5,15
  806f50:	11001dc4 	addi	r4,r2,119
  806f54:	200690fa 	slli	r3,r4,3
  806f58:	003f7306 	br	806d28 <_malloc_r+0x4d8>
  806f5c:	0104303a 	nor	r2,zero,r4
  806f60:	388e703a 	and	r7,r7,r2
  806f64:	e1c00115 	stw	r7,4(fp)
  806f68:	003fe906 	br	806f10 <_malloc_r+0x6c0>
  806f6c:	00815504 	movi	r2,1364
  806f70:	1100032e 	bgeu	r2,r4,806f80 <_malloc_r+0x730>
  806f74:	01001f84 	movi	r4,126
  806f78:	00c0fc04 	movi	r3,1008
  806f7c:	003f6a06 	br	806d28 <_malloc_r+0x4d8>
  806f80:	2804d4ba 	srli	r2,r5,18
  806f84:	11001f04 	addi	r4,r2,124
  806f88:	200690fa 	slli	r3,r4,3
  806f8c:	003f6606 	br	806d28 <_malloc_r+0x4d8>

00806f90 <memset>:
  806f90:	008000c4 	movi	r2,3
  806f94:	29403fcc 	andi	r5,r5,255
  806f98:	2007883a 	mov	r3,r4
  806f9c:	1180022e 	bgeu	r2,r6,806fa8 <memset+0x18>
  806fa0:	2084703a 	and	r2,r4,r2
  806fa4:	10000826 	beq	r2,zero,806fc8 <memset+0x38>
  806fa8:	30000526 	beq	r6,zero,806fc0 <memset+0x30>
  806fac:	2805883a 	mov	r2,r5
  806fb0:	30cd883a 	add	r6,r6,r3
  806fb4:	18800005 	stb	r2,0(r3)
  806fb8:	18c00044 	addi	r3,r3,1
  806fbc:	19bffd1e 	bne	r3,r6,806fb4 <memset+0x24>
  806fc0:	2005883a 	mov	r2,r4
  806fc4:	f800283a 	ret
  806fc8:	2804923a 	slli	r2,r5,8
  806fcc:	020003c4 	movi	r8,15
  806fd0:	200f883a 	mov	r7,r4
  806fd4:	2884b03a 	or	r2,r5,r2
  806fd8:	1006943a 	slli	r3,r2,16
  806fdc:	10c6b03a 	or	r3,r2,r3
  806fe0:	41800a2e 	bgeu	r8,r6,80700c <memset+0x7c>
  806fe4:	4005883a 	mov	r2,r8
  806fe8:	31bffc04 	addi	r6,r6,-16
  806fec:	38c00015 	stw	r3,0(r7)
  806ff0:	38c00115 	stw	r3,4(r7)
  806ff4:	38c00215 	stw	r3,8(r7)
  806ff8:	38c00315 	stw	r3,12(r7)
  806ffc:	39c00404 	addi	r7,r7,16
  807000:	11bff936 	bltu	r2,r6,806fe8 <memset+0x58>
  807004:	008000c4 	movi	r2,3
  807008:	1180052e 	bgeu	r2,r6,807020 <memset+0x90>
  80700c:	31bfff04 	addi	r6,r6,-4
  807010:	008000c4 	movi	r2,3
  807014:	38c00015 	stw	r3,0(r7)
  807018:	39c00104 	addi	r7,r7,4
  80701c:	11bffb36 	bltu	r2,r6,80700c <memset+0x7c>
  807020:	3807883a 	mov	r3,r7
  807024:	003fe006 	br	806fa8 <memset+0x18>

00807028 <_open_r>:
  807028:	defffd04 	addi	sp,sp,-12
  80702c:	dc000015 	stw	r16,0(sp)
  807030:	04002074 	movhi	r16,129
  807034:	841a7104 	addi	r16,r16,27076
  807038:	dc400115 	stw	r17,4(sp)
  80703c:	80000015 	stw	zero,0(r16)
  807040:	2023883a 	mov	r17,r4
  807044:	2809883a 	mov	r4,r5
  807048:	300b883a 	mov	r5,r6
  80704c:	380d883a 	mov	r6,r7
  807050:	dfc00215 	stw	ra,8(sp)
  807054:	080eac00 	call	80eac0 <open>
  807058:	1007883a 	mov	r3,r2
  80705c:	00bfffc4 	movi	r2,-1
  807060:	18800626 	beq	r3,r2,80707c <_open_r+0x54>
  807064:	1805883a 	mov	r2,r3
  807068:	dfc00217 	ldw	ra,8(sp)
  80706c:	dc400117 	ldw	r17,4(sp)
  807070:	dc000017 	ldw	r16,0(sp)
  807074:	dec00304 	addi	sp,sp,12
  807078:	f800283a 	ret
  80707c:	80800017 	ldw	r2,0(r16)
  807080:	103ff826 	beq	r2,zero,807064 <_open_r+0x3c>
  807084:	88800015 	stw	r2,0(r17)
  807088:	1805883a 	mov	r2,r3
  80708c:	dfc00217 	ldw	ra,8(sp)
  807090:	dc400117 	ldw	r17,4(sp)
  807094:	dc000017 	ldw	r16,0(sp)
  807098:	dec00304 	addi	sp,sp,12
  80709c:	f800283a 	ret

008070a0 <printf>:
  8070a0:	defffb04 	addi	sp,sp,-20
  8070a4:	dfc00115 	stw	ra,4(sp)
  8070a8:	d9400215 	stw	r5,8(sp)
  8070ac:	d9800315 	stw	r6,12(sp)
  8070b0:	d9c00415 	stw	r7,16(sp)
  8070b4:	00802074 	movhi	r2,129
  8070b8:	10934c04 	addi	r2,r2,19760
  8070bc:	10c00017 	ldw	r3,0(r2)
  8070c0:	200b883a 	mov	r5,r4
  8070c4:	d8800204 	addi	r2,sp,8
  8070c8:	19000217 	ldw	r4,8(r3)
  8070cc:	100d883a 	mov	r6,r2
  8070d0:	d8800015 	stw	r2,0(sp)
  8070d4:	08095100 	call	809510 <__vfprintf_internal>
  8070d8:	dfc00117 	ldw	ra,4(sp)
  8070dc:	dec00504 	addi	sp,sp,20
  8070e0:	f800283a 	ret

008070e4 <_printf_r>:
  8070e4:	defffc04 	addi	sp,sp,-16
  8070e8:	dfc00115 	stw	ra,4(sp)
  8070ec:	d9800215 	stw	r6,8(sp)
  8070f0:	d9c00315 	stw	r7,12(sp)
  8070f4:	280d883a 	mov	r6,r5
  8070f8:	21400217 	ldw	r5,8(r4)
  8070fc:	d8c00204 	addi	r3,sp,8
  807100:	180f883a 	mov	r7,r3
  807104:	d8c00015 	stw	r3,0(sp)
  807108:	08076640 	call	807664 <___vfprintf_internal_r>
  80710c:	dfc00117 	ldw	ra,4(sp)
  807110:	dec00404 	addi	sp,sp,16
  807114:	f800283a 	ret

00807118 <putchar>:
  807118:	00802074 	movhi	r2,129
  80711c:	10934c04 	addi	r2,r2,19760
  807120:	11800017 	ldw	r6,0(r2)
  807124:	200b883a 	mov	r5,r4
  807128:	3009883a 	mov	r4,r6
  80712c:	31800217 	ldw	r6,8(r6)
  807130:	080c9681 	jmpi	80c968 <_putc_r>

00807134 <_putchar_r>:
  807134:	21800217 	ldw	r6,8(r4)
  807138:	080c9681 	jmpi	80c968 <_putc_r>

0080713c <__srefill_r>:
  80713c:	defffd04 	addi	sp,sp,-12
  807140:	dc400115 	stw	r17,4(sp)
  807144:	dc000015 	stw	r16,0(sp)
  807148:	dfc00215 	stw	ra,8(sp)
  80714c:	2023883a 	mov	r17,r4
  807150:	2821883a 	mov	r16,r5
  807154:	20000226 	beq	r4,zero,807160 <__srefill_r+0x24>
  807158:	20800e17 	ldw	r2,56(r4)
  80715c:	10004126 	beq	r2,zero,807264 <__srefill_r+0x128>
  807160:	80c0030b 	ldhu	r3,12(r16)
  807164:	80000115 	stw	zero,4(r16)
  807168:	1880080c 	andi	r2,r3,32
  80716c:	1000361e 	bne	r2,zero,807248 <__srefill_r+0x10c>
  807170:	1880010c 	andi	r2,r3,4
  807174:	1000211e 	bne	r2,zero,8071fc <__srefill_r+0xc0>
  807178:	1880040c 	andi	r2,r3,16
  80717c:	10005026 	beq	r2,zero,8072c0 <__srefill_r+0x184>
  807180:	1880020c 	andi	r2,r3,8
  807184:	1000541e 	bne	r2,zero,8072d8 <__srefill_r+0x19c>
  807188:	8080030b 	ldhu	r2,12(r16)
  80718c:	10800114 	ori	r2,r2,4
  807190:	8080030d 	sth	r2,12(r16)
  807194:	80800417 	ldw	r2,16(r16)
  807198:	10004526 	beq	r2,zero,8072b0 <__srefill_r+0x174>
  80719c:	8080030b 	ldhu	r2,12(r16)
  8071a0:	108000cc 	andi	r2,r2,3
  8071a4:	1000361e 	bne	r2,zero,807280 <__srefill_r+0x144>
  8071a8:	81800417 	ldw	r6,16(r16)
  8071ac:	80c00817 	ldw	r3,32(r16)
  8071b0:	81400717 	ldw	r5,28(r16)
  8071b4:	81c00517 	ldw	r7,20(r16)
  8071b8:	8809883a 	mov	r4,r17
  8071bc:	81800015 	stw	r6,0(r16)
  8071c0:	183ee83a 	callr	r3
  8071c4:	80c0030b 	ldhu	r3,12(r16)
  8071c8:	1009883a 	mov	r4,r2
  8071cc:	80800115 	stw	r2,4(r16)
  8071d0:	00b7ffc4 	movi	r2,-8193
  8071d4:	1884703a 	and	r2,r3,r2
  8071d8:	8080030d 	sth	r2,12(r16)
  8071dc:	0100230e 	bge	zero,r4,80726c <__srefill_r+0x130>
  8071e0:	0009883a 	mov	r4,zero
  8071e4:	2005883a 	mov	r2,r4
  8071e8:	dfc00217 	ldw	ra,8(sp)
  8071ec:	dc400117 	ldw	r17,4(sp)
  8071f0:	dc000017 	ldw	r16,0(sp)
  8071f4:	dec00304 	addi	sp,sp,12
  8071f8:	f800283a 	ret
  8071fc:	81400c17 	ldw	r5,48(r16)
  807200:	283fe426 	beq	r5,zero,807194 <__srefill_r+0x58>
  807204:	80801004 	addi	r2,r16,64
  807208:	28800226 	beq	r5,r2,807214 <__srefill_r+0xd8>
  80720c:	8809883a 	mov	r4,r17
  807210:	0805c2c0 	call	805c2c <_free_r>
  807214:	80800f17 	ldw	r2,60(r16)
  807218:	80000c15 	stw	zero,48(r16)
  80721c:	80800115 	stw	r2,4(r16)
  807220:	103fdc26 	beq	r2,zero,807194 <__srefill_r+0x58>
  807224:	80800e17 	ldw	r2,56(r16)
  807228:	0009883a 	mov	r4,zero
  80722c:	80800015 	stw	r2,0(r16)
  807230:	2005883a 	mov	r2,r4
  807234:	dfc00217 	ldw	ra,8(sp)
  807238:	dc400117 	ldw	r17,4(sp)
  80723c:	dc000017 	ldw	r16,0(sp)
  807240:	dec00304 	addi	sp,sp,12
  807244:	f800283a 	ret
  807248:	013fffc4 	movi	r4,-1
  80724c:	2005883a 	mov	r2,r4
  807250:	dfc00217 	ldw	ra,8(sp)
  807254:	dc400117 	ldw	r17,4(sp)
  807258:	dc000017 	ldw	r16,0(sp)
  80725c:	dec00304 	addi	sp,sp,12
  807260:	f800283a 	ret
  807264:	08057380 	call	805738 <__sinit>
  807268:	003fbd06 	br	807160 <__srefill_r+0x24>
  80726c:	20000b1e 	bne	r4,zero,80729c <__srefill_r+0x160>
  807270:	10800814 	ori	r2,r2,32
  807274:	013fffc4 	movi	r4,-1
  807278:	8080030d 	sth	r2,12(r16)
  80727c:	003fd906 	br	8071e4 <__srefill_r+0xa8>
  807280:	00802074 	movhi	r2,129
  807284:	10934d04 	addi	r2,r2,19764
  807288:	11000017 	ldw	r4,0(r2)
  80728c:	01402034 	movhi	r5,128
  807290:	295cc004 	addi	r5,r5,29440
  807294:	08064dc0 	call	8064dc <_fwalk>
  807298:	003fc306 	br	8071a8 <__srefill_r+0x6c>
  80729c:	10801014 	ori	r2,r2,64
  8072a0:	013fffc4 	movi	r4,-1
  8072a4:	8080030d 	sth	r2,12(r16)
  8072a8:	80000115 	stw	zero,4(r16)
  8072ac:	003fcd06 	br	8071e4 <__srefill_r+0xa8>
  8072b0:	8809883a 	mov	r4,r17
  8072b4:	800b883a 	mov	r5,r16
  8072b8:	08066bc0 	call	8066bc <__smakebuf_r>
  8072bc:	003fb706 	br	80719c <__srefill_r+0x60>
  8072c0:	18c01014 	ori	r3,r3,64
  8072c4:	00800244 	movi	r2,9
  8072c8:	013fffc4 	movi	r4,-1
  8072cc:	88800015 	stw	r2,0(r17)
  8072d0:	80c0030d 	sth	r3,12(r16)
  8072d4:	003fc306 	br	8071e4 <__srefill_r+0xa8>
  8072d8:	8809883a 	mov	r4,r17
  8072dc:	800b883a 	mov	r5,r16
  8072e0:	08054a00 	call	8054a0 <_fflush_r>
  8072e4:	103fd81e 	bne	r2,zero,807248 <__srefill_r+0x10c>
  8072e8:	8080030b 	ldhu	r2,12(r16)
  8072ec:	80000215 	stw	zero,8(r16)
  8072f0:	80000615 	stw	zero,24(r16)
  8072f4:	10bffdcc 	andi	r2,r2,65527
  8072f8:	8080030d 	sth	r2,12(r16)
  8072fc:	003fa206 	br	807188 <__srefill_r+0x4c>

00807300 <lflush>:
  807300:	20c0030b 	ldhu	r3,12(r4)
  807304:	01400244 	movi	r5,9
  807308:	0005883a 	mov	r2,zero
  80730c:	18c0024c 	andi	r3,r3,9
  807310:	19400126 	beq	r3,r5,807318 <lflush+0x18>
  807314:	f800283a 	ret
  807318:	080569c1 	jmpi	80569c <fflush>

0080731c <__srget_r>:
  80731c:	defffe04 	addi	sp,sp,-8
  807320:	dc000015 	stw	r16,0(sp)
  807324:	dfc00115 	stw	ra,4(sp)
  807328:	2821883a 	mov	r16,r5
  80732c:	080713c0 	call	80713c <__srefill_r>
  807330:	013fffc4 	movi	r4,-1
  807334:	1000071e 	bne	r2,zero,807354 <__srget_r+0x38>
  807338:	80800117 	ldw	r2,4(r16)
  80733c:	81000017 	ldw	r4,0(r16)
  807340:	10bfffc4 	addi	r2,r2,-1
  807344:	20c00044 	addi	r3,r4,1
  807348:	80800115 	stw	r2,4(r16)
  80734c:	21000003 	ldbu	r4,0(r4)
  807350:	80c00015 	stw	r3,0(r16)
  807354:	2005883a 	mov	r2,r4
  807358:	dfc00117 	ldw	ra,4(sp)
  80735c:	dc000017 	ldw	r16,0(sp)
  807360:	dec00204 	addi	sp,sp,8
  807364:	f800283a 	ret

00807368 <__srget>:
  807368:	00802074 	movhi	r2,129
  80736c:	10934c04 	addi	r2,r2,19760
  807370:	200b883a 	mov	r5,r4
  807374:	11000017 	ldw	r4,0(r2)
  807378:	080731c1 	jmpi	80731c <__srget_r>

0080737c <_sbrk_r>:
  80737c:	defffd04 	addi	sp,sp,-12
  807380:	dc000015 	stw	r16,0(sp)
  807384:	04002074 	movhi	r16,129
  807388:	841a7104 	addi	r16,r16,27076
  80738c:	dc400115 	stw	r17,4(sp)
  807390:	80000015 	stw	zero,0(r16)
  807394:	2023883a 	mov	r17,r4
  807398:	2809883a 	mov	r4,r5
  80739c:	dfc00215 	stw	ra,8(sp)
  8073a0:	080ee880 	call	80ee88 <sbrk>
  8073a4:	1007883a 	mov	r3,r2
  8073a8:	00bfffc4 	movi	r2,-1
  8073ac:	18800626 	beq	r3,r2,8073c8 <_sbrk_r+0x4c>
  8073b0:	1805883a 	mov	r2,r3
  8073b4:	dfc00217 	ldw	ra,8(sp)
  8073b8:	dc400117 	ldw	r17,4(sp)
  8073bc:	dc000017 	ldw	r16,0(sp)
  8073c0:	dec00304 	addi	sp,sp,12
  8073c4:	f800283a 	ret
  8073c8:	80800017 	ldw	r2,0(r16)
  8073cc:	103ff826 	beq	r2,zero,8073b0 <_sbrk_r+0x34>
  8073d0:	88800015 	stw	r2,0(r17)
  8073d4:	1805883a 	mov	r2,r3
  8073d8:	dfc00217 	ldw	ra,8(sp)
  8073dc:	dc400117 	ldw	r17,4(sp)
  8073e0:	dc000017 	ldw	r16,0(sp)
  8073e4:	dec00304 	addi	sp,sp,12
  8073e8:	f800283a 	ret

008073ec <sprintf>:
  8073ec:	deffe504 	addi	sp,sp,-108
  8073f0:	2013883a 	mov	r9,r4
  8073f4:	dfc01815 	stw	ra,96(sp)
  8073f8:	d9801915 	stw	r6,100(sp)
  8073fc:	d9c01a15 	stw	r7,104(sp)
  807400:	d8801904 	addi	r2,sp,100
  807404:	d8800015 	stw	r2,0(sp)
  807408:	00802074 	movhi	r2,129
  80740c:	10934c04 	addi	r2,r2,19760
  807410:	11000017 	ldw	r4,0(r2)
  807414:	d9c00017 	ldw	r7,0(sp)
  807418:	00808204 	movi	r2,520
  80741c:	00e00034 	movhi	r3,32768
  807420:	18ffffc4 	addi	r3,r3,-1
  807424:	280d883a 	mov	r6,r5
  807428:	d880040d 	sth	r2,16(sp)
  80742c:	d9400104 	addi	r5,sp,4
  807430:	00bfffc4 	movi	r2,-1
  807434:	d8c00615 	stw	r3,24(sp)
  807438:	d8c00315 	stw	r3,12(sp)
  80743c:	da400515 	stw	r9,20(sp)
  807440:	d880048d 	sth	r2,18(sp)
  807444:	da400115 	stw	r9,4(sp)
  807448:	08076640 	call	807664 <___vfprintf_internal_r>
  80744c:	d8c00117 	ldw	r3,4(sp)
  807450:	18000005 	stb	zero,0(r3)
  807454:	dfc01817 	ldw	ra,96(sp)
  807458:	dec01b04 	addi	sp,sp,108
  80745c:	f800283a 	ret

00807460 <_sprintf_r>:
  807460:	deffe604 	addi	sp,sp,-104
  807464:	2813883a 	mov	r9,r5
  807468:	dfc01815 	stw	ra,96(sp)
  80746c:	d9c01915 	stw	r7,100(sp)
  807470:	d8801904 	addi	r2,sp,100
  807474:	d8800015 	stw	r2,0(sp)
  807478:	100f883a 	mov	r7,r2
  80747c:	00808204 	movi	r2,520
  807480:	00e00034 	movhi	r3,32768
  807484:	18ffffc4 	addi	r3,r3,-1
  807488:	d880040d 	sth	r2,16(sp)
  80748c:	d9400104 	addi	r5,sp,4
  807490:	00bfffc4 	movi	r2,-1
  807494:	d8c00615 	stw	r3,24(sp)
  807498:	d8c00315 	stw	r3,12(sp)
  80749c:	da400515 	stw	r9,20(sp)
  8074a0:	d880048d 	sth	r2,18(sp)
  8074a4:	da400115 	stw	r9,4(sp)
  8074a8:	08076640 	call	807664 <___vfprintf_internal_r>
  8074ac:	d8c00117 	ldw	r3,4(sp)
  8074b0:	18000005 	stb	zero,0(r3)
  8074b4:	dfc01817 	ldw	ra,96(sp)
  8074b8:	dec01a04 	addi	sp,sp,104
  8074bc:	f800283a 	ret

008074c0 <__sclose>:
  8074c0:	2940038f 	ldh	r5,14(r5)
  8074c4:	08096e81 	jmpi	8096e8 <_close_r>

008074c8 <__sseek>:
  8074c8:	defffe04 	addi	sp,sp,-8
  8074cc:	dc000015 	stw	r16,0(sp)
  8074d0:	2821883a 	mov	r16,r5
  8074d4:	2940038f 	ldh	r5,14(r5)
  8074d8:	dfc00115 	stw	ra,4(sp)
  8074dc:	080b5940 	call	80b594 <_lseek_r>
  8074e0:	1007883a 	mov	r3,r2
  8074e4:	00bfffc4 	movi	r2,-1
  8074e8:	18800926 	beq	r3,r2,807510 <__sseek+0x48>
  8074ec:	8080030b 	ldhu	r2,12(r16)
  8074f0:	80c01415 	stw	r3,80(r16)
  8074f4:	10840014 	ori	r2,r2,4096
  8074f8:	8080030d 	sth	r2,12(r16)
  8074fc:	1805883a 	mov	r2,r3
  807500:	dfc00117 	ldw	ra,4(sp)
  807504:	dc000017 	ldw	r16,0(sp)
  807508:	dec00204 	addi	sp,sp,8
  80750c:	f800283a 	ret
  807510:	8080030b 	ldhu	r2,12(r16)
  807514:	10bbffcc 	andi	r2,r2,61439
  807518:	8080030d 	sth	r2,12(r16)
  80751c:	1805883a 	mov	r2,r3
  807520:	dfc00117 	ldw	ra,4(sp)
  807524:	dc000017 	ldw	r16,0(sp)
  807528:	dec00204 	addi	sp,sp,8
  80752c:	f800283a 	ret

00807530 <__swrite>:
  807530:	2880030b 	ldhu	r2,12(r5)
  807534:	defffb04 	addi	sp,sp,-20
  807538:	dcc00315 	stw	r19,12(sp)
  80753c:	1080400c 	andi	r2,r2,256
  807540:	dc800215 	stw	r18,8(sp)
  807544:	dc400115 	stw	r17,4(sp)
  807548:	dc000015 	stw	r16,0(sp)
  80754c:	3027883a 	mov	r19,r6
  807550:	3825883a 	mov	r18,r7
  807554:	dfc00415 	stw	ra,16(sp)
  807558:	2821883a 	mov	r16,r5
  80755c:	000d883a 	mov	r6,zero
  807560:	01c00084 	movi	r7,2
  807564:	2023883a 	mov	r17,r4
  807568:	10000226 	beq	r2,zero,807574 <__swrite+0x44>
  80756c:	2940038f 	ldh	r5,14(r5)
  807570:	080b5940 	call	80b594 <_lseek_r>
  807574:	8080030b 	ldhu	r2,12(r16)
  807578:	8140038f 	ldh	r5,14(r16)
  80757c:	8809883a 	mov	r4,r17
  807580:	10bbffcc 	andi	r2,r2,61439
  807584:	980d883a 	mov	r6,r19
  807588:	900f883a 	mov	r7,r18
  80758c:	8080030d 	sth	r2,12(r16)
  807590:	dfc00417 	ldw	ra,16(sp)
  807594:	dcc00317 	ldw	r19,12(sp)
  807598:	dc800217 	ldw	r18,8(sp)
  80759c:	dc400117 	ldw	r17,4(sp)
  8075a0:	dc000017 	ldw	r16,0(sp)
  8075a4:	dec00504 	addi	sp,sp,20
  8075a8:	08095341 	jmpi	809534 <_write_r>

008075ac <__sread>:
  8075ac:	defffe04 	addi	sp,sp,-8
  8075b0:	dc000015 	stw	r16,0(sp)
  8075b4:	2821883a 	mov	r16,r5
  8075b8:	2940038f 	ldh	r5,14(r5)
  8075bc:	dfc00115 	stw	ra,4(sp)
  8075c0:	080ca500 	call	80ca50 <_read_r>
  8075c4:	1007883a 	mov	r3,r2
  8075c8:	10000816 	blt	r2,zero,8075ec <__sread+0x40>
  8075cc:	80801417 	ldw	r2,80(r16)
  8075d0:	10c5883a 	add	r2,r2,r3
  8075d4:	80801415 	stw	r2,80(r16)
  8075d8:	1805883a 	mov	r2,r3
  8075dc:	dfc00117 	ldw	ra,4(sp)
  8075e0:	dc000017 	ldw	r16,0(sp)
  8075e4:	dec00204 	addi	sp,sp,8
  8075e8:	f800283a 	ret
  8075ec:	8080030b 	ldhu	r2,12(r16)
  8075f0:	10bbffcc 	andi	r2,r2,61439
  8075f4:	8080030d 	sth	r2,12(r16)
  8075f8:	1805883a 	mov	r2,r3
  8075fc:	dfc00117 	ldw	ra,4(sp)
  807600:	dc000017 	ldw	r16,0(sp)
  807604:	dec00204 	addi	sp,sp,8
  807608:	f800283a 	ret

0080760c <__sprint_r>:
  80760c:	30800217 	ldw	r2,8(r6)
  807610:	defffe04 	addi	sp,sp,-8
  807614:	dc000015 	stw	r16,0(sp)
  807618:	dfc00115 	stw	ra,4(sp)
  80761c:	3021883a 	mov	r16,r6
  807620:	0007883a 	mov	r3,zero
  807624:	1000061e 	bne	r2,zero,807640 <__sprint_r+0x34>
  807628:	1805883a 	mov	r2,r3
  80762c:	30000115 	stw	zero,4(r6)
  807630:	dfc00117 	ldw	ra,4(sp)
  807634:	dc000017 	ldw	r16,0(sp)
  807638:	dec00204 	addi	sp,sp,8
  80763c:	f800283a 	ret
  807640:	080afc40 	call	80afc4 <__sfvwrite_r>
  807644:	1007883a 	mov	r3,r2
  807648:	1805883a 	mov	r2,r3
  80764c:	80000115 	stw	zero,4(r16)
  807650:	80000215 	stw	zero,8(r16)
  807654:	dfc00117 	ldw	ra,4(sp)
  807658:	dc000017 	ldw	r16,0(sp)
  80765c:	dec00204 	addi	sp,sp,8
  807660:	f800283a 	ret

00807664 <___vfprintf_internal_r>:
  807664:	defea404 	addi	sp,sp,-1392
  807668:	dd815815 	stw	r22,1376(sp)
  80766c:	dc015215 	stw	r16,1352(sp)
  807670:	d9c15115 	stw	r7,1348(sp)
  807674:	dfc15b15 	stw	ra,1388(sp)
  807678:	df015a15 	stw	fp,1384(sp)
  80767c:	ddc15915 	stw	r23,1380(sp)
  807680:	dd415715 	stw	r21,1372(sp)
  807684:	dd015615 	stw	r20,1368(sp)
  807688:	dcc15515 	stw	r19,1364(sp)
  80768c:	dc815415 	stw	r18,1360(sp)
  807690:	dc415315 	stw	r17,1356(sp)
  807694:	282d883a 	mov	r22,r5
  807698:	3021883a 	mov	r16,r6
  80769c:	d9014f15 	stw	r4,1340(sp)
  8076a0:	080b4d80 	call	80b4d8 <_localeconv_r>
  8076a4:	10800017 	ldw	r2,0(r2)
  8076a8:	d9c15117 	ldw	r7,1348(sp)
  8076ac:	d8814915 	stw	r2,1316(sp)
  8076b0:	d8814f17 	ldw	r2,1340(sp)
  8076b4:	10000226 	beq	r2,zero,8076c0 <___vfprintf_internal_r+0x5c>
  8076b8:	10800e17 	ldw	r2,56(r2)
  8076bc:	10020d26 	beq	r2,zero,807ef4 <___vfprintf_internal_r+0x890>
  8076c0:	b080030b 	ldhu	r2,12(r22)
  8076c4:	1080020c 	andi	r2,r2,8
  8076c8:	10020e26 	beq	r2,zero,807f04 <___vfprintf_internal_r+0x8a0>
  8076cc:	b0800417 	ldw	r2,16(r22)
  8076d0:	10020c26 	beq	r2,zero,807f04 <___vfprintf_internal_r+0x8a0>
  8076d4:	b200030b 	ldhu	r8,12(r22)
  8076d8:	00800284 	movi	r2,10
  8076dc:	40c0068c 	andi	r3,r8,26
  8076e0:	18802f1e 	bne	r3,r2,8077a0 <___vfprintf_internal_r+0x13c>
  8076e4:	b080038f 	ldh	r2,14(r22)
  8076e8:	10002d16 	blt	r2,zero,8077a0 <___vfprintf_internal_r+0x13c>
  8076ec:	b240038b 	ldhu	r9,14(r22)
  8076f0:	b2800717 	ldw	r10,28(r22)
  8076f4:	b2c00917 	ldw	r11,36(r22)
  8076f8:	d9014f17 	ldw	r4,1340(sp)
  8076fc:	dc402904 	addi	r17,sp,164
  807700:	d8804004 	addi	r2,sp,256
  807704:	00c10004 	movi	r3,1024
  807708:	423fff4c 	andi	r8,r8,65533
  80770c:	800d883a 	mov	r6,r16
  807710:	880b883a 	mov	r5,r17
  807714:	da002c0d 	sth	r8,176(sp)
  807718:	da402c8d 	sth	r9,178(sp)
  80771c:	da803015 	stw	r10,192(sp)
  807720:	dac03215 	stw	r11,200(sp)
  807724:	d8802d15 	stw	r2,180(sp)
  807728:	d8c02e15 	stw	r3,184(sp)
  80772c:	d8802915 	stw	r2,164(sp)
  807730:	d8c02b15 	stw	r3,172(sp)
  807734:	d8002f15 	stw	zero,188(sp)
  807738:	08076640 	call	807664 <___vfprintf_internal_r>
  80773c:	d8814b15 	stw	r2,1324(sp)
  807740:	10000416 	blt	r2,zero,807754 <___vfprintf_internal_r+0xf0>
  807744:	d9014f17 	ldw	r4,1340(sp)
  807748:	880b883a 	mov	r5,r17
  80774c:	08054a00 	call	8054a0 <_fflush_r>
  807750:	1002321e 	bne	r2,zero,80801c <___vfprintf_internal_r+0x9b8>
  807754:	d8802c0b 	ldhu	r2,176(sp)
  807758:	1080100c 	andi	r2,r2,64
  80775c:	10000326 	beq	r2,zero,80776c <___vfprintf_internal_r+0x108>
  807760:	b080030b 	ldhu	r2,12(r22)
  807764:	10801014 	ori	r2,r2,64
  807768:	b080030d 	sth	r2,12(r22)
  80776c:	d8814b17 	ldw	r2,1324(sp)
  807770:	dfc15b17 	ldw	ra,1388(sp)
  807774:	df015a17 	ldw	fp,1384(sp)
  807778:	ddc15917 	ldw	r23,1380(sp)
  80777c:	dd815817 	ldw	r22,1376(sp)
  807780:	dd415717 	ldw	r21,1372(sp)
  807784:	dd015617 	ldw	r20,1368(sp)
  807788:	dcc15517 	ldw	r19,1364(sp)
  80778c:	dc815417 	ldw	r18,1360(sp)
  807790:	dc415317 	ldw	r17,1356(sp)
  807794:	dc015217 	ldw	r16,1352(sp)
  807798:	dec15c04 	addi	sp,sp,1392
  80779c:	f800283a 	ret
  8077a0:	0005883a 	mov	r2,zero
  8077a4:	0007883a 	mov	r3,zero
  8077a8:	dd401904 	addi	r21,sp,100
  8077ac:	d8814215 	stw	r2,1288(sp)
  8077b0:	802f883a 	mov	r23,r16
  8077b4:	d8c14315 	stw	r3,1292(sp)
  8077b8:	d8014b15 	stw	zero,1324(sp)
  8077bc:	d8014815 	stw	zero,1312(sp)
  8077c0:	d8014415 	stw	zero,1296(sp)
  8077c4:	d8014715 	stw	zero,1308(sp)
  8077c8:	dd400c15 	stw	r21,48(sp)
  8077cc:	d8000e15 	stw	zero,56(sp)
  8077d0:	d8000d15 	stw	zero,52(sp)
  8077d4:	b8800007 	ldb	r2,0(r23)
  8077d8:	10001926 	beq	r2,zero,807840 <___vfprintf_internal_r+0x1dc>
  8077dc:	00c00944 	movi	r3,37
  8077e0:	10c01726 	beq	r2,r3,807840 <___vfprintf_internal_r+0x1dc>
  8077e4:	b821883a 	mov	r16,r23
  8077e8:	00000106 	br	8077f0 <___vfprintf_internal_r+0x18c>
  8077ec:	10c00326 	beq	r2,r3,8077fc <___vfprintf_internal_r+0x198>
  8077f0:	84000044 	addi	r16,r16,1
  8077f4:	80800007 	ldb	r2,0(r16)
  8077f8:	103ffc1e 	bne	r2,zero,8077ec <___vfprintf_internal_r+0x188>
  8077fc:	85e7c83a 	sub	r19,r16,r23
  807800:	98000e26 	beq	r19,zero,80783c <___vfprintf_internal_r+0x1d8>
  807804:	dc800e17 	ldw	r18,56(sp)
  807808:	dc400d17 	ldw	r17,52(sp)
  80780c:	008001c4 	movi	r2,7
  807810:	94e5883a 	add	r18,r18,r19
  807814:	8c400044 	addi	r17,r17,1
  807818:	adc00015 	stw	r23,0(r21)
  80781c:	dc800e15 	stw	r18,56(sp)
  807820:	acc00115 	stw	r19,4(r21)
  807824:	dc400d15 	stw	r17,52(sp)
  807828:	14428b16 	blt	r2,r17,808258 <___vfprintf_internal_r+0xbf4>
  80782c:	ad400204 	addi	r21,r21,8
  807830:	d9014b17 	ldw	r4,1324(sp)
  807834:	24c9883a 	add	r4,r4,r19
  807838:	d9014b15 	stw	r4,1324(sp)
  80783c:	802f883a 	mov	r23,r16
  807840:	b8800007 	ldb	r2,0(r23)
  807844:	10013c26 	beq	r2,zero,807d38 <___vfprintf_internal_r+0x6d4>
  807848:	bdc00044 	addi	r23,r23,1
  80784c:	d8000405 	stb	zero,16(sp)
  807850:	b8c00007 	ldb	r3,0(r23)
  807854:	04ffffc4 	movi	r19,-1
  807858:	d8014c15 	stw	zero,1328(sp)
  80785c:	d8014a15 	stw	zero,1320(sp)
  807860:	d8c14d15 	stw	r3,1332(sp)
  807864:	bdc00044 	addi	r23,r23,1
  807868:	d9414d17 	ldw	r5,1332(sp)
  80786c:	00801604 	movi	r2,88
  807870:	28fff804 	addi	r3,r5,-32
  807874:	10c06036 	bltu	r2,r3,8079f8 <___vfprintf_internal_r+0x394>
  807878:	18c5883a 	add	r2,r3,r3
  80787c:	1085883a 	add	r2,r2,r2
  807880:	00c02034 	movhi	r3,128
  807884:	18de2504 	addi	r3,r3,30868
  807888:	10c5883a 	add	r2,r2,r3
  80788c:	11000017 	ldw	r4,0(r2)
  807890:	2000683a 	jmp	r4
  807894:	00808808 	cmpgei	r2,zero,544
  807898:	008079f8 	rdprs	r2,zero,487
  80789c:	008079f8 	rdprs	r2,zero,487
  8078a0:	008087f4 	movhi	r2,543
  8078a4:	008079f8 	rdprs	r2,zero,487
  8078a8:	008079f8 	rdprs	r2,zero,487
  8078ac:	008079f8 	rdprs	r2,zero,487
  8078b0:	008079f8 	rdprs	r2,zero,487
  8078b4:	008079f8 	rdprs	r2,zero,487
  8078b8:	008079f8 	rdprs	r2,zero,487
  8078bc:	008085d4 	movui	r2,535
  8078c0:	008087e4 	muli	r2,zero,543
  8078c4:	008079f8 	rdprs	r2,zero,487
  8078c8:	008085ec 	andhi	r2,zero,535
  8078cc:	00808880 	call	80888 <__reset-0x77f778>
  8078d0:	008079f8 	rdprs	r2,zero,487
  8078d4:	0080886c 	andhi	r2,zero,545
  8078d8:	00808834 	movhi	r2,544
  8078dc:	00808834 	movhi	r2,544
  8078e0:	00808834 	movhi	r2,544
  8078e4:	00808834 	movhi	r2,544
  8078e8:	00808834 	movhi	r2,544
  8078ec:	00808834 	movhi	r2,544
  8078f0:	00808834 	movhi	r2,544
  8078f4:	00808834 	movhi	r2,544
  8078f8:	00808834 	movhi	r2,544
  8078fc:	008079f8 	rdprs	r2,zero,487
  807900:	008079f8 	rdprs	r2,zero,487
  807904:	008079f8 	rdprs	r2,zero,487
  807908:	008079f8 	rdprs	r2,zero,487
  80790c:	008079f8 	rdprs	r2,zero,487
  807910:	008079f8 	rdprs	r2,zero,487
  807914:	008079f8 	rdprs	r2,zero,487
  807918:	008079f8 	rdprs	r2,zero,487
  80791c:	008079f8 	rdprs	r2,zero,487
  807920:	008079f8 	rdprs	r2,zero,487
  807924:	00808050 	cmplti	r2,zero,513
  807928:	008086bc 	xorhi	r2,zero,538
  80792c:	008079f8 	rdprs	r2,zero,487
  807930:	008086bc 	xorhi	r2,zero,538
  807934:	008079f8 	rdprs	r2,zero,487
  807938:	008079f8 	rdprs	r2,zero,487
  80793c:	008079f8 	rdprs	r2,zero,487
  807940:	008079f8 	rdprs	r2,zero,487
  807944:	00808820 	cmpeqi	r2,zero,544
  807948:	008079f8 	rdprs	r2,zero,487
  80794c:	008079f8 	rdprs	r2,zero,487
  807950:	00808104 	movi	r2,516
  807954:	008079f8 	rdprs	r2,zero,487
  807958:	008079f8 	rdprs	r2,zero,487
  80795c:	008079f8 	rdprs	r2,zero,487
  807960:	008079f8 	rdprs	r2,zero,487
  807964:	008079f8 	rdprs	r2,zero,487
  807968:	00808150 	cmplti	r2,zero,517
  80796c:	008079f8 	rdprs	r2,zero,487
  807970:	008079f8 	rdprs	r2,zero,487
  807974:	00808770 	cmpltui	r2,zero,541
  807978:	008079f8 	rdprs	r2,zero,487
  80797c:	008079f8 	rdprs	r2,zero,487
  807980:	008079f8 	rdprs	r2,zero,487
  807984:	008079f8 	rdprs	r2,zero,487
  807988:	008079f8 	rdprs	r2,zero,487
  80798c:	008079f8 	rdprs	r2,zero,487
  807990:	008079f8 	rdprs	r2,zero,487
  807994:	008079f8 	rdprs	r2,zero,487
  807998:	008079f8 	rdprs	r2,zero,487
  80799c:	008079f8 	rdprs	r2,zero,487
  8079a0:	00808744 	movi	r2,541
  8079a4:	0080805c 	xori	r2,zero,513
  8079a8:	008086bc 	xorhi	r2,zero,538
  8079ac:	008086bc 	xorhi	r2,zero,538
  8079b0:	008086bc 	xorhi	r2,zero,538
  8079b4:	008086a8 	cmpgeui	r2,zero,538
  8079b8:	0080805c 	xori	r2,zero,513
  8079bc:	008079f8 	rdprs	r2,zero,487
  8079c0:	008079f8 	rdprs	r2,zero,487
  8079c4:	00808630 	cmpltui	r2,zero,536
  8079c8:	008079f8 	rdprs	r2,zero,487
  8079cc:	00808600 	call	80860 <__reset-0x77f7a0>
  8079d0:	00808110 	cmplti	r2,zero,516
  8079d4:	00808660 	cmpeqi	r2,zero,537
  8079d8:	0080864c 	andi	r2,zero,537
  8079dc:	008079f8 	rdprs	r2,zero,487
  8079e0:	008088dc 	xori	r2,zero,547
  8079e4:	008079f8 	rdprs	r2,zero,487
  8079e8:	0080815c 	xori	r2,zero,517
  8079ec:	008079f8 	rdprs	r2,zero,487
  8079f0:	008079f8 	rdprs	r2,zero,487
  8079f4:	008087d4 	movui	r2,543
  8079f8:	d9014d17 	ldw	r4,1332(sp)
  8079fc:	2000ce26 	beq	r4,zero,807d38 <___vfprintf_internal_r+0x6d4>
  807a00:	01400044 	movi	r5,1
  807a04:	d9800f04 	addi	r6,sp,60
  807a08:	d9c14015 	stw	r7,1280(sp)
  807a0c:	d9414515 	stw	r5,1300(sp)
  807a10:	d9814115 	stw	r6,1284(sp)
  807a14:	280f883a 	mov	r7,r5
  807a18:	d9000f05 	stb	r4,60(sp)
  807a1c:	d8000405 	stb	zero,16(sp)
  807a20:	d8014615 	stw	zero,1304(sp)
  807a24:	d8c14c17 	ldw	r3,1328(sp)
  807a28:	1880008c 	andi	r2,r3,2
  807a2c:	1005003a 	cmpeq	r2,r2,zero
  807a30:	d8815015 	stw	r2,1344(sp)
  807a34:	1000031e 	bne	r2,zero,807a44 <___vfprintf_internal_r+0x3e0>
  807a38:	d9014517 	ldw	r4,1300(sp)
  807a3c:	21000084 	addi	r4,r4,2
  807a40:	d9014515 	stw	r4,1300(sp)
  807a44:	d9414c17 	ldw	r5,1328(sp)
  807a48:	2940210c 	andi	r5,r5,132
  807a4c:	d9414e15 	stw	r5,1336(sp)
  807a50:	28002d1e 	bne	r5,zero,807b08 <___vfprintf_internal_r+0x4a4>
  807a54:	d9814a17 	ldw	r6,1320(sp)
  807a58:	d8814517 	ldw	r2,1300(sp)
  807a5c:	30a1c83a 	sub	r16,r6,r2
  807a60:	0400290e 	bge	zero,r16,807b08 <___vfprintf_internal_r+0x4a4>
  807a64:	00800404 	movi	r2,16
  807a68:	1404580e 	bge	r2,r16,808bcc <___vfprintf_internal_r+0x1568>
  807a6c:	dc800e17 	ldw	r18,56(sp)
  807a70:	dc400d17 	ldw	r17,52(sp)
  807a74:	1027883a 	mov	r19,r2
  807a78:	07002074 	movhi	fp,129
  807a7c:	e70b3084 	addi	fp,fp,11458
  807a80:	050001c4 	movi	r20,7
  807a84:	00000306 	br	807a94 <___vfprintf_internal_r+0x430>
  807a88:	843ffc04 	addi	r16,r16,-16
  807a8c:	ad400204 	addi	r21,r21,8
  807a90:	9c00130e 	bge	r19,r16,807ae0 <___vfprintf_internal_r+0x47c>
  807a94:	94800404 	addi	r18,r18,16
  807a98:	8c400044 	addi	r17,r17,1
  807a9c:	af000015 	stw	fp,0(r21)
  807aa0:	acc00115 	stw	r19,4(r21)
  807aa4:	dc800e15 	stw	r18,56(sp)
  807aa8:	dc400d15 	stw	r17,52(sp)
  807aac:	a47ff60e 	bge	r20,r17,807a88 <___vfprintf_internal_r+0x424>
  807ab0:	d9014f17 	ldw	r4,1340(sp)
  807ab4:	b00b883a 	mov	r5,r22
  807ab8:	d9800c04 	addi	r6,sp,48
  807abc:	d9c15115 	stw	r7,1348(sp)
  807ac0:	080760c0 	call	80760c <__sprint_r>
  807ac4:	d9c15117 	ldw	r7,1348(sp)
  807ac8:	10009e1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  807acc:	843ffc04 	addi	r16,r16,-16
  807ad0:	dc800e17 	ldw	r18,56(sp)
  807ad4:	dc400d17 	ldw	r17,52(sp)
  807ad8:	dd401904 	addi	r21,sp,100
  807adc:	9c3fed16 	blt	r19,r16,807a94 <___vfprintf_internal_r+0x430>
  807ae0:	9425883a 	add	r18,r18,r16
  807ae4:	8c400044 	addi	r17,r17,1
  807ae8:	008001c4 	movi	r2,7
  807aec:	af000015 	stw	fp,0(r21)
  807af0:	ac000115 	stw	r16,4(r21)
  807af4:	dc800e15 	stw	r18,56(sp)
  807af8:	dc400d15 	stw	r17,52(sp)
  807afc:	1441f516 	blt	r2,r17,8082d4 <___vfprintf_internal_r+0xc70>
  807b00:	ad400204 	addi	r21,r21,8
  807b04:	00000206 	br	807b10 <___vfprintf_internal_r+0x4ac>
  807b08:	dc800e17 	ldw	r18,56(sp)
  807b0c:	dc400d17 	ldw	r17,52(sp)
  807b10:	d8800407 	ldb	r2,16(sp)
  807b14:	10000b26 	beq	r2,zero,807b44 <___vfprintf_internal_r+0x4e0>
  807b18:	00800044 	movi	r2,1
  807b1c:	94800044 	addi	r18,r18,1
  807b20:	8c400044 	addi	r17,r17,1
  807b24:	a8800115 	stw	r2,4(r21)
  807b28:	d8c00404 	addi	r3,sp,16
  807b2c:	008001c4 	movi	r2,7
  807b30:	a8c00015 	stw	r3,0(r21)
  807b34:	dc800e15 	stw	r18,56(sp)
  807b38:	dc400d15 	stw	r17,52(sp)
  807b3c:	1441da16 	blt	r2,r17,8082a8 <___vfprintf_internal_r+0xc44>
  807b40:	ad400204 	addi	r21,r21,8
  807b44:	d9015017 	ldw	r4,1344(sp)
  807b48:	20000b1e 	bne	r4,zero,807b78 <___vfprintf_internal_r+0x514>
  807b4c:	d8800444 	addi	r2,sp,17
  807b50:	94800084 	addi	r18,r18,2
  807b54:	8c400044 	addi	r17,r17,1
  807b58:	a8800015 	stw	r2,0(r21)
  807b5c:	00c00084 	movi	r3,2
  807b60:	008001c4 	movi	r2,7
  807b64:	a8c00115 	stw	r3,4(r21)
  807b68:	dc800e15 	stw	r18,56(sp)
  807b6c:	dc400d15 	stw	r17,52(sp)
  807b70:	1441c216 	blt	r2,r17,80827c <___vfprintf_internal_r+0xc18>
  807b74:	ad400204 	addi	r21,r21,8
  807b78:	d9414e17 	ldw	r5,1336(sp)
  807b7c:	00802004 	movi	r2,128
  807b80:	2880b126 	beq	r5,r2,807e48 <___vfprintf_internal_r+0x7e4>
  807b84:	d8c14617 	ldw	r3,1304(sp)
  807b88:	19e1c83a 	sub	r16,r3,r7
  807b8c:	0400260e 	bge	zero,r16,807c28 <___vfprintf_internal_r+0x5c4>
  807b90:	00800404 	movi	r2,16
  807b94:	1403c90e 	bge	r2,r16,808abc <___vfprintf_internal_r+0x1458>
  807b98:	1027883a 	mov	r19,r2
  807b9c:	07002074 	movhi	fp,129
  807ba0:	e70b2c84 	addi	fp,fp,11442
  807ba4:	050001c4 	movi	r20,7
  807ba8:	00000306 	br	807bb8 <___vfprintf_internal_r+0x554>
  807bac:	843ffc04 	addi	r16,r16,-16
  807bb0:	ad400204 	addi	r21,r21,8
  807bb4:	9c00130e 	bge	r19,r16,807c04 <___vfprintf_internal_r+0x5a0>
  807bb8:	94800404 	addi	r18,r18,16
  807bbc:	8c400044 	addi	r17,r17,1
  807bc0:	af000015 	stw	fp,0(r21)
  807bc4:	acc00115 	stw	r19,4(r21)
  807bc8:	dc800e15 	stw	r18,56(sp)
  807bcc:	dc400d15 	stw	r17,52(sp)
  807bd0:	a47ff60e 	bge	r20,r17,807bac <___vfprintf_internal_r+0x548>
  807bd4:	d9014f17 	ldw	r4,1340(sp)
  807bd8:	b00b883a 	mov	r5,r22
  807bdc:	d9800c04 	addi	r6,sp,48
  807be0:	d9c15115 	stw	r7,1348(sp)
  807be4:	080760c0 	call	80760c <__sprint_r>
  807be8:	d9c15117 	ldw	r7,1348(sp)
  807bec:	1000551e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  807bf0:	843ffc04 	addi	r16,r16,-16
  807bf4:	dc800e17 	ldw	r18,56(sp)
  807bf8:	dc400d17 	ldw	r17,52(sp)
  807bfc:	dd401904 	addi	r21,sp,100
  807c00:	9c3fed16 	blt	r19,r16,807bb8 <___vfprintf_internal_r+0x554>
  807c04:	9425883a 	add	r18,r18,r16
  807c08:	8c400044 	addi	r17,r17,1
  807c0c:	008001c4 	movi	r2,7
  807c10:	af000015 	stw	fp,0(r21)
  807c14:	ac000115 	stw	r16,4(r21)
  807c18:	dc800e15 	stw	r18,56(sp)
  807c1c:	dc400d15 	stw	r17,52(sp)
  807c20:	14418216 	blt	r2,r17,80822c <___vfprintf_internal_r+0xbc8>
  807c24:	ad400204 	addi	r21,r21,8
  807c28:	d9014c17 	ldw	r4,1328(sp)
  807c2c:	2080400c 	andi	r2,r4,256
  807c30:	10004a1e 	bne	r2,zero,807d5c <___vfprintf_internal_r+0x6f8>
  807c34:	d9414117 	ldw	r5,1284(sp)
  807c38:	91e5883a 	add	r18,r18,r7
  807c3c:	8c400044 	addi	r17,r17,1
  807c40:	008001c4 	movi	r2,7
  807c44:	a9400015 	stw	r5,0(r21)
  807c48:	a9c00115 	stw	r7,4(r21)
  807c4c:	dc800e15 	stw	r18,56(sp)
  807c50:	dc400d15 	stw	r17,52(sp)
  807c54:	14416716 	blt	r2,r17,8081f4 <___vfprintf_internal_r+0xb90>
  807c58:	a8c00204 	addi	r3,r21,8
  807c5c:	d9814c17 	ldw	r6,1328(sp)
  807c60:	3080010c 	andi	r2,r6,4
  807c64:	10002826 	beq	r2,zero,807d08 <___vfprintf_internal_r+0x6a4>
  807c68:	d8814a17 	ldw	r2,1320(sp)
  807c6c:	d9014517 	ldw	r4,1300(sp)
  807c70:	1121c83a 	sub	r16,r2,r4
  807c74:	0400240e 	bge	zero,r16,807d08 <___vfprintf_internal_r+0x6a4>
  807c78:	00800404 	movi	r2,16
  807c7c:	14044f0e 	bge	r2,r16,808dbc <___vfprintf_internal_r+0x1758>
  807c80:	dc400d17 	ldw	r17,52(sp)
  807c84:	1027883a 	mov	r19,r2
  807c88:	07002074 	movhi	fp,129
  807c8c:	e70b3084 	addi	fp,fp,11458
  807c90:	050001c4 	movi	r20,7
  807c94:	00000306 	br	807ca4 <___vfprintf_internal_r+0x640>
  807c98:	843ffc04 	addi	r16,r16,-16
  807c9c:	18c00204 	addi	r3,r3,8
  807ca0:	9c00110e 	bge	r19,r16,807ce8 <___vfprintf_internal_r+0x684>
  807ca4:	94800404 	addi	r18,r18,16
  807ca8:	8c400044 	addi	r17,r17,1
  807cac:	1f000015 	stw	fp,0(r3)
  807cb0:	1cc00115 	stw	r19,4(r3)
  807cb4:	dc800e15 	stw	r18,56(sp)
  807cb8:	dc400d15 	stw	r17,52(sp)
  807cbc:	a47ff60e 	bge	r20,r17,807c98 <___vfprintf_internal_r+0x634>
  807cc0:	d9014f17 	ldw	r4,1340(sp)
  807cc4:	b00b883a 	mov	r5,r22
  807cc8:	d9800c04 	addi	r6,sp,48
  807ccc:	080760c0 	call	80760c <__sprint_r>
  807cd0:	10001c1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  807cd4:	843ffc04 	addi	r16,r16,-16
  807cd8:	dc800e17 	ldw	r18,56(sp)
  807cdc:	dc400d17 	ldw	r17,52(sp)
  807ce0:	d8c01904 	addi	r3,sp,100
  807ce4:	9c3fef16 	blt	r19,r16,807ca4 <___vfprintf_internal_r+0x640>
  807ce8:	9425883a 	add	r18,r18,r16
  807cec:	8c400044 	addi	r17,r17,1
  807cf0:	008001c4 	movi	r2,7
  807cf4:	1f000015 	stw	fp,0(r3)
  807cf8:	1c000115 	stw	r16,4(r3)
  807cfc:	dc800e15 	stw	r18,56(sp)
  807d00:	dc400d15 	stw	r17,52(sp)
  807d04:	1440cb16 	blt	r2,r17,808034 <___vfprintf_internal_r+0x9d0>
  807d08:	d8814a17 	ldw	r2,1320(sp)
  807d0c:	d9414517 	ldw	r5,1300(sp)
  807d10:	1140010e 	bge	r2,r5,807d18 <___vfprintf_internal_r+0x6b4>
  807d14:	2805883a 	mov	r2,r5
  807d18:	d9814b17 	ldw	r6,1324(sp)
  807d1c:	308d883a 	add	r6,r6,r2
  807d20:	d9814b15 	stw	r6,1324(sp)
  807d24:	90013b1e 	bne	r18,zero,808214 <___vfprintf_internal_r+0xbb0>
  807d28:	d9c14017 	ldw	r7,1280(sp)
  807d2c:	dd401904 	addi	r21,sp,100
  807d30:	d8000d15 	stw	zero,52(sp)
  807d34:	003ea706 	br	8077d4 <___vfprintf_internal_r+0x170>
  807d38:	d8800e17 	ldw	r2,56(sp)
  807d3c:	10053f1e 	bne	r2,zero,80923c <___vfprintf_internal_r+0x1bd8>
  807d40:	d8000d15 	stw	zero,52(sp)
  807d44:	b080030b 	ldhu	r2,12(r22)
  807d48:	1080100c 	andi	r2,r2,64
  807d4c:	103e8726 	beq	r2,zero,80776c <___vfprintf_internal_r+0x108>
  807d50:	00bfffc4 	movi	r2,-1
  807d54:	d8814b15 	stw	r2,1324(sp)
  807d58:	003e8406 	br	80776c <___vfprintf_internal_r+0x108>
  807d5c:	d9814d17 	ldw	r6,1332(sp)
  807d60:	00801944 	movi	r2,101
  807d64:	11806e16 	blt	r2,r6,807f20 <___vfprintf_internal_r+0x8bc>
  807d68:	d9414717 	ldw	r5,1308(sp)
  807d6c:	00c00044 	movi	r3,1
  807d70:	1943430e 	bge	r3,r5,808a80 <___vfprintf_internal_r+0x141c>
  807d74:	d8814117 	ldw	r2,1284(sp)
  807d78:	94800044 	addi	r18,r18,1
  807d7c:	8c400044 	addi	r17,r17,1
  807d80:	a8800015 	stw	r2,0(r21)
  807d84:	008001c4 	movi	r2,7
  807d88:	a8c00115 	stw	r3,4(r21)
  807d8c:	dc800e15 	stw	r18,56(sp)
  807d90:	dc400d15 	stw	r17,52(sp)
  807d94:	1441ca16 	blt	r2,r17,8084c0 <___vfprintf_internal_r+0xe5c>
  807d98:	a8c00204 	addi	r3,r21,8
  807d9c:	d9014917 	ldw	r4,1316(sp)
  807da0:	00800044 	movi	r2,1
  807da4:	94800044 	addi	r18,r18,1
  807da8:	8c400044 	addi	r17,r17,1
  807dac:	18800115 	stw	r2,4(r3)
  807db0:	008001c4 	movi	r2,7
  807db4:	19000015 	stw	r4,0(r3)
  807db8:	dc800e15 	stw	r18,56(sp)
  807dbc:	dc400d15 	stw	r17,52(sp)
  807dc0:	1441b616 	blt	r2,r17,80849c <___vfprintf_internal_r+0xe38>
  807dc4:	1cc00204 	addi	r19,r3,8
  807dc8:	d9014217 	ldw	r4,1288(sp)
  807dcc:	d9414317 	ldw	r5,1292(sp)
  807dd0:	000d883a 	mov	r6,zero
  807dd4:	000f883a 	mov	r7,zero
  807dd8:	08049500 	call	804950 <__nedf2>
  807ddc:	10017426 	beq	r2,zero,8083b0 <___vfprintf_internal_r+0xd4c>
  807de0:	d9414717 	ldw	r5,1308(sp)
  807de4:	d9814117 	ldw	r6,1284(sp)
  807de8:	8c400044 	addi	r17,r17,1
  807dec:	2c85883a 	add	r2,r5,r18
  807df0:	14bfffc4 	addi	r18,r2,-1
  807df4:	28bfffc4 	addi	r2,r5,-1
  807df8:	30c00044 	addi	r3,r6,1
  807dfc:	98800115 	stw	r2,4(r19)
  807e00:	008001c4 	movi	r2,7
  807e04:	98c00015 	stw	r3,0(r19)
  807e08:	dc800e15 	stw	r18,56(sp)
  807e0c:	dc400d15 	stw	r17,52(sp)
  807e10:	14418e16 	blt	r2,r17,80844c <___vfprintf_internal_r+0xde8>
  807e14:	9cc00204 	addi	r19,r19,8
  807e18:	d9414817 	ldw	r5,1312(sp)
  807e1c:	d8800804 	addi	r2,sp,32
  807e20:	8c400044 	addi	r17,r17,1
  807e24:	9165883a 	add	r18,r18,r5
  807e28:	98800015 	stw	r2,0(r19)
  807e2c:	008001c4 	movi	r2,7
  807e30:	99400115 	stw	r5,4(r19)
  807e34:	dc800e15 	stw	r18,56(sp)
  807e38:	dc400d15 	stw	r17,52(sp)
  807e3c:	1440ed16 	blt	r2,r17,8081f4 <___vfprintf_internal_r+0xb90>
  807e40:	98c00204 	addi	r3,r19,8
  807e44:	003f8506 	br	807c5c <___vfprintf_internal_r+0x5f8>
  807e48:	d9814a17 	ldw	r6,1320(sp)
  807e4c:	d8814517 	ldw	r2,1300(sp)
  807e50:	30a1c83a 	sub	r16,r6,r2
  807e54:	043f4b0e 	bge	zero,r16,807b84 <___vfprintf_internal_r+0x520>
  807e58:	00800404 	movi	r2,16
  807e5c:	1404340e 	bge	r2,r16,808f30 <___vfprintf_internal_r+0x18cc>
  807e60:	1027883a 	mov	r19,r2
  807e64:	07002074 	movhi	fp,129
  807e68:	e70b2c84 	addi	fp,fp,11442
  807e6c:	050001c4 	movi	r20,7
  807e70:	00000306 	br	807e80 <___vfprintf_internal_r+0x81c>
  807e74:	843ffc04 	addi	r16,r16,-16
  807e78:	ad400204 	addi	r21,r21,8
  807e7c:	9c00130e 	bge	r19,r16,807ecc <___vfprintf_internal_r+0x868>
  807e80:	94800404 	addi	r18,r18,16
  807e84:	8c400044 	addi	r17,r17,1
  807e88:	af000015 	stw	fp,0(r21)
  807e8c:	acc00115 	stw	r19,4(r21)
  807e90:	dc800e15 	stw	r18,56(sp)
  807e94:	dc400d15 	stw	r17,52(sp)
  807e98:	a47ff60e 	bge	r20,r17,807e74 <___vfprintf_internal_r+0x810>
  807e9c:	d9014f17 	ldw	r4,1340(sp)
  807ea0:	b00b883a 	mov	r5,r22
  807ea4:	d9800c04 	addi	r6,sp,48
  807ea8:	d9c15115 	stw	r7,1348(sp)
  807eac:	080760c0 	call	80760c <__sprint_r>
  807eb0:	d9c15117 	ldw	r7,1348(sp)
  807eb4:	103fa31e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  807eb8:	843ffc04 	addi	r16,r16,-16
  807ebc:	dc800e17 	ldw	r18,56(sp)
  807ec0:	dc400d17 	ldw	r17,52(sp)
  807ec4:	dd401904 	addi	r21,sp,100
  807ec8:	9c3fed16 	blt	r19,r16,807e80 <___vfprintf_internal_r+0x81c>
  807ecc:	9425883a 	add	r18,r18,r16
  807ed0:	8c400044 	addi	r17,r17,1
  807ed4:	008001c4 	movi	r2,7
  807ed8:	af000015 	stw	fp,0(r21)
  807edc:	ac000115 	stw	r16,4(r21)
  807ee0:	dc800e15 	stw	r18,56(sp)
  807ee4:	dc400d15 	stw	r17,52(sp)
  807ee8:	14416116 	blt	r2,r17,808470 <___vfprintf_internal_r+0xe0c>
  807eec:	ad400204 	addi	r21,r21,8
  807ef0:	003f2406 	br	807b84 <___vfprintf_internal_r+0x520>
  807ef4:	d9014f17 	ldw	r4,1340(sp)
  807ef8:	08057380 	call	805738 <__sinit>
  807efc:	d9c15117 	ldw	r7,1348(sp)
  807f00:	003def06 	br	8076c0 <___vfprintf_internal_r+0x5c>
  807f04:	d9014f17 	ldw	r4,1340(sp)
  807f08:	b00b883a 	mov	r5,r22
  807f0c:	d9c15115 	stw	r7,1348(sp)
  807f10:	08095ac0 	call	8095ac <__swsetup_r>
  807f14:	d9c15117 	ldw	r7,1348(sp)
  807f18:	103dee26 	beq	r2,zero,8076d4 <___vfprintf_internal_r+0x70>
  807f1c:	003f8c06 	br	807d50 <___vfprintf_internal_r+0x6ec>
  807f20:	d9014217 	ldw	r4,1288(sp)
  807f24:	d9414317 	ldw	r5,1292(sp)
  807f28:	000d883a 	mov	r6,zero
  807f2c:	000f883a 	mov	r7,zero
  807f30:	08048c80 	call	8048c8 <__eqdf2>
  807f34:	1000f21e 	bne	r2,zero,808300 <___vfprintf_internal_r+0xc9c>
  807f38:	00802074 	movhi	r2,129
  807f3c:	108b2c04 	addi	r2,r2,11440
  807f40:	94800044 	addi	r18,r18,1
  807f44:	8c400044 	addi	r17,r17,1
  807f48:	a8800015 	stw	r2,0(r21)
  807f4c:	00c00044 	movi	r3,1
  807f50:	008001c4 	movi	r2,7
  807f54:	a8c00115 	stw	r3,4(r21)
  807f58:	dc800e15 	stw	r18,56(sp)
  807f5c:	dc400d15 	stw	r17,52(sp)
  807f60:	1442fa16 	blt	r2,r17,808b4c <___vfprintf_internal_r+0x14e8>
  807f64:	a8c00204 	addi	r3,r21,8
  807f68:	d8800517 	ldw	r2,20(sp)
  807f6c:	d9014717 	ldw	r4,1308(sp)
  807f70:	11015c0e 	bge	r2,r4,8084e4 <___vfprintf_internal_r+0xe80>
  807f74:	dc400d17 	ldw	r17,52(sp)
  807f78:	d9814917 	ldw	r6,1316(sp)
  807f7c:	00800044 	movi	r2,1
  807f80:	94800044 	addi	r18,r18,1
  807f84:	8c400044 	addi	r17,r17,1
  807f88:	18800115 	stw	r2,4(r3)
  807f8c:	008001c4 	movi	r2,7
  807f90:	19800015 	stw	r6,0(r3)
  807f94:	dc800e15 	stw	r18,56(sp)
  807f98:	dc400d15 	stw	r17,52(sp)
  807f9c:	14431016 	blt	r2,r17,808be0 <___vfprintf_internal_r+0x157c>
  807fa0:	18c00204 	addi	r3,r3,8
  807fa4:	d8814717 	ldw	r2,1308(sp)
  807fa8:	143fffc4 	addi	r16,r2,-1
  807fac:	043f2b0e 	bge	zero,r16,807c5c <___vfprintf_internal_r+0x5f8>
  807fb0:	00800404 	movi	r2,16
  807fb4:	1402a20e 	bge	r2,r16,808a40 <___vfprintf_internal_r+0x13dc>
  807fb8:	dc400d17 	ldw	r17,52(sp)
  807fbc:	1027883a 	mov	r19,r2
  807fc0:	07002074 	movhi	fp,129
  807fc4:	e70b2c84 	addi	fp,fp,11442
  807fc8:	050001c4 	movi	r20,7
  807fcc:	00000306 	br	807fdc <___vfprintf_internal_r+0x978>
  807fd0:	18c00204 	addi	r3,r3,8
  807fd4:	843ffc04 	addi	r16,r16,-16
  807fd8:	9c029c0e 	bge	r19,r16,808a4c <___vfprintf_internal_r+0x13e8>
  807fdc:	94800404 	addi	r18,r18,16
  807fe0:	8c400044 	addi	r17,r17,1
  807fe4:	1f000015 	stw	fp,0(r3)
  807fe8:	1cc00115 	stw	r19,4(r3)
  807fec:	dc800e15 	stw	r18,56(sp)
  807ff0:	dc400d15 	stw	r17,52(sp)
  807ff4:	a47ff60e 	bge	r20,r17,807fd0 <___vfprintf_internal_r+0x96c>
  807ff8:	d9014f17 	ldw	r4,1340(sp)
  807ffc:	b00b883a 	mov	r5,r22
  808000:	d9800c04 	addi	r6,sp,48
  808004:	080760c0 	call	80760c <__sprint_r>
  808008:	103f4e1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  80800c:	dc800e17 	ldw	r18,56(sp)
  808010:	dc400d17 	ldw	r17,52(sp)
  808014:	d8c01904 	addi	r3,sp,100
  808018:	003fee06 	br	807fd4 <___vfprintf_internal_r+0x970>
  80801c:	d8802c0b 	ldhu	r2,176(sp)
  808020:	00ffffc4 	movi	r3,-1
  808024:	d8c14b15 	stw	r3,1324(sp)
  808028:	1080100c 	andi	r2,r2,64
  80802c:	103dcc1e 	bne	r2,zero,807760 <___vfprintf_internal_r+0xfc>
  808030:	003dce06 	br	80776c <___vfprintf_internal_r+0x108>
  808034:	d9014f17 	ldw	r4,1340(sp)
  808038:	b00b883a 	mov	r5,r22
  80803c:	d9800c04 	addi	r6,sp,48
  808040:	080760c0 	call	80760c <__sprint_r>
  808044:	103f3f1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808048:	dc800e17 	ldw	r18,56(sp)
  80804c:	003f2e06 	br	807d08 <___vfprintf_internal_r+0x6a4>
  808050:	d9414c17 	ldw	r5,1328(sp)
  808054:	29400414 	ori	r5,r5,16
  808058:	d9414c15 	stw	r5,1328(sp)
  80805c:	d9814c17 	ldw	r6,1328(sp)
  808060:	3080080c 	andi	r2,r6,32
  808064:	10014f1e 	bne	r2,zero,8085a4 <___vfprintf_internal_r+0xf40>
  808068:	d8c14c17 	ldw	r3,1328(sp)
  80806c:	1880040c 	andi	r2,r3,16
  808070:	1002ea1e 	bne	r2,zero,808c1c <___vfprintf_internal_r+0x15b8>
  808074:	d9014c17 	ldw	r4,1328(sp)
  808078:	2080100c 	andi	r2,r4,64
  80807c:	1002e726 	beq	r2,zero,808c1c <___vfprintf_internal_r+0x15b8>
  808080:	3880000f 	ldh	r2,0(r7)
  808084:	39c00104 	addi	r7,r7,4
  808088:	d9c14015 	stw	r7,1280(sp)
  80808c:	1023d7fa 	srai	r17,r2,31
  808090:	1021883a 	mov	r16,r2
  808094:	88037216 	blt	r17,zero,808e60 <___vfprintf_internal_r+0x17fc>
  808098:	01000044 	movi	r4,1
  80809c:	98000416 	blt	r19,zero,8080b0 <___vfprintf_internal_r+0xa4c>
  8080a0:	d8c14c17 	ldw	r3,1328(sp)
  8080a4:	00bfdfc4 	movi	r2,-129
  8080a8:	1886703a 	and	r3,r3,r2
  8080ac:	d8c14c15 	stw	r3,1328(sp)
  8080b0:	8444b03a 	or	r2,r16,r17
  8080b4:	1002261e 	bne	r2,zero,808950 <___vfprintf_internal_r+0x12ec>
  8080b8:	9802251e 	bne	r19,zero,808950 <___vfprintf_internal_r+0x12ec>
  8080bc:	20803fcc 	andi	r2,r4,255
  8080c0:	10029b26 	beq	r2,zero,808b30 <___vfprintf_internal_r+0x14cc>
  8080c4:	d8c01904 	addi	r3,sp,100
  8080c8:	dd000f04 	addi	r20,sp,60
  8080cc:	d8c14115 	stw	r3,1284(sp)
  8080d0:	d8c14117 	ldw	r3,1284(sp)
  8080d4:	dcc14515 	stw	r19,1300(sp)
  8080d8:	a0c5c83a 	sub	r2,r20,r3
  8080dc:	11c00a04 	addi	r7,r2,40
  8080e0:	99c0010e 	bge	r19,r7,8080e8 <___vfprintf_internal_r+0xa84>
  8080e4:	d9c14515 	stw	r7,1300(sp)
  8080e8:	dcc14615 	stw	r19,1304(sp)
  8080ec:	d8800407 	ldb	r2,16(sp)
  8080f0:	103e4c26 	beq	r2,zero,807a24 <___vfprintf_internal_r+0x3c0>
  8080f4:	d8814517 	ldw	r2,1300(sp)
  8080f8:	10800044 	addi	r2,r2,1
  8080fc:	d8814515 	stw	r2,1300(sp)
  808100:	003e4806 	br	807a24 <___vfprintf_internal_r+0x3c0>
  808104:	d9814c17 	ldw	r6,1328(sp)
  808108:	31800414 	ori	r6,r6,16
  80810c:	d9814c15 	stw	r6,1328(sp)
  808110:	d8c14c17 	ldw	r3,1328(sp)
  808114:	1880080c 	andi	r2,r3,32
  808118:	1001271e 	bne	r2,zero,8085b8 <___vfprintf_internal_r+0xf54>
  80811c:	d9414c17 	ldw	r5,1328(sp)
  808120:	2880040c 	andi	r2,r5,16
  808124:	1002b61e 	bne	r2,zero,808c00 <___vfprintf_internal_r+0x159c>
  808128:	d9814c17 	ldw	r6,1328(sp)
  80812c:	3080100c 	andi	r2,r6,64
  808130:	1002b326 	beq	r2,zero,808c00 <___vfprintf_internal_r+0x159c>
  808134:	3c00000b 	ldhu	r16,0(r7)
  808138:	0009883a 	mov	r4,zero
  80813c:	39c00104 	addi	r7,r7,4
  808140:	0023883a 	mov	r17,zero
  808144:	d9c14015 	stw	r7,1280(sp)
  808148:	d8000405 	stb	zero,16(sp)
  80814c:	003fd306 	br	80809c <___vfprintf_internal_r+0xa38>
  808150:	d9014c17 	ldw	r4,1328(sp)
  808154:	21000414 	ori	r4,r4,16
  808158:	d9014c15 	stw	r4,1328(sp)
  80815c:	d9414c17 	ldw	r5,1328(sp)
  808160:	2880080c 	andi	r2,r5,32
  808164:	1001081e 	bne	r2,zero,808588 <___vfprintf_internal_r+0xf24>
  808168:	d8c14c17 	ldw	r3,1328(sp)
  80816c:	1880040c 	andi	r2,r3,16
  808170:	1002b01e 	bne	r2,zero,808c34 <___vfprintf_internal_r+0x15d0>
  808174:	d9014c17 	ldw	r4,1328(sp)
  808178:	2080100c 	andi	r2,r4,64
  80817c:	1002ad26 	beq	r2,zero,808c34 <___vfprintf_internal_r+0x15d0>
  808180:	3c00000b 	ldhu	r16,0(r7)
  808184:	01000044 	movi	r4,1
  808188:	39c00104 	addi	r7,r7,4
  80818c:	0023883a 	mov	r17,zero
  808190:	d9c14015 	stw	r7,1280(sp)
  808194:	d8000405 	stb	zero,16(sp)
  808198:	003fc006 	br	80809c <___vfprintf_internal_r+0xa38>
  80819c:	d9014f17 	ldw	r4,1340(sp)
  8081a0:	b00b883a 	mov	r5,r22
  8081a4:	d9800c04 	addi	r6,sp,48
  8081a8:	080760c0 	call	80760c <__sprint_r>
  8081ac:	103ee51e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  8081b0:	dc800e17 	ldw	r18,56(sp)
  8081b4:	d8c01904 	addi	r3,sp,100
  8081b8:	d9814c17 	ldw	r6,1328(sp)
  8081bc:	3080004c 	andi	r2,r6,1
  8081c0:	1005003a 	cmpeq	r2,r2,zero
  8081c4:	103ea51e 	bne	r2,zero,807c5c <___vfprintf_internal_r+0x5f8>
  8081c8:	00800044 	movi	r2,1
  8081cc:	dc400d17 	ldw	r17,52(sp)
  8081d0:	18800115 	stw	r2,4(r3)
  8081d4:	d8814917 	ldw	r2,1316(sp)
  8081d8:	94800044 	addi	r18,r18,1
  8081dc:	8c400044 	addi	r17,r17,1
  8081e0:	18800015 	stw	r2,0(r3)
  8081e4:	008001c4 	movi	r2,7
  8081e8:	dc800e15 	stw	r18,56(sp)
  8081ec:	dc400d15 	stw	r17,52(sp)
  8081f0:	14421e0e 	bge	r2,r17,808a6c <___vfprintf_internal_r+0x1408>
  8081f4:	d9014f17 	ldw	r4,1340(sp)
  8081f8:	b00b883a 	mov	r5,r22
  8081fc:	d9800c04 	addi	r6,sp,48
  808200:	080760c0 	call	80760c <__sprint_r>
  808204:	103ecf1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808208:	dc800e17 	ldw	r18,56(sp)
  80820c:	d8c01904 	addi	r3,sp,100
  808210:	003e9206 	br	807c5c <___vfprintf_internal_r+0x5f8>
  808214:	d9014f17 	ldw	r4,1340(sp)
  808218:	b00b883a 	mov	r5,r22
  80821c:	d9800c04 	addi	r6,sp,48
  808220:	080760c0 	call	80760c <__sprint_r>
  808224:	103ec026 	beq	r2,zero,807d28 <___vfprintf_internal_r+0x6c4>
  808228:	003ec606 	br	807d44 <___vfprintf_internal_r+0x6e0>
  80822c:	d9014f17 	ldw	r4,1340(sp)
  808230:	b00b883a 	mov	r5,r22
  808234:	d9800c04 	addi	r6,sp,48
  808238:	d9c15115 	stw	r7,1348(sp)
  80823c:	080760c0 	call	80760c <__sprint_r>
  808240:	d9c15117 	ldw	r7,1348(sp)
  808244:	103ebf1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808248:	dc800e17 	ldw	r18,56(sp)
  80824c:	dc400d17 	ldw	r17,52(sp)
  808250:	dd401904 	addi	r21,sp,100
  808254:	003e7406 	br	807c28 <___vfprintf_internal_r+0x5c4>
  808258:	d9014f17 	ldw	r4,1340(sp)
  80825c:	b00b883a 	mov	r5,r22
  808260:	d9800c04 	addi	r6,sp,48
  808264:	d9c15115 	stw	r7,1348(sp)
  808268:	080760c0 	call	80760c <__sprint_r>
  80826c:	d9c15117 	ldw	r7,1348(sp)
  808270:	103eb41e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808274:	dd401904 	addi	r21,sp,100
  808278:	003d6d06 	br	807830 <___vfprintf_internal_r+0x1cc>
  80827c:	d9014f17 	ldw	r4,1340(sp)
  808280:	b00b883a 	mov	r5,r22
  808284:	d9800c04 	addi	r6,sp,48
  808288:	d9c15115 	stw	r7,1348(sp)
  80828c:	080760c0 	call	80760c <__sprint_r>
  808290:	d9c15117 	ldw	r7,1348(sp)
  808294:	103eab1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808298:	dc800e17 	ldw	r18,56(sp)
  80829c:	dc400d17 	ldw	r17,52(sp)
  8082a0:	dd401904 	addi	r21,sp,100
  8082a4:	003e3406 	br	807b78 <___vfprintf_internal_r+0x514>
  8082a8:	d9014f17 	ldw	r4,1340(sp)
  8082ac:	b00b883a 	mov	r5,r22
  8082b0:	d9800c04 	addi	r6,sp,48
  8082b4:	d9c15115 	stw	r7,1348(sp)
  8082b8:	080760c0 	call	80760c <__sprint_r>
  8082bc:	d9c15117 	ldw	r7,1348(sp)
  8082c0:	103ea01e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  8082c4:	dc800e17 	ldw	r18,56(sp)
  8082c8:	dc400d17 	ldw	r17,52(sp)
  8082cc:	dd401904 	addi	r21,sp,100
  8082d0:	003e1c06 	br	807b44 <___vfprintf_internal_r+0x4e0>
  8082d4:	d9014f17 	ldw	r4,1340(sp)
  8082d8:	b00b883a 	mov	r5,r22
  8082dc:	d9800c04 	addi	r6,sp,48
  8082e0:	d9c15115 	stw	r7,1348(sp)
  8082e4:	080760c0 	call	80760c <__sprint_r>
  8082e8:	d9c15117 	ldw	r7,1348(sp)
  8082ec:	103e951e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  8082f0:	dc800e17 	ldw	r18,56(sp)
  8082f4:	dc400d17 	ldw	r17,52(sp)
  8082f8:	dd401904 	addi	r21,sp,100
  8082fc:	003e0406 	br	807b10 <___vfprintf_internal_r+0x4ac>
  808300:	d9000517 	ldw	r4,20(sp)
  808304:	0102520e 	bge	zero,r4,808c50 <___vfprintf_internal_r+0x15ec>
  808308:	d9814717 	ldw	r6,1308(sp)
  80830c:	21807a16 	blt	r4,r6,8084f8 <___vfprintf_internal_r+0xe94>
  808310:	d8814117 	ldw	r2,1284(sp)
  808314:	91a5883a 	add	r18,r18,r6
  808318:	8c400044 	addi	r17,r17,1
  80831c:	a8800015 	stw	r2,0(r21)
  808320:	008001c4 	movi	r2,7
  808324:	a9800115 	stw	r6,4(r21)
  808328:	dc800e15 	stw	r18,56(sp)
  80832c:	dc400d15 	stw	r17,52(sp)
  808330:	1442f616 	blt	r2,r17,808f0c <___vfprintf_internal_r+0x18a8>
  808334:	a8c00204 	addi	r3,r21,8
  808338:	d9414717 	ldw	r5,1308(sp)
  80833c:	2161c83a 	sub	r16,r4,r5
  808340:	043f9d0e 	bge	zero,r16,8081b8 <___vfprintf_internal_r+0xb54>
  808344:	00800404 	movi	r2,16
  808348:	1402130e 	bge	r2,r16,808b98 <___vfprintf_internal_r+0x1534>
  80834c:	dc400d17 	ldw	r17,52(sp)
  808350:	1027883a 	mov	r19,r2
  808354:	07002074 	movhi	fp,129
  808358:	e70b2c84 	addi	fp,fp,11442
  80835c:	050001c4 	movi	r20,7
  808360:	00000306 	br	808370 <___vfprintf_internal_r+0xd0c>
  808364:	18c00204 	addi	r3,r3,8
  808368:	843ffc04 	addi	r16,r16,-16
  80836c:	9c020d0e 	bge	r19,r16,808ba4 <___vfprintf_internal_r+0x1540>
  808370:	94800404 	addi	r18,r18,16
  808374:	8c400044 	addi	r17,r17,1
  808378:	1f000015 	stw	fp,0(r3)
  80837c:	1cc00115 	stw	r19,4(r3)
  808380:	dc800e15 	stw	r18,56(sp)
  808384:	dc400d15 	stw	r17,52(sp)
  808388:	a47ff60e 	bge	r20,r17,808364 <___vfprintf_internal_r+0xd00>
  80838c:	d9014f17 	ldw	r4,1340(sp)
  808390:	b00b883a 	mov	r5,r22
  808394:	d9800c04 	addi	r6,sp,48
  808398:	080760c0 	call	80760c <__sprint_r>
  80839c:	103e691e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  8083a0:	dc800e17 	ldw	r18,56(sp)
  8083a4:	dc400d17 	ldw	r17,52(sp)
  8083a8:	d8c01904 	addi	r3,sp,100
  8083ac:	003fee06 	br	808368 <___vfprintf_internal_r+0xd04>
  8083b0:	d8814717 	ldw	r2,1308(sp)
  8083b4:	143fffc4 	addi	r16,r2,-1
  8083b8:	043e970e 	bge	zero,r16,807e18 <___vfprintf_internal_r+0x7b4>
  8083bc:	00800404 	movi	r2,16
  8083c0:	1400180e 	bge	r2,r16,808424 <___vfprintf_internal_r+0xdc0>
  8083c4:	1029883a 	mov	r20,r2
  8083c8:	07002074 	movhi	fp,129
  8083cc:	e70b2c84 	addi	fp,fp,11442
  8083d0:	054001c4 	movi	r21,7
  8083d4:	00000306 	br	8083e4 <___vfprintf_internal_r+0xd80>
  8083d8:	9cc00204 	addi	r19,r19,8
  8083dc:	843ffc04 	addi	r16,r16,-16
  8083e0:	a400120e 	bge	r20,r16,80842c <___vfprintf_internal_r+0xdc8>
  8083e4:	94800404 	addi	r18,r18,16
  8083e8:	8c400044 	addi	r17,r17,1
  8083ec:	9f000015 	stw	fp,0(r19)
  8083f0:	9d000115 	stw	r20,4(r19)
  8083f4:	dc800e15 	stw	r18,56(sp)
  8083f8:	dc400d15 	stw	r17,52(sp)
  8083fc:	ac7ff60e 	bge	r21,r17,8083d8 <___vfprintf_internal_r+0xd74>
  808400:	d9014f17 	ldw	r4,1340(sp)
  808404:	b00b883a 	mov	r5,r22
  808408:	d9800c04 	addi	r6,sp,48
  80840c:	080760c0 	call	80760c <__sprint_r>
  808410:	103e4c1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808414:	dc800e17 	ldw	r18,56(sp)
  808418:	dc400d17 	ldw	r17,52(sp)
  80841c:	dcc01904 	addi	r19,sp,100
  808420:	003fee06 	br	8083dc <___vfprintf_internal_r+0xd78>
  808424:	07002074 	movhi	fp,129
  808428:	e70b2c84 	addi	fp,fp,11442
  80842c:	9425883a 	add	r18,r18,r16
  808430:	8c400044 	addi	r17,r17,1
  808434:	008001c4 	movi	r2,7
  808438:	9f000015 	stw	fp,0(r19)
  80843c:	9c000115 	stw	r16,4(r19)
  808440:	dc800e15 	stw	r18,56(sp)
  808444:	dc400d15 	stw	r17,52(sp)
  808448:	147e720e 	bge	r2,r17,807e14 <___vfprintf_internal_r+0x7b0>
  80844c:	d9014f17 	ldw	r4,1340(sp)
  808450:	b00b883a 	mov	r5,r22
  808454:	d9800c04 	addi	r6,sp,48
  808458:	080760c0 	call	80760c <__sprint_r>
  80845c:	103e391e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808460:	dc800e17 	ldw	r18,56(sp)
  808464:	dc400d17 	ldw	r17,52(sp)
  808468:	dcc01904 	addi	r19,sp,100
  80846c:	003e6a06 	br	807e18 <___vfprintf_internal_r+0x7b4>
  808470:	d9014f17 	ldw	r4,1340(sp)
  808474:	b00b883a 	mov	r5,r22
  808478:	d9800c04 	addi	r6,sp,48
  80847c:	d9c15115 	stw	r7,1348(sp)
  808480:	080760c0 	call	80760c <__sprint_r>
  808484:	d9c15117 	ldw	r7,1348(sp)
  808488:	103e2e1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  80848c:	dc800e17 	ldw	r18,56(sp)
  808490:	dc400d17 	ldw	r17,52(sp)
  808494:	dd401904 	addi	r21,sp,100
  808498:	003dba06 	br	807b84 <___vfprintf_internal_r+0x520>
  80849c:	d9014f17 	ldw	r4,1340(sp)
  8084a0:	b00b883a 	mov	r5,r22
  8084a4:	d9800c04 	addi	r6,sp,48
  8084a8:	080760c0 	call	80760c <__sprint_r>
  8084ac:	103e251e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  8084b0:	dc800e17 	ldw	r18,56(sp)
  8084b4:	dc400d17 	ldw	r17,52(sp)
  8084b8:	dcc01904 	addi	r19,sp,100
  8084bc:	003e4206 	br	807dc8 <___vfprintf_internal_r+0x764>
  8084c0:	d9014f17 	ldw	r4,1340(sp)
  8084c4:	b00b883a 	mov	r5,r22
  8084c8:	d9800c04 	addi	r6,sp,48
  8084cc:	080760c0 	call	80760c <__sprint_r>
  8084d0:	103e1c1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  8084d4:	dc800e17 	ldw	r18,56(sp)
  8084d8:	dc400d17 	ldw	r17,52(sp)
  8084dc:	d8c01904 	addi	r3,sp,100
  8084e0:	003e2e06 	br	807d9c <___vfprintf_internal_r+0x738>
  8084e4:	d9414c17 	ldw	r5,1328(sp)
  8084e8:	2880004c 	andi	r2,r5,1
  8084ec:	1005003a 	cmpeq	r2,r2,zero
  8084f0:	103dda1e 	bne	r2,zero,807c5c <___vfprintf_internal_r+0x5f8>
  8084f4:	003e9f06 	br	807f74 <___vfprintf_internal_r+0x910>
  8084f8:	d8c14117 	ldw	r3,1284(sp)
  8084fc:	9125883a 	add	r18,r18,r4
  808500:	8c400044 	addi	r17,r17,1
  808504:	008001c4 	movi	r2,7
  808508:	a8c00015 	stw	r3,0(r21)
  80850c:	a9000115 	stw	r4,4(r21)
  808510:	dc800e15 	stw	r18,56(sp)
  808514:	dc400d15 	stw	r17,52(sp)
  808518:	14426616 	blt	r2,r17,808eb4 <___vfprintf_internal_r+0x1850>
  80851c:	a8c00204 	addi	r3,r21,8
  808520:	d9414917 	ldw	r5,1316(sp)
  808524:	00800044 	movi	r2,1
  808528:	94800044 	addi	r18,r18,1
  80852c:	8c400044 	addi	r17,r17,1
  808530:	18800115 	stw	r2,4(r3)
  808534:	008001c4 	movi	r2,7
  808538:	19400015 	stw	r5,0(r3)
  80853c:	dc800e15 	stw	r18,56(sp)
  808540:	dc400d15 	stw	r17,52(sp)
  808544:	2021883a 	mov	r16,r4
  808548:	14425016 	blt	r2,r17,808e8c <___vfprintf_internal_r+0x1828>
  80854c:	19400204 	addi	r5,r3,8
  808550:	d9814717 	ldw	r6,1308(sp)
  808554:	8c400044 	addi	r17,r17,1
  808558:	dc400d15 	stw	r17,52(sp)
  80855c:	3107c83a 	sub	r3,r6,r4
  808560:	d9014117 	ldw	r4,1284(sp)
  808564:	90e5883a 	add	r18,r18,r3
  808568:	28c00115 	stw	r3,4(r5)
  80856c:	8105883a 	add	r2,r16,r4
  808570:	28800015 	stw	r2,0(r5)
  808574:	008001c4 	movi	r2,7
  808578:	dc800e15 	stw	r18,56(sp)
  80857c:	147f1d16 	blt	r2,r17,8081f4 <___vfprintf_internal_r+0xb90>
  808580:	28c00204 	addi	r3,r5,8
  808584:	003db506 	br	807c5c <___vfprintf_internal_r+0x5f8>
  808588:	3c000017 	ldw	r16,0(r7)
  80858c:	3c400117 	ldw	r17,4(r7)
  808590:	39800204 	addi	r6,r7,8
  808594:	01000044 	movi	r4,1
  808598:	d9814015 	stw	r6,1280(sp)
  80859c:	d8000405 	stb	zero,16(sp)
  8085a0:	003ebe06 	br	80809c <___vfprintf_internal_r+0xa38>
  8085a4:	3c000017 	ldw	r16,0(r7)
  8085a8:	3c400117 	ldw	r17,4(r7)
  8085ac:	38800204 	addi	r2,r7,8
  8085b0:	d8814015 	stw	r2,1280(sp)
  8085b4:	003eb706 	br	808094 <___vfprintf_internal_r+0xa30>
  8085b8:	3c000017 	ldw	r16,0(r7)
  8085bc:	3c400117 	ldw	r17,4(r7)
  8085c0:	39000204 	addi	r4,r7,8
  8085c4:	d9014015 	stw	r4,1280(sp)
  8085c8:	0009883a 	mov	r4,zero
  8085cc:	d8000405 	stb	zero,16(sp)
  8085d0:	003eb206 	br	80809c <___vfprintf_internal_r+0xa38>
  8085d4:	38c00017 	ldw	r3,0(r7)
  8085d8:	39c00104 	addi	r7,r7,4
  8085dc:	d8c14a15 	stw	r3,1320(sp)
  8085e0:	1800d10e 	bge	r3,zero,808928 <___vfprintf_internal_r+0x12c4>
  8085e4:	00c7c83a 	sub	r3,zero,r3
  8085e8:	d8c14a15 	stw	r3,1320(sp)
  8085ec:	d9014c17 	ldw	r4,1328(sp)
  8085f0:	b8c00007 	ldb	r3,0(r23)
  8085f4:	21000114 	ori	r4,r4,4
  8085f8:	d9014c15 	stw	r4,1328(sp)
  8085fc:	003c9806 	br	807860 <___vfprintf_internal_r+0x1fc>
  808600:	d9814c17 	ldw	r6,1328(sp)
  808604:	3080080c 	andi	r2,r6,32
  808608:	1001f026 	beq	r2,zero,808dcc <___vfprintf_internal_r+0x1768>
  80860c:	d9014b17 	ldw	r4,1324(sp)
  808610:	38800017 	ldw	r2,0(r7)
  808614:	39c00104 	addi	r7,r7,4
  808618:	d9c14015 	stw	r7,1280(sp)
  80861c:	2007d7fa 	srai	r3,r4,31
  808620:	d9c14017 	ldw	r7,1280(sp)
  808624:	11000015 	stw	r4,0(r2)
  808628:	10c00115 	stw	r3,4(r2)
  80862c:	003c6906 	br	8077d4 <___vfprintf_internal_r+0x170>
  808630:	b8c00007 	ldb	r3,0(r23)
  808634:	00801b04 	movi	r2,108
  808638:	18824f26 	beq	r3,r2,808f78 <___vfprintf_internal_r+0x1914>
  80863c:	d9414c17 	ldw	r5,1328(sp)
  808640:	29400414 	ori	r5,r5,16
  808644:	d9414c15 	stw	r5,1328(sp)
  808648:	003c8506 	br	807860 <___vfprintf_internal_r+0x1fc>
  80864c:	d9814c17 	ldw	r6,1328(sp)
  808650:	b8c00007 	ldb	r3,0(r23)
  808654:	31800814 	ori	r6,r6,32
  808658:	d9814c15 	stw	r6,1328(sp)
  80865c:	003c8006 	br	807860 <___vfprintf_internal_r+0x1fc>
  808660:	d8814c17 	ldw	r2,1328(sp)
  808664:	3c000017 	ldw	r16,0(r7)
  808668:	00c01e04 	movi	r3,120
  80866c:	10800094 	ori	r2,r2,2
  808670:	d8814c15 	stw	r2,1328(sp)
  808674:	39c00104 	addi	r7,r7,4
  808678:	01402074 	movhi	r5,129
  80867c:	294b1504 	addi	r5,r5,11348
  808680:	00800c04 	movi	r2,48
  808684:	0023883a 	mov	r17,zero
  808688:	01000084 	movi	r4,2
  80868c:	d9c14015 	stw	r7,1280(sp)
  808690:	d8c14d15 	stw	r3,1332(sp)
  808694:	d9414415 	stw	r5,1296(sp)
  808698:	d8800445 	stb	r2,17(sp)
  80869c:	d8c00485 	stb	r3,18(sp)
  8086a0:	d8000405 	stb	zero,16(sp)
  8086a4:	003e7d06 	br	80809c <___vfprintf_internal_r+0xa38>
  8086a8:	d8814c17 	ldw	r2,1328(sp)
  8086ac:	b8c00007 	ldb	r3,0(r23)
  8086b0:	10801014 	ori	r2,r2,64
  8086b4:	d8814c15 	stw	r2,1328(sp)
  8086b8:	003c6906 	br	807860 <___vfprintf_internal_r+0x1fc>
  8086bc:	d9414c17 	ldw	r5,1328(sp)
  8086c0:	2880020c 	andi	r2,r5,8
  8086c4:	1001df26 	beq	r2,zero,808e44 <___vfprintf_internal_r+0x17e0>
  8086c8:	39800017 	ldw	r6,0(r7)
  8086cc:	38800204 	addi	r2,r7,8
  8086d0:	d8814015 	stw	r2,1280(sp)
  8086d4:	d9814215 	stw	r6,1288(sp)
  8086d8:	39c00117 	ldw	r7,4(r7)
  8086dc:	d9c14315 	stw	r7,1292(sp)
  8086e0:	d9014217 	ldw	r4,1288(sp)
  8086e4:	d9414317 	ldw	r5,1292(sp)
  8086e8:	080d0bc0 	call	80d0bc <__isinfd>
  8086ec:	10021726 	beq	r2,zero,808f4c <___vfprintf_internal_r+0x18e8>
  8086f0:	d9014217 	ldw	r4,1288(sp)
  8086f4:	d9414317 	ldw	r5,1292(sp)
  8086f8:	000d883a 	mov	r6,zero
  8086fc:	000f883a 	mov	r7,zero
  808700:	0804a600 	call	804a60 <__ltdf2>
  808704:	1002ca16 	blt	r2,zero,809230 <___vfprintf_internal_r+0x1bcc>
  808708:	d9414d17 	ldw	r5,1332(sp)
  80870c:	008011c4 	movi	r2,71
  808710:	11420a16 	blt	r2,r5,808f3c <___vfprintf_internal_r+0x18d8>
  808714:	01802074 	movhi	r6,129
  808718:	318b1a04 	addi	r6,r6,11368
  80871c:	d9814115 	stw	r6,1284(sp)
  808720:	d9014c17 	ldw	r4,1328(sp)
  808724:	00c000c4 	movi	r3,3
  808728:	00bfdfc4 	movi	r2,-129
  80872c:	2088703a 	and	r4,r4,r2
  808730:	180f883a 	mov	r7,r3
  808734:	d8c14515 	stw	r3,1300(sp)
  808738:	d9014c15 	stw	r4,1328(sp)
  80873c:	d8014615 	stw	zero,1304(sp)
  808740:	003e6a06 	br	8080ec <___vfprintf_internal_r+0xa88>
  808744:	38800017 	ldw	r2,0(r7)
  808748:	00c00044 	movi	r3,1
  80874c:	39c00104 	addi	r7,r7,4
  808750:	d9c14015 	stw	r7,1280(sp)
  808754:	d9000f04 	addi	r4,sp,60
  808758:	180f883a 	mov	r7,r3
  80875c:	d8c14515 	stw	r3,1300(sp)
  808760:	d9014115 	stw	r4,1284(sp)
  808764:	d8800f05 	stb	r2,60(sp)
  808768:	d8000405 	stb	zero,16(sp)
  80876c:	003cac06 	br	807a20 <___vfprintf_internal_r+0x3bc>
  808770:	01402074 	movhi	r5,129
  808774:	294b2004 	addi	r5,r5,11392
  808778:	d9414415 	stw	r5,1296(sp)
  80877c:	d9814c17 	ldw	r6,1328(sp)
  808780:	3080080c 	andi	r2,r6,32
  808784:	1000f926 	beq	r2,zero,808b6c <___vfprintf_internal_r+0x1508>
  808788:	3c000017 	ldw	r16,0(r7)
  80878c:	3c400117 	ldw	r17,4(r7)
  808790:	38800204 	addi	r2,r7,8
  808794:	d8814015 	stw	r2,1280(sp)
  808798:	d9414c17 	ldw	r5,1328(sp)
  80879c:	2880004c 	andi	r2,r5,1
  8087a0:	1005003a 	cmpeq	r2,r2,zero
  8087a4:	1000b31e 	bne	r2,zero,808a74 <___vfprintf_internal_r+0x1410>
  8087a8:	8444b03a 	or	r2,r16,r17
  8087ac:	1000b126 	beq	r2,zero,808a74 <___vfprintf_internal_r+0x1410>
  8087b0:	d9814d17 	ldw	r6,1332(sp)
  8087b4:	29400094 	ori	r5,r5,2
  8087b8:	00800c04 	movi	r2,48
  8087bc:	01000084 	movi	r4,2
  8087c0:	d9414c15 	stw	r5,1328(sp)
  8087c4:	d8800445 	stb	r2,17(sp)
  8087c8:	d9800485 	stb	r6,18(sp)
  8087cc:	d8000405 	stb	zero,16(sp)
  8087d0:	003e3206 	br	80809c <___vfprintf_internal_r+0xa38>
  8087d4:	01802074 	movhi	r6,129
  8087d8:	318b1504 	addi	r6,r6,11348
  8087dc:	d9814415 	stw	r6,1296(sp)
  8087e0:	003fe606 	br	80877c <___vfprintf_internal_r+0x1118>
  8087e4:	00800ac4 	movi	r2,43
  8087e8:	d8800405 	stb	r2,16(sp)
  8087ec:	b8c00007 	ldb	r3,0(r23)
  8087f0:	003c1b06 	br	807860 <___vfprintf_internal_r+0x1fc>
  8087f4:	d8814c17 	ldw	r2,1328(sp)
  8087f8:	b8c00007 	ldb	r3,0(r23)
  8087fc:	10800054 	ori	r2,r2,1
  808800:	d8814c15 	stw	r2,1328(sp)
  808804:	003c1606 	br	807860 <___vfprintf_internal_r+0x1fc>
  808808:	d8800407 	ldb	r2,16(sp)
  80880c:	1000461e 	bne	r2,zero,808928 <___vfprintf_internal_r+0x12c4>
  808810:	00800804 	movi	r2,32
  808814:	d8800405 	stb	r2,16(sp)
  808818:	b8c00007 	ldb	r3,0(r23)
  80881c:	003c1006 	br	807860 <___vfprintf_internal_r+0x1fc>
  808820:	d9814c17 	ldw	r6,1328(sp)
  808824:	b8c00007 	ldb	r3,0(r23)
  808828:	31800214 	ori	r6,r6,8
  80882c:	d9814c15 	stw	r6,1328(sp)
  808830:	003c0b06 	br	807860 <___vfprintf_internal_r+0x1fc>
  808834:	0007883a 	mov	r3,zero
  808838:	01000244 	movi	r4,9
  80883c:	188002a4 	muli	r2,r3,10
  808840:	b8c00007 	ldb	r3,0(r23)
  808844:	d9814d17 	ldw	r6,1332(sp)
  808848:	bdc00044 	addi	r23,r23,1
  80884c:	d8c14d15 	stw	r3,1332(sp)
  808850:	d9414d17 	ldw	r5,1332(sp)
  808854:	3085883a 	add	r2,r6,r2
  808858:	10fff404 	addi	r3,r2,-48
  80885c:	28bff404 	addi	r2,r5,-48
  808860:	20bff62e 	bgeu	r4,r2,80883c <___vfprintf_internal_r+0x11d8>
  808864:	d8c14a15 	stw	r3,1320(sp)
  808868:	003bff06 	br	807868 <___vfprintf_internal_r+0x204>
  80886c:	d9414c17 	ldw	r5,1328(sp)
  808870:	b8c00007 	ldb	r3,0(r23)
  808874:	29402014 	ori	r5,r5,128
  808878:	d9414c15 	stw	r5,1328(sp)
  80887c:	003bf806 	br	807860 <___vfprintf_internal_r+0x1fc>
  808880:	b8c00007 	ldb	r3,0(r23)
  808884:	00800a84 	movi	r2,42
  808888:	bdc00044 	addi	r23,r23,1
  80888c:	18831526 	beq	r3,r2,8094e4 <___vfprintf_internal_r+0x1e80>
  808890:	d8c14d15 	stw	r3,1332(sp)
  808894:	18bff404 	addi	r2,r3,-48
  808898:	00c00244 	movi	r3,9
  80889c:	18827836 	bltu	r3,r2,809280 <___vfprintf_internal_r+0x1c1c>
  8088a0:	000d883a 	mov	r6,zero
  8088a4:	308002a4 	muli	r2,r6,10
  8088a8:	b9800007 	ldb	r6,0(r23)
  8088ac:	d9414d17 	ldw	r5,1332(sp)
  8088b0:	bdc00044 	addi	r23,r23,1
  8088b4:	d9814d15 	stw	r6,1332(sp)
  8088b8:	d9014d17 	ldw	r4,1332(sp)
  8088bc:	1145883a 	add	r2,r2,r5
  8088c0:	11bff404 	addi	r6,r2,-48
  8088c4:	20bff404 	addi	r2,r4,-48
  8088c8:	18bff62e 	bgeu	r3,r2,8088a4 <___vfprintf_internal_r+0x1240>
  8088cc:	3027883a 	mov	r19,r6
  8088d0:	303be50e 	bge	r6,zero,807868 <___vfprintf_internal_r+0x204>
  8088d4:	04ffffc4 	movi	r19,-1
  8088d8:	003be306 	br	807868 <___vfprintf_internal_r+0x204>
  8088dc:	d8000405 	stb	zero,16(sp)
  8088e0:	39800017 	ldw	r6,0(r7)
  8088e4:	39c00104 	addi	r7,r7,4
  8088e8:	d9c14015 	stw	r7,1280(sp)
  8088ec:	d9814115 	stw	r6,1284(sp)
  8088f0:	3001c926 	beq	r6,zero,809018 <___vfprintf_internal_r+0x19b4>
  8088f4:	98000e16 	blt	r19,zero,808930 <___vfprintf_internal_r+0x12cc>
  8088f8:	d9014117 	ldw	r4,1284(sp)
  8088fc:	000b883a 	mov	r5,zero
  808900:	980d883a 	mov	r6,r19
  808904:	080b60c0 	call	80b60c <memchr>
  808908:	10025926 	beq	r2,zero,809270 <___vfprintf_internal_r+0x1c0c>
  80890c:	d8c14117 	ldw	r3,1284(sp)
  808910:	10cfc83a 	sub	r7,r2,r3
  808914:	99c19e16 	blt	r19,r7,808f90 <___vfprintf_internal_r+0x192c>
  808918:	d9c14515 	stw	r7,1300(sp)
  80891c:	38000916 	blt	r7,zero,808944 <___vfprintf_internal_r+0x12e0>
  808920:	d8014615 	stw	zero,1304(sp)
  808924:	003df106 	br	8080ec <___vfprintf_internal_r+0xa88>
  808928:	b8c00007 	ldb	r3,0(r23)
  80892c:	003bcc06 	br	807860 <___vfprintf_internal_r+0x1fc>
  808930:	d9014117 	ldw	r4,1284(sp)
  808934:	080d1b80 	call	80d1b8 <strlen>
  808938:	d8814515 	stw	r2,1300(sp)
  80893c:	100f883a 	mov	r7,r2
  808940:	103ff70e 	bge	r2,zero,808920 <___vfprintf_internal_r+0x12bc>
  808944:	d8014515 	stw	zero,1300(sp)
  808948:	d8014615 	stw	zero,1304(sp)
  80894c:	003de706 	br	8080ec <___vfprintf_internal_r+0xa88>
  808950:	20c03fcc 	andi	r3,r4,255
  808954:	00800044 	movi	r2,1
  808958:	18802d26 	beq	r3,r2,808a10 <___vfprintf_internal_r+0x13ac>
  80895c:	18800e36 	bltu	r3,r2,808998 <___vfprintf_internal_r+0x1334>
  808960:	00800084 	movi	r2,2
  808964:	1880fa26 	beq	r3,r2,808d50 <___vfprintf_internal_r+0x16ec>
  808968:	01002074 	movhi	r4,129
  80896c:	210b2504 	addi	r4,r4,11412
  808970:	080d1b80 	call	80d1b8 <strlen>
  808974:	100f883a 	mov	r7,r2
  808978:	dcc14515 	stw	r19,1300(sp)
  80897c:	9880010e 	bge	r19,r2,808984 <___vfprintf_internal_r+0x1320>
  808980:	d8814515 	stw	r2,1300(sp)
  808984:	00802074 	movhi	r2,129
  808988:	108b2504 	addi	r2,r2,11412
  80898c:	dcc14615 	stw	r19,1304(sp)
  808990:	d8814115 	stw	r2,1284(sp)
  808994:	003dd506 	br	8080ec <___vfprintf_internal_r+0xa88>
  808998:	d9401904 	addi	r5,sp,100
  80899c:	dd000f04 	addi	r20,sp,60
  8089a0:	d9414115 	stw	r5,1284(sp)
  8089a4:	880a977a 	slli	r5,r17,29
  8089a8:	d9814117 	ldw	r6,1284(sp)
  8089ac:	8004d0fa 	srli	r2,r16,3
  8089b0:	8806d0fa 	srli	r3,r17,3
  8089b4:	810001cc 	andi	r4,r16,7
  8089b8:	2884b03a 	or	r2,r5,r2
  8089bc:	31bfffc4 	addi	r6,r6,-1
  8089c0:	21000c04 	addi	r4,r4,48
  8089c4:	d9814115 	stw	r6,1284(sp)
  8089c8:	10cab03a 	or	r5,r2,r3
  8089cc:	31000005 	stb	r4,0(r6)
  8089d0:	1021883a 	mov	r16,r2
  8089d4:	1823883a 	mov	r17,r3
  8089d8:	283ff21e 	bne	r5,zero,8089a4 <___vfprintf_internal_r+0x1340>
  8089dc:	d8c14c17 	ldw	r3,1328(sp)
  8089e0:	1880004c 	andi	r2,r3,1
  8089e4:	1005003a 	cmpeq	r2,r2,zero
  8089e8:	103db91e 	bne	r2,zero,8080d0 <___vfprintf_internal_r+0xa6c>
  8089ec:	20803fcc 	andi	r2,r4,255
  8089f0:	1080201c 	xori	r2,r2,128
  8089f4:	10bfe004 	addi	r2,r2,-128
  8089f8:	00c00c04 	movi	r3,48
  8089fc:	10fdb426 	beq	r2,r3,8080d0 <___vfprintf_internal_r+0xa6c>
  808a00:	31bfffc4 	addi	r6,r6,-1
  808a04:	d9814115 	stw	r6,1284(sp)
  808a08:	30c00005 	stb	r3,0(r6)
  808a0c:	003db006 	br	8080d0 <___vfprintf_internal_r+0xa6c>
  808a10:	88800068 	cmpgeui	r2,r17,1
  808a14:	10002c1e 	bne	r2,zero,808ac8 <___vfprintf_internal_r+0x1464>
  808a18:	8800021e 	bne	r17,zero,808a24 <___vfprintf_internal_r+0x13c0>
  808a1c:	00800244 	movi	r2,9
  808a20:	14002936 	bltu	r2,r16,808ac8 <___vfprintf_internal_r+0x1464>
  808a24:	d90018c4 	addi	r4,sp,99
  808a28:	dd000f04 	addi	r20,sp,60
  808a2c:	d9014115 	stw	r4,1284(sp)
  808a30:	d9014117 	ldw	r4,1284(sp)
  808a34:	80800c04 	addi	r2,r16,48
  808a38:	20800005 	stb	r2,0(r4)
  808a3c:	003da406 	br	8080d0 <___vfprintf_internal_r+0xa6c>
  808a40:	dc400d17 	ldw	r17,52(sp)
  808a44:	07002074 	movhi	fp,129
  808a48:	e70b2c84 	addi	fp,fp,11442
  808a4c:	9425883a 	add	r18,r18,r16
  808a50:	8c400044 	addi	r17,r17,1
  808a54:	008001c4 	movi	r2,7
  808a58:	1f000015 	stw	fp,0(r3)
  808a5c:	1c000115 	stw	r16,4(r3)
  808a60:	dc800e15 	stw	r18,56(sp)
  808a64:	dc400d15 	stw	r17,52(sp)
  808a68:	147de216 	blt	r2,r17,8081f4 <___vfprintf_internal_r+0xb90>
  808a6c:	18c00204 	addi	r3,r3,8
  808a70:	003c7a06 	br	807c5c <___vfprintf_internal_r+0x5f8>
  808a74:	01000084 	movi	r4,2
  808a78:	d8000405 	stb	zero,16(sp)
  808a7c:	003d8706 	br	80809c <___vfprintf_internal_r+0xa38>
  808a80:	d9814c17 	ldw	r6,1328(sp)
  808a84:	30c4703a 	and	r2,r6,r3
  808a88:	1005003a 	cmpeq	r2,r2,zero
  808a8c:	103cb926 	beq	r2,zero,807d74 <___vfprintf_internal_r+0x710>
  808a90:	d9014117 	ldw	r4,1284(sp)
  808a94:	94800044 	addi	r18,r18,1
  808a98:	8c400044 	addi	r17,r17,1
  808a9c:	008001c4 	movi	r2,7
  808aa0:	a9000015 	stw	r4,0(r21)
  808aa4:	a8c00115 	stw	r3,4(r21)
  808aa8:	dc800e15 	stw	r18,56(sp)
  808aac:	dc400d15 	stw	r17,52(sp)
  808ab0:	147e6616 	blt	r2,r17,80844c <___vfprintf_internal_r+0xde8>
  808ab4:	acc00204 	addi	r19,r21,8
  808ab8:	003cd706 	br	807e18 <___vfprintf_internal_r+0x7b4>
  808abc:	07002074 	movhi	fp,129
  808ac0:	e70b2c84 	addi	fp,fp,11442
  808ac4:	003c4f06 	br	807c04 <___vfprintf_internal_r+0x5a0>
  808ac8:	dd000f04 	addi	r20,sp,60
  808acc:	dc801904 	addi	r18,sp,100
  808ad0:	8009883a 	mov	r4,r16
  808ad4:	880b883a 	mov	r5,r17
  808ad8:	01800284 	movi	r6,10
  808adc:	000f883a 	mov	r7,zero
  808ae0:	080da080 	call	80da08 <__umoddi3>
  808ae4:	12000c04 	addi	r8,r2,48
  808ae8:	94bfffc4 	addi	r18,r18,-1
  808aec:	8009883a 	mov	r4,r16
  808af0:	880b883a 	mov	r5,r17
  808af4:	01800284 	movi	r6,10
  808af8:	000f883a 	mov	r7,zero
  808afc:	92000005 	stb	r8,0(r18)
  808b00:	080d42c0 	call	80d42c <__udivdi3>
  808b04:	1009883a 	mov	r4,r2
  808b08:	1021883a 	mov	r16,r2
  808b0c:	18800068 	cmpgeui	r2,r3,1
  808b10:	1823883a 	mov	r17,r3
  808b14:	103fee1e 	bne	r2,zero,808ad0 <___vfprintf_internal_r+0x146c>
  808b18:	1800021e 	bne	r3,zero,808b24 <___vfprintf_internal_r+0x14c0>
  808b1c:	00800244 	movi	r2,9
  808b20:	113feb36 	bltu	r2,r4,808ad0 <___vfprintf_internal_r+0x146c>
  808b24:	94bfffc4 	addi	r18,r18,-1
  808b28:	dc814115 	stw	r18,1284(sp)
  808b2c:	003fc006 	br	808a30 <___vfprintf_internal_r+0x13cc>
  808b30:	d9014c17 	ldw	r4,1328(sp)
  808b34:	2080004c 	andi	r2,r4,1
  808b38:	10009a1e 	bne	r2,zero,808da4 <___vfprintf_internal_r+0x1740>
  808b3c:	d9401904 	addi	r5,sp,100
  808b40:	dd000f04 	addi	r20,sp,60
  808b44:	d9414115 	stw	r5,1284(sp)
  808b48:	003d6106 	br	8080d0 <___vfprintf_internal_r+0xa6c>
  808b4c:	d9014f17 	ldw	r4,1340(sp)
  808b50:	b00b883a 	mov	r5,r22
  808b54:	d9800c04 	addi	r6,sp,48
  808b58:	080760c0 	call	80760c <__sprint_r>
  808b5c:	103c791e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808b60:	dc800e17 	ldw	r18,56(sp)
  808b64:	d8c01904 	addi	r3,sp,100
  808b68:	003cff06 	br	807f68 <___vfprintf_internal_r+0x904>
  808b6c:	d8c14c17 	ldw	r3,1328(sp)
  808b70:	1880040c 	andi	r2,r3,16
  808b74:	1000711e 	bne	r2,zero,808d3c <___vfprintf_internal_r+0x16d8>
  808b78:	d9014c17 	ldw	r4,1328(sp)
  808b7c:	2080100c 	andi	r2,r4,64
  808b80:	10006e26 	beq	r2,zero,808d3c <___vfprintf_internal_r+0x16d8>
  808b84:	3c00000b 	ldhu	r16,0(r7)
  808b88:	0023883a 	mov	r17,zero
  808b8c:	39c00104 	addi	r7,r7,4
  808b90:	d9c14015 	stw	r7,1280(sp)
  808b94:	003f0006 	br	808798 <___vfprintf_internal_r+0x1134>
  808b98:	dc400d17 	ldw	r17,52(sp)
  808b9c:	07002074 	movhi	fp,129
  808ba0:	e70b2c84 	addi	fp,fp,11442
  808ba4:	9425883a 	add	r18,r18,r16
  808ba8:	8c400044 	addi	r17,r17,1
  808bac:	008001c4 	movi	r2,7
  808bb0:	1f000015 	stw	fp,0(r3)
  808bb4:	1c000115 	stw	r16,4(r3)
  808bb8:	dc800e15 	stw	r18,56(sp)
  808bbc:	dc400d15 	stw	r17,52(sp)
  808bc0:	147d7616 	blt	r2,r17,80819c <___vfprintf_internal_r+0xb38>
  808bc4:	18c00204 	addi	r3,r3,8
  808bc8:	003d7b06 	br	8081b8 <___vfprintf_internal_r+0xb54>
  808bcc:	dc800e17 	ldw	r18,56(sp)
  808bd0:	dc400d17 	ldw	r17,52(sp)
  808bd4:	07002074 	movhi	fp,129
  808bd8:	e70b3084 	addi	fp,fp,11458
  808bdc:	003bc006 	br	807ae0 <___vfprintf_internal_r+0x47c>
  808be0:	d9014f17 	ldw	r4,1340(sp)
  808be4:	b00b883a 	mov	r5,r22
  808be8:	d9800c04 	addi	r6,sp,48
  808bec:	080760c0 	call	80760c <__sprint_r>
  808bf0:	103c541e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808bf4:	dc800e17 	ldw	r18,56(sp)
  808bf8:	d8c01904 	addi	r3,sp,100
  808bfc:	003ce906 	br	807fa4 <___vfprintf_internal_r+0x940>
  808c00:	3c000017 	ldw	r16,0(r7)
  808c04:	0009883a 	mov	r4,zero
  808c08:	39c00104 	addi	r7,r7,4
  808c0c:	0023883a 	mov	r17,zero
  808c10:	d9c14015 	stw	r7,1280(sp)
  808c14:	d8000405 	stb	zero,16(sp)
  808c18:	003d2006 	br	80809c <___vfprintf_internal_r+0xa38>
  808c1c:	38800017 	ldw	r2,0(r7)
  808c20:	39c00104 	addi	r7,r7,4
  808c24:	d9c14015 	stw	r7,1280(sp)
  808c28:	1023d7fa 	srai	r17,r2,31
  808c2c:	1021883a 	mov	r16,r2
  808c30:	003d1806 	br	808094 <___vfprintf_internal_r+0xa30>
  808c34:	3c000017 	ldw	r16,0(r7)
  808c38:	01000044 	movi	r4,1
  808c3c:	39c00104 	addi	r7,r7,4
  808c40:	0023883a 	mov	r17,zero
  808c44:	d9c14015 	stw	r7,1280(sp)
  808c48:	d8000405 	stb	zero,16(sp)
  808c4c:	003d1306 	br	80809c <___vfprintf_internal_r+0xa38>
  808c50:	00802074 	movhi	r2,129
  808c54:	108b2c04 	addi	r2,r2,11440
  808c58:	94800044 	addi	r18,r18,1
  808c5c:	8c400044 	addi	r17,r17,1
  808c60:	a8800015 	stw	r2,0(r21)
  808c64:	00c00044 	movi	r3,1
  808c68:	008001c4 	movi	r2,7
  808c6c:	a8c00115 	stw	r3,4(r21)
  808c70:	dc800e15 	stw	r18,56(sp)
  808c74:	dc400d15 	stw	r17,52(sp)
  808c78:	1440ca16 	blt	r2,r17,808fa4 <___vfprintf_internal_r+0x1940>
  808c7c:	a8c00204 	addi	r3,r21,8
  808c80:	2000061e 	bne	r4,zero,808c9c <___vfprintf_internal_r+0x1638>
  808c84:	d9414717 	ldw	r5,1308(sp)
  808c88:	2800041e 	bne	r5,zero,808c9c <___vfprintf_internal_r+0x1638>
  808c8c:	d9814c17 	ldw	r6,1328(sp)
  808c90:	3080004c 	andi	r2,r6,1
  808c94:	1005003a 	cmpeq	r2,r2,zero
  808c98:	103bf01e 	bne	r2,zero,807c5c <___vfprintf_internal_r+0x5f8>
  808c9c:	00800044 	movi	r2,1
  808ca0:	dc400d17 	ldw	r17,52(sp)
  808ca4:	18800115 	stw	r2,4(r3)
  808ca8:	d8814917 	ldw	r2,1316(sp)
  808cac:	94800044 	addi	r18,r18,1
  808cb0:	8c400044 	addi	r17,r17,1
  808cb4:	18800015 	stw	r2,0(r3)
  808cb8:	008001c4 	movi	r2,7
  808cbc:	dc800e15 	stw	r18,56(sp)
  808cc0:	dc400d15 	stw	r17,52(sp)
  808cc4:	1440ca16 	blt	r2,r17,808ff0 <___vfprintf_internal_r+0x198c>
  808cc8:	18c00204 	addi	r3,r3,8
  808ccc:	0121c83a 	sub	r16,zero,r4
  808cd0:	0400500e 	bge	zero,r16,808e14 <___vfprintf_internal_r+0x17b0>
  808cd4:	00800404 	movi	r2,16
  808cd8:	1400800e 	bge	r2,r16,808edc <___vfprintf_internal_r+0x1878>
  808cdc:	1027883a 	mov	r19,r2
  808ce0:	07002074 	movhi	fp,129
  808ce4:	e70b2c84 	addi	fp,fp,11442
  808ce8:	050001c4 	movi	r20,7
  808cec:	00000306 	br	808cfc <___vfprintf_internal_r+0x1698>
  808cf0:	18c00204 	addi	r3,r3,8
  808cf4:	843ffc04 	addi	r16,r16,-16
  808cf8:	9c007a0e 	bge	r19,r16,808ee4 <___vfprintf_internal_r+0x1880>
  808cfc:	94800404 	addi	r18,r18,16
  808d00:	8c400044 	addi	r17,r17,1
  808d04:	1f000015 	stw	fp,0(r3)
  808d08:	1cc00115 	stw	r19,4(r3)
  808d0c:	dc800e15 	stw	r18,56(sp)
  808d10:	dc400d15 	stw	r17,52(sp)
  808d14:	a47ff60e 	bge	r20,r17,808cf0 <___vfprintf_internal_r+0x168c>
  808d18:	d9014f17 	ldw	r4,1340(sp)
  808d1c:	b00b883a 	mov	r5,r22
  808d20:	d9800c04 	addi	r6,sp,48
  808d24:	080760c0 	call	80760c <__sprint_r>
  808d28:	103c061e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808d2c:	dc800e17 	ldw	r18,56(sp)
  808d30:	dc400d17 	ldw	r17,52(sp)
  808d34:	d8c01904 	addi	r3,sp,100
  808d38:	003fee06 	br	808cf4 <___vfprintf_internal_r+0x1690>
  808d3c:	3c000017 	ldw	r16,0(r7)
  808d40:	0023883a 	mov	r17,zero
  808d44:	39c00104 	addi	r7,r7,4
  808d48:	d9c14015 	stw	r7,1280(sp)
  808d4c:	003e9206 	br	808798 <___vfprintf_internal_r+0x1134>
  808d50:	d9401904 	addi	r5,sp,100
  808d54:	dd000f04 	addi	r20,sp,60
  808d58:	d9414115 	stw	r5,1284(sp)
  808d5c:	d9814417 	ldw	r6,1296(sp)
  808d60:	880a973a 	slli	r5,r17,28
  808d64:	8004d13a 	srli	r2,r16,4
  808d68:	810003cc 	andi	r4,r16,15
  808d6c:	3109883a 	add	r4,r6,r4
  808d70:	2884b03a 	or	r2,r5,r2
  808d74:	21400003 	ldbu	r5,0(r4)
  808d78:	d9014117 	ldw	r4,1284(sp)
  808d7c:	8806d13a 	srli	r3,r17,4
  808d80:	1021883a 	mov	r16,r2
  808d84:	213fffc4 	addi	r4,r4,-1
  808d88:	d9014115 	stw	r4,1284(sp)
  808d8c:	d9814117 	ldw	r6,1284(sp)
  808d90:	10c8b03a 	or	r4,r2,r3
  808d94:	1823883a 	mov	r17,r3
  808d98:	31400005 	stb	r5,0(r6)
  808d9c:	203fef1e 	bne	r4,zero,808d5c <___vfprintf_internal_r+0x16f8>
  808da0:	003ccb06 	br	8080d0 <___vfprintf_internal_r+0xa6c>
  808da4:	00800c04 	movi	r2,48
  808da8:	d98018c4 	addi	r6,sp,99
  808dac:	dd000f04 	addi	r20,sp,60
  808db0:	d88018c5 	stb	r2,99(sp)
  808db4:	d9814115 	stw	r6,1284(sp)
  808db8:	003cc506 	br	8080d0 <___vfprintf_internal_r+0xa6c>
  808dbc:	dc400d17 	ldw	r17,52(sp)
  808dc0:	07002074 	movhi	fp,129
  808dc4:	e70b3084 	addi	fp,fp,11458
  808dc8:	003bc706 	br	807ce8 <___vfprintf_internal_r+0x684>
  808dcc:	d9414c17 	ldw	r5,1328(sp)
  808dd0:	2880040c 	andi	r2,r5,16
  808dd4:	10007c26 	beq	r2,zero,808fc8 <___vfprintf_internal_r+0x1964>
  808dd8:	38800017 	ldw	r2,0(r7)
  808ddc:	39c00104 	addi	r7,r7,4
  808de0:	d9c14015 	stw	r7,1280(sp)
  808de4:	d9814b17 	ldw	r6,1324(sp)
  808de8:	d9c14017 	ldw	r7,1280(sp)
  808dec:	11800015 	stw	r6,0(r2)
  808df0:	003a7806 	br	8077d4 <___vfprintf_internal_r+0x170>
  808df4:	d9014f17 	ldw	r4,1340(sp)
  808df8:	b00b883a 	mov	r5,r22
  808dfc:	d9800c04 	addi	r6,sp,48
  808e00:	080760c0 	call	80760c <__sprint_r>
  808e04:	103bcf1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808e08:	dc800e17 	ldw	r18,56(sp)
  808e0c:	dc400d17 	ldw	r17,52(sp)
  808e10:	d8c01904 	addi	r3,sp,100
  808e14:	d9014717 	ldw	r4,1308(sp)
  808e18:	d9414117 	ldw	r5,1284(sp)
  808e1c:	8c400044 	addi	r17,r17,1
  808e20:	9125883a 	add	r18,r18,r4
  808e24:	008001c4 	movi	r2,7
  808e28:	19400015 	stw	r5,0(r3)
  808e2c:	19000115 	stw	r4,4(r3)
  808e30:	dc800e15 	stw	r18,56(sp)
  808e34:	dc400d15 	stw	r17,52(sp)
  808e38:	147cee16 	blt	r2,r17,8081f4 <___vfprintf_internal_r+0xb90>
  808e3c:	18c00204 	addi	r3,r3,8
  808e40:	003b8606 	br	807c5c <___vfprintf_internal_r+0x5f8>
  808e44:	38c00017 	ldw	r3,0(r7)
  808e48:	39000204 	addi	r4,r7,8
  808e4c:	d9014015 	stw	r4,1280(sp)
  808e50:	d8c14215 	stw	r3,1288(sp)
  808e54:	39c00117 	ldw	r7,4(r7)
  808e58:	d9c14315 	stw	r7,1292(sp)
  808e5c:	003e2006 	br	8086e0 <___vfprintf_internal_r+0x107c>
  808e60:	0005883a 	mov	r2,zero
  808e64:	1409c83a 	sub	r4,r2,r16
  808e68:	1105803a 	cmpltu	r2,r2,r4
  808e6c:	044bc83a 	sub	r5,zero,r17
  808e70:	2885c83a 	sub	r2,r5,r2
  808e74:	2021883a 	mov	r16,r4
  808e78:	1023883a 	mov	r17,r2
  808e7c:	01000044 	movi	r4,1
  808e80:	00800b44 	movi	r2,45
  808e84:	d8800405 	stb	r2,16(sp)
  808e88:	003c8406 	br	80809c <___vfprintf_internal_r+0xa38>
  808e8c:	d9014f17 	ldw	r4,1340(sp)
  808e90:	b00b883a 	mov	r5,r22
  808e94:	d9800c04 	addi	r6,sp,48
  808e98:	080760c0 	call	80760c <__sprint_r>
  808e9c:	103ba91e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808ea0:	dc800e17 	ldw	r18,56(sp)
  808ea4:	dc400d17 	ldw	r17,52(sp)
  808ea8:	d9000517 	ldw	r4,20(sp)
  808eac:	d9401904 	addi	r5,sp,100
  808eb0:	003da706 	br	808550 <___vfprintf_internal_r+0xeec>
  808eb4:	d9014f17 	ldw	r4,1340(sp)
  808eb8:	b00b883a 	mov	r5,r22
  808ebc:	d9800c04 	addi	r6,sp,48
  808ec0:	080760c0 	call	80760c <__sprint_r>
  808ec4:	103b9f1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808ec8:	dc800e17 	ldw	r18,56(sp)
  808ecc:	dc400d17 	ldw	r17,52(sp)
  808ed0:	d9000517 	ldw	r4,20(sp)
  808ed4:	d8c01904 	addi	r3,sp,100
  808ed8:	003d9106 	br	808520 <___vfprintf_internal_r+0xebc>
  808edc:	07002074 	movhi	fp,129
  808ee0:	e70b2c84 	addi	fp,fp,11442
  808ee4:	9425883a 	add	r18,r18,r16
  808ee8:	8c400044 	addi	r17,r17,1
  808eec:	008001c4 	movi	r2,7
  808ef0:	1f000015 	stw	fp,0(r3)
  808ef4:	1c000115 	stw	r16,4(r3)
  808ef8:	dc800e15 	stw	r18,56(sp)
  808efc:	dc400d15 	stw	r17,52(sp)
  808f00:	147fbc16 	blt	r2,r17,808df4 <___vfprintf_internal_r+0x1790>
  808f04:	18c00204 	addi	r3,r3,8
  808f08:	003fc206 	br	808e14 <___vfprintf_internal_r+0x17b0>
  808f0c:	d9014f17 	ldw	r4,1340(sp)
  808f10:	b00b883a 	mov	r5,r22
  808f14:	d9800c04 	addi	r6,sp,48
  808f18:	080760c0 	call	80760c <__sprint_r>
  808f1c:	103b891e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808f20:	dc800e17 	ldw	r18,56(sp)
  808f24:	d9000517 	ldw	r4,20(sp)
  808f28:	d8c01904 	addi	r3,sp,100
  808f2c:	003d0206 	br	808338 <___vfprintf_internal_r+0xcd4>
  808f30:	07002074 	movhi	fp,129
  808f34:	e70b2c84 	addi	fp,fp,11442
  808f38:	003be406 	br	807ecc <___vfprintf_internal_r+0x868>
  808f3c:	00802074 	movhi	r2,129
  808f40:	108b1b04 	addi	r2,r2,11372
  808f44:	d8814115 	stw	r2,1284(sp)
  808f48:	003df506 	br	808720 <___vfprintf_internal_r+0x10bc>
  808f4c:	d9014217 	ldw	r4,1288(sp)
  808f50:	d9414317 	ldw	r5,1292(sp)
  808f54:	080394c0 	call	80394c <__isnand>
  808f58:	10003926 	beq	r2,zero,809040 <___vfprintf_internal_r+0x19dc>
  808f5c:	d9414d17 	ldw	r5,1332(sp)
  808f60:	008011c4 	movi	r2,71
  808f64:	1140ce16 	blt	r2,r5,8092a0 <___vfprintf_internal_r+0x1c3c>
  808f68:	01802074 	movhi	r6,129
  808f6c:	318b1c04 	addi	r6,r6,11376
  808f70:	d9814115 	stw	r6,1284(sp)
  808f74:	003dea06 	br	808720 <___vfprintf_internal_r+0x10bc>
  808f78:	d9014c17 	ldw	r4,1328(sp)
  808f7c:	bdc00044 	addi	r23,r23,1
  808f80:	b8c00007 	ldb	r3,0(r23)
  808f84:	21000814 	ori	r4,r4,32
  808f88:	d9014c15 	stw	r4,1328(sp)
  808f8c:	003a3406 	br	807860 <___vfprintf_internal_r+0x1fc>
  808f90:	dcc14515 	stw	r19,1300(sp)
  808f94:	98011016 	blt	r19,zero,8093d8 <___vfprintf_internal_r+0x1d74>
  808f98:	980f883a 	mov	r7,r19
  808f9c:	d8014615 	stw	zero,1304(sp)
  808fa0:	003c5206 	br	8080ec <___vfprintf_internal_r+0xa88>
  808fa4:	d9014f17 	ldw	r4,1340(sp)
  808fa8:	b00b883a 	mov	r5,r22
  808fac:	d9800c04 	addi	r6,sp,48
  808fb0:	080760c0 	call	80760c <__sprint_r>
  808fb4:	103b631e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  808fb8:	dc800e17 	ldw	r18,56(sp)
  808fbc:	d9000517 	ldw	r4,20(sp)
  808fc0:	d8c01904 	addi	r3,sp,100
  808fc4:	003f2e06 	br	808c80 <___vfprintf_internal_r+0x161c>
  808fc8:	d8c14c17 	ldw	r3,1328(sp)
  808fcc:	1880100c 	andi	r2,r3,64
  808fd0:	1000a026 	beq	r2,zero,809254 <___vfprintf_internal_r+0x1bf0>
  808fd4:	38800017 	ldw	r2,0(r7)
  808fd8:	39c00104 	addi	r7,r7,4
  808fdc:	d9c14015 	stw	r7,1280(sp)
  808fe0:	d9014b17 	ldw	r4,1324(sp)
  808fe4:	d9c14017 	ldw	r7,1280(sp)
  808fe8:	1100000d 	sth	r4,0(r2)
  808fec:	0039f906 	br	8077d4 <___vfprintf_internal_r+0x170>
  808ff0:	d9014f17 	ldw	r4,1340(sp)
  808ff4:	b00b883a 	mov	r5,r22
  808ff8:	d9800c04 	addi	r6,sp,48
  808ffc:	080760c0 	call	80760c <__sprint_r>
  809000:	103b501e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  809004:	dc800e17 	ldw	r18,56(sp)
  809008:	dc400d17 	ldw	r17,52(sp)
  80900c:	d9000517 	ldw	r4,20(sp)
  809010:	d8c01904 	addi	r3,sp,100
  809014:	003f2d06 	br	808ccc <___vfprintf_internal_r+0x1668>
  809018:	00800184 	movi	r2,6
  80901c:	14c09a36 	bltu	r2,r19,809288 <___vfprintf_internal_r+0x1c24>
  809020:	dcc14515 	stw	r19,1300(sp)
  809024:	9800010e 	bge	r19,zero,80902c <___vfprintf_internal_r+0x19c8>
  809028:	d8014515 	stw	zero,1300(sp)
  80902c:	00802074 	movhi	r2,129
  809030:	108b1e04 	addi	r2,r2,11384
  809034:	980f883a 	mov	r7,r19
  809038:	d8814115 	stw	r2,1284(sp)
  80903c:	003a7806 	br	807a20 <___vfprintf_internal_r+0x3bc>
  809040:	00bfffc4 	movi	r2,-1
  809044:	9880e226 	beq	r19,r2,8093d0 <___vfprintf_internal_r+0x1d6c>
  809048:	d9414d17 	ldw	r5,1332(sp)
  80904c:	008019c4 	movi	r2,103
  809050:	2880dc26 	beq	r5,r2,8093c4 <___vfprintf_internal_r+0x1d60>
  809054:	008011c4 	movi	r2,71
  809058:	2880da26 	beq	r5,r2,8093c4 <___vfprintf_internal_r+0x1d60>
  80905c:	d9414c17 	ldw	r5,1328(sp)
  809060:	d9014317 	ldw	r4,1292(sp)
  809064:	d9814217 	ldw	r6,1288(sp)
  809068:	29404014 	ori	r5,r5,256
  80906c:	d9414c15 	stw	r5,1328(sp)
  809070:	2000cc16 	blt	r4,zero,8093a4 <___vfprintf_internal_r+0x1d40>
  809074:	3021883a 	mov	r16,r6
  809078:	2023883a 	mov	r17,r4
  80907c:	0039883a 	mov	fp,zero
  809080:	d9414d17 	ldw	r5,1332(sp)
  809084:	00801984 	movi	r2,102
  809088:	2880b726 	beq	r5,r2,809368 <___vfprintf_internal_r+0x1d04>
  80908c:	00801184 	movi	r2,70
  809090:	2880b526 	beq	r5,r2,809368 <___vfprintf_internal_r+0x1d04>
  809094:	00801944 	movi	r2,101
  809098:	2880c826 	beq	r5,r2,8093bc <___vfprintf_internal_r+0x1d58>
  80909c:	00801144 	movi	r2,69
  8090a0:	2880c626 	beq	r5,r2,8093bc <___vfprintf_internal_r+0x1d58>
  8090a4:	9829883a 	mov	r20,r19
  8090a8:	d9014f17 	ldw	r4,1340(sp)
  8090ac:	d8800504 	addi	r2,sp,20
  8090b0:	880d883a 	mov	r6,r17
  8090b4:	d8800115 	stw	r2,4(sp)
  8090b8:	d8c00604 	addi	r3,sp,24
  8090bc:	d8800704 	addi	r2,sp,28
  8090c0:	800b883a 	mov	r5,r16
  8090c4:	01c00084 	movi	r7,2
  8090c8:	d8c00215 	stw	r3,8(sp)
  8090cc:	d8800315 	stw	r2,12(sp)
  8090d0:	dd000015 	stw	r20,0(sp)
  8090d4:	08099700 	call	809970 <_dtoa_r>
  8090d8:	d9814d17 	ldw	r6,1332(sp)
  8090dc:	d8814115 	stw	r2,1284(sp)
  8090e0:	008019c4 	movi	r2,103
  8090e4:	30809526 	beq	r6,r2,80933c <___vfprintf_internal_r+0x1cd8>
  8090e8:	d8c14d17 	ldw	r3,1332(sp)
  8090ec:	008011c4 	movi	r2,71
  8090f0:	18809226 	beq	r3,r2,80933c <___vfprintf_internal_r+0x1cd8>
  8090f4:	d9414117 	ldw	r5,1284(sp)
  8090f8:	d9814d17 	ldw	r6,1332(sp)
  8090fc:	00801984 	movi	r2,102
  809100:	2d25883a 	add	r18,r5,r20
  809104:	30808626 	beq	r6,r2,809320 <___vfprintf_internal_r+0x1cbc>
  809108:	00801184 	movi	r2,70
  80910c:	30808426 	beq	r6,r2,809320 <___vfprintf_internal_r+0x1cbc>
  809110:	000d883a 	mov	r6,zero
  809114:	000f883a 	mov	r7,zero
  809118:	880b883a 	mov	r5,r17
  80911c:	8009883a 	mov	r4,r16
  809120:	08048c80 	call	8048c8 <__eqdf2>
  809124:	1000751e 	bne	r2,zero,8092fc <___vfprintf_internal_r+0x1c98>
  809128:	9005883a 	mov	r2,r18
  80912c:	dc800715 	stw	r18,28(sp)
  809130:	d9014117 	ldw	r4,1284(sp)
  809134:	d9414d17 	ldw	r5,1332(sp)
  809138:	00c019c4 	movi	r3,103
  80913c:	1125c83a 	sub	r18,r2,r4
  809140:	28c06826 	beq	r5,r3,8092e4 <___vfprintf_internal_r+0x1c80>
  809144:	008011c4 	movi	r2,71
  809148:	28806626 	beq	r5,r2,8092e4 <___vfprintf_internal_r+0x1c80>
  80914c:	d9000517 	ldw	r4,20(sp)
  809150:	d8c14d17 	ldw	r3,1332(sp)
  809154:	00801944 	movi	r2,101
  809158:	10c05516 	blt	r2,r3,8092b0 <___vfprintf_internal_r+0x1c4c>
  80915c:	213fffc4 	addi	r4,r4,-1
  809160:	d9000515 	stw	r4,20(sp)
  809164:	d8c00805 	stb	r3,32(sp)
  809168:	2021883a 	mov	r16,r4
  80916c:	2000c116 	blt	r4,zero,809474 <___vfprintf_internal_r+0x1e10>
  809170:	00800ac4 	movi	r2,43
  809174:	d8800845 	stb	r2,33(sp)
  809178:	00800244 	movi	r2,9
  80917c:	1400af0e 	bge	r2,r16,80943c <___vfprintf_internal_r+0x1dd8>
  809180:	1027883a 	mov	r19,r2
  809184:	dc400b84 	addi	r17,sp,46
  809188:	8009883a 	mov	r4,r16
  80918c:	01400284 	movi	r5,10
  809190:	080e2b00 	call	80e2b0 <__modsi3>
  809194:	10800c04 	addi	r2,r2,48
  809198:	8c7fffc4 	addi	r17,r17,-1
  80919c:	8009883a 	mov	r4,r16
  8091a0:	01400284 	movi	r5,10
  8091a4:	88800005 	stb	r2,0(r17)
  8091a8:	080e2500 	call	80e250 <__divsi3>
  8091ac:	1021883a 	mov	r16,r2
  8091b0:	98bff516 	blt	r19,r2,809188 <___vfprintf_internal_r+0x1b24>
  8091b4:	10c00c04 	addi	r3,r2,48
  8091b8:	d88009c4 	addi	r2,sp,39
  8091bc:	108001c4 	addi	r2,r2,7
  8091c0:	897fffc4 	addi	r5,r17,-1
  8091c4:	88ffffc5 	stb	r3,-1(r17)
  8091c8:	2880a72e 	bgeu	r5,r2,809468 <___vfprintf_internal_r+0x1e04>
  8091cc:	1009883a 	mov	r4,r2
  8091d0:	d9800804 	addi	r6,sp,32
  8091d4:	d8c00884 	addi	r3,sp,34
  8091d8:	28800003 	ldbu	r2,0(r5)
  8091dc:	29400044 	addi	r5,r5,1
  8091e0:	18800005 	stb	r2,0(r3)
  8091e4:	18c00044 	addi	r3,r3,1
  8091e8:	293ffb36 	bltu	r5,r4,8091d8 <___vfprintf_internal_r+0x1b74>
  8091ec:	1987c83a 	sub	r3,r3,r6
  8091f0:	00800044 	movi	r2,1
  8091f4:	d8c14815 	stw	r3,1312(sp)
  8091f8:	90cf883a 	add	r7,r18,r3
  8091fc:	1480960e 	bge	r2,r18,809458 <___vfprintf_internal_r+0x1df4>
  809200:	39c00044 	addi	r7,r7,1
  809204:	d9c14515 	stw	r7,1300(sp)
  809208:	38003416 	blt	r7,zero,8092dc <___vfprintf_internal_r+0x1c78>
  80920c:	e0803fcc 	andi	r2,fp,255
  809210:	1080201c 	xori	r2,r2,128
  809214:	10bfe004 	addi	r2,r2,-128
  809218:	10004e26 	beq	r2,zero,809354 <___vfprintf_internal_r+0x1cf0>
  80921c:	00800b44 	movi	r2,45
  809220:	dc814715 	stw	r18,1308(sp)
  809224:	d8014615 	stw	zero,1304(sp)
  809228:	d8800405 	stb	r2,16(sp)
  80922c:	003bb106 	br	8080f4 <___vfprintf_internal_r+0xa90>
  809230:	00800b44 	movi	r2,45
  809234:	d8800405 	stb	r2,16(sp)
  809238:	003d3306 	br	808708 <___vfprintf_internal_r+0x10a4>
  80923c:	d9014f17 	ldw	r4,1340(sp)
  809240:	b00b883a 	mov	r5,r22
  809244:	d9800c04 	addi	r6,sp,48
  809248:	080760c0 	call	80760c <__sprint_r>
  80924c:	103abd1e 	bne	r2,zero,807d44 <___vfprintf_internal_r+0x6e0>
  809250:	003abb06 	br	807d40 <___vfprintf_internal_r+0x6dc>
  809254:	38800017 	ldw	r2,0(r7)
  809258:	39c00104 	addi	r7,r7,4
  80925c:	d9c14015 	stw	r7,1280(sp)
  809260:	d9414b17 	ldw	r5,1324(sp)
  809264:	d9c14017 	ldw	r7,1280(sp)
  809268:	11400015 	stw	r5,0(r2)
  80926c:	00395906 	br	8077d4 <___vfprintf_internal_r+0x170>
  809270:	980f883a 	mov	r7,r19
  809274:	dcc14515 	stw	r19,1300(sp)
  809278:	d8014615 	stw	zero,1304(sp)
  80927c:	003b9b06 	br	8080ec <___vfprintf_internal_r+0xa88>
  809280:	0027883a 	mov	r19,zero
  809284:	00397806 	br	807868 <___vfprintf_internal_r+0x204>
  809288:	00c02074 	movhi	r3,129
  80928c:	18cb1e04 	addi	r3,r3,11384
  809290:	100f883a 	mov	r7,r2
  809294:	d8814515 	stw	r2,1300(sp)
  809298:	d8c14115 	stw	r3,1284(sp)
  80929c:	0039e006 	br	807a20 <___vfprintf_internal_r+0x3bc>
  8092a0:	00802074 	movhi	r2,129
  8092a4:	108b1d04 	addi	r2,r2,11380
  8092a8:	d8814115 	stw	r2,1284(sp)
  8092ac:	003d1c06 	br	808720 <___vfprintf_internal_r+0x10bc>
  8092b0:	d9414d17 	ldw	r5,1332(sp)
  8092b4:	00801984 	movi	r2,102
  8092b8:	28804926 	beq	r5,r2,8093e0 <___vfprintf_internal_r+0x1d7c>
  8092bc:	200f883a 	mov	r7,r4
  8092c0:	24805716 	blt	r4,r18,809420 <___vfprintf_internal_r+0x1dbc>
  8092c4:	d9414c17 	ldw	r5,1328(sp)
  8092c8:	2880004c 	andi	r2,r5,1
  8092cc:	10000126 	beq	r2,zero,8092d4 <___vfprintf_internal_r+0x1c70>
  8092d0:	21c00044 	addi	r7,r4,1
  8092d4:	d9c14515 	stw	r7,1300(sp)
  8092d8:	383fcc0e 	bge	r7,zero,80920c <___vfprintf_internal_r+0x1ba8>
  8092dc:	d8014515 	stw	zero,1300(sp)
  8092e0:	003fca06 	br	80920c <___vfprintf_internal_r+0x1ba8>
  8092e4:	d9000517 	ldw	r4,20(sp)
  8092e8:	00bfff04 	movi	r2,-4
  8092ec:	1100480e 	bge	r2,r4,809410 <___vfprintf_internal_r+0x1dac>
  8092f0:	99004716 	blt	r19,r4,809410 <___vfprintf_internal_r+0x1dac>
  8092f4:	d8c14d15 	stw	r3,1332(sp)
  8092f8:	003ff006 	br	8092bc <___vfprintf_internal_r+0x1c58>
  8092fc:	d8800717 	ldw	r2,28(sp)
  809300:	14bf8b2e 	bgeu	r2,r18,809130 <___vfprintf_internal_r+0x1acc>
  809304:	9007883a 	mov	r3,r18
  809308:	01000c04 	movi	r4,48
  80930c:	11000005 	stb	r4,0(r2)
  809310:	10800044 	addi	r2,r2,1
  809314:	d8800715 	stw	r2,28(sp)
  809318:	18bffc1e 	bne	r3,r2,80930c <___vfprintf_internal_r+0x1ca8>
  80931c:	003f8406 	br	809130 <___vfprintf_internal_r+0x1acc>
  809320:	d8814117 	ldw	r2,1284(sp)
  809324:	10c00007 	ldb	r3,0(r2)
  809328:	00800c04 	movi	r2,48
  80932c:	18805b26 	beq	r3,r2,80949c <___vfprintf_internal_r+0x1e38>
  809330:	d9000517 	ldw	r4,20(sp)
  809334:	9125883a 	add	r18,r18,r4
  809338:	003f7506 	br	809110 <___vfprintf_internal_r+0x1aac>
  80933c:	d9014c17 	ldw	r4,1328(sp)
  809340:	2080004c 	andi	r2,r4,1
  809344:	1005003a 	cmpeq	r2,r2,zero
  809348:	103f6a26 	beq	r2,zero,8090f4 <___vfprintf_internal_r+0x1a90>
  80934c:	d8800717 	ldw	r2,28(sp)
  809350:	003f7706 	br	809130 <___vfprintf_internal_r+0x1acc>
  809354:	d9c14515 	stw	r7,1300(sp)
  809358:	38004d16 	blt	r7,zero,809490 <___vfprintf_internal_r+0x1e2c>
  80935c:	dc814715 	stw	r18,1308(sp)
  809360:	d8014615 	stw	zero,1304(sp)
  809364:	003b6106 	br	8080ec <___vfprintf_internal_r+0xa88>
  809368:	d9014f17 	ldw	r4,1340(sp)
  80936c:	d8800504 	addi	r2,sp,20
  809370:	d8800115 	stw	r2,4(sp)
  809374:	d8c00604 	addi	r3,sp,24
  809378:	d8800704 	addi	r2,sp,28
  80937c:	800b883a 	mov	r5,r16
  809380:	880d883a 	mov	r6,r17
  809384:	01c000c4 	movi	r7,3
  809388:	d8c00215 	stw	r3,8(sp)
  80938c:	d8800315 	stw	r2,12(sp)
  809390:	dcc00015 	stw	r19,0(sp)
  809394:	9829883a 	mov	r20,r19
  809398:	08099700 	call	809970 <_dtoa_r>
  80939c:	d8814115 	stw	r2,1284(sp)
  8093a0:	003f5106 	br	8090e8 <___vfprintf_internal_r+0x1a84>
  8093a4:	d8c14217 	ldw	r3,1288(sp)
  8093a8:	d9014317 	ldw	r4,1292(sp)
  8093ac:	07000b44 	movi	fp,45
  8093b0:	1821883a 	mov	r16,r3
  8093b4:	2460003c 	xorhi	r17,r4,32768
  8093b8:	003f3106 	br	809080 <___vfprintf_internal_r+0x1a1c>
  8093bc:	9d000044 	addi	r20,r19,1
  8093c0:	003f3906 	br	8090a8 <___vfprintf_internal_r+0x1a44>
  8093c4:	983f251e 	bne	r19,zero,80905c <___vfprintf_internal_r+0x19f8>
  8093c8:	04c00044 	movi	r19,1
  8093cc:	003f2306 	br	80905c <___vfprintf_internal_r+0x19f8>
  8093d0:	04c00184 	movi	r19,6
  8093d4:	003f2106 	br	80905c <___vfprintf_internal_r+0x19f8>
  8093d8:	d8014515 	stw	zero,1300(sp)
  8093dc:	003eee06 	br	808f98 <___vfprintf_internal_r+0x1934>
  8093e0:	200f883a 	mov	r7,r4
  8093e4:	0100370e 	bge	zero,r4,8094c4 <___vfprintf_internal_r+0x1e60>
  8093e8:	9800031e 	bne	r19,zero,8093f8 <___vfprintf_internal_r+0x1d94>
  8093ec:	d9814c17 	ldw	r6,1328(sp)
  8093f0:	3080004c 	andi	r2,r6,1
  8093f4:	103fb726 	beq	r2,zero,8092d4 <___vfprintf_internal_r+0x1c70>
  8093f8:	20800044 	addi	r2,r4,1
  8093fc:	98a7883a 	add	r19,r19,r2
  809400:	dcc14515 	stw	r19,1300(sp)
  809404:	980f883a 	mov	r7,r19
  809408:	983f800e 	bge	r19,zero,80920c <___vfprintf_internal_r+0x1ba8>
  80940c:	003fb306 	br	8092dc <___vfprintf_internal_r+0x1c78>
  809410:	d9814d17 	ldw	r6,1332(sp)
  809414:	31bfff84 	addi	r6,r6,-2
  809418:	d9814d15 	stw	r6,1332(sp)
  80941c:	003f4c06 	br	809150 <___vfprintf_internal_r+0x1aec>
  809420:	0100180e 	bge	zero,r4,809484 <___vfprintf_internal_r+0x1e20>
  809424:	00800044 	movi	r2,1
  809428:	1485883a 	add	r2,r2,r18
  80942c:	d8814515 	stw	r2,1300(sp)
  809430:	100f883a 	mov	r7,r2
  809434:	103f750e 	bge	r2,zero,80920c <___vfprintf_internal_r+0x1ba8>
  809438:	003fa806 	br	8092dc <___vfprintf_internal_r+0x1c78>
  80943c:	80c00c04 	addi	r3,r16,48
  809440:	00800c04 	movi	r2,48
  809444:	d8c008c5 	stb	r3,35(sp)
  809448:	d9800804 	addi	r6,sp,32
  80944c:	d8c00904 	addi	r3,sp,36
  809450:	d8800885 	stb	r2,34(sp)
  809454:	003f6506 	br	8091ec <___vfprintf_internal_r+0x1b88>
  809458:	d9014c17 	ldw	r4,1328(sp)
  80945c:	2084703a 	and	r2,r4,r2
  809460:	103f9c26 	beq	r2,zero,8092d4 <___vfprintf_internal_r+0x1c70>
  809464:	003f6606 	br	809200 <___vfprintf_internal_r+0x1b9c>
  809468:	d9800804 	addi	r6,sp,32
  80946c:	d8c00884 	addi	r3,sp,34
  809470:	003f5e06 	br	8091ec <___vfprintf_internal_r+0x1b88>
  809474:	00800b44 	movi	r2,45
  809478:	0121c83a 	sub	r16,zero,r4
  80947c:	d8800845 	stb	r2,33(sp)
  809480:	003f3d06 	br	809178 <___vfprintf_internal_r+0x1b14>
  809484:	00800084 	movi	r2,2
  809488:	1105c83a 	sub	r2,r2,r4
  80948c:	003fe606 	br	809428 <___vfprintf_internal_r+0x1dc4>
  809490:	d8014515 	stw	zero,1300(sp)
  809494:	dc814715 	stw	r18,1308(sp)
  809498:	003fb106 	br	809360 <___vfprintf_internal_r+0x1cfc>
  80949c:	000d883a 	mov	r6,zero
  8094a0:	000f883a 	mov	r7,zero
  8094a4:	8009883a 	mov	r4,r16
  8094a8:	880b883a 	mov	r5,r17
  8094ac:	08049500 	call	804950 <__nedf2>
  8094b0:	103f9f26 	beq	r2,zero,809330 <___vfprintf_internal_r+0x1ccc>
  8094b4:	00800044 	movi	r2,1
  8094b8:	1509c83a 	sub	r4,r2,r20
  8094bc:	d9000515 	stw	r4,20(sp)
  8094c0:	003f9b06 	br	809330 <___vfprintf_internal_r+0x1ccc>
  8094c4:	98000d1e 	bne	r19,zero,8094fc <___vfprintf_internal_r+0x1e98>
  8094c8:	d8c14c17 	ldw	r3,1328(sp)
  8094cc:	1880004c 	andi	r2,r3,1
  8094d0:	10000a1e 	bne	r2,zero,8094fc <___vfprintf_internal_r+0x1e98>
  8094d4:	01000044 	movi	r4,1
  8094d8:	200f883a 	mov	r7,r4
  8094dc:	d9014515 	stw	r4,1300(sp)
  8094e0:	003f4a06 	br	80920c <___vfprintf_internal_r+0x1ba8>
  8094e4:	3cc00017 	ldw	r19,0(r7)
  8094e8:	39c00104 	addi	r7,r7,4
  8094ec:	983d0e0e 	bge	r19,zero,808928 <___vfprintf_internal_r+0x12c4>
  8094f0:	b8c00007 	ldb	r3,0(r23)
  8094f4:	04ffffc4 	movi	r19,-1
  8094f8:	0038d906 	br	807860 <___vfprintf_internal_r+0x1fc>
  8094fc:	9cc00084 	addi	r19,r19,2
  809500:	dcc14515 	stw	r19,1300(sp)
  809504:	980f883a 	mov	r7,r19
  809508:	983f400e 	bge	r19,zero,80920c <___vfprintf_internal_r+0x1ba8>
  80950c:	003f7306 	br	8092dc <___vfprintf_internal_r+0x1c78>

00809510 <__vfprintf_internal>:
  809510:	00802074 	movhi	r2,129
  809514:	10934c04 	addi	r2,r2,19760
  809518:	2013883a 	mov	r9,r4
  80951c:	11000017 	ldw	r4,0(r2)
  809520:	2805883a 	mov	r2,r5
  809524:	300f883a 	mov	r7,r6
  809528:	480b883a 	mov	r5,r9
  80952c:	100d883a 	mov	r6,r2
  809530:	08076641 	jmpi	807664 <___vfprintf_internal_r>

00809534 <_write_r>:
  809534:	defffd04 	addi	sp,sp,-12
  809538:	dc000015 	stw	r16,0(sp)
  80953c:	04002074 	movhi	r16,129
  809540:	841a7104 	addi	r16,r16,27076
  809544:	dc400115 	stw	r17,4(sp)
  809548:	80000015 	stw	zero,0(r16)
  80954c:	2023883a 	mov	r17,r4
  809550:	2809883a 	mov	r4,r5
  809554:	300b883a 	mov	r5,r6
  809558:	380d883a 	mov	r6,r7
  80955c:	dfc00215 	stw	ra,8(sp)
  809560:	080ef440 	call	80ef44 <write>
  809564:	1007883a 	mov	r3,r2
  809568:	00bfffc4 	movi	r2,-1
  80956c:	18800626 	beq	r3,r2,809588 <_write_r+0x54>
  809570:	1805883a 	mov	r2,r3
  809574:	dfc00217 	ldw	ra,8(sp)
  809578:	dc400117 	ldw	r17,4(sp)
  80957c:	dc000017 	ldw	r16,0(sp)
  809580:	dec00304 	addi	sp,sp,12
  809584:	f800283a 	ret
  809588:	80800017 	ldw	r2,0(r16)
  80958c:	103ff826 	beq	r2,zero,809570 <_write_r+0x3c>
  809590:	88800015 	stw	r2,0(r17)
  809594:	1805883a 	mov	r2,r3
  809598:	dfc00217 	ldw	ra,8(sp)
  80959c:	dc400117 	ldw	r17,4(sp)
  8095a0:	dc000017 	ldw	r16,0(sp)
  8095a4:	dec00304 	addi	sp,sp,12
  8095a8:	f800283a 	ret

008095ac <__swsetup_r>:
  8095ac:	00802074 	movhi	r2,129
  8095b0:	10934c04 	addi	r2,r2,19760
  8095b4:	10c00017 	ldw	r3,0(r2)
  8095b8:	defffd04 	addi	sp,sp,-12
  8095bc:	dc400115 	stw	r17,4(sp)
  8095c0:	dc000015 	stw	r16,0(sp)
  8095c4:	dfc00215 	stw	ra,8(sp)
  8095c8:	2023883a 	mov	r17,r4
  8095cc:	2821883a 	mov	r16,r5
  8095d0:	18000226 	beq	r3,zero,8095dc <__swsetup_r+0x30>
  8095d4:	18800e17 	ldw	r2,56(r3)
  8095d8:	10001f26 	beq	r2,zero,809658 <__swsetup_r+0xac>
  8095dc:	8100030b 	ldhu	r4,12(r16)
  8095e0:	2080020c 	andi	r2,r4,8
  8095e4:	10002826 	beq	r2,zero,809688 <__swsetup_r+0xdc>
  8095e8:	81400417 	ldw	r5,16(r16)
  8095ec:	28001d26 	beq	r5,zero,809664 <__swsetup_r+0xb8>
  8095f0:	2080004c 	andi	r2,r4,1
  8095f4:	1005003a 	cmpeq	r2,r2,zero
  8095f8:	10000b26 	beq	r2,zero,809628 <__swsetup_r+0x7c>
  8095fc:	2080008c 	andi	r2,r4,2
  809600:	10001226 	beq	r2,zero,80964c <__swsetup_r+0xa0>
  809604:	0005883a 	mov	r2,zero
  809608:	80800215 	stw	r2,8(r16)
  80960c:	28000b26 	beq	r5,zero,80963c <__swsetup_r+0x90>
  809610:	0005883a 	mov	r2,zero
  809614:	dfc00217 	ldw	ra,8(sp)
  809618:	dc400117 	ldw	r17,4(sp)
  80961c:	dc000017 	ldw	r16,0(sp)
  809620:	dec00304 	addi	sp,sp,12
  809624:	f800283a 	ret
  809628:	80800517 	ldw	r2,20(r16)
  80962c:	80000215 	stw	zero,8(r16)
  809630:	0085c83a 	sub	r2,zero,r2
  809634:	80800615 	stw	r2,24(r16)
  809638:	283ff51e 	bne	r5,zero,809610 <__swsetup_r+0x64>
  80963c:	2080200c 	andi	r2,r4,128
  809640:	103ff326 	beq	r2,zero,809610 <__swsetup_r+0x64>
  809644:	00bfffc4 	movi	r2,-1
  809648:	003ff206 	br	809614 <__swsetup_r+0x68>
  80964c:	80800517 	ldw	r2,20(r16)
  809650:	80800215 	stw	r2,8(r16)
  809654:	003fed06 	br	80960c <__swsetup_r+0x60>
  809658:	1809883a 	mov	r4,r3
  80965c:	08057380 	call	805738 <__sinit>
  809660:	003fde06 	br	8095dc <__swsetup_r+0x30>
  809664:	20c0a00c 	andi	r3,r4,640
  809668:	00808004 	movi	r2,512
  80966c:	18bfe026 	beq	r3,r2,8095f0 <__swsetup_r+0x44>
  809670:	8809883a 	mov	r4,r17
  809674:	800b883a 	mov	r5,r16
  809678:	08066bc0 	call	8066bc <__smakebuf_r>
  80967c:	8100030b 	ldhu	r4,12(r16)
  809680:	81400417 	ldw	r5,16(r16)
  809684:	003fda06 	br	8095f0 <__swsetup_r+0x44>
  809688:	2080040c 	andi	r2,r4,16
  80968c:	103fed26 	beq	r2,zero,809644 <__swsetup_r+0x98>
  809690:	2080010c 	andi	r2,r4,4
  809694:	10001226 	beq	r2,zero,8096e0 <__swsetup_r+0x134>
  809698:	81400c17 	ldw	r5,48(r16)
  80969c:	28000526 	beq	r5,zero,8096b4 <__swsetup_r+0x108>
  8096a0:	80801004 	addi	r2,r16,64
  8096a4:	28800226 	beq	r5,r2,8096b0 <__swsetup_r+0x104>
  8096a8:	8809883a 	mov	r4,r17
  8096ac:	0805c2c0 	call	805c2c <_free_r>
  8096b0:	80000c15 	stw	zero,48(r16)
  8096b4:	8080030b 	ldhu	r2,12(r16)
  8096b8:	81400417 	ldw	r5,16(r16)
  8096bc:	80000115 	stw	zero,4(r16)
  8096c0:	10bff6cc 	andi	r2,r2,65499
  8096c4:	8080030d 	sth	r2,12(r16)
  8096c8:	81400015 	stw	r5,0(r16)
  8096cc:	8080030b 	ldhu	r2,12(r16)
  8096d0:	10800214 	ori	r2,r2,8
  8096d4:	113fffcc 	andi	r4,r2,65535
  8096d8:	8080030d 	sth	r2,12(r16)
  8096dc:	003fc306 	br	8095ec <__swsetup_r+0x40>
  8096e0:	81400417 	ldw	r5,16(r16)
  8096e4:	003ff906 	br	8096cc <__swsetup_r+0x120>

008096e8 <_close_r>:
  8096e8:	defffd04 	addi	sp,sp,-12
  8096ec:	dc000015 	stw	r16,0(sp)
  8096f0:	04002074 	movhi	r16,129
  8096f4:	841a7104 	addi	r16,r16,27076
  8096f8:	dc400115 	stw	r17,4(sp)
  8096fc:	80000015 	stw	zero,0(r16)
  809700:	2023883a 	mov	r17,r4
  809704:	2809883a 	mov	r4,r5
  809708:	dfc00215 	stw	ra,8(sp)
  80970c:	080e3200 	call	80e320 <close>
  809710:	1007883a 	mov	r3,r2
  809714:	00bfffc4 	movi	r2,-1
  809718:	18800626 	beq	r3,r2,809734 <_close_r+0x4c>
  80971c:	1805883a 	mov	r2,r3
  809720:	dfc00217 	ldw	ra,8(sp)
  809724:	dc400117 	ldw	r17,4(sp)
  809728:	dc000017 	ldw	r16,0(sp)
  80972c:	dec00304 	addi	sp,sp,12
  809730:	f800283a 	ret
  809734:	80800017 	ldw	r2,0(r16)
  809738:	103ff826 	beq	r2,zero,80971c <_close_r+0x34>
  80973c:	88800015 	stw	r2,0(r17)
  809740:	1805883a 	mov	r2,r3
  809744:	dfc00217 	ldw	ra,8(sp)
  809748:	dc400117 	ldw	r17,4(sp)
  80974c:	dc000017 	ldw	r16,0(sp)
  809750:	dec00304 	addi	sp,sp,12
  809754:	f800283a 	ret

00809758 <quorem>:
  809758:	28c00417 	ldw	r3,16(r5)
  80975c:	20800417 	ldw	r2,16(r4)
  809760:	defff604 	addi	sp,sp,-40
  809764:	ddc00715 	stw	r23,28(sp)
  809768:	dd400515 	stw	r21,20(sp)
  80976c:	dfc00915 	stw	ra,36(sp)
  809770:	df000815 	stw	fp,32(sp)
  809774:	dd800615 	stw	r22,24(sp)
  809778:	dd000415 	stw	r20,16(sp)
  80977c:	dcc00315 	stw	r19,12(sp)
  809780:	dc800215 	stw	r18,8(sp)
  809784:	dc400115 	stw	r17,4(sp)
  809788:	dc000015 	stw	r16,0(sp)
  80978c:	202f883a 	mov	r23,r4
  809790:	282b883a 	mov	r21,r5
  809794:	10c07416 	blt	r2,r3,809968 <quorem+0x210>
  809798:	1c7fffc4 	addi	r17,r3,-1
  80979c:	8c45883a 	add	r2,r17,r17
  8097a0:	1085883a 	add	r2,r2,r2
  8097a4:	2c000504 	addi	r16,r5,20
  8097a8:	24c00504 	addi	r19,r4,20
  8097ac:	14ed883a 	add	r22,r2,r19
  8097b0:	80a5883a 	add	r18,r16,r2
  8097b4:	b7000017 	ldw	fp,0(r22)
  8097b8:	91400017 	ldw	r5,0(r18)
  8097bc:	e009883a 	mov	r4,fp
  8097c0:	29400044 	addi	r5,r5,1
  8097c4:	080e3100 	call	80e310 <__udivsi3>
  8097c8:	1029883a 	mov	r20,r2
  8097cc:	10003c1e 	bne	r2,zero,8098c0 <quorem+0x168>
  8097d0:	a80b883a 	mov	r5,r21
  8097d4:	b809883a 	mov	r4,r23
  8097d8:	080b9cc0 	call	80b9cc <__mcmp>
  8097dc:	10002b16 	blt	r2,zero,80988c <quorem+0x134>
  8097e0:	a5000044 	addi	r20,r20,1
  8097e4:	980f883a 	mov	r7,r19
  8097e8:	0011883a 	mov	r8,zero
  8097ec:	0009883a 	mov	r4,zero
  8097f0:	81400017 	ldw	r5,0(r16)
  8097f4:	38c00017 	ldw	r3,0(r7)
  8097f8:	84000104 	addi	r16,r16,4
  8097fc:	28bfffcc 	andi	r2,r5,65535
  809800:	2085883a 	add	r2,r4,r2
  809804:	11bfffcc 	andi	r6,r2,65535
  809808:	193fffcc 	andi	r4,r3,65535
  80980c:	1004d43a 	srli	r2,r2,16
  809810:	280ad43a 	srli	r5,r5,16
  809814:	2189c83a 	sub	r4,r4,r6
  809818:	2209883a 	add	r4,r4,r8
  80981c:	1806d43a 	srli	r3,r3,16
  809820:	288b883a 	add	r5,r5,r2
  809824:	200dd43a 	srai	r6,r4,16
  809828:	28bfffcc 	andi	r2,r5,65535
  80982c:	1887c83a 	sub	r3,r3,r2
  809830:	1987883a 	add	r3,r3,r6
  809834:	3900000d 	sth	r4,0(r7)
  809838:	38c0008d 	sth	r3,2(r7)
  80983c:	2808d43a 	srli	r4,r5,16
  809840:	39c00104 	addi	r7,r7,4
  809844:	1811d43a 	srai	r8,r3,16
  809848:	943fe92e 	bgeu	r18,r16,8097f0 <quorem+0x98>
  80984c:	8c45883a 	add	r2,r17,r17
  809850:	1085883a 	add	r2,r2,r2
  809854:	9885883a 	add	r2,r19,r2
  809858:	10c00017 	ldw	r3,0(r2)
  80985c:	18000b1e 	bne	r3,zero,80988c <quorem+0x134>
  809860:	113fff04 	addi	r4,r2,-4
  809864:	9900082e 	bgeu	r19,r4,809888 <quorem+0x130>
  809868:	10bfff17 	ldw	r2,-4(r2)
  80986c:	10000326 	beq	r2,zero,80987c <quorem+0x124>
  809870:	00000506 	br	809888 <quorem+0x130>
  809874:	20800017 	ldw	r2,0(r4)
  809878:	1000031e 	bne	r2,zero,809888 <quorem+0x130>
  80987c:	213fff04 	addi	r4,r4,-4
  809880:	8c7fffc4 	addi	r17,r17,-1
  809884:	993ffb36 	bltu	r19,r4,809874 <quorem+0x11c>
  809888:	bc400415 	stw	r17,16(r23)
  80988c:	a005883a 	mov	r2,r20
  809890:	dfc00917 	ldw	ra,36(sp)
  809894:	df000817 	ldw	fp,32(sp)
  809898:	ddc00717 	ldw	r23,28(sp)
  80989c:	dd800617 	ldw	r22,24(sp)
  8098a0:	dd400517 	ldw	r21,20(sp)
  8098a4:	dd000417 	ldw	r20,16(sp)
  8098a8:	dcc00317 	ldw	r19,12(sp)
  8098ac:	dc800217 	ldw	r18,8(sp)
  8098b0:	dc400117 	ldw	r17,4(sp)
  8098b4:	dc000017 	ldw	r16,0(sp)
  8098b8:	dec00a04 	addi	sp,sp,40
  8098bc:	f800283a 	ret
  8098c0:	980f883a 	mov	r7,r19
  8098c4:	8011883a 	mov	r8,r16
  8098c8:	0013883a 	mov	r9,zero
  8098cc:	000d883a 	mov	r6,zero
  8098d0:	40c00017 	ldw	r3,0(r8)
  8098d4:	39000017 	ldw	r4,0(r7)
  8098d8:	42000104 	addi	r8,r8,4
  8098dc:	18bfffcc 	andi	r2,r3,65535
  8098e0:	a085383a 	mul	r2,r20,r2
  8098e4:	1806d43a 	srli	r3,r3,16
  8098e8:	217fffcc 	andi	r5,r4,65535
  8098ec:	3085883a 	add	r2,r6,r2
  8098f0:	11bfffcc 	andi	r6,r2,65535
  8098f4:	a0c7383a 	mul	r3,r20,r3
  8098f8:	1004d43a 	srli	r2,r2,16
  8098fc:	298bc83a 	sub	r5,r5,r6
  809900:	2a4b883a 	add	r5,r5,r9
  809904:	2008d43a 	srli	r4,r4,16
  809908:	1887883a 	add	r3,r3,r2
  80990c:	280dd43a 	srai	r6,r5,16
  809910:	18bfffcc 	andi	r2,r3,65535
  809914:	2089c83a 	sub	r4,r4,r2
  809918:	2189883a 	add	r4,r4,r6
  80991c:	3900008d 	sth	r4,2(r7)
  809920:	3940000d 	sth	r5,0(r7)
  809924:	180cd43a 	srli	r6,r3,16
  809928:	39c00104 	addi	r7,r7,4
  80992c:	2013d43a 	srai	r9,r4,16
  809930:	923fe72e 	bgeu	r18,r8,8098d0 <quorem+0x178>
  809934:	e03fa61e 	bne	fp,zero,8097d0 <quorem+0x78>
  809938:	b0ffff04 	addi	r3,r22,-4
  80993c:	98c0082e 	bgeu	r19,r3,809960 <quorem+0x208>
  809940:	b0bfff17 	ldw	r2,-4(r22)
  809944:	10000326 	beq	r2,zero,809954 <quorem+0x1fc>
  809948:	00000506 	br	809960 <quorem+0x208>
  80994c:	18800017 	ldw	r2,0(r3)
  809950:	1000031e 	bne	r2,zero,809960 <quorem+0x208>
  809954:	18ffff04 	addi	r3,r3,-4
  809958:	8c7fffc4 	addi	r17,r17,-1
  80995c:	98fffb36 	bltu	r19,r3,80994c <quorem+0x1f4>
  809960:	bc400415 	stw	r17,16(r23)
  809964:	003f9a06 	br	8097d0 <quorem+0x78>
  809968:	0005883a 	mov	r2,zero
  80996c:	003fc806 	br	809890 <quorem+0x138>

00809970 <_dtoa_r>:
  809970:	22001017 	ldw	r8,64(r4)
  809974:	deffda04 	addi	sp,sp,-152
  809978:	dd402115 	stw	r21,132(sp)
  80997c:	dd002015 	stw	r20,128(sp)
  809980:	dc801e15 	stw	r18,120(sp)
  809984:	dc401d15 	stw	r17,116(sp)
  809988:	dfc02515 	stw	ra,148(sp)
  80998c:	df002415 	stw	fp,144(sp)
  809990:	ddc02315 	stw	r23,140(sp)
  809994:	dd802215 	stw	r22,136(sp)
  809998:	dcc01f15 	stw	r19,124(sp)
  80999c:	dc001c15 	stw	r16,112(sp)
  8099a0:	d9001615 	stw	r4,88(sp)
  8099a4:	3023883a 	mov	r17,r6
  8099a8:	2829883a 	mov	r20,r5
  8099ac:	d9c01715 	stw	r7,92(sp)
  8099b0:	dc802817 	ldw	r18,160(sp)
  8099b4:	302b883a 	mov	r21,r6
  8099b8:	40000a26 	beq	r8,zero,8099e4 <_dtoa_r+0x74>
  8099bc:	20801117 	ldw	r2,68(r4)
  8099c0:	400b883a 	mov	r5,r8
  8099c4:	40800115 	stw	r2,4(r8)
  8099c8:	20c01117 	ldw	r3,68(r4)
  8099cc:	00800044 	movi	r2,1
  8099d0:	10c4983a 	sll	r2,r2,r3
  8099d4:	40800215 	stw	r2,8(r8)
  8099d8:	080b8700 	call	80b870 <_Bfree>
  8099dc:	d8c01617 	ldw	r3,88(sp)
  8099e0:	18001015 	stw	zero,64(r3)
  8099e4:	8800a316 	blt	r17,zero,809c74 <_dtoa_r+0x304>
  8099e8:	90000015 	stw	zero,0(r18)
  8099ec:	a8dffc2c 	andhi	r3,r21,32752
  8099f0:	009ffc34 	movhi	r2,32752
  8099f4:	18809126 	beq	r3,r2,809c3c <_dtoa_r+0x2cc>
  8099f8:	000d883a 	mov	r6,zero
  8099fc:	000f883a 	mov	r7,zero
  809a00:	a009883a 	mov	r4,r20
  809a04:	a80b883a 	mov	r5,r21
  809a08:	dd001215 	stw	r20,72(sp)
  809a0c:	dd401315 	stw	r21,76(sp)
  809a10:	08049500 	call	804950 <__nedf2>
  809a14:	1000171e 	bne	r2,zero,809a74 <_dtoa_r+0x104>
  809a18:	d9802717 	ldw	r6,156(sp)
  809a1c:	00800044 	movi	r2,1
  809a20:	30800015 	stw	r2,0(r6)
  809a24:	d8802917 	ldw	r2,164(sp)
  809a28:	10029b26 	beq	r2,zero,80a498 <_dtoa_r+0xb28>
  809a2c:	d9002917 	ldw	r4,164(sp)
  809a30:	00802074 	movhi	r2,129
  809a34:	108b2c44 	addi	r2,r2,11441
  809a38:	10ffffc4 	addi	r3,r2,-1
  809a3c:	20800015 	stw	r2,0(r4)
  809a40:	1805883a 	mov	r2,r3
  809a44:	dfc02517 	ldw	ra,148(sp)
  809a48:	df002417 	ldw	fp,144(sp)
  809a4c:	ddc02317 	ldw	r23,140(sp)
  809a50:	dd802217 	ldw	r22,136(sp)
  809a54:	dd402117 	ldw	r21,132(sp)
  809a58:	dd002017 	ldw	r20,128(sp)
  809a5c:	dcc01f17 	ldw	r19,124(sp)
  809a60:	dc801e17 	ldw	r18,120(sp)
  809a64:	dc401d17 	ldw	r17,116(sp)
  809a68:	dc001c17 	ldw	r16,112(sp)
  809a6c:	dec02604 	addi	sp,sp,152
  809a70:	f800283a 	ret
  809a74:	d9001617 	ldw	r4,88(sp)
  809a78:	d9401217 	ldw	r5,72(sp)
  809a7c:	d8800104 	addi	r2,sp,4
  809a80:	a80d883a 	mov	r6,r21
  809a84:	d9c00204 	addi	r7,sp,8
  809a88:	d8800015 	stw	r2,0(sp)
  809a8c:	080beac0 	call	80beac <__d2b>
  809a90:	d8800715 	stw	r2,28(sp)
  809a94:	a804d53a 	srli	r2,r21,20
  809a98:	1101ffcc 	andi	r4,r2,2047
  809a9c:	20008626 	beq	r4,zero,809cb8 <_dtoa_r+0x348>
  809aa0:	d8c01217 	ldw	r3,72(sp)
  809aa4:	00800434 	movhi	r2,16
  809aa8:	10bfffc4 	addi	r2,r2,-1
  809aac:	ddc00117 	ldw	r23,4(sp)
  809ab0:	a884703a 	and	r2,r21,r2
  809ab4:	1811883a 	mov	r8,r3
  809ab8:	124ffc34 	orhi	r9,r2,16368
  809abc:	25bf0044 	addi	r22,r4,-1023
  809ac0:	d8000815 	stw	zero,32(sp)
  809ac4:	0005883a 	mov	r2,zero
  809ac8:	00cffe34 	movhi	r3,16376
  809acc:	480b883a 	mov	r5,r9
  809ad0:	4009883a 	mov	r4,r8
  809ad4:	180f883a 	mov	r7,r3
  809ad8:	100d883a 	mov	r6,r2
  809adc:	08041b80 	call	8041b8 <__subdf3>
  809ae0:	0218dbf4 	movhi	r8,25455
  809ae4:	4210d844 	addi	r8,r8,17249
  809ae8:	024ff4f4 	movhi	r9,16339
  809aec:	4a61e9c4 	addi	r9,r9,-30809
  809af0:	480f883a 	mov	r7,r9
  809af4:	400d883a 	mov	r6,r8
  809af8:	180b883a 	mov	r5,r3
  809afc:	1009883a 	mov	r4,r2
  809b00:	08042ac0 	call	8042ac <__muldf3>
  809b04:	0222d874 	movhi	r8,35681
  809b08:	42322cc4 	addi	r8,r8,-14157
  809b0c:	024ff1f4 	movhi	r9,16327
  809b10:	4a628a04 	addi	r9,r9,-30168
  809b14:	480f883a 	mov	r7,r9
  809b18:	400d883a 	mov	r6,r8
  809b1c:	180b883a 	mov	r5,r3
  809b20:	1009883a 	mov	r4,r2
  809b24:	08042380 	call	804238 <__adddf3>
  809b28:	b009883a 	mov	r4,r22
  809b2c:	1021883a 	mov	r16,r2
  809b30:	1823883a 	mov	r17,r3
  809b34:	0804b700 	call	804b70 <__floatsidf>
  809b38:	021427f4 	movhi	r8,20639
  809b3c:	421e7ec4 	addi	r8,r8,31227
  809b40:	024ff4f4 	movhi	r9,16339
  809b44:	4a5104c4 	addi	r9,r9,17427
  809b48:	480f883a 	mov	r7,r9
  809b4c:	400d883a 	mov	r6,r8
  809b50:	180b883a 	mov	r5,r3
  809b54:	1009883a 	mov	r4,r2
  809b58:	08042ac0 	call	8042ac <__muldf3>
  809b5c:	180f883a 	mov	r7,r3
  809b60:	880b883a 	mov	r5,r17
  809b64:	100d883a 	mov	r6,r2
  809b68:	8009883a 	mov	r4,r16
  809b6c:	08042380 	call	804238 <__adddf3>
  809b70:	1009883a 	mov	r4,r2
  809b74:	180b883a 	mov	r5,r3
  809b78:	1021883a 	mov	r16,r2
  809b7c:	1823883a 	mov	r17,r3
  809b80:	0804c680 	call	804c68 <__fixdfsi>
  809b84:	000d883a 	mov	r6,zero
  809b88:	000f883a 	mov	r7,zero
  809b8c:	8009883a 	mov	r4,r16
  809b90:	880b883a 	mov	r5,r17
  809b94:	d8800d15 	stw	r2,52(sp)
  809b98:	0804a600 	call	804a60 <__ltdf2>
  809b9c:	10031716 	blt	r2,zero,80a7fc <_dtoa_r+0xe8c>
  809ba0:	d8c00d17 	ldw	r3,52(sp)
  809ba4:	00800584 	movi	r2,22
  809ba8:	10c1482e 	bgeu	r2,r3,80a0cc <_dtoa_r+0x75c>
  809bac:	01000044 	movi	r4,1
  809bb0:	d9000c15 	stw	r4,48(sp)
  809bb4:	bd85c83a 	sub	r2,r23,r22
  809bb8:	11bfffc4 	addi	r6,r2,-1
  809bbc:	30030b16 	blt	r6,zero,80a7ec <_dtoa_r+0xe7c>
  809bc0:	d9800a15 	stw	r6,40(sp)
  809bc4:	d8001115 	stw	zero,68(sp)
  809bc8:	d8c00d17 	ldw	r3,52(sp)
  809bcc:	1802ff16 	blt	r3,zero,80a7cc <_dtoa_r+0xe5c>
  809bd0:	d9000a17 	ldw	r4,40(sp)
  809bd4:	d8c00915 	stw	r3,36(sp)
  809bd8:	d8001015 	stw	zero,64(sp)
  809bdc:	20c9883a 	add	r4,r4,r3
  809be0:	d9000a15 	stw	r4,40(sp)
  809be4:	d9001717 	ldw	r4,92(sp)
  809be8:	00800244 	movi	r2,9
  809bec:	11004636 	bltu	r2,r4,809d08 <_dtoa_r+0x398>
  809bf0:	00800144 	movi	r2,5
  809bf4:	11020416 	blt	r2,r4,80a408 <_dtoa_r+0xa98>
  809bf8:	04400044 	movi	r17,1
  809bfc:	d8c01717 	ldw	r3,92(sp)
  809c00:	00800144 	movi	r2,5
  809c04:	10c1ed36 	bltu	r2,r3,80a3bc <_dtoa_r+0xa4c>
  809c08:	18c5883a 	add	r2,r3,r3
  809c0c:	1085883a 	add	r2,r2,r2
  809c10:	00c02074 	movhi	r3,129
  809c14:	18e70904 	addi	r3,r3,-25564
  809c18:	10c5883a 	add	r2,r2,r3
  809c1c:	11000017 	ldw	r4,0(r2)
  809c20:	2000683a 	jmp	r4
  809c24:	00809d10 	cmplti	r2,zero,628
  809c28:	00809d10 	cmplti	r2,zero,628
  809c2c:	0080a710 	cmplti	r2,zero,668
  809c30:	0080a6e8 	cmpgeui	r2,zero,667
  809c34:	0080a72c 	andhi	r2,zero,668
  809c38:	0080a738 	rdprs	r2,zero,668
  809c3c:	d9002717 	ldw	r4,156(sp)
  809c40:	0089c3c4 	movi	r2,9999
  809c44:	20800015 	stw	r2,0(r4)
  809c48:	a0001026 	beq	r20,zero,809c8c <_dtoa_r+0x31c>
  809c4c:	00c02074 	movhi	r3,129
  809c50:	18cb3804 	addi	r3,r3,11488
  809c54:	d9802917 	ldw	r6,164(sp)
  809c58:	303f7926 	beq	r6,zero,809a40 <_dtoa_r+0xd0>
  809c5c:	188000c7 	ldb	r2,3(r3)
  809c60:	190000c4 	addi	r4,r3,3
  809c64:	1000101e 	bne	r2,zero,809ca8 <_dtoa_r+0x338>
  809c68:	d8802917 	ldw	r2,164(sp)
  809c6c:	11000015 	stw	r4,0(r2)
  809c70:	003f7306 	br	809a40 <_dtoa_r+0xd0>
  809c74:	00a00034 	movhi	r2,32768
  809c78:	10bfffc4 	addi	r2,r2,-1
  809c7c:	00c00044 	movi	r3,1
  809c80:	88aa703a 	and	r21,r17,r2
  809c84:	90c00015 	stw	r3,0(r18)
  809c88:	003f5806 	br	8099ec <_dtoa_r+0x7c>
  809c8c:	00800434 	movhi	r2,16
  809c90:	10bfffc4 	addi	r2,r2,-1
  809c94:	a884703a 	and	r2,r21,r2
  809c98:	103fec1e 	bne	r2,zero,809c4c <_dtoa_r+0x2dc>
  809c9c:	00c02074 	movhi	r3,129
  809ca0:	18cb3504 	addi	r3,r3,11476
  809ca4:	003feb06 	br	809c54 <_dtoa_r+0x2e4>
  809ca8:	d8802917 	ldw	r2,164(sp)
  809cac:	19000204 	addi	r4,r3,8
  809cb0:	11000015 	stw	r4,0(r2)
  809cb4:	003f6206 	br	809a40 <_dtoa_r+0xd0>
  809cb8:	ddc00117 	ldw	r23,4(sp)
  809cbc:	d8800217 	ldw	r2,8(sp)
  809cc0:	01000804 	movi	r4,32
  809cc4:	b8c10c84 	addi	r3,r23,1074
  809cc8:	18a3883a 	add	r17,r3,r2
  809ccc:	2441b80e 	bge	r4,r17,80a3b0 <_dtoa_r+0xa40>
  809cd0:	00c01004 	movi	r3,64
  809cd4:	1c47c83a 	sub	r3,r3,r17
  809cd8:	88bff804 	addi	r2,r17,-32
  809cdc:	a8c6983a 	sll	r3,r21,r3
  809ce0:	a084d83a 	srl	r2,r20,r2
  809ce4:	1888b03a 	or	r4,r3,r2
  809ce8:	080e0400 	call	80e040 <__floatunsidf>
  809cec:	1011883a 	mov	r8,r2
  809cf0:	00bf8434 	movhi	r2,65040
  809cf4:	01000044 	movi	r4,1
  809cf8:	10d3883a 	add	r9,r2,r3
  809cfc:	8dbef344 	addi	r22,r17,-1075
  809d00:	d9000815 	stw	r4,32(sp)
  809d04:	003f6f06 	br	809ac4 <_dtoa_r+0x154>
  809d08:	d8001715 	stw	zero,92(sp)
  809d0c:	04400044 	movi	r17,1
  809d10:	00bfffc4 	movi	r2,-1
  809d14:	00c00044 	movi	r3,1
  809d18:	d8800e15 	stw	r2,56(sp)
  809d1c:	d8002615 	stw	zero,152(sp)
  809d20:	d8800f15 	stw	r2,60(sp)
  809d24:	d8c00b15 	stw	r3,44(sp)
  809d28:	1021883a 	mov	r16,r2
  809d2c:	d8801617 	ldw	r2,88(sp)
  809d30:	10001115 	stw	zero,68(r2)
  809d34:	d8801617 	ldw	r2,88(sp)
  809d38:	11401117 	ldw	r5,68(r2)
  809d3c:	1009883a 	mov	r4,r2
  809d40:	080bdf00 	call	80bdf0 <_Balloc>
  809d44:	d8c01617 	ldw	r3,88(sp)
  809d48:	d8800515 	stw	r2,20(sp)
  809d4c:	18801015 	stw	r2,64(r3)
  809d50:	00800384 	movi	r2,14
  809d54:	14006836 	bltu	r2,r16,809ef8 <_dtoa_r+0x588>
  809d58:	8805003a 	cmpeq	r2,r17,zero
  809d5c:	1000661e 	bne	r2,zero,809ef8 <_dtoa_r+0x588>
  809d60:	d9000d17 	ldw	r4,52(sp)
  809d64:	0102300e 	bge	zero,r4,80a628 <_dtoa_r+0xcb8>
  809d68:	208003cc 	andi	r2,r4,15
  809d6c:	100490fa 	slli	r2,r2,3
  809d70:	2025d13a 	srai	r18,r4,4
  809d74:	00c02074 	movhi	r3,129
  809d78:	18cb4904 	addi	r3,r3,11556
  809d7c:	10c5883a 	add	r2,r2,r3
  809d80:	90c0040c 	andi	r3,r18,16
  809d84:	14000017 	ldw	r16,0(r2)
  809d88:	14400117 	ldw	r17,4(r2)
  809d8c:	18036a1e 	bne	r3,zero,80ab38 <_dtoa_r+0x11c8>
  809d90:	05800084 	movi	r22,2
  809d94:	90001026 	beq	r18,zero,809dd8 <_dtoa_r+0x468>
  809d98:	04c02074 	movhi	r19,129
  809d9c:	9ccb7b04 	addi	r19,r19,11756
  809da0:	9080004c 	andi	r2,r18,1
  809da4:	1005003a 	cmpeq	r2,r2,zero
  809da8:	1000081e 	bne	r2,zero,809dcc <_dtoa_r+0x45c>
  809dac:	99800017 	ldw	r6,0(r19)
  809db0:	99c00117 	ldw	r7,4(r19)
  809db4:	880b883a 	mov	r5,r17
  809db8:	8009883a 	mov	r4,r16
  809dbc:	08042ac0 	call	8042ac <__muldf3>
  809dc0:	1021883a 	mov	r16,r2
  809dc4:	b5800044 	addi	r22,r22,1
  809dc8:	1823883a 	mov	r17,r3
  809dcc:	9025d07a 	srai	r18,r18,1
  809dd0:	9cc00204 	addi	r19,r19,8
  809dd4:	903ff21e 	bne	r18,zero,809da0 <_dtoa_r+0x430>
  809dd8:	a80b883a 	mov	r5,r21
  809ddc:	a009883a 	mov	r4,r20
  809de0:	880f883a 	mov	r7,r17
  809de4:	800d883a 	mov	r6,r16
  809de8:	08046700 	call	804670 <__divdf3>
  809dec:	1029883a 	mov	r20,r2
  809df0:	182b883a 	mov	r21,r3
  809df4:	d8c00c17 	ldw	r3,48(sp)
  809df8:	1805003a 	cmpeq	r2,r3,zero
  809dfc:	1000081e 	bne	r2,zero,809e20 <_dtoa_r+0x4b0>
  809e00:	0005883a 	mov	r2,zero
  809e04:	00cffc34 	movhi	r3,16368
  809e08:	180f883a 	mov	r7,r3
  809e0c:	a009883a 	mov	r4,r20
  809e10:	a80b883a 	mov	r5,r21
  809e14:	100d883a 	mov	r6,r2
  809e18:	0804a600 	call	804a60 <__ltdf2>
  809e1c:	1003fe16 	blt	r2,zero,80ae18 <_dtoa_r+0x14a8>
  809e20:	b009883a 	mov	r4,r22
  809e24:	0804b700 	call	804b70 <__floatsidf>
  809e28:	180b883a 	mov	r5,r3
  809e2c:	1009883a 	mov	r4,r2
  809e30:	a00d883a 	mov	r6,r20
  809e34:	a80f883a 	mov	r7,r21
  809e38:	08042ac0 	call	8042ac <__muldf3>
  809e3c:	0011883a 	mov	r8,zero
  809e40:	02500734 	movhi	r9,16412
  809e44:	1009883a 	mov	r4,r2
  809e48:	180b883a 	mov	r5,r3
  809e4c:	480f883a 	mov	r7,r9
  809e50:	400d883a 	mov	r6,r8
  809e54:	08042380 	call	804238 <__adddf3>
  809e58:	d9000f17 	ldw	r4,60(sp)
  809e5c:	102d883a 	mov	r22,r2
  809e60:	00bf3034 	movhi	r2,64704
  809e64:	18b9883a 	add	fp,r3,r2
  809e68:	e02f883a 	mov	r23,fp
  809e6c:	20028f1e 	bne	r4,zero,80a8ac <_dtoa_r+0xf3c>
  809e70:	0005883a 	mov	r2,zero
  809e74:	00d00534 	movhi	r3,16404
  809e78:	a009883a 	mov	r4,r20
  809e7c:	a80b883a 	mov	r5,r21
  809e80:	180f883a 	mov	r7,r3
  809e84:	100d883a 	mov	r6,r2
  809e88:	08041b80 	call	8041b8 <__subdf3>
  809e8c:	1009883a 	mov	r4,r2
  809e90:	e00f883a 	mov	r7,fp
  809e94:	180b883a 	mov	r5,r3
  809e98:	b00d883a 	mov	r6,r22
  809e9c:	1025883a 	mov	r18,r2
  809ea0:	1827883a 	mov	r19,r3
  809ea4:	08049d80 	call	8049d8 <__gtdf2>
  809ea8:	00834f16 	blt	zero,r2,80abe8 <_dtoa_r+0x1278>
  809eac:	e0e0003c 	xorhi	r3,fp,32768
  809eb0:	9009883a 	mov	r4,r18
  809eb4:	980b883a 	mov	r5,r19
  809eb8:	180f883a 	mov	r7,r3
  809ebc:	b00d883a 	mov	r6,r22
  809ec0:	0804a600 	call	804a60 <__ltdf2>
  809ec4:	1000080e 	bge	r2,zero,809ee8 <_dtoa_r+0x578>
  809ec8:	0027883a 	mov	r19,zero
  809ecc:	0025883a 	mov	r18,zero
  809ed0:	d8802617 	ldw	r2,152(sp)
  809ed4:	df000517 	ldw	fp,20(sp)
  809ed8:	d8000615 	stw	zero,24(sp)
  809edc:	0084303a 	nor	r2,zero,r2
  809ee0:	d8800d15 	stw	r2,52(sp)
  809ee4:	00019b06 	br	80a554 <_dtoa_r+0xbe4>
  809ee8:	d9801217 	ldw	r6,72(sp)
  809eec:	d8801317 	ldw	r2,76(sp)
  809ef0:	3029883a 	mov	r20,r6
  809ef4:	102b883a 	mov	r21,r2
  809ef8:	d8c00217 	ldw	r3,8(sp)
  809efc:	18008516 	blt	r3,zero,80a114 <_dtoa_r+0x7a4>
  809f00:	d9000d17 	ldw	r4,52(sp)
  809f04:	00800384 	movi	r2,14
  809f08:	11008216 	blt	r2,r4,80a114 <_dtoa_r+0x7a4>
  809f0c:	200490fa 	slli	r2,r4,3
  809f10:	d9802617 	ldw	r6,152(sp)
  809f14:	00c02074 	movhi	r3,129
  809f18:	18cb4904 	addi	r3,r3,11556
  809f1c:	10c5883a 	add	r2,r2,r3
  809f20:	14800017 	ldw	r18,0(r2)
  809f24:	14c00117 	ldw	r19,4(r2)
  809f28:	30031e16 	blt	r6,zero,80aba4 <_dtoa_r+0x1234>
  809f2c:	d9000517 	ldw	r4,20(sp)
  809f30:	d8c00f17 	ldw	r3,60(sp)
  809f34:	a823883a 	mov	r17,r21
  809f38:	a021883a 	mov	r16,r20
  809f3c:	192b883a 	add	r21,r3,r4
  809f40:	2039883a 	mov	fp,r4
  809f44:	00000f06 	br	809f84 <_dtoa_r+0x614>
  809f48:	0005883a 	mov	r2,zero
  809f4c:	00d00934 	movhi	r3,16420
  809f50:	5009883a 	mov	r4,r10
  809f54:	580b883a 	mov	r5,r11
  809f58:	180f883a 	mov	r7,r3
  809f5c:	100d883a 	mov	r6,r2
  809f60:	08042ac0 	call	8042ac <__muldf3>
  809f64:	180b883a 	mov	r5,r3
  809f68:	000d883a 	mov	r6,zero
  809f6c:	000f883a 	mov	r7,zero
  809f70:	1009883a 	mov	r4,r2
  809f74:	1021883a 	mov	r16,r2
  809f78:	1823883a 	mov	r17,r3
  809f7c:	08049500 	call	804950 <__nedf2>
  809f80:	10004526 	beq	r2,zero,80a098 <_dtoa_r+0x728>
  809f84:	900d883a 	mov	r6,r18
  809f88:	980f883a 	mov	r7,r19
  809f8c:	8009883a 	mov	r4,r16
  809f90:	880b883a 	mov	r5,r17
  809f94:	08046700 	call	804670 <__divdf3>
  809f98:	180b883a 	mov	r5,r3
  809f9c:	1009883a 	mov	r4,r2
  809fa0:	0804c680 	call	804c68 <__fixdfsi>
  809fa4:	1009883a 	mov	r4,r2
  809fa8:	1029883a 	mov	r20,r2
  809fac:	0804b700 	call	804b70 <__floatsidf>
  809fb0:	180f883a 	mov	r7,r3
  809fb4:	9009883a 	mov	r4,r18
  809fb8:	980b883a 	mov	r5,r19
  809fbc:	100d883a 	mov	r6,r2
  809fc0:	08042ac0 	call	8042ac <__muldf3>
  809fc4:	180f883a 	mov	r7,r3
  809fc8:	880b883a 	mov	r5,r17
  809fcc:	8009883a 	mov	r4,r16
  809fd0:	100d883a 	mov	r6,r2
  809fd4:	08041b80 	call	8041b8 <__subdf3>
  809fd8:	1015883a 	mov	r10,r2
  809fdc:	a0800c04 	addi	r2,r20,48
  809fe0:	e0800005 	stb	r2,0(fp)
  809fe4:	e7000044 	addi	fp,fp,1
  809fe8:	1817883a 	mov	r11,r3
  809fec:	e57fd61e 	bne	fp,r21,809f48 <_dtoa_r+0x5d8>
  809ff0:	500d883a 	mov	r6,r10
  809ff4:	180f883a 	mov	r7,r3
  809ff8:	5009883a 	mov	r4,r10
  809ffc:	180b883a 	mov	r5,r3
  80a000:	08042380 	call	804238 <__adddf3>
  80a004:	100d883a 	mov	r6,r2
  80a008:	9009883a 	mov	r4,r18
  80a00c:	980b883a 	mov	r5,r19
  80a010:	180f883a 	mov	r7,r3
  80a014:	1021883a 	mov	r16,r2
  80a018:	1823883a 	mov	r17,r3
  80a01c:	0804a600 	call	804a60 <__ltdf2>
  80a020:	10000816 	blt	r2,zero,80a044 <_dtoa_r+0x6d4>
  80a024:	980b883a 	mov	r5,r19
  80a028:	800d883a 	mov	r6,r16
  80a02c:	880f883a 	mov	r7,r17
  80a030:	9009883a 	mov	r4,r18
  80a034:	08048c80 	call	8048c8 <__eqdf2>
  80a038:	1000171e 	bne	r2,zero,80a098 <_dtoa_r+0x728>
  80a03c:	a080004c 	andi	r2,r20,1
  80a040:	10001526 	beq	r2,zero,80a098 <_dtoa_r+0x728>
  80a044:	d8800d17 	ldw	r2,52(sp)
  80a048:	d8800415 	stw	r2,16(sp)
  80a04c:	e009883a 	mov	r4,fp
  80a050:	213fffc4 	addi	r4,r4,-1
  80a054:	20c00007 	ldb	r3,0(r4)
  80a058:	00800e44 	movi	r2,57
  80a05c:	1880081e 	bne	r3,r2,80a080 <_dtoa_r+0x710>
  80a060:	d8800517 	ldw	r2,20(sp)
  80a064:	113ffa1e 	bne	r2,r4,80a050 <_dtoa_r+0x6e0>
  80a068:	d8c00417 	ldw	r3,16(sp)
  80a06c:	d9800517 	ldw	r6,20(sp)
  80a070:	00800c04 	movi	r2,48
  80a074:	18c00044 	addi	r3,r3,1
  80a078:	d8c00415 	stw	r3,16(sp)
  80a07c:	30800005 	stb	r2,0(r6)
  80a080:	20800003 	ldbu	r2,0(r4)
  80a084:	d8c00417 	ldw	r3,16(sp)
  80a088:	27000044 	addi	fp,r4,1
  80a08c:	10800044 	addi	r2,r2,1
  80a090:	d8c00d15 	stw	r3,52(sp)
  80a094:	20800005 	stb	r2,0(r4)
  80a098:	d9001617 	ldw	r4,88(sp)
  80a09c:	d9400717 	ldw	r5,28(sp)
  80a0a0:	080b8700 	call	80b870 <_Bfree>
  80a0a4:	e0000005 	stb	zero,0(fp)
  80a0a8:	d9800d17 	ldw	r6,52(sp)
  80a0ac:	d8c02717 	ldw	r3,156(sp)
  80a0b0:	d9002917 	ldw	r4,164(sp)
  80a0b4:	30800044 	addi	r2,r6,1
  80a0b8:	18800015 	stw	r2,0(r3)
  80a0bc:	20029c26 	beq	r4,zero,80ab30 <_dtoa_r+0x11c0>
  80a0c0:	d8c00517 	ldw	r3,20(sp)
  80a0c4:	27000015 	stw	fp,0(r4)
  80a0c8:	003e5d06 	br	809a40 <_dtoa_r+0xd0>
  80a0cc:	d9800d17 	ldw	r6,52(sp)
  80a0d0:	00c02074 	movhi	r3,129
  80a0d4:	18cb4904 	addi	r3,r3,11556
  80a0d8:	d9001217 	ldw	r4,72(sp)
  80a0dc:	300490fa 	slli	r2,r6,3
  80a0e0:	d9401317 	ldw	r5,76(sp)
  80a0e4:	10c5883a 	add	r2,r2,r3
  80a0e8:	12000017 	ldw	r8,0(r2)
  80a0ec:	12400117 	ldw	r9,4(r2)
  80a0f0:	400d883a 	mov	r6,r8
  80a0f4:	480f883a 	mov	r7,r9
  80a0f8:	0804a600 	call	804a60 <__ltdf2>
  80a0fc:	1000030e 	bge	r2,zero,80a10c <_dtoa_r+0x79c>
  80a100:	d8800d17 	ldw	r2,52(sp)
  80a104:	10bfffc4 	addi	r2,r2,-1
  80a108:	d8800d15 	stw	r2,52(sp)
  80a10c:	d8000c15 	stw	zero,48(sp)
  80a110:	003ea806 	br	809bb4 <_dtoa_r+0x244>
  80a114:	d9000b17 	ldw	r4,44(sp)
  80a118:	202cc03a 	cmpne	r22,r4,zero
  80a11c:	b000c71e 	bne	r22,zero,80a43c <_dtoa_r+0xacc>
  80a120:	dc001117 	ldw	r16,68(sp)
  80a124:	dc801017 	ldw	r18,64(sp)
  80a128:	0027883a 	mov	r19,zero
  80a12c:	04000b0e 	bge	zero,r16,80a15c <_dtoa_r+0x7ec>
  80a130:	d8c00a17 	ldw	r3,40(sp)
  80a134:	00c0090e 	bge	zero,r3,80a15c <_dtoa_r+0x7ec>
  80a138:	8005883a 	mov	r2,r16
  80a13c:	1c011316 	blt	r3,r16,80a58c <_dtoa_r+0xc1c>
  80a140:	d9000a17 	ldw	r4,40(sp)
  80a144:	d9801117 	ldw	r6,68(sp)
  80a148:	80a1c83a 	sub	r16,r16,r2
  80a14c:	2089c83a 	sub	r4,r4,r2
  80a150:	308dc83a 	sub	r6,r6,r2
  80a154:	d9000a15 	stw	r4,40(sp)
  80a158:	d9801115 	stw	r6,68(sp)
  80a15c:	d8801017 	ldw	r2,64(sp)
  80a160:	0080150e 	bge	zero,r2,80a1b8 <_dtoa_r+0x848>
  80a164:	d8c00b17 	ldw	r3,44(sp)
  80a168:	1805003a 	cmpeq	r2,r3,zero
  80a16c:	1001c91e 	bne	r2,zero,80a894 <_dtoa_r+0xf24>
  80a170:	04800e0e 	bge	zero,r18,80a1ac <_dtoa_r+0x83c>
  80a174:	d9001617 	ldw	r4,88(sp)
  80a178:	980b883a 	mov	r5,r19
  80a17c:	900d883a 	mov	r6,r18
  80a180:	080c6240 	call	80c624 <__pow5mult>
  80a184:	d9001617 	ldw	r4,88(sp)
  80a188:	d9800717 	ldw	r6,28(sp)
  80a18c:	100b883a 	mov	r5,r2
  80a190:	1027883a 	mov	r19,r2
  80a194:	080c3000 	call	80c300 <__multiply>
  80a198:	d9001617 	ldw	r4,88(sp)
  80a19c:	d9400717 	ldw	r5,28(sp)
  80a1a0:	1023883a 	mov	r17,r2
  80a1a4:	080b8700 	call	80b870 <_Bfree>
  80a1a8:	dc400715 	stw	r17,28(sp)
  80a1ac:	d9001017 	ldw	r4,64(sp)
  80a1b0:	248dc83a 	sub	r6,r4,r18
  80a1b4:	30010e1e 	bne	r6,zero,80a5f0 <_dtoa_r+0xc80>
  80a1b8:	d9001617 	ldw	r4,88(sp)
  80a1bc:	04400044 	movi	r17,1
  80a1c0:	880b883a 	mov	r5,r17
  80a1c4:	080c4e80 	call	80c4e8 <__i2b>
  80a1c8:	d9800917 	ldw	r6,36(sp)
  80a1cc:	1025883a 	mov	r18,r2
  80a1d0:	0180040e 	bge	zero,r6,80a1e4 <_dtoa_r+0x874>
  80a1d4:	d9001617 	ldw	r4,88(sp)
  80a1d8:	100b883a 	mov	r5,r2
  80a1dc:	080c6240 	call	80c624 <__pow5mult>
  80a1e0:	1025883a 	mov	r18,r2
  80a1e4:	d8801717 	ldw	r2,92(sp)
  80a1e8:	8880f30e 	bge	r17,r2,80a5b8 <_dtoa_r+0xc48>
  80a1ec:	0023883a 	mov	r17,zero
  80a1f0:	d9800917 	ldw	r6,36(sp)
  80a1f4:	30019e1e 	bne	r6,zero,80a870 <_dtoa_r+0xf00>
  80a1f8:	00c00044 	movi	r3,1
  80a1fc:	d9000a17 	ldw	r4,40(sp)
  80a200:	20c5883a 	add	r2,r4,r3
  80a204:	10c007cc 	andi	r3,r2,31
  80a208:	1800841e 	bne	r3,zero,80a41c <_dtoa_r+0xaac>
  80a20c:	00800704 	movi	r2,28
  80a210:	d9000a17 	ldw	r4,40(sp)
  80a214:	d9801117 	ldw	r6,68(sp)
  80a218:	80a1883a 	add	r16,r16,r2
  80a21c:	2089883a 	add	r4,r4,r2
  80a220:	308d883a 	add	r6,r6,r2
  80a224:	d9000a15 	stw	r4,40(sp)
  80a228:	d9801115 	stw	r6,68(sp)
  80a22c:	d8801117 	ldw	r2,68(sp)
  80a230:	0080050e 	bge	zero,r2,80a248 <_dtoa_r+0x8d8>
  80a234:	d9400717 	ldw	r5,28(sp)
  80a238:	d9001617 	ldw	r4,88(sp)
  80a23c:	100d883a 	mov	r6,r2
  80a240:	080c1b40 	call	80c1b4 <__lshift>
  80a244:	d8800715 	stw	r2,28(sp)
  80a248:	d8c00a17 	ldw	r3,40(sp)
  80a24c:	00c0050e 	bge	zero,r3,80a264 <_dtoa_r+0x8f4>
  80a250:	d9001617 	ldw	r4,88(sp)
  80a254:	900b883a 	mov	r5,r18
  80a258:	180d883a 	mov	r6,r3
  80a25c:	080c1b40 	call	80c1b4 <__lshift>
  80a260:	1025883a 	mov	r18,r2
  80a264:	d9000c17 	ldw	r4,48(sp)
  80a268:	2005003a 	cmpeq	r2,r4,zero
  80a26c:	10016f26 	beq	r2,zero,80a82c <_dtoa_r+0xebc>
  80a270:	d9000f17 	ldw	r4,60(sp)
  80a274:	0102170e 	bge	zero,r4,80aad4 <_dtoa_r+0x1164>
  80a278:	d9800b17 	ldw	r6,44(sp)
  80a27c:	3005003a 	cmpeq	r2,r6,zero
  80a280:	1000881e 	bne	r2,zero,80a4a4 <_dtoa_r+0xb34>
  80a284:	0400050e 	bge	zero,r16,80a29c <_dtoa_r+0x92c>
  80a288:	d9001617 	ldw	r4,88(sp)
  80a28c:	980b883a 	mov	r5,r19
  80a290:	800d883a 	mov	r6,r16
  80a294:	080c1b40 	call	80c1b4 <__lshift>
  80a298:	1027883a 	mov	r19,r2
  80a29c:	8804c03a 	cmpne	r2,r17,zero
  80a2a0:	1002541e 	bne	r2,zero,80abf4 <_dtoa_r+0x1284>
  80a2a4:	980b883a 	mov	r5,r19
  80a2a8:	dd800517 	ldw	r22,20(sp)
  80a2ac:	dcc00615 	stw	r19,24(sp)
  80a2b0:	a700004c 	andi	fp,r20,1
  80a2b4:	2827883a 	mov	r19,r5
  80a2b8:	d9000717 	ldw	r4,28(sp)
  80a2bc:	900b883a 	mov	r5,r18
  80a2c0:	08097580 	call	809758 <quorem>
  80a2c4:	d9000717 	ldw	r4,28(sp)
  80a2c8:	d9400617 	ldw	r5,24(sp)
  80a2cc:	1023883a 	mov	r17,r2
  80a2d0:	8dc00c04 	addi	r23,r17,48
  80a2d4:	080b9cc0 	call	80b9cc <__mcmp>
  80a2d8:	d9001617 	ldw	r4,88(sp)
  80a2dc:	900b883a 	mov	r5,r18
  80a2e0:	980d883a 	mov	r6,r19
  80a2e4:	1029883a 	mov	r20,r2
  80a2e8:	080c0280 	call	80c028 <__mdiff>
  80a2ec:	102b883a 	mov	r21,r2
  80a2f0:	10800317 	ldw	r2,12(r2)
  80a2f4:	1001281e 	bne	r2,zero,80a798 <_dtoa_r+0xe28>
  80a2f8:	d9000717 	ldw	r4,28(sp)
  80a2fc:	a80b883a 	mov	r5,r21
  80a300:	080b9cc0 	call	80b9cc <__mcmp>
  80a304:	d9001617 	ldw	r4,88(sp)
  80a308:	1021883a 	mov	r16,r2
  80a30c:	a80b883a 	mov	r5,r21
  80a310:	080b8700 	call	80b870 <_Bfree>
  80a314:	8000041e 	bne	r16,zero,80a328 <_dtoa_r+0x9b8>
  80a318:	d8801717 	ldw	r2,92(sp)
  80a31c:	1000021e 	bne	r2,zero,80a328 <_dtoa_r+0x9b8>
  80a320:	e004c03a 	cmpne	r2,fp,zero
  80a324:	10011726 	beq	r2,zero,80a784 <_dtoa_r+0xe14>
  80a328:	a0010616 	blt	r20,zero,80a744 <_dtoa_r+0xdd4>
  80a32c:	a000041e 	bne	r20,zero,80a340 <_dtoa_r+0x9d0>
  80a330:	d8c01717 	ldw	r3,92(sp)
  80a334:	1800021e 	bne	r3,zero,80a340 <_dtoa_r+0x9d0>
  80a338:	e004c03a 	cmpne	r2,fp,zero
  80a33c:	10010126 	beq	r2,zero,80a744 <_dtoa_r+0xdd4>
  80a340:	04023d16 	blt	zero,r16,80ac38 <_dtoa_r+0x12c8>
  80a344:	b5c00005 	stb	r23,0(r22)
  80a348:	d9800517 	ldw	r6,20(sp)
  80a34c:	d9000f17 	ldw	r4,60(sp)
  80a350:	b5800044 	addi	r22,r22,1
  80a354:	3105883a 	add	r2,r6,r4
  80a358:	b0806526 	beq	r22,r2,80a4f0 <_dtoa_r+0xb80>
  80a35c:	d9400717 	ldw	r5,28(sp)
  80a360:	d9001617 	ldw	r4,88(sp)
  80a364:	01800284 	movi	r6,10
  80a368:	000f883a 	mov	r7,zero
  80a36c:	080c5240 	call	80c524 <__multadd>
  80a370:	d8800715 	stw	r2,28(sp)
  80a374:	d8800617 	ldw	r2,24(sp)
  80a378:	14c10c26 	beq	r2,r19,80a7ac <_dtoa_r+0xe3c>
  80a37c:	d9400617 	ldw	r5,24(sp)
  80a380:	d9001617 	ldw	r4,88(sp)
  80a384:	01800284 	movi	r6,10
  80a388:	000f883a 	mov	r7,zero
  80a38c:	080c5240 	call	80c524 <__multadd>
  80a390:	d9001617 	ldw	r4,88(sp)
  80a394:	980b883a 	mov	r5,r19
  80a398:	01800284 	movi	r6,10
  80a39c:	000f883a 	mov	r7,zero
  80a3a0:	d8800615 	stw	r2,24(sp)
  80a3a4:	080c5240 	call	80c524 <__multadd>
  80a3a8:	1027883a 	mov	r19,r2
  80a3ac:	003fc206 	br	80a2b8 <_dtoa_r+0x948>
  80a3b0:	2445c83a 	sub	r2,r4,r17
  80a3b4:	a088983a 	sll	r4,r20,r2
  80a3b8:	003e4b06 	br	809ce8 <_dtoa_r+0x378>
  80a3bc:	01bfffc4 	movi	r6,-1
  80a3c0:	00800044 	movi	r2,1
  80a3c4:	d9800e15 	stw	r6,56(sp)
  80a3c8:	d9800f15 	stw	r6,60(sp)
  80a3cc:	d8800b15 	stw	r2,44(sp)
  80a3d0:	d8c01617 	ldw	r3,88(sp)
  80a3d4:	008005c4 	movi	r2,23
  80a3d8:	18001115 	stw	zero,68(r3)
  80a3dc:	1580082e 	bgeu	r2,r22,80a400 <_dtoa_r+0xa90>
  80a3e0:	00c00104 	movi	r3,4
  80a3e4:	0009883a 	mov	r4,zero
  80a3e8:	18c7883a 	add	r3,r3,r3
  80a3ec:	18800504 	addi	r2,r3,20
  80a3f0:	21000044 	addi	r4,r4,1
  80a3f4:	b0bffc2e 	bgeu	r22,r2,80a3e8 <_dtoa_r+0xa78>
  80a3f8:	d9801617 	ldw	r6,88(sp)
  80a3fc:	31001115 	stw	r4,68(r6)
  80a400:	dc000f17 	ldw	r16,60(sp)
  80a404:	003e4b06 	br	809d34 <_dtoa_r+0x3c4>
  80a408:	d9801717 	ldw	r6,92(sp)
  80a40c:	0023883a 	mov	r17,zero
  80a410:	31bfff04 	addi	r6,r6,-4
  80a414:	d9801715 	stw	r6,92(sp)
  80a418:	003df806 	br	809bfc <_dtoa_r+0x28c>
  80a41c:	00800804 	movi	r2,32
  80a420:	10c9c83a 	sub	r4,r2,r3
  80a424:	00c00104 	movi	r3,4
  80a428:	19005a16 	blt	r3,r4,80a594 <_dtoa_r+0xc24>
  80a42c:	008000c4 	movi	r2,3
  80a430:	113f7e16 	blt	r2,r4,80a22c <_dtoa_r+0x8bc>
  80a434:	20800704 	addi	r2,r4,28
  80a438:	003f7506 	br	80a210 <_dtoa_r+0x8a0>
  80a43c:	d9801717 	ldw	r6,92(sp)
  80a440:	00800044 	movi	r2,1
  80a444:	1180a10e 	bge	r2,r6,80a6cc <_dtoa_r+0xd5c>
  80a448:	d9800f17 	ldw	r6,60(sp)
  80a44c:	d8c01017 	ldw	r3,64(sp)
  80a450:	30bfffc4 	addi	r2,r6,-1
  80a454:	1881c616 	blt	r3,r2,80ab70 <_dtoa_r+0x1200>
  80a458:	18a5c83a 	sub	r18,r3,r2
  80a45c:	d8800f17 	ldw	r2,60(sp)
  80a460:	10026216 	blt	r2,zero,80adec <_dtoa_r+0x147c>
  80a464:	dc001117 	ldw	r16,68(sp)
  80a468:	1007883a 	mov	r3,r2
  80a46c:	d9800a17 	ldw	r6,40(sp)
  80a470:	d8801117 	ldw	r2,68(sp)
  80a474:	d9001617 	ldw	r4,88(sp)
  80a478:	30cd883a 	add	r6,r6,r3
  80a47c:	10c5883a 	add	r2,r2,r3
  80a480:	01400044 	movi	r5,1
  80a484:	d9800a15 	stw	r6,40(sp)
  80a488:	d8801115 	stw	r2,68(sp)
  80a48c:	080c4e80 	call	80c4e8 <__i2b>
  80a490:	1027883a 	mov	r19,r2
  80a494:	003f2506 	br	80a12c <_dtoa_r+0x7bc>
  80a498:	00c02074 	movhi	r3,129
  80a49c:	18cb2c04 	addi	r3,r3,11440
  80a4a0:	003d6706 	br	809a40 <_dtoa_r+0xd0>
  80a4a4:	dd800517 	ldw	r22,20(sp)
  80a4a8:	04000044 	movi	r16,1
  80a4ac:	00000706 	br	80a4cc <_dtoa_r+0xb5c>
  80a4b0:	d9400717 	ldw	r5,28(sp)
  80a4b4:	d9001617 	ldw	r4,88(sp)
  80a4b8:	01800284 	movi	r6,10
  80a4bc:	000f883a 	mov	r7,zero
  80a4c0:	080c5240 	call	80c524 <__multadd>
  80a4c4:	d8800715 	stw	r2,28(sp)
  80a4c8:	84000044 	addi	r16,r16,1
  80a4cc:	d9000717 	ldw	r4,28(sp)
  80a4d0:	900b883a 	mov	r5,r18
  80a4d4:	08097580 	call	809758 <quorem>
  80a4d8:	15c00c04 	addi	r23,r2,48
  80a4dc:	b5c00005 	stb	r23,0(r22)
  80a4e0:	d8c00f17 	ldw	r3,60(sp)
  80a4e4:	b5800044 	addi	r22,r22,1
  80a4e8:	80fff116 	blt	r16,r3,80a4b0 <_dtoa_r+0xb40>
  80a4ec:	d8000615 	stw	zero,24(sp)
  80a4f0:	d9400717 	ldw	r5,28(sp)
  80a4f4:	d9001617 	ldw	r4,88(sp)
  80a4f8:	01800044 	movi	r6,1
  80a4fc:	080c1b40 	call	80c1b4 <__lshift>
  80a500:	1009883a 	mov	r4,r2
  80a504:	900b883a 	mov	r5,r18
  80a508:	d8800715 	stw	r2,28(sp)
  80a50c:	080b9cc0 	call	80b9cc <__mcmp>
  80a510:	00803c0e 	bge	zero,r2,80a604 <_dtoa_r+0xc94>
  80a514:	b009883a 	mov	r4,r22
  80a518:	213fffc4 	addi	r4,r4,-1
  80a51c:	21400003 	ldbu	r5,0(r4)
  80a520:	00800e44 	movi	r2,57
  80a524:	28c03fcc 	andi	r3,r5,255
  80a528:	18c0201c 	xori	r3,r3,128
  80a52c:	18ffe004 	addi	r3,r3,-128
  80a530:	1881981e 	bne	r3,r2,80ab94 <_dtoa_r+0x1224>
  80a534:	d9800517 	ldw	r6,20(sp)
  80a538:	21bff71e 	bne	r4,r6,80a518 <_dtoa_r+0xba8>
  80a53c:	d8800d17 	ldw	r2,52(sp)
  80a540:	37000044 	addi	fp,r6,1
  80a544:	10800044 	addi	r2,r2,1
  80a548:	d8800d15 	stw	r2,52(sp)
  80a54c:	00800c44 	movi	r2,49
  80a550:	30800005 	stb	r2,0(r6)
  80a554:	d9001617 	ldw	r4,88(sp)
  80a558:	900b883a 	mov	r5,r18
  80a55c:	080b8700 	call	80b870 <_Bfree>
  80a560:	983ecd26 	beq	r19,zero,80a098 <_dtoa_r+0x728>
  80a564:	d8c00617 	ldw	r3,24(sp)
  80a568:	18000426 	beq	r3,zero,80a57c <_dtoa_r+0xc0c>
  80a56c:	1cc00326 	beq	r3,r19,80a57c <_dtoa_r+0xc0c>
  80a570:	d9001617 	ldw	r4,88(sp)
  80a574:	180b883a 	mov	r5,r3
  80a578:	080b8700 	call	80b870 <_Bfree>
  80a57c:	d9001617 	ldw	r4,88(sp)
  80a580:	980b883a 	mov	r5,r19
  80a584:	080b8700 	call	80b870 <_Bfree>
  80a588:	003ec306 	br	80a098 <_dtoa_r+0x728>
  80a58c:	1805883a 	mov	r2,r3
  80a590:	003eeb06 	br	80a140 <_dtoa_r+0x7d0>
  80a594:	d9800a17 	ldw	r6,40(sp)
  80a598:	d8c01117 	ldw	r3,68(sp)
  80a59c:	20bfff04 	addi	r2,r4,-4
  80a5a0:	308d883a 	add	r6,r6,r2
  80a5a4:	1887883a 	add	r3,r3,r2
  80a5a8:	80a1883a 	add	r16,r16,r2
  80a5ac:	d9800a15 	stw	r6,40(sp)
  80a5b0:	d8c01115 	stw	r3,68(sp)
  80a5b4:	003f1d06 	br	80a22c <_dtoa_r+0x8bc>
  80a5b8:	a03f0c1e 	bne	r20,zero,80a1ec <_dtoa_r+0x87c>
  80a5bc:	00800434 	movhi	r2,16
  80a5c0:	10bfffc4 	addi	r2,r2,-1
  80a5c4:	a884703a 	and	r2,r21,r2
  80a5c8:	103f081e 	bne	r2,zero,80a1ec <_dtoa_r+0x87c>
  80a5cc:	a89ffc2c 	andhi	r2,r21,32752
  80a5d0:	103f0626 	beq	r2,zero,80a1ec <_dtoa_r+0x87c>
  80a5d4:	d8c01117 	ldw	r3,68(sp)
  80a5d8:	d9000a17 	ldw	r4,40(sp)
  80a5dc:	18c00044 	addi	r3,r3,1
  80a5e0:	21000044 	addi	r4,r4,1
  80a5e4:	d8c01115 	stw	r3,68(sp)
  80a5e8:	d9000a15 	stw	r4,40(sp)
  80a5ec:	003f0006 	br	80a1f0 <_dtoa_r+0x880>
  80a5f0:	d9400717 	ldw	r5,28(sp)
  80a5f4:	d9001617 	ldw	r4,88(sp)
  80a5f8:	080c6240 	call	80c624 <__pow5mult>
  80a5fc:	d8800715 	stw	r2,28(sp)
  80a600:	003eed06 	br	80a1b8 <_dtoa_r+0x848>
  80a604:	1000021e 	bne	r2,zero,80a610 <_dtoa_r+0xca0>
  80a608:	b880004c 	andi	r2,r23,1
  80a60c:	103fc11e 	bne	r2,zero,80a514 <_dtoa_r+0xba4>
  80a610:	b5bfffc4 	addi	r22,r22,-1
  80a614:	b0c00007 	ldb	r3,0(r22)
  80a618:	00800c04 	movi	r2,48
  80a61c:	18bffc26 	beq	r3,r2,80a610 <_dtoa_r+0xca0>
  80a620:	b7000044 	addi	fp,r22,1
  80a624:	003fcb06 	br	80a554 <_dtoa_r+0xbe4>
  80a628:	d9800d17 	ldw	r6,52(sp)
  80a62c:	018fc83a 	sub	r7,zero,r6
  80a630:	3801f726 	beq	r7,zero,80ae10 <_dtoa_r+0x14a0>
  80a634:	398003cc 	andi	r6,r7,15
  80a638:	300c90fa 	slli	r6,r6,3
  80a63c:	01402074 	movhi	r5,129
  80a640:	294b4904 	addi	r5,r5,11556
  80a644:	d9001217 	ldw	r4,72(sp)
  80a648:	314d883a 	add	r6,r6,r5
  80a64c:	30c00117 	ldw	r3,4(r6)
  80a650:	30800017 	ldw	r2,0(r6)
  80a654:	d9401317 	ldw	r5,76(sp)
  80a658:	3821d13a 	srai	r16,r7,4
  80a65c:	100d883a 	mov	r6,r2
  80a660:	180f883a 	mov	r7,r3
  80a664:	08042ac0 	call	8042ac <__muldf3>
  80a668:	1011883a 	mov	r8,r2
  80a66c:	1813883a 	mov	r9,r3
  80a670:	1029883a 	mov	r20,r2
  80a674:	182b883a 	mov	r21,r3
  80a678:	8001e526 	beq	r16,zero,80ae10 <_dtoa_r+0x14a0>
  80a67c:	05800084 	movi	r22,2
  80a680:	04402074 	movhi	r17,129
  80a684:	8c4b7b04 	addi	r17,r17,11756
  80a688:	8080004c 	andi	r2,r16,1
  80a68c:	1005003a 	cmpeq	r2,r2,zero
  80a690:	1000081e 	bne	r2,zero,80a6b4 <_dtoa_r+0xd44>
  80a694:	89800017 	ldw	r6,0(r17)
  80a698:	89c00117 	ldw	r7,4(r17)
  80a69c:	480b883a 	mov	r5,r9
  80a6a0:	4009883a 	mov	r4,r8
  80a6a4:	08042ac0 	call	8042ac <__muldf3>
  80a6a8:	1011883a 	mov	r8,r2
  80a6ac:	b5800044 	addi	r22,r22,1
  80a6b0:	1813883a 	mov	r9,r3
  80a6b4:	8021d07a 	srai	r16,r16,1
  80a6b8:	8c400204 	addi	r17,r17,8
  80a6bc:	803ff21e 	bne	r16,zero,80a688 <_dtoa_r+0xd18>
  80a6c0:	4029883a 	mov	r20,r8
  80a6c4:	482b883a 	mov	r21,r9
  80a6c8:	003dca06 	br	809df4 <_dtoa_r+0x484>
  80a6cc:	d9000817 	ldw	r4,32(sp)
  80a6d0:	2005003a 	cmpeq	r2,r4,zero
  80a6d4:	1001f61e 	bne	r2,zero,80aeb0 <_dtoa_r+0x1540>
  80a6d8:	dc001117 	ldw	r16,68(sp)
  80a6dc:	dc801017 	ldw	r18,64(sp)
  80a6e0:	18c10cc4 	addi	r3,r3,1075
  80a6e4:	003f6106 	br	80a46c <_dtoa_r+0xafc>
  80a6e8:	d8000b15 	stw	zero,44(sp)
  80a6ec:	d9802617 	ldw	r6,152(sp)
  80a6f0:	d8c00d17 	ldw	r3,52(sp)
  80a6f4:	30800044 	addi	r2,r6,1
  80a6f8:	18ad883a 	add	r22,r3,r2
  80a6fc:	b13fffc4 	addi	r4,r22,-1
  80a700:	d9000e15 	stw	r4,56(sp)
  80a704:	0581f60e 	bge	zero,r22,80aee0 <_dtoa_r+0x1570>
  80a708:	dd800f15 	stw	r22,60(sp)
  80a70c:	003f3006 	br	80a3d0 <_dtoa_r+0xa60>
  80a710:	d8000b15 	stw	zero,44(sp)
  80a714:	d9002617 	ldw	r4,152(sp)
  80a718:	0101eb0e 	bge	zero,r4,80aec8 <_dtoa_r+0x1558>
  80a71c:	202d883a 	mov	r22,r4
  80a720:	d9000e15 	stw	r4,56(sp)
  80a724:	d9000f15 	stw	r4,60(sp)
  80a728:	003f2906 	br	80a3d0 <_dtoa_r+0xa60>
  80a72c:	01800044 	movi	r6,1
  80a730:	d9800b15 	stw	r6,44(sp)
  80a734:	003ff706 	br	80a714 <_dtoa_r+0xda4>
  80a738:	01000044 	movi	r4,1
  80a73c:	d9000b15 	stw	r4,44(sp)
  80a740:	003fea06 	br	80a6ec <_dtoa_r+0xd7c>
  80a744:	04000c0e 	bge	zero,r16,80a778 <_dtoa_r+0xe08>
  80a748:	d9400717 	ldw	r5,28(sp)
  80a74c:	d9001617 	ldw	r4,88(sp)
  80a750:	01800044 	movi	r6,1
  80a754:	080c1b40 	call	80c1b4 <__lshift>
  80a758:	1009883a 	mov	r4,r2
  80a75c:	900b883a 	mov	r5,r18
  80a760:	d8800715 	stw	r2,28(sp)
  80a764:	080b9cc0 	call	80b9cc <__mcmp>
  80a768:	0081e00e 	bge	zero,r2,80aeec <_dtoa_r+0x157c>
  80a76c:	bdc00044 	addi	r23,r23,1
  80a770:	00800e84 	movi	r2,58
  80a774:	b881a226 	beq	r23,r2,80ae00 <_dtoa_r+0x1490>
  80a778:	b7000044 	addi	fp,r22,1
  80a77c:	b5c00005 	stb	r23,0(r22)
  80a780:	003f7406 	br	80a554 <_dtoa_r+0xbe4>
  80a784:	00800e44 	movi	r2,57
  80a788:	b8819d26 	beq	r23,r2,80ae00 <_dtoa_r+0x1490>
  80a78c:	053ffa0e 	bge	zero,r20,80a778 <_dtoa_r+0xe08>
  80a790:	8dc00c44 	addi	r23,r17,49
  80a794:	003ff806 	br	80a778 <_dtoa_r+0xe08>
  80a798:	d9001617 	ldw	r4,88(sp)
  80a79c:	a80b883a 	mov	r5,r21
  80a7a0:	04000044 	movi	r16,1
  80a7a4:	080b8700 	call	80b870 <_Bfree>
  80a7a8:	003edf06 	br	80a328 <_dtoa_r+0x9b8>
  80a7ac:	d9001617 	ldw	r4,88(sp)
  80a7b0:	980b883a 	mov	r5,r19
  80a7b4:	01800284 	movi	r6,10
  80a7b8:	000f883a 	mov	r7,zero
  80a7bc:	080c5240 	call	80c524 <__multadd>
  80a7c0:	1027883a 	mov	r19,r2
  80a7c4:	d8800615 	stw	r2,24(sp)
  80a7c8:	003ebb06 	br	80a2b8 <_dtoa_r+0x948>
  80a7cc:	d9801117 	ldw	r6,68(sp)
  80a7d0:	d8800d17 	ldw	r2,52(sp)
  80a7d4:	d8000915 	stw	zero,36(sp)
  80a7d8:	308dc83a 	sub	r6,r6,r2
  80a7dc:	0087c83a 	sub	r3,zero,r2
  80a7e0:	d9801115 	stw	r6,68(sp)
  80a7e4:	d8c01015 	stw	r3,64(sp)
  80a7e8:	003cfe06 	br	809be4 <_dtoa_r+0x274>
  80a7ec:	018dc83a 	sub	r6,zero,r6
  80a7f0:	d9801115 	stw	r6,68(sp)
  80a7f4:	d8000a15 	stw	zero,40(sp)
  80a7f8:	003cf306 	br	809bc8 <_dtoa_r+0x258>
  80a7fc:	d9000d17 	ldw	r4,52(sp)
  80a800:	0804b700 	call	804b70 <__floatsidf>
  80a804:	880b883a 	mov	r5,r17
  80a808:	8009883a 	mov	r4,r16
  80a80c:	180f883a 	mov	r7,r3
  80a810:	100d883a 	mov	r6,r2
  80a814:	08049500 	call	804950 <__nedf2>
  80a818:	103ce126 	beq	r2,zero,809ba0 <_dtoa_r+0x230>
  80a81c:	d9800d17 	ldw	r6,52(sp)
  80a820:	31bfffc4 	addi	r6,r6,-1
  80a824:	d9800d15 	stw	r6,52(sp)
  80a828:	003cdd06 	br	809ba0 <_dtoa_r+0x230>
  80a82c:	d9000717 	ldw	r4,28(sp)
  80a830:	900b883a 	mov	r5,r18
  80a834:	080b9cc0 	call	80b9cc <__mcmp>
  80a838:	103e8d0e 	bge	r2,zero,80a270 <_dtoa_r+0x900>
  80a83c:	d9400717 	ldw	r5,28(sp)
  80a840:	d9001617 	ldw	r4,88(sp)
  80a844:	01800284 	movi	r6,10
  80a848:	000f883a 	mov	r7,zero
  80a84c:	080c5240 	call	80c524 <__multadd>
  80a850:	d9800d17 	ldw	r6,52(sp)
  80a854:	d8800715 	stw	r2,28(sp)
  80a858:	31bfffc4 	addi	r6,r6,-1
  80a85c:	d9800d15 	stw	r6,52(sp)
  80a860:	b001a71e 	bne	r22,zero,80af00 <_dtoa_r+0x1590>
  80a864:	d8800e17 	ldw	r2,56(sp)
  80a868:	d8800f15 	stw	r2,60(sp)
  80a86c:	003e8006 	br	80a270 <_dtoa_r+0x900>
  80a870:	90800417 	ldw	r2,16(r18)
  80a874:	1085883a 	add	r2,r2,r2
  80a878:	1085883a 	add	r2,r2,r2
  80a87c:	1485883a 	add	r2,r2,r18
  80a880:	11000417 	ldw	r4,16(r2)
  80a884:	080b8980 	call	80b898 <__hi0bits>
  80a888:	00c00804 	movi	r3,32
  80a88c:	1887c83a 	sub	r3,r3,r2
  80a890:	003e5a06 	br	80a1fc <_dtoa_r+0x88c>
  80a894:	d9400717 	ldw	r5,28(sp)
  80a898:	d9801017 	ldw	r6,64(sp)
  80a89c:	d9001617 	ldw	r4,88(sp)
  80a8a0:	080c6240 	call	80c624 <__pow5mult>
  80a8a4:	d8800715 	stw	r2,28(sp)
  80a8a8:	003e4306 	br	80a1b8 <_dtoa_r+0x848>
  80a8ac:	d9800f17 	ldw	r6,60(sp)
  80a8b0:	d8800d17 	ldw	r2,52(sp)
  80a8b4:	d9800315 	stw	r6,12(sp)
  80a8b8:	d8800415 	stw	r2,16(sp)
  80a8bc:	d8c00b17 	ldw	r3,44(sp)
  80a8c0:	1805003a 	cmpeq	r2,r3,zero
  80a8c4:	1000e21e 	bne	r2,zero,80ac50 <_dtoa_r+0x12e0>
  80a8c8:	d9000317 	ldw	r4,12(sp)
  80a8cc:	0005883a 	mov	r2,zero
  80a8d0:	00cff834 	movhi	r3,16352
  80a8d4:	200c90fa 	slli	r6,r4,3
  80a8d8:	01002074 	movhi	r4,129
  80a8dc:	210b4904 	addi	r4,r4,11556
  80a8e0:	180b883a 	mov	r5,r3
  80a8e4:	310d883a 	add	r6,r6,r4
  80a8e8:	327fff17 	ldw	r9,-4(r6)
  80a8ec:	323ffe17 	ldw	r8,-8(r6)
  80a8f0:	1009883a 	mov	r4,r2
  80a8f4:	480f883a 	mov	r7,r9
  80a8f8:	400d883a 	mov	r6,r8
  80a8fc:	08046700 	call	804670 <__divdf3>
  80a900:	180b883a 	mov	r5,r3
  80a904:	b00d883a 	mov	r6,r22
  80a908:	b80f883a 	mov	r7,r23
  80a90c:	1009883a 	mov	r4,r2
  80a910:	08041b80 	call	8041b8 <__subdf3>
  80a914:	a80b883a 	mov	r5,r21
  80a918:	a009883a 	mov	r4,r20
  80a91c:	d8c01915 	stw	r3,100(sp)
  80a920:	d8801815 	stw	r2,96(sp)
  80a924:	0804c680 	call	804c68 <__fixdfsi>
  80a928:	1009883a 	mov	r4,r2
  80a92c:	1027883a 	mov	r19,r2
  80a930:	0804b700 	call	804b70 <__floatsidf>
  80a934:	a80b883a 	mov	r5,r21
  80a938:	a009883a 	mov	r4,r20
  80a93c:	180f883a 	mov	r7,r3
  80a940:	100d883a 	mov	r6,r2
  80a944:	08041b80 	call	8041b8 <__subdf3>
  80a948:	d9801817 	ldw	r6,96(sp)
  80a94c:	1823883a 	mov	r17,r3
  80a950:	d8801415 	stw	r2,80(sp)
  80a954:	302d883a 	mov	r22,r6
  80a958:	d9800517 	ldw	r6,20(sp)
  80a95c:	9cc00c04 	addi	r19,r19,48
  80a960:	dc401515 	stw	r17,84(sp)
  80a964:	d8c01917 	ldw	r3,100(sp)
  80a968:	34c00005 	stb	r19,0(r6)
  80a96c:	d8800517 	ldw	r2,20(sp)
  80a970:	d9401917 	ldw	r5,100(sp)
  80a974:	d9801417 	ldw	r6,80(sp)
  80a978:	b009883a 	mov	r4,r22
  80a97c:	880f883a 	mov	r7,r17
  80a980:	182f883a 	mov	r23,r3
  80a984:	17000044 	addi	fp,r2,1
  80a988:	08049d80 	call	8049d8 <__gtdf2>
  80a98c:	00804e16 	blt	zero,r2,80aac8 <_dtoa_r+0x1158>
  80a990:	d9801417 	ldw	r6,80(sp)
  80a994:	0005883a 	mov	r2,zero
  80a998:	00cffc34 	movhi	r3,16368
  80a99c:	180b883a 	mov	r5,r3
  80a9a0:	880f883a 	mov	r7,r17
  80a9a4:	1009883a 	mov	r4,r2
  80a9a8:	08041b80 	call	8041b8 <__subdf3>
  80a9ac:	d9401917 	ldw	r5,100(sp)
  80a9b0:	180f883a 	mov	r7,r3
  80a9b4:	b009883a 	mov	r4,r22
  80a9b8:	100d883a 	mov	r6,r2
  80a9bc:	08049d80 	call	8049d8 <__gtdf2>
  80a9c0:	00bda216 	blt	zero,r2,80a04c <_dtoa_r+0x6dc>
  80a9c4:	d8c00317 	ldw	r3,12(sp)
  80a9c8:	00800044 	movi	r2,1
  80a9cc:	10c01216 	blt	r2,r3,80aa18 <_dtoa_r+0x10a8>
  80a9d0:	003d4506 	br	809ee8 <_dtoa_r+0x578>
  80a9d4:	d9801417 	ldw	r6,80(sp)
  80a9d8:	0005883a 	mov	r2,zero
  80a9dc:	00cffc34 	movhi	r3,16368
  80a9e0:	180b883a 	mov	r5,r3
  80a9e4:	880f883a 	mov	r7,r17
  80a9e8:	1009883a 	mov	r4,r2
  80a9ec:	08041b80 	call	8041b8 <__subdf3>
  80a9f0:	d9c01b17 	ldw	r7,108(sp)
  80a9f4:	180b883a 	mov	r5,r3
  80a9f8:	1009883a 	mov	r4,r2
  80a9fc:	b00d883a 	mov	r6,r22
  80aa00:	0804a600 	call	804a60 <__ltdf2>
  80aa04:	103d9116 	blt	r2,zero,80a04c <_dtoa_r+0x6dc>
  80aa08:	d9800517 	ldw	r6,20(sp)
  80aa0c:	d9000317 	ldw	r4,12(sp)
  80aa10:	3105883a 	add	r2,r6,r4
  80aa14:	e0bd3426 	beq	fp,r2,809ee8 <_dtoa_r+0x578>
  80aa18:	04500934 	movhi	r17,16420
  80aa1c:	0021883a 	mov	r16,zero
  80aa20:	b80b883a 	mov	r5,r23
  80aa24:	b009883a 	mov	r4,r22
  80aa28:	800d883a 	mov	r6,r16
  80aa2c:	880f883a 	mov	r7,r17
  80aa30:	08042ac0 	call	8042ac <__muldf3>
  80aa34:	d9401517 	ldw	r5,84(sp)
  80aa38:	d9001417 	ldw	r4,80(sp)
  80aa3c:	880f883a 	mov	r7,r17
  80aa40:	000d883a 	mov	r6,zero
  80aa44:	d8801a15 	stw	r2,104(sp)
  80aa48:	d8c01b15 	stw	r3,108(sp)
  80aa4c:	08042ac0 	call	8042ac <__muldf3>
  80aa50:	180b883a 	mov	r5,r3
  80aa54:	1009883a 	mov	r4,r2
  80aa58:	1823883a 	mov	r17,r3
  80aa5c:	1021883a 	mov	r16,r2
  80aa60:	0804c680 	call	804c68 <__fixdfsi>
  80aa64:	1009883a 	mov	r4,r2
  80aa68:	102b883a 	mov	r21,r2
  80aa6c:	0804b700 	call	804b70 <__floatsidf>
  80aa70:	880b883a 	mov	r5,r17
  80aa74:	8009883a 	mov	r4,r16
  80aa78:	180f883a 	mov	r7,r3
  80aa7c:	100d883a 	mov	r6,r2
  80aa80:	08041b80 	call	8041b8 <__subdf3>
  80aa84:	1021883a 	mov	r16,r2
  80aa88:	d9001b17 	ldw	r4,108(sp)
  80aa8c:	1823883a 	mov	r17,r3
  80aa90:	dc001415 	stw	r16,80(sp)
  80aa94:	ad400c04 	addi	r21,r21,48
  80aa98:	dc401515 	stw	r17,84(sp)
  80aa9c:	d8801a17 	ldw	r2,104(sp)
  80aaa0:	e5400005 	stb	r21,0(fp)
  80aaa4:	202f883a 	mov	r23,r4
  80aaa8:	d9c01b17 	ldw	r7,108(sp)
  80aaac:	d9001417 	ldw	r4,80(sp)
  80aab0:	880b883a 	mov	r5,r17
  80aab4:	100d883a 	mov	r6,r2
  80aab8:	102d883a 	mov	r22,r2
  80aabc:	e7000044 	addi	fp,fp,1
  80aac0:	0804a600 	call	804a60 <__ltdf2>
  80aac4:	103fc30e 	bge	r2,zero,80a9d4 <_dtoa_r+0x1064>
  80aac8:	d9000417 	ldw	r4,16(sp)
  80aacc:	d9000d15 	stw	r4,52(sp)
  80aad0:	003d7106 	br	80a098 <_dtoa_r+0x728>
  80aad4:	d9801717 	ldw	r6,92(sp)
  80aad8:	00800084 	movi	r2,2
  80aadc:	11bde60e 	bge	r2,r6,80a278 <_dtoa_r+0x908>
  80aae0:	203cfb1e 	bne	r4,zero,809ed0 <_dtoa_r+0x560>
  80aae4:	d9001617 	ldw	r4,88(sp)
  80aae8:	900b883a 	mov	r5,r18
  80aaec:	01800144 	movi	r6,5
  80aaf0:	000f883a 	mov	r7,zero
  80aaf4:	080c5240 	call	80c524 <__multadd>
  80aaf8:	d9000717 	ldw	r4,28(sp)
  80aafc:	100b883a 	mov	r5,r2
  80ab00:	1025883a 	mov	r18,r2
  80ab04:	080b9cc0 	call	80b9cc <__mcmp>
  80ab08:	00bcf10e 	bge	zero,r2,809ed0 <_dtoa_r+0x560>
  80ab0c:	d8c00d17 	ldw	r3,52(sp)
  80ab10:	d9000517 	ldw	r4,20(sp)
  80ab14:	d8000615 	stw	zero,24(sp)
  80ab18:	18c00044 	addi	r3,r3,1
  80ab1c:	d8c00d15 	stw	r3,52(sp)
  80ab20:	00800c44 	movi	r2,49
  80ab24:	27000044 	addi	fp,r4,1
  80ab28:	20800005 	stb	r2,0(r4)
  80ab2c:	003e8906 	br	80a554 <_dtoa_r+0xbe4>
  80ab30:	d8c00517 	ldw	r3,20(sp)
  80ab34:	003bc206 	br	809a40 <_dtoa_r+0xd0>
  80ab38:	01802074 	movhi	r6,129
  80ab3c:	318b7b04 	addi	r6,r6,11756
  80ab40:	30c00917 	ldw	r3,36(r6)
  80ab44:	30800817 	ldw	r2,32(r6)
  80ab48:	d9001217 	ldw	r4,72(sp)
  80ab4c:	d9401317 	ldw	r5,76(sp)
  80ab50:	180f883a 	mov	r7,r3
  80ab54:	100d883a 	mov	r6,r2
  80ab58:	08046700 	call	804670 <__divdf3>
  80ab5c:	948003cc 	andi	r18,r18,15
  80ab60:	058000c4 	movi	r22,3
  80ab64:	1029883a 	mov	r20,r2
  80ab68:	182b883a 	mov	r21,r3
  80ab6c:	003c8906 	br	809d94 <_dtoa_r+0x424>
  80ab70:	d9001017 	ldw	r4,64(sp)
  80ab74:	d9800917 	ldw	r6,36(sp)
  80ab78:	0025883a 	mov	r18,zero
  80ab7c:	1105c83a 	sub	r2,r2,r4
  80ab80:	2089883a 	add	r4,r4,r2
  80ab84:	308d883a 	add	r6,r6,r2
  80ab88:	d9001015 	stw	r4,64(sp)
  80ab8c:	d9800915 	stw	r6,36(sp)
  80ab90:	003e3206 	br	80a45c <_dtoa_r+0xaec>
  80ab94:	28800044 	addi	r2,r5,1
  80ab98:	27000044 	addi	fp,r4,1
  80ab9c:	20800005 	stb	r2,0(r4)
  80aba0:	003e6c06 	br	80a554 <_dtoa_r+0xbe4>
  80aba4:	d8800f17 	ldw	r2,60(sp)
  80aba8:	00bce016 	blt	zero,r2,809f2c <_dtoa_r+0x5bc>
  80abac:	d9800f17 	ldw	r6,60(sp)
  80abb0:	303cc51e 	bne	r6,zero,809ec8 <_dtoa_r+0x558>
  80abb4:	0005883a 	mov	r2,zero
  80abb8:	00d00534 	movhi	r3,16404
  80abbc:	980b883a 	mov	r5,r19
  80abc0:	180f883a 	mov	r7,r3
  80abc4:	9009883a 	mov	r4,r18
  80abc8:	100d883a 	mov	r6,r2
  80abcc:	08042ac0 	call	8042ac <__muldf3>
  80abd0:	180b883a 	mov	r5,r3
  80abd4:	a80f883a 	mov	r7,r21
  80abd8:	1009883a 	mov	r4,r2
  80abdc:	a00d883a 	mov	r6,r20
  80abe0:	080dfb80 	call	80dfb8 <__gedf2>
  80abe4:	103cb80e 	bge	r2,zero,809ec8 <_dtoa_r+0x558>
  80abe8:	0027883a 	mov	r19,zero
  80abec:	0025883a 	mov	r18,zero
  80abf0:	003fc606 	br	80ab0c <_dtoa_r+0x119c>
  80abf4:	99400117 	ldw	r5,4(r19)
  80abf8:	d9001617 	ldw	r4,88(sp)
  80abfc:	080bdf00 	call	80bdf0 <_Balloc>
  80ac00:	99800417 	ldw	r6,16(r19)
  80ac04:	11000304 	addi	r4,r2,12
  80ac08:	99400304 	addi	r5,r19,12
  80ac0c:	318d883a 	add	r6,r6,r6
  80ac10:	318d883a 	add	r6,r6,r6
  80ac14:	31800204 	addi	r6,r6,8
  80ac18:	1023883a 	mov	r17,r2
  80ac1c:	080b6f00 	call	80b6f0 <memcpy>
  80ac20:	d9001617 	ldw	r4,88(sp)
  80ac24:	880b883a 	mov	r5,r17
  80ac28:	01800044 	movi	r6,1
  80ac2c:	080c1b40 	call	80c1b4 <__lshift>
  80ac30:	100b883a 	mov	r5,r2
  80ac34:	003d9c06 	br	80a2a8 <_dtoa_r+0x938>
  80ac38:	00800e44 	movi	r2,57
  80ac3c:	b8807026 	beq	r23,r2,80ae00 <_dtoa_r+0x1490>
  80ac40:	b8800044 	addi	r2,r23,1
  80ac44:	b7000044 	addi	fp,r22,1
  80ac48:	b0800005 	stb	r2,0(r22)
  80ac4c:	003e4106 	br	80a554 <_dtoa_r+0xbe4>
  80ac50:	d8800317 	ldw	r2,12(sp)
  80ac54:	01802074 	movhi	r6,129
  80ac58:	318b4904 	addi	r6,r6,11556
  80ac5c:	b009883a 	mov	r4,r22
  80ac60:	100e90fa 	slli	r7,r2,3
  80ac64:	b80b883a 	mov	r5,r23
  80ac68:	398f883a 	add	r7,r7,r6
  80ac6c:	38bffe17 	ldw	r2,-8(r7)
  80ac70:	d9800517 	ldw	r6,20(sp)
  80ac74:	38ffff17 	ldw	r3,-4(r7)
  80ac78:	37000044 	addi	fp,r6,1
  80ac7c:	180f883a 	mov	r7,r3
  80ac80:	100d883a 	mov	r6,r2
  80ac84:	08042ac0 	call	8042ac <__muldf3>
  80ac88:	a80b883a 	mov	r5,r21
  80ac8c:	a009883a 	mov	r4,r20
  80ac90:	182f883a 	mov	r23,r3
  80ac94:	102d883a 	mov	r22,r2
  80ac98:	0804c680 	call	804c68 <__fixdfsi>
  80ac9c:	1009883a 	mov	r4,r2
  80aca0:	1027883a 	mov	r19,r2
  80aca4:	0804b700 	call	804b70 <__floatsidf>
  80aca8:	a80b883a 	mov	r5,r21
  80acac:	a009883a 	mov	r4,r20
  80acb0:	180f883a 	mov	r7,r3
  80acb4:	100d883a 	mov	r6,r2
  80acb8:	08041b80 	call	8041b8 <__subdf3>
  80acbc:	180b883a 	mov	r5,r3
  80acc0:	d8c00517 	ldw	r3,20(sp)
  80acc4:	9cc00c04 	addi	r19,r19,48
  80acc8:	1009883a 	mov	r4,r2
  80accc:	1cc00005 	stb	r19,0(r3)
  80acd0:	2021883a 	mov	r16,r4
  80acd4:	d9000317 	ldw	r4,12(sp)
  80acd8:	00800044 	movi	r2,1
  80acdc:	2823883a 	mov	r17,r5
  80ace0:	20802226 	beq	r4,r2,80ad6c <_dtoa_r+0x13fc>
  80ace4:	1029883a 	mov	r20,r2
  80ace8:	0005883a 	mov	r2,zero
  80acec:	00d00934 	movhi	r3,16420
  80acf0:	180f883a 	mov	r7,r3
  80acf4:	100d883a 	mov	r6,r2
  80acf8:	880b883a 	mov	r5,r17
  80acfc:	8009883a 	mov	r4,r16
  80ad00:	08042ac0 	call	8042ac <__muldf3>
  80ad04:	180b883a 	mov	r5,r3
  80ad08:	1009883a 	mov	r4,r2
  80ad0c:	1823883a 	mov	r17,r3
  80ad10:	1021883a 	mov	r16,r2
  80ad14:	0804c680 	call	804c68 <__fixdfsi>
  80ad18:	1009883a 	mov	r4,r2
  80ad1c:	102b883a 	mov	r21,r2
  80ad20:	0804b700 	call	804b70 <__floatsidf>
  80ad24:	880b883a 	mov	r5,r17
  80ad28:	8009883a 	mov	r4,r16
  80ad2c:	180f883a 	mov	r7,r3
  80ad30:	100d883a 	mov	r6,r2
  80ad34:	08041b80 	call	8041b8 <__subdf3>
  80ad38:	180b883a 	mov	r5,r3
  80ad3c:	d8c00517 	ldw	r3,20(sp)
  80ad40:	1009883a 	mov	r4,r2
  80ad44:	ad400c04 	addi	r21,r21,48
  80ad48:	1d05883a 	add	r2,r3,r20
  80ad4c:	15400005 	stb	r21,0(r2)
  80ad50:	2021883a 	mov	r16,r4
  80ad54:	d9000317 	ldw	r4,12(sp)
  80ad58:	a5000044 	addi	r20,r20,1
  80ad5c:	2823883a 	mov	r17,r5
  80ad60:	a13fe11e 	bne	r20,r4,80ace8 <_dtoa_r+0x1378>
  80ad64:	e505883a 	add	r2,fp,r20
  80ad68:	173fffc4 	addi	fp,r2,-1
  80ad6c:	0025883a 	mov	r18,zero
  80ad70:	04cff834 	movhi	r19,16352
  80ad74:	b009883a 	mov	r4,r22
  80ad78:	b80b883a 	mov	r5,r23
  80ad7c:	900d883a 	mov	r6,r18
  80ad80:	980f883a 	mov	r7,r19
  80ad84:	08042380 	call	804238 <__adddf3>
  80ad88:	180b883a 	mov	r5,r3
  80ad8c:	1009883a 	mov	r4,r2
  80ad90:	800d883a 	mov	r6,r16
  80ad94:	880f883a 	mov	r7,r17
  80ad98:	0804a600 	call	804a60 <__ltdf2>
  80ad9c:	103cab16 	blt	r2,zero,80a04c <_dtoa_r+0x6dc>
  80ada0:	0009883a 	mov	r4,zero
  80ada4:	980b883a 	mov	r5,r19
  80ada8:	b80f883a 	mov	r7,r23
  80adac:	b00d883a 	mov	r6,r22
  80adb0:	08041b80 	call	8041b8 <__subdf3>
  80adb4:	180b883a 	mov	r5,r3
  80adb8:	880f883a 	mov	r7,r17
  80adbc:	1009883a 	mov	r4,r2
  80adc0:	800d883a 	mov	r6,r16
  80adc4:	08049d80 	call	8049d8 <__gtdf2>
  80adc8:	00bc470e 	bge	zero,r2,809ee8 <_dtoa_r+0x578>
  80adcc:	00c00c04 	movi	r3,48
  80add0:	e73fffc4 	addi	fp,fp,-1
  80add4:	e0800007 	ldb	r2,0(fp)
  80add8:	10fffd26 	beq	r2,r3,80add0 <_dtoa_r+0x1460>
  80addc:	d9800417 	ldw	r6,16(sp)
  80ade0:	e7000044 	addi	fp,fp,1
  80ade4:	d9800d15 	stw	r6,52(sp)
  80ade8:	003cab06 	br	80a098 <_dtoa_r+0x728>
  80adec:	d8c00f17 	ldw	r3,60(sp)
  80adf0:	d9001117 	ldw	r4,68(sp)
  80adf4:	20e1c83a 	sub	r16,r4,r3
  80adf8:	0007883a 	mov	r3,zero
  80adfc:	003d9b06 	br	80a46c <_dtoa_r+0xafc>
  80ae00:	00800e44 	movi	r2,57
  80ae04:	b0800005 	stb	r2,0(r22)
  80ae08:	b5800044 	addi	r22,r22,1
  80ae0c:	003dc106 	br	80a514 <_dtoa_r+0xba4>
  80ae10:	05800084 	movi	r22,2
  80ae14:	003bf706 	br	809df4 <_dtoa_r+0x484>
  80ae18:	d9000f17 	ldw	r4,60(sp)
  80ae1c:	013c000e 	bge	zero,r4,809e20 <_dtoa_r+0x4b0>
  80ae20:	d9800e17 	ldw	r6,56(sp)
  80ae24:	01bc300e 	bge	zero,r6,809ee8 <_dtoa_r+0x578>
  80ae28:	0005883a 	mov	r2,zero
  80ae2c:	00d00934 	movhi	r3,16420
  80ae30:	a80b883a 	mov	r5,r21
  80ae34:	180f883a 	mov	r7,r3
  80ae38:	a009883a 	mov	r4,r20
  80ae3c:	100d883a 	mov	r6,r2
  80ae40:	08042ac0 	call	8042ac <__muldf3>
  80ae44:	b1000044 	addi	r4,r22,1
  80ae48:	1021883a 	mov	r16,r2
  80ae4c:	1823883a 	mov	r17,r3
  80ae50:	0804b700 	call	804b70 <__floatsidf>
  80ae54:	880b883a 	mov	r5,r17
  80ae58:	8009883a 	mov	r4,r16
  80ae5c:	180f883a 	mov	r7,r3
  80ae60:	100d883a 	mov	r6,r2
  80ae64:	08042ac0 	call	8042ac <__muldf3>
  80ae68:	0011883a 	mov	r8,zero
  80ae6c:	02500734 	movhi	r9,16412
  80ae70:	180b883a 	mov	r5,r3
  80ae74:	480f883a 	mov	r7,r9
  80ae78:	1009883a 	mov	r4,r2
  80ae7c:	400d883a 	mov	r6,r8
  80ae80:	08042380 	call	804238 <__adddf3>
  80ae84:	102d883a 	mov	r22,r2
  80ae88:	00bf3034 	movhi	r2,64704
  80ae8c:	10ef883a 	add	r23,r2,r3
  80ae90:	d8800d17 	ldw	r2,52(sp)
  80ae94:	d8c00e17 	ldw	r3,56(sp)
  80ae98:	8029883a 	mov	r20,r16
  80ae9c:	10bfffc4 	addi	r2,r2,-1
  80aea0:	882b883a 	mov	r21,r17
  80aea4:	d8800415 	stw	r2,16(sp)
  80aea8:	d8c00315 	stw	r3,12(sp)
  80aeac:	003e8306 	br	80a8bc <_dtoa_r+0xf4c>
  80aeb0:	d8800117 	ldw	r2,4(sp)
  80aeb4:	dc001117 	ldw	r16,68(sp)
  80aeb8:	dc801017 	ldw	r18,64(sp)
  80aebc:	00c00d84 	movi	r3,54
  80aec0:	1887c83a 	sub	r3,r3,r2
  80aec4:	003d6906 	br	80a46c <_dtoa_r+0xafc>
  80aec8:	01800044 	movi	r6,1
  80aecc:	3021883a 	mov	r16,r6
  80aed0:	d9800f15 	stw	r6,60(sp)
  80aed4:	d9802615 	stw	r6,152(sp)
  80aed8:	d9800e15 	stw	r6,56(sp)
  80aedc:	003b9306 	br	809d2c <_dtoa_r+0x3bc>
  80aee0:	b021883a 	mov	r16,r22
  80aee4:	dd800f15 	stw	r22,60(sp)
  80aee8:	003b9006 	br	809d2c <_dtoa_r+0x3bc>
  80aeec:	103e221e 	bne	r2,zero,80a778 <_dtoa_r+0xe08>
  80aef0:	b880004c 	andi	r2,r23,1
  80aef4:	1005003a 	cmpeq	r2,r2,zero
  80aef8:	103e1f1e 	bne	r2,zero,80a778 <_dtoa_r+0xe08>
  80aefc:	003e1b06 	br	80a76c <_dtoa_r+0xdfc>
  80af00:	d9001617 	ldw	r4,88(sp)
  80af04:	980b883a 	mov	r5,r19
  80af08:	01800284 	movi	r6,10
  80af0c:	000f883a 	mov	r7,zero
  80af10:	080c5240 	call	80c524 <__multadd>
  80af14:	d8c00e17 	ldw	r3,56(sp)
  80af18:	1027883a 	mov	r19,r2
  80af1c:	d8c00f15 	stw	r3,60(sp)
  80af20:	003cd306 	br	80a270 <_dtoa_r+0x900>

0080af24 <__sflags>:
  80af24:	28c00007 	ldb	r3,0(r5)
  80af28:	00801c84 	movi	r2,114
  80af2c:	18800926 	beq	r3,r2,80af54 <__sflags+0x30>
  80af30:	00801dc4 	movi	r2,119
  80af34:	18801426 	beq	r3,r2,80af88 <__sflags+0x64>
  80af38:	00801844 	movi	r2,97
  80af3c:	18801626 	beq	r3,r2,80af98 <__sflags+0x74>
  80af40:	0007883a 	mov	r3,zero
  80af44:	00800584 	movi	r2,22
  80af48:	20800015 	stw	r2,0(r4)
  80af4c:	1805883a 	mov	r2,r3
  80af50:	f800283a 	ret
  80af54:	000f883a 	mov	r7,zero
  80af58:	0011883a 	mov	r8,zero
  80af5c:	00c00104 	movi	r3,4
  80af60:	28800047 	ldb	r2,1(r5)
  80af64:	10000426 	beq	r2,zero,80af78 <__sflags+0x54>
  80af68:	01000ac4 	movi	r4,43
  80af6c:	11000e26 	beq	r2,r4,80afa8 <__sflags+0x84>
  80af70:	28800087 	ldb	r2,2(r5)
  80af74:	11000c26 	beq	r2,r4,80afa8 <__sflags+0x84>
  80af78:	3a04b03a 	or	r2,r7,r8
  80af7c:	30800015 	stw	r2,0(r6)
  80af80:	1805883a 	mov	r2,r3
  80af84:	f800283a 	ret
  80af88:	01c00044 	movi	r7,1
  80af8c:	02018004 	movi	r8,1536
  80af90:	00c00204 	movi	r3,8
  80af94:	003ff206 	br	80af60 <__sflags+0x3c>
  80af98:	01c00044 	movi	r7,1
  80af9c:	02008204 	movi	r8,520
  80afa0:	00c04204 	movi	r3,264
  80afa4:	003fee06 	br	80af60 <__sflags+0x3c>
  80afa8:	00bffcc4 	movi	r2,-13
  80afac:	1884703a 	and	r2,r3,r2
  80afb0:	01c00084 	movi	r7,2
  80afb4:	10c00414 	ori	r3,r2,16
  80afb8:	3a04b03a 	or	r2,r7,r8
  80afbc:	30800015 	stw	r2,0(r6)
  80afc0:	003fef06 	br	80af80 <__sflags+0x5c>

0080afc4 <__sfvwrite_r>:
  80afc4:	30800217 	ldw	r2,8(r6)
  80afc8:	defff504 	addi	sp,sp,-44
  80afcc:	df000915 	stw	fp,36(sp)
  80afd0:	dd800715 	stw	r22,28(sp)
  80afd4:	dc800315 	stw	r18,12(sp)
  80afd8:	dfc00a15 	stw	ra,40(sp)
  80afdc:	ddc00815 	stw	r23,32(sp)
  80afe0:	dd400615 	stw	r21,24(sp)
  80afe4:	dd000515 	stw	r20,20(sp)
  80afe8:	dcc00415 	stw	r19,16(sp)
  80afec:	dc400215 	stw	r17,8(sp)
  80aff0:	dc000115 	stw	r16,4(sp)
  80aff4:	302d883a 	mov	r22,r6
  80aff8:	2039883a 	mov	fp,r4
  80affc:	2825883a 	mov	r18,r5
  80b000:	10001c26 	beq	r2,zero,80b074 <__sfvwrite_r+0xb0>
  80b004:	29c0030b 	ldhu	r7,12(r5)
  80b008:	3880020c 	andi	r2,r7,8
  80b00c:	10002726 	beq	r2,zero,80b0ac <__sfvwrite_r+0xe8>
  80b010:	28800417 	ldw	r2,16(r5)
  80b014:	10002526 	beq	r2,zero,80b0ac <__sfvwrite_r+0xe8>
  80b018:	3880008c 	andi	r2,r7,2
  80b01c:	b5400017 	ldw	r21,0(r22)
  80b020:	10002826 	beq	r2,zero,80b0c4 <__sfvwrite_r+0x100>
  80b024:	0021883a 	mov	r16,zero
  80b028:	0023883a 	mov	r17,zero
  80b02c:	880d883a 	mov	r6,r17
  80b030:	e009883a 	mov	r4,fp
  80b034:	00810004 	movi	r2,1024
  80b038:	80006e26 	beq	r16,zero,80b1f4 <__sfvwrite_r+0x230>
  80b03c:	800f883a 	mov	r7,r16
  80b040:	91400717 	ldw	r5,28(r18)
  80b044:	1400012e 	bgeu	r2,r16,80b04c <__sfvwrite_r+0x88>
  80b048:	100f883a 	mov	r7,r2
  80b04c:	90c00917 	ldw	r3,36(r18)
  80b050:	183ee83a 	callr	r3
  80b054:	1007883a 	mov	r3,r2
  80b058:	80a1c83a 	sub	r16,r16,r2
  80b05c:	88a3883a 	add	r17,r17,r2
  80b060:	00806d0e 	bge	zero,r2,80b218 <__sfvwrite_r+0x254>
  80b064:	b0800217 	ldw	r2,8(r22)
  80b068:	10c5c83a 	sub	r2,r2,r3
  80b06c:	b0800215 	stw	r2,8(r22)
  80b070:	103fee1e 	bne	r2,zero,80b02c <__sfvwrite_r+0x68>
  80b074:	0009883a 	mov	r4,zero
  80b078:	2005883a 	mov	r2,r4
  80b07c:	dfc00a17 	ldw	ra,40(sp)
  80b080:	df000917 	ldw	fp,36(sp)
  80b084:	ddc00817 	ldw	r23,32(sp)
  80b088:	dd800717 	ldw	r22,28(sp)
  80b08c:	dd400617 	ldw	r21,24(sp)
  80b090:	dd000517 	ldw	r20,20(sp)
  80b094:	dcc00417 	ldw	r19,16(sp)
  80b098:	dc800317 	ldw	r18,12(sp)
  80b09c:	dc400217 	ldw	r17,8(sp)
  80b0a0:	dc000117 	ldw	r16,4(sp)
  80b0a4:	dec00b04 	addi	sp,sp,44
  80b0a8:	f800283a 	ret
  80b0ac:	08095ac0 	call	8095ac <__swsetup_r>
  80b0b0:	1000e41e 	bne	r2,zero,80b444 <__sfvwrite_r+0x480>
  80b0b4:	91c0030b 	ldhu	r7,12(r18)
  80b0b8:	b5400017 	ldw	r21,0(r22)
  80b0bc:	3880008c 	andi	r2,r7,2
  80b0c0:	103fd81e 	bne	r2,zero,80b024 <__sfvwrite_r+0x60>
  80b0c4:	3880004c 	andi	r2,r7,1
  80b0c8:	1005003a 	cmpeq	r2,r2,zero
  80b0cc:	10005726 	beq	r2,zero,80b22c <__sfvwrite_r+0x268>
  80b0d0:	0029883a 	mov	r20,zero
  80b0d4:	002f883a 	mov	r23,zero
  80b0d8:	a0004226 	beq	r20,zero,80b1e4 <__sfvwrite_r+0x220>
  80b0dc:	3880800c 	andi	r2,r7,512
  80b0e0:	94000217 	ldw	r16,8(r18)
  80b0e4:	10008b26 	beq	r2,zero,80b314 <__sfvwrite_r+0x350>
  80b0e8:	800d883a 	mov	r6,r16
  80b0ec:	a400a536 	bltu	r20,r16,80b384 <__sfvwrite_r+0x3c0>
  80b0f0:	3881200c 	andi	r2,r7,1152
  80b0f4:	10002726 	beq	r2,zero,80b194 <__sfvwrite_r+0x1d0>
  80b0f8:	90800517 	ldw	r2,20(r18)
  80b0fc:	92000417 	ldw	r8,16(r18)
  80b100:	91400017 	ldw	r5,0(r18)
  80b104:	1087883a 	add	r3,r2,r2
  80b108:	1887883a 	add	r3,r3,r2
  80b10c:	1808d7fa 	srli	r4,r3,31
  80b110:	2a21c83a 	sub	r16,r5,r8
  80b114:	80800044 	addi	r2,r16,1
  80b118:	20c9883a 	add	r4,r4,r3
  80b11c:	2027d07a 	srai	r19,r4,1
  80b120:	a085883a 	add	r2,r20,r2
  80b124:	980d883a 	mov	r6,r19
  80b128:	9880022e 	bgeu	r19,r2,80b134 <__sfvwrite_r+0x170>
  80b12c:	1027883a 	mov	r19,r2
  80b130:	100d883a 	mov	r6,r2
  80b134:	3881000c 	andi	r2,r7,1024
  80b138:	1000b826 	beq	r2,zero,80b41c <__sfvwrite_r+0x458>
  80b13c:	300b883a 	mov	r5,r6
  80b140:	e009883a 	mov	r4,fp
  80b144:	08068500 	call	806850 <_malloc_r>
  80b148:	10003126 	beq	r2,zero,80b210 <__sfvwrite_r+0x24c>
  80b14c:	91400417 	ldw	r5,16(r18)
  80b150:	1009883a 	mov	r4,r2
  80b154:	800d883a 	mov	r6,r16
  80b158:	1023883a 	mov	r17,r2
  80b15c:	080b6f00 	call	80b6f0 <memcpy>
  80b160:	90c0030b 	ldhu	r3,12(r18)
  80b164:	00beffc4 	movi	r2,-1025
  80b168:	1886703a 	and	r3,r3,r2
  80b16c:	18c02014 	ori	r3,r3,128
  80b170:	90c0030d 	sth	r3,12(r18)
  80b174:	9c07c83a 	sub	r3,r19,r16
  80b178:	8c05883a 	add	r2,r17,r16
  80b17c:	a00d883a 	mov	r6,r20
  80b180:	a021883a 	mov	r16,r20
  80b184:	90800015 	stw	r2,0(r18)
  80b188:	90c00215 	stw	r3,8(r18)
  80b18c:	94400415 	stw	r17,16(r18)
  80b190:	94c00515 	stw	r19,20(r18)
  80b194:	91000017 	ldw	r4,0(r18)
  80b198:	b80b883a 	mov	r5,r23
  80b19c:	a023883a 	mov	r17,r20
  80b1a0:	080b7900 	call	80b790 <memmove>
  80b1a4:	90c00217 	ldw	r3,8(r18)
  80b1a8:	90800017 	ldw	r2,0(r18)
  80b1ac:	a027883a 	mov	r19,r20
  80b1b0:	1c07c83a 	sub	r3,r3,r16
  80b1b4:	1405883a 	add	r2,r2,r16
  80b1b8:	90c00215 	stw	r3,8(r18)
  80b1bc:	a021883a 	mov	r16,r20
  80b1c0:	90800015 	stw	r2,0(r18)
  80b1c4:	b0800217 	ldw	r2,8(r22)
  80b1c8:	1405c83a 	sub	r2,r2,r16
  80b1cc:	b0800215 	stw	r2,8(r22)
  80b1d0:	103fa826 	beq	r2,zero,80b074 <__sfvwrite_r+0xb0>
  80b1d4:	a469c83a 	sub	r20,r20,r17
  80b1d8:	91c0030b 	ldhu	r7,12(r18)
  80b1dc:	bcef883a 	add	r23,r23,r19
  80b1e0:	a03fbe1e 	bne	r20,zero,80b0dc <__sfvwrite_r+0x118>
  80b1e4:	adc00017 	ldw	r23,0(r21)
  80b1e8:	ad000117 	ldw	r20,4(r21)
  80b1ec:	ad400204 	addi	r21,r21,8
  80b1f0:	003fb906 	br	80b0d8 <__sfvwrite_r+0x114>
  80b1f4:	ac400017 	ldw	r17,0(r21)
  80b1f8:	ac000117 	ldw	r16,4(r21)
  80b1fc:	ad400204 	addi	r21,r21,8
  80b200:	003f8a06 	br	80b02c <__sfvwrite_r+0x68>
  80b204:	91400417 	ldw	r5,16(r18)
  80b208:	e009883a 	mov	r4,fp
  80b20c:	0805c2c0 	call	805c2c <_free_r>
  80b210:	00800304 	movi	r2,12
  80b214:	e0800015 	stw	r2,0(fp)
  80b218:	9080030b 	ldhu	r2,12(r18)
  80b21c:	013fffc4 	movi	r4,-1
  80b220:	10801014 	ori	r2,r2,64
  80b224:	9080030d 	sth	r2,12(r18)
  80b228:	003f9306 	br	80b078 <__sfvwrite_r+0xb4>
  80b22c:	0027883a 	mov	r19,zero
  80b230:	002f883a 	mov	r23,zero
  80b234:	d8000015 	stw	zero,0(sp)
  80b238:	0029883a 	mov	r20,zero
  80b23c:	98001e26 	beq	r19,zero,80b2b8 <__sfvwrite_r+0x2f4>
  80b240:	d8c00017 	ldw	r3,0(sp)
  80b244:	1804c03a 	cmpne	r2,r3,zero
  80b248:	10005e26 	beq	r2,zero,80b3c4 <__sfvwrite_r+0x400>
  80b24c:	9821883a 	mov	r16,r19
  80b250:	a4c0012e 	bgeu	r20,r19,80b258 <__sfvwrite_r+0x294>
  80b254:	a021883a 	mov	r16,r20
  80b258:	91000017 	ldw	r4,0(r18)
  80b25c:	90800417 	ldw	r2,16(r18)
  80b260:	91800217 	ldw	r6,8(r18)
  80b264:	91c00517 	ldw	r7,20(r18)
  80b268:	1100022e 	bgeu	r2,r4,80b274 <__sfvwrite_r+0x2b0>
  80b26c:	31e3883a 	add	r17,r6,r7
  80b270:	8c001616 	blt	r17,r16,80b2cc <__sfvwrite_r+0x308>
  80b274:	81c03816 	blt	r16,r7,80b358 <__sfvwrite_r+0x394>
  80b278:	90c00917 	ldw	r3,36(r18)
  80b27c:	91400717 	ldw	r5,28(r18)
  80b280:	e009883a 	mov	r4,fp
  80b284:	b80d883a 	mov	r6,r23
  80b288:	183ee83a 	callr	r3
  80b28c:	1023883a 	mov	r17,r2
  80b290:	00bfe10e 	bge	zero,r2,80b218 <__sfvwrite_r+0x254>
  80b294:	a469c83a 	sub	r20,r20,r17
  80b298:	a0001826 	beq	r20,zero,80b2fc <__sfvwrite_r+0x338>
  80b29c:	b0800217 	ldw	r2,8(r22)
  80b2a0:	1445c83a 	sub	r2,r2,r17
  80b2a4:	b0800215 	stw	r2,8(r22)
  80b2a8:	103f7226 	beq	r2,zero,80b074 <__sfvwrite_r+0xb0>
  80b2ac:	9c67c83a 	sub	r19,r19,r17
  80b2b0:	bc6f883a 	add	r23,r23,r17
  80b2b4:	983fe21e 	bne	r19,zero,80b240 <__sfvwrite_r+0x27c>
  80b2b8:	adc00017 	ldw	r23,0(r21)
  80b2bc:	acc00117 	ldw	r19,4(r21)
  80b2c0:	ad400204 	addi	r21,r21,8
  80b2c4:	d8000015 	stw	zero,0(sp)
  80b2c8:	003fdc06 	br	80b23c <__sfvwrite_r+0x278>
  80b2cc:	b80b883a 	mov	r5,r23
  80b2d0:	880d883a 	mov	r6,r17
  80b2d4:	080b7900 	call	80b790 <memmove>
  80b2d8:	90c00017 	ldw	r3,0(r18)
  80b2dc:	e009883a 	mov	r4,fp
  80b2e0:	900b883a 	mov	r5,r18
  80b2e4:	1c47883a 	add	r3,r3,r17
  80b2e8:	90c00015 	stw	r3,0(r18)
  80b2ec:	08054a00 	call	8054a0 <_fflush_r>
  80b2f0:	103fc91e 	bne	r2,zero,80b218 <__sfvwrite_r+0x254>
  80b2f4:	a469c83a 	sub	r20,r20,r17
  80b2f8:	a03fe81e 	bne	r20,zero,80b29c <__sfvwrite_r+0x2d8>
  80b2fc:	e009883a 	mov	r4,fp
  80b300:	900b883a 	mov	r5,r18
  80b304:	08054a00 	call	8054a0 <_fflush_r>
  80b308:	103fc31e 	bne	r2,zero,80b218 <__sfvwrite_r+0x254>
  80b30c:	d8000015 	stw	zero,0(sp)
  80b310:	003fe206 	br	80b29c <__sfvwrite_r+0x2d8>
  80b314:	91000017 	ldw	r4,0(r18)
  80b318:	90800417 	ldw	r2,16(r18)
  80b31c:	1100022e 	bgeu	r2,r4,80b328 <__sfvwrite_r+0x364>
  80b320:	8023883a 	mov	r17,r16
  80b324:	85003136 	bltu	r16,r20,80b3ec <__sfvwrite_r+0x428>
  80b328:	91c00517 	ldw	r7,20(r18)
  80b32c:	a1c01836 	bltu	r20,r7,80b390 <__sfvwrite_r+0x3cc>
  80b330:	90c00917 	ldw	r3,36(r18)
  80b334:	91400717 	ldw	r5,28(r18)
  80b338:	e009883a 	mov	r4,fp
  80b33c:	b80d883a 	mov	r6,r23
  80b340:	183ee83a 	callr	r3
  80b344:	1021883a 	mov	r16,r2
  80b348:	00bfb30e 	bge	zero,r2,80b218 <__sfvwrite_r+0x254>
  80b34c:	1023883a 	mov	r17,r2
  80b350:	1027883a 	mov	r19,r2
  80b354:	003f9b06 	br	80b1c4 <__sfvwrite_r+0x200>
  80b358:	b80b883a 	mov	r5,r23
  80b35c:	800d883a 	mov	r6,r16
  80b360:	080b7900 	call	80b790 <memmove>
  80b364:	90c00217 	ldw	r3,8(r18)
  80b368:	90800017 	ldw	r2,0(r18)
  80b36c:	8023883a 	mov	r17,r16
  80b370:	1c07c83a 	sub	r3,r3,r16
  80b374:	1405883a 	add	r2,r2,r16
  80b378:	90c00215 	stw	r3,8(r18)
  80b37c:	90800015 	stw	r2,0(r18)
  80b380:	003fc406 	br	80b294 <__sfvwrite_r+0x2d0>
  80b384:	a00d883a 	mov	r6,r20
  80b388:	a021883a 	mov	r16,r20
  80b38c:	003f8106 	br	80b194 <__sfvwrite_r+0x1d0>
  80b390:	b80b883a 	mov	r5,r23
  80b394:	a00d883a 	mov	r6,r20
  80b398:	080b7900 	call	80b790 <memmove>
  80b39c:	90c00217 	ldw	r3,8(r18)
  80b3a0:	90800017 	ldw	r2,0(r18)
  80b3a4:	a021883a 	mov	r16,r20
  80b3a8:	1d07c83a 	sub	r3,r3,r20
  80b3ac:	1505883a 	add	r2,r2,r20
  80b3b0:	a023883a 	mov	r17,r20
  80b3b4:	a027883a 	mov	r19,r20
  80b3b8:	90c00215 	stw	r3,8(r18)
  80b3bc:	90800015 	stw	r2,0(r18)
  80b3c0:	003f8006 	br	80b1c4 <__sfvwrite_r+0x200>
  80b3c4:	b809883a 	mov	r4,r23
  80b3c8:	01400284 	movi	r5,10
  80b3cc:	980d883a 	mov	r6,r19
  80b3d0:	080b60c0 	call	80b60c <memchr>
  80b3d4:	10001726 	beq	r2,zero,80b434 <__sfvwrite_r+0x470>
  80b3d8:	15c5c83a 	sub	r2,r2,r23
  80b3dc:	15000044 	addi	r20,r2,1
  80b3e0:	00800044 	movi	r2,1
  80b3e4:	d8800015 	stw	r2,0(sp)
  80b3e8:	003f9806 	br	80b24c <__sfvwrite_r+0x288>
  80b3ec:	b80b883a 	mov	r5,r23
  80b3f0:	800d883a 	mov	r6,r16
  80b3f4:	080b7900 	call	80b790 <memmove>
  80b3f8:	90c00017 	ldw	r3,0(r18)
  80b3fc:	e009883a 	mov	r4,fp
  80b400:	900b883a 	mov	r5,r18
  80b404:	1c07883a 	add	r3,r3,r16
  80b408:	90c00015 	stw	r3,0(r18)
  80b40c:	8027883a 	mov	r19,r16
  80b410:	08054a00 	call	8054a0 <_fflush_r>
  80b414:	103f6b26 	beq	r2,zero,80b1c4 <__sfvwrite_r+0x200>
  80b418:	003f7f06 	br	80b218 <__sfvwrite_r+0x254>
  80b41c:	400b883a 	mov	r5,r8
  80b420:	e009883a 	mov	r4,fp
  80b424:	080cac80 	call	80cac8 <_realloc_r>
  80b428:	103f7626 	beq	r2,zero,80b204 <__sfvwrite_r+0x240>
  80b42c:	1023883a 	mov	r17,r2
  80b430:	003f5006 	br	80b174 <__sfvwrite_r+0x1b0>
  80b434:	00c00044 	movi	r3,1
  80b438:	9d000044 	addi	r20,r19,1
  80b43c:	d8c00015 	stw	r3,0(sp)
  80b440:	003f8206 	br	80b24c <__sfvwrite_r+0x288>
  80b444:	9080030b 	ldhu	r2,12(r18)
  80b448:	00c00244 	movi	r3,9
  80b44c:	013fffc4 	movi	r4,-1
  80b450:	10801014 	ori	r2,r2,64
  80b454:	9080030d 	sth	r2,12(r18)
  80b458:	e0c00015 	stw	r3,0(fp)
  80b45c:	003f0606 	br	80b078 <__sfvwrite_r+0xb4>

0080b460 <_isatty_r>:
  80b460:	defffd04 	addi	sp,sp,-12
  80b464:	dc000015 	stw	r16,0(sp)
  80b468:	04002074 	movhi	r16,129
  80b46c:	841a7104 	addi	r16,r16,27076
  80b470:	dc400115 	stw	r17,4(sp)
  80b474:	80000015 	stw	zero,0(r16)
  80b478:	2023883a 	mov	r17,r4
  80b47c:	2809883a 	mov	r4,r5
  80b480:	dfc00215 	stw	ra,8(sp)
  80b484:	080e5dc0 	call	80e5dc <isatty>
  80b488:	1007883a 	mov	r3,r2
  80b48c:	00bfffc4 	movi	r2,-1
  80b490:	18800626 	beq	r3,r2,80b4ac <_isatty_r+0x4c>
  80b494:	1805883a 	mov	r2,r3
  80b498:	dfc00217 	ldw	ra,8(sp)
  80b49c:	dc400117 	ldw	r17,4(sp)
  80b4a0:	dc000017 	ldw	r16,0(sp)
  80b4a4:	dec00304 	addi	sp,sp,12
  80b4a8:	f800283a 	ret
  80b4ac:	80800017 	ldw	r2,0(r16)
  80b4b0:	103ff826 	beq	r2,zero,80b494 <_isatty_r+0x34>
  80b4b4:	88800015 	stw	r2,0(r17)
  80b4b8:	1805883a 	mov	r2,r3
  80b4bc:	dfc00217 	ldw	ra,8(sp)
  80b4c0:	dc400117 	ldw	r17,4(sp)
  80b4c4:	dc000017 	ldw	r16,0(sp)
  80b4c8:	dec00304 	addi	sp,sp,12
  80b4cc:	f800283a 	ret

0080b4d0 <__locale_charset>:
  80b4d0:	d0a00617 	ldw	r2,-32744(gp)
  80b4d4:	f800283a 	ret

0080b4d8 <_localeconv_r>:
  80b4d8:	00802074 	movhi	r2,129
  80b4dc:	108b3d04 	addi	r2,r2,11508
  80b4e0:	f800283a 	ret

0080b4e4 <localeconv>:
  80b4e4:	00802074 	movhi	r2,129
  80b4e8:	10934c04 	addi	r2,r2,19760
  80b4ec:	11000017 	ldw	r4,0(r2)
  80b4f0:	080b4d81 	jmpi	80b4d8 <_localeconv_r>

0080b4f4 <_setlocale_r>:
  80b4f4:	defffc04 	addi	sp,sp,-16
  80b4f8:	00c02074 	movhi	r3,129
  80b4fc:	18cb1404 	addi	r3,r3,11344
  80b500:	dc800215 	stw	r18,8(sp)
  80b504:	dc400115 	stw	r17,4(sp)
  80b508:	dc000015 	stw	r16,0(sp)
  80b50c:	2023883a 	mov	r17,r4
  80b510:	2825883a 	mov	r18,r5
  80b514:	dfc00315 	stw	ra,12(sp)
  80b518:	3021883a 	mov	r16,r6
  80b51c:	3009883a 	mov	r4,r6
  80b520:	180b883a 	mov	r5,r3
  80b524:	30000926 	beq	r6,zero,80b54c <_setlocale_r+0x58>
  80b528:	080d0fc0 	call	80d0fc <strcmp>
  80b52c:	8009883a 	mov	r4,r16
  80b530:	01402074 	movhi	r5,129
  80b534:	294b2404 	addi	r5,r5,11408
  80b538:	10000b1e 	bne	r2,zero,80b568 <_setlocale_r+0x74>
  80b53c:	8c000d15 	stw	r16,52(r17)
  80b540:	8c800c15 	stw	r18,48(r17)
  80b544:	00c02074 	movhi	r3,129
  80b548:	18cb1404 	addi	r3,r3,11344
  80b54c:	1805883a 	mov	r2,r3
  80b550:	dfc00317 	ldw	ra,12(sp)
  80b554:	dc800217 	ldw	r18,8(sp)
  80b558:	dc400117 	ldw	r17,4(sp)
  80b55c:	dc000017 	ldw	r16,0(sp)
  80b560:	dec00404 	addi	sp,sp,16
  80b564:	f800283a 	ret
  80b568:	080d0fc0 	call	80d0fc <strcmp>
  80b56c:	0007883a 	mov	r3,zero
  80b570:	103ff226 	beq	r2,zero,80b53c <_setlocale_r+0x48>
  80b574:	003ff506 	br	80b54c <_setlocale_r+0x58>

0080b578 <setlocale>:
  80b578:	01802074 	movhi	r6,129
  80b57c:	31934c04 	addi	r6,r6,19760
  80b580:	2007883a 	mov	r3,r4
  80b584:	31000017 	ldw	r4,0(r6)
  80b588:	280d883a 	mov	r6,r5
  80b58c:	180b883a 	mov	r5,r3
  80b590:	080b4f41 	jmpi	80b4f4 <_setlocale_r>

0080b594 <_lseek_r>:
  80b594:	defffd04 	addi	sp,sp,-12
  80b598:	dc000015 	stw	r16,0(sp)
  80b59c:	04002074 	movhi	r16,129
  80b5a0:	841a7104 	addi	r16,r16,27076
  80b5a4:	dc400115 	stw	r17,4(sp)
  80b5a8:	80000015 	stw	zero,0(r16)
  80b5ac:	2023883a 	mov	r17,r4
  80b5b0:	2809883a 	mov	r4,r5
  80b5b4:	300b883a 	mov	r5,r6
  80b5b8:	380d883a 	mov	r6,r7
  80b5bc:	dfc00215 	stw	ra,8(sp)
  80b5c0:	080e7e80 	call	80e7e8 <lseek>
  80b5c4:	1007883a 	mov	r3,r2
  80b5c8:	00bfffc4 	movi	r2,-1
  80b5cc:	18800626 	beq	r3,r2,80b5e8 <_lseek_r+0x54>
  80b5d0:	1805883a 	mov	r2,r3
  80b5d4:	dfc00217 	ldw	ra,8(sp)
  80b5d8:	dc400117 	ldw	r17,4(sp)
  80b5dc:	dc000017 	ldw	r16,0(sp)
  80b5e0:	dec00304 	addi	sp,sp,12
  80b5e4:	f800283a 	ret
  80b5e8:	80800017 	ldw	r2,0(r16)
  80b5ec:	103ff826 	beq	r2,zero,80b5d0 <_lseek_r+0x3c>
  80b5f0:	88800015 	stw	r2,0(r17)
  80b5f4:	1805883a 	mov	r2,r3
  80b5f8:	dfc00217 	ldw	ra,8(sp)
  80b5fc:	dc400117 	ldw	r17,4(sp)
  80b600:	dc000017 	ldw	r16,0(sp)
  80b604:	dec00304 	addi	sp,sp,12
  80b608:	f800283a 	ret

0080b60c <memchr>:
  80b60c:	008000c4 	movi	r2,3
  80b610:	29403fcc 	andi	r5,r5,255
  80b614:	2007883a 	mov	r3,r4
  80b618:	1180022e 	bgeu	r2,r6,80b624 <memchr+0x18>
  80b61c:	2084703a 	and	r2,r4,r2
  80b620:	10000b26 	beq	r2,zero,80b650 <memchr+0x44>
  80b624:	313fffc4 	addi	r4,r6,-1
  80b628:	3000051e 	bne	r6,zero,80b640 <memchr+0x34>
  80b62c:	00002c06 	br	80b6e0 <memchr+0xd4>
  80b630:	213fffc4 	addi	r4,r4,-1
  80b634:	00bfffc4 	movi	r2,-1
  80b638:	18c00044 	addi	r3,r3,1
  80b63c:	20802826 	beq	r4,r2,80b6e0 <memchr+0xd4>
  80b640:	18800003 	ldbu	r2,0(r3)
  80b644:	28bffa1e 	bne	r5,r2,80b630 <memchr+0x24>
  80b648:	1805883a 	mov	r2,r3
  80b64c:	f800283a 	ret
  80b650:	0011883a 	mov	r8,zero
  80b654:	0007883a 	mov	r3,zero
  80b658:	01c00104 	movi	r7,4
  80b65c:	4004923a 	slli	r2,r8,8
  80b660:	18c00044 	addi	r3,r3,1
  80b664:	1151883a 	add	r8,r2,r5
  80b668:	19fffc1e 	bne	r3,r7,80b65c <memchr+0x50>
  80b66c:	02bfbff4 	movhi	r10,65279
  80b670:	52bfbfc4 	addi	r10,r10,-257
  80b674:	02602074 	movhi	r9,32897
  80b678:	4a602004 	addi	r9,r9,-32640
  80b67c:	02c000c4 	movi	r11,3
  80b680:	20800017 	ldw	r2,0(r4)
  80b684:	31bfff04 	addi	r6,r6,-4
  80b688:	200f883a 	mov	r7,r4
  80b68c:	1204f03a 	xor	r2,r2,r8
  80b690:	1287883a 	add	r3,r2,r10
  80b694:	1a46703a 	and	r3,r3,r9
  80b698:	0084303a 	nor	r2,zero,r2
  80b69c:	10c4703a 	and	r2,r2,r3
  80b6a0:	10000b26 	beq	r2,zero,80b6d0 <memchr+0xc4>
  80b6a4:	20800003 	ldbu	r2,0(r4)
  80b6a8:	28800f26 	beq	r5,r2,80b6e8 <memchr+0xdc>
  80b6ac:	20800043 	ldbu	r2,1(r4)
  80b6b0:	21c00044 	addi	r7,r4,1
  80b6b4:	28800c26 	beq	r5,r2,80b6e8 <memchr+0xdc>
  80b6b8:	20800083 	ldbu	r2,2(r4)
  80b6bc:	21c00084 	addi	r7,r4,2
  80b6c0:	28800926 	beq	r5,r2,80b6e8 <memchr+0xdc>
  80b6c4:	208000c3 	ldbu	r2,3(r4)
  80b6c8:	21c000c4 	addi	r7,r4,3
  80b6cc:	28800626 	beq	r5,r2,80b6e8 <memchr+0xdc>
  80b6d0:	21000104 	addi	r4,r4,4
  80b6d4:	59bfea36 	bltu	r11,r6,80b680 <memchr+0x74>
  80b6d8:	2007883a 	mov	r3,r4
  80b6dc:	003fd106 	br	80b624 <memchr+0x18>
  80b6e0:	0005883a 	mov	r2,zero
  80b6e4:	f800283a 	ret
  80b6e8:	3805883a 	mov	r2,r7
  80b6ec:	f800283a 	ret

0080b6f0 <memcpy>:
  80b6f0:	01c003c4 	movi	r7,15
  80b6f4:	2007883a 	mov	r3,r4
  80b6f8:	3980032e 	bgeu	r7,r6,80b708 <memcpy+0x18>
  80b6fc:	2904b03a 	or	r2,r5,r4
  80b700:	108000cc 	andi	r2,r2,3
  80b704:	10000926 	beq	r2,zero,80b72c <memcpy+0x3c>
  80b708:	30000626 	beq	r6,zero,80b724 <memcpy+0x34>
  80b70c:	30cd883a 	add	r6,r6,r3
  80b710:	28800003 	ldbu	r2,0(r5)
  80b714:	29400044 	addi	r5,r5,1
  80b718:	18800005 	stb	r2,0(r3)
  80b71c:	18c00044 	addi	r3,r3,1
  80b720:	30fffb1e 	bne	r6,r3,80b710 <memcpy+0x20>
  80b724:	2005883a 	mov	r2,r4
  80b728:	f800283a 	ret
  80b72c:	3811883a 	mov	r8,r7
  80b730:	200f883a 	mov	r7,r4
  80b734:	28c00017 	ldw	r3,0(r5)
  80b738:	31bffc04 	addi	r6,r6,-16
  80b73c:	38c00015 	stw	r3,0(r7)
  80b740:	28800117 	ldw	r2,4(r5)
  80b744:	38800115 	stw	r2,4(r7)
  80b748:	28c00217 	ldw	r3,8(r5)
  80b74c:	38c00215 	stw	r3,8(r7)
  80b750:	28800317 	ldw	r2,12(r5)
  80b754:	29400404 	addi	r5,r5,16
  80b758:	38800315 	stw	r2,12(r7)
  80b75c:	39c00404 	addi	r7,r7,16
  80b760:	41bff436 	bltu	r8,r6,80b734 <memcpy+0x44>
  80b764:	008000c4 	movi	r2,3
  80b768:	1180072e 	bgeu	r2,r6,80b788 <memcpy+0x98>
  80b76c:	1007883a 	mov	r3,r2
  80b770:	28800017 	ldw	r2,0(r5)
  80b774:	31bfff04 	addi	r6,r6,-4
  80b778:	29400104 	addi	r5,r5,4
  80b77c:	38800015 	stw	r2,0(r7)
  80b780:	39c00104 	addi	r7,r7,4
  80b784:	19bffa36 	bltu	r3,r6,80b770 <memcpy+0x80>
  80b788:	3807883a 	mov	r3,r7
  80b78c:	003fde06 	br	80b708 <memcpy+0x18>

0080b790 <memmove>:
  80b790:	2807883a 	mov	r3,r5
  80b794:	2011883a 	mov	r8,r4
  80b798:	29000c2e 	bgeu	r5,r4,80b7cc <memmove+0x3c>
  80b79c:	298f883a 	add	r7,r5,r6
  80b7a0:	21c00a2e 	bgeu	r4,r7,80b7cc <memmove+0x3c>
  80b7a4:	30000726 	beq	r6,zero,80b7c4 <memmove+0x34>
  80b7a8:	2187883a 	add	r3,r4,r6
  80b7ac:	198dc83a 	sub	r6,r3,r6
  80b7b0:	39ffffc4 	addi	r7,r7,-1
  80b7b4:	38800003 	ldbu	r2,0(r7)
  80b7b8:	18ffffc4 	addi	r3,r3,-1
  80b7bc:	18800005 	stb	r2,0(r3)
  80b7c0:	19bffb1e 	bne	r3,r6,80b7b0 <memmove+0x20>
  80b7c4:	2005883a 	mov	r2,r4
  80b7c8:	f800283a 	ret
  80b7cc:	01c003c4 	movi	r7,15
  80b7d0:	39800a36 	bltu	r7,r6,80b7fc <memmove+0x6c>
  80b7d4:	303ffb26 	beq	r6,zero,80b7c4 <memmove+0x34>
  80b7d8:	400f883a 	mov	r7,r8
  80b7dc:	320d883a 	add	r6,r6,r8
  80b7e0:	28800003 	ldbu	r2,0(r5)
  80b7e4:	29400044 	addi	r5,r5,1
  80b7e8:	38800005 	stb	r2,0(r7)
  80b7ec:	39c00044 	addi	r7,r7,1
  80b7f0:	39bffb1e 	bne	r7,r6,80b7e0 <memmove+0x50>
  80b7f4:	2005883a 	mov	r2,r4
  80b7f8:	f800283a 	ret
  80b7fc:	1904b03a 	or	r2,r3,r4
  80b800:	108000cc 	andi	r2,r2,3
  80b804:	103ff31e 	bne	r2,zero,80b7d4 <memmove+0x44>
  80b808:	3811883a 	mov	r8,r7
  80b80c:	180b883a 	mov	r5,r3
  80b810:	200f883a 	mov	r7,r4
  80b814:	28c00017 	ldw	r3,0(r5)
  80b818:	31bffc04 	addi	r6,r6,-16
  80b81c:	38c00015 	stw	r3,0(r7)
  80b820:	28800117 	ldw	r2,4(r5)
  80b824:	38800115 	stw	r2,4(r7)
  80b828:	28c00217 	ldw	r3,8(r5)
  80b82c:	38c00215 	stw	r3,8(r7)
  80b830:	28800317 	ldw	r2,12(r5)
  80b834:	29400404 	addi	r5,r5,16
  80b838:	38800315 	stw	r2,12(r7)
  80b83c:	39c00404 	addi	r7,r7,16
  80b840:	41bff436 	bltu	r8,r6,80b814 <memmove+0x84>
  80b844:	008000c4 	movi	r2,3
  80b848:	1180072e 	bgeu	r2,r6,80b868 <memmove+0xd8>
  80b84c:	1007883a 	mov	r3,r2
  80b850:	28800017 	ldw	r2,0(r5)
  80b854:	31bfff04 	addi	r6,r6,-4
  80b858:	29400104 	addi	r5,r5,4
  80b85c:	38800015 	stw	r2,0(r7)
  80b860:	39c00104 	addi	r7,r7,4
  80b864:	19bffa36 	bltu	r3,r6,80b850 <memmove+0xc0>
  80b868:	3811883a 	mov	r8,r7
  80b86c:	003fd906 	br	80b7d4 <memmove+0x44>

0080b870 <_Bfree>:
  80b870:	28000826 	beq	r5,zero,80b894 <_Bfree+0x24>
  80b874:	28800117 	ldw	r2,4(r5)
  80b878:	21001317 	ldw	r4,76(r4)
  80b87c:	1085883a 	add	r2,r2,r2
  80b880:	1085883a 	add	r2,r2,r2
  80b884:	1105883a 	add	r2,r2,r4
  80b888:	10c00017 	ldw	r3,0(r2)
  80b88c:	28c00015 	stw	r3,0(r5)
  80b890:	11400015 	stw	r5,0(r2)
  80b894:	f800283a 	ret

0080b898 <__hi0bits>:
  80b898:	20bfffec 	andhi	r2,r4,65535
  80b89c:	10001426 	beq	r2,zero,80b8f0 <__hi0bits+0x58>
  80b8a0:	0007883a 	mov	r3,zero
  80b8a4:	20bfc02c 	andhi	r2,r4,65280
  80b8a8:	1000021e 	bne	r2,zero,80b8b4 <__hi0bits+0x1c>
  80b8ac:	2008923a 	slli	r4,r4,8
  80b8b0:	18c00204 	addi	r3,r3,8
  80b8b4:	20bc002c 	andhi	r2,r4,61440
  80b8b8:	1000021e 	bne	r2,zero,80b8c4 <__hi0bits+0x2c>
  80b8bc:	2008913a 	slli	r4,r4,4
  80b8c0:	18c00104 	addi	r3,r3,4
  80b8c4:	20b0002c 	andhi	r2,r4,49152
  80b8c8:	1000031e 	bne	r2,zero,80b8d8 <__hi0bits+0x40>
  80b8cc:	2105883a 	add	r2,r4,r4
  80b8d0:	18c00084 	addi	r3,r3,2
  80b8d4:	1089883a 	add	r4,r2,r2
  80b8d8:	20000316 	blt	r4,zero,80b8e8 <__hi0bits+0x50>
  80b8dc:	2090002c 	andhi	r2,r4,16384
  80b8e0:	10000626 	beq	r2,zero,80b8fc <__hi0bits+0x64>
  80b8e4:	18c00044 	addi	r3,r3,1
  80b8e8:	1805883a 	mov	r2,r3
  80b8ec:	f800283a 	ret
  80b8f0:	2008943a 	slli	r4,r4,16
  80b8f4:	00c00404 	movi	r3,16
  80b8f8:	003fea06 	br	80b8a4 <__hi0bits+0xc>
  80b8fc:	00c00804 	movi	r3,32
  80b900:	1805883a 	mov	r2,r3
  80b904:	f800283a 	ret

0080b908 <__lo0bits>:
  80b908:	20c00017 	ldw	r3,0(r4)
  80b90c:	188001cc 	andi	r2,r3,7
  80b910:	10000a26 	beq	r2,zero,80b93c <__lo0bits+0x34>
  80b914:	1880004c 	andi	r2,r3,1
  80b918:	1005003a 	cmpeq	r2,r2,zero
  80b91c:	10002126 	beq	r2,zero,80b9a4 <__lo0bits+0x9c>
  80b920:	1880008c 	andi	r2,r3,2
  80b924:	1000251e 	bne	r2,zero,80b9bc <__lo0bits+0xb4>
  80b928:	1804d0ba 	srli	r2,r3,2
  80b92c:	01400084 	movi	r5,2
  80b930:	20800015 	stw	r2,0(r4)
  80b934:	2805883a 	mov	r2,r5
  80b938:	f800283a 	ret
  80b93c:	18bfffcc 	andi	r2,r3,65535
  80b940:	10001526 	beq	r2,zero,80b998 <__lo0bits+0x90>
  80b944:	000b883a 	mov	r5,zero
  80b948:	18803fcc 	andi	r2,r3,255
  80b94c:	1000021e 	bne	r2,zero,80b958 <__lo0bits+0x50>
  80b950:	1806d23a 	srli	r3,r3,8
  80b954:	29400204 	addi	r5,r5,8
  80b958:	188003cc 	andi	r2,r3,15
  80b95c:	1000021e 	bne	r2,zero,80b968 <__lo0bits+0x60>
  80b960:	1806d13a 	srli	r3,r3,4
  80b964:	29400104 	addi	r5,r5,4
  80b968:	188000cc 	andi	r2,r3,3
  80b96c:	1000021e 	bne	r2,zero,80b978 <__lo0bits+0x70>
  80b970:	1806d0ba 	srli	r3,r3,2
  80b974:	29400084 	addi	r5,r5,2
  80b978:	1880004c 	andi	r2,r3,1
  80b97c:	1000031e 	bne	r2,zero,80b98c <__lo0bits+0x84>
  80b980:	1806d07a 	srli	r3,r3,1
  80b984:	18000a26 	beq	r3,zero,80b9b0 <__lo0bits+0xa8>
  80b988:	29400044 	addi	r5,r5,1
  80b98c:	2805883a 	mov	r2,r5
  80b990:	20c00015 	stw	r3,0(r4)
  80b994:	f800283a 	ret
  80b998:	1806d43a 	srli	r3,r3,16
  80b99c:	01400404 	movi	r5,16
  80b9a0:	003fe906 	br	80b948 <__lo0bits+0x40>
  80b9a4:	000b883a 	mov	r5,zero
  80b9a8:	2805883a 	mov	r2,r5
  80b9ac:	f800283a 	ret
  80b9b0:	01400804 	movi	r5,32
  80b9b4:	2805883a 	mov	r2,r5
  80b9b8:	f800283a 	ret
  80b9bc:	1804d07a 	srli	r2,r3,1
  80b9c0:	01400044 	movi	r5,1
  80b9c4:	20800015 	stw	r2,0(r4)
  80b9c8:	003fda06 	br	80b934 <__lo0bits+0x2c>

0080b9cc <__mcmp>:
  80b9cc:	20800417 	ldw	r2,16(r4)
  80b9d0:	28c00417 	ldw	r3,16(r5)
  80b9d4:	10cfc83a 	sub	r7,r2,r3
  80b9d8:	38000c1e 	bne	r7,zero,80ba0c <__mcmp+0x40>
  80b9dc:	18c5883a 	add	r2,r3,r3
  80b9e0:	1085883a 	add	r2,r2,r2
  80b9e4:	10c00504 	addi	r3,r2,20
  80b9e8:	21000504 	addi	r4,r4,20
  80b9ec:	28cb883a 	add	r5,r5,r3
  80b9f0:	2085883a 	add	r2,r4,r2
  80b9f4:	10bfff04 	addi	r2,r2,-4
  80b9f8:	297fff04 	addi	r5,r5,-4
  80b9fc:	11800017 	ldw	r6,0(r2)
  80ba00:	28c00017 	ldw	r3,0(r5)
  80ba04:	30c0031e 	bne	r6,r3,80ba14 <__mcmp+0x48>
  80ba08:	20bffa36 	bltu	r4,r2,80b9f4 <__mcmp+0x28>
  80ba0c:	3805883a 	mov	r2,r7
  80ba10:	f800283a 	ret
  80ba14:	30c00336 	bltu	r6,r3,80ba24 <__mcmp+0x58>
  80ba18:	01c00044 	movi	r7,1
  80ba1c:	3805883a 	mov	r2,r7
  80ba20:	f800283a 	ret
  80ba24:	01ffffc4 	movi	r7,-1
  80ba28:	003ff806 	br	80ba0c <__mcmp+0x40>

0080ba2c <__ulp>:
  80ba2c:	295ffc2c 	andhi	r5,r5,32752
  80ba30:	013f3034 	movhi	r4,64704
  80ba34:	290b883a 	add	r5,r5,r4
  80ba38:	0145c83a 	sub	r2,zero,r5
  80ba3c:	1007d53a 	srai	r3,r2,20
  80ba40:	000d883a 	mov	r6,zero
  80ba44:	0140040e 	bge	zero,r5,80ba58 <__ulp+0x2c>
  80ba48:	280f883a 	mov	r7,r5
  80ba4c:	3807883a 	mov	r3,r7
  80ba50:	3005883a 	mov	r2,r6
  80ba54:	f800283a 	ret
  80ba58:	008004c4 	movi	r2,19
  80ba5c:	193ffb04 	addi	r4,r3,-20
  80ba60:	10c00c0e 	bge	r2,r3,80ba94 <__ulp+0x68>
  80ba64:	008007c4 	movi	r2,31
  80ba68:	1107c83a 	sub	r3,r2,r4
  80ba6c:	00800784 	movi	r2,30
  80ba70:	01400044 	movi	r5,1
  80ba74:	11000216 	blt	r2,r4,80ba80 <__ulp+0x54>
  80ba78:	00800044 	movi	r2,1
  80ba7c:	10ca983a 	sll	r5,r2,r3
  80ba80:	000f883a 	mov	r7,zero
  80ba84:	280d883a 	mov	r6,r5
  80ba88:	3807883a 	mov	r3,r7
  80ba8c:	3005883a 	mov	r2,r6
  80ba90:	f800283a 	ret
  80ba94:	00800234 	movhi	r2,8
  80ba98:	10cfd83a 	sra	r7,r2,r3
  80ba9c:	000d883a 	mov	r6,zero
  80baa0:	3005883a 	mov	r2,r6
  80baa4:	3807883a 	mov	r3,r7
  80baa8:	f800283a 	ret

0080baac <__b2d>:
  80baac:	20800417 	ldw	r2,16(r4)
  80bab0:	defff904 	addi	sp,sp,-28
  80bab4:	dd000415 	stw	r20,16(sp)
  80bab8:	1085883a 	add	r2,r2,r2
  80babc:	25000504 	addi	r20,r4,20
  80bac0:	1085883a 	add	r2,r2,r2
  80bac4:	dc000015 	stw	r16,0(sp)
  80bac8:	a0a1883a 	add	r16,r20,r2
  80bacc:	dd400515 	stw	r21,20(sp)
  80bad0:	857fff17 	ldw	r21,-4(r16)
  80bad4:	dc400115 	stw	r17,4(sp)
  80bad8:	dfc00615 	stw	ra,24(sp)
  80badc:	a809883a 	mov	r4,r21
  80bae0:	2823883a 	mov	r17,r5
  80bae4:	dcc00315 	stw	r19,12(sp)
  80bae8:	dc800215 	stw	r18,8(sp)
  80baec:	080b8980 	call	80b898 <__hi0bits>
  80baf0:	100b883a 	mov	r5,r2
  80baf4:	00800804 	movi	r2,32
  80baf8:	1145c83a 	sub	r2,r2,r5
  80bafc:	88800015 	stw	r2,0(r17)
  80bb00:	00800284 	movi	r2,10
  80bb04:	80ffff04 	addi	r3,r16,-4
  80bb08:	11401416 	blt	r2,r5,80bb5c <__b2d+0xb0>
  80bb0c:	008002c4 	movi	r2,11
  80bb10:	1149c83a 	sub	r4,r2,r5
  80bb14:	a0c02736 	bltu	r20,r3,80bbb4 <__b2d+0x108>
  80bb18:	000d883a 	mov	r6,zero
  80bb1c:	28800544 	addi	r2,r5,21
  80bb20:	a906d83a 	srl	r3,r21,r4
  80bb24:	a884983a 	sll	r2,r21,r2
  80bb28:	1ccffc34 	orhi	r19,r3,16368
  80bb2c:	11a4b03a 	or	r18,r2,r6
  80bb30:	9005883a 	mov	r2,r18
  80bb34:	9807883a 	mov	r3,r19
  80bb38:	dfc00617 	ldw	ra,24(sp)
  80bb3c:	dd400517 	ldw	r21,20(sp)
  80bb40:	dd000417 	ldw	r20,16(sp)
  80bb44:	dcc00317 	ldw	r19,12(sp)
  80bb48:	dc800217 	ldw	r18,8(sp)
  80bb4c:	dc400117 	ldw	r17,4(sp)
  80bb50:	dc000017 	ldw	r16,0(sp)
  80bb54:	dec00704 	addi	sp,sp,28
  80bb58:	f800283a 	ret
  80bb5c:	a0c00e36 	bltu	r20,r3,80bb98 <__b2d+0xec>
  80bb60:	293ffd44 	addi	r4,r5,-11
  80bb64:	000d883a 	mov	r6,zero
  80bb68:	20000f26 	beq	r4,zero,80bba8 <__b2d+0xfc>
  80bb6c:	00800804 	movi	r2,32
  80bb70:	110bc83a 	sub	r5,r2,r4
  80bb74:	a0c01236 	bltu	r20,r3,80bbc0 <__b2d+0x114>
  80bb78:	000f883a 	mov	r7,zero
  80bb7c:	a904983a 	sll	r2,r21,r4
  80bb80:	3146d83a 	srl	r3,r6,r5
  80bb84:	3108983a 	sll	r4,r6,r4
  80bb88:	108ffc34 	orhi	r2,r2,16368
  80bb8c:	18a6b03a 	or	r19,r3,r2
  80bb90:	3924b03a 	or	r18,r7,r4
  80bb94:	003fe606 	br	80bb30 <__b2d+0x84>
  80bb98:	293ffd44 	addi	r4,r5,-11
  80bb9c:	81bffe17 	ldw	r6,-8(r16)
  80bba0:	80fffe04 	addi	r3,r16,-8
  80bba4:	203ff11e 	bne	r4,zero,80bb6c <__b2d+0xc0>
  80bba8:	accffc34 	orhi	r19,r21,16368
  80bbac:	3025883a 	mov	r18,r6
  80bbb0:	003fdf06 	br	80bb30 <__b2d+0x84>
  80bbb4:	18bfff17 	ldw	r2,-4(r3)
  80bbb8:	110cd83a 	srl	r6,r2,r4
  80bbbc:	003fd706 	br	80bb1c <__b2d+0x70>
  80bbc0:	18bfff17 	ldw	r2,-4(r3)
  80bbc4:	114ed83a 	srl	r7,r2,r5
  80bbc8:	003fec06 	br	80bb7c <__b2d+0xd0>

0080bbcc <__ratio>:
  80bbcc:	defff904 	addi	sp,sp,-28
  80bbd0:	dc400215 	stw	r17,8(sp)
  80bbd4:	2823883a 	mov	r17,r5
  80bbd8:	d80b883a 	mov	r5,sp
  80bbdc:	dfc00615 	stw	ra,24(sp)
  80bbe0:	dd000515 	stw	r20,20(sp)
  80bbe4:	dcc00415 	stw	r19,16(sp)
  80bbe8:	dc800315 	stw	r18,12(sp)
  80bbec:	2025883a 	mov	r18,r4
  80bbf0:	080baac0 	call	80baac <__b2d>
  80bbf4:	8809883a 	mov	r4,r17
  80bbf8:	d9400104 	addi	r5,sp,4
  80bbfc:	1027883a 	mov	r19,r2
  80bc00:	1829883a 	mov	r20,r3
  80bc04:	080baac0 	call	80baac <__b2d>
  80bc08:	89000417 	ldw	r4,16(r17)
  80bc0c:	91c00417 	ldw	r7,16(r18)
  80bc10:	d9800117 	ldw	r6,4(sp)
  80bc14:	180b883a 	mov	r5,r3
  80bc18:	390fc83a 	sub	r7,r7,r4
  80bc1c:	1009883a 	mov	r4,r2
  80bc20:	d8800017 	ldw	r2,0(sp)
  80bc24:	380e917a 	slli	r7,r7,5
  80bc28:	2011883a 	mov	r8,r4
  80bc2c:	1185c83a 	sub	r2,r2,r6
  80bc30:	11c5883a 	add	r2,r2,r7
  80bc34:	1006953a 	slli	r3,r2,20
  80bc38:	2813883a 	mov	r9,r5
  80bc3c:	00800d0e 	bge	zero,r2,80bc74 <__ratio+0xa8>
  80bc40:	1d29883a 	add	r20,r3,r20
  80bc44:	a00b883a 	mov	r5,r20
  80bc48:	480f883a 	mov	r7,r9
  80bc4c:	9809883a 	mov	r4,r19
  80bc50:	400d883a 	mov	r6,r8
  80bc54:	08046700 	call	804670 <__divdf3>
  80bc58:	dfc00617 	ldw	ra,24(sp)
  80bc5c:	dd000517 	ldw	r20,20(sp)
  80bc60:	dcc00417 	ldw	r19,16(sp)
  80bc64:	dc800317 	ldw	r18,12(sp)
  80bc68:	dc400217 	ldw	r17,8(sp)
  80bc6c:	dec00704 	addi	sp,sp,28
  80bc70:	f800283a 	ret
  80bc74:	28d3c83a 	sub	r9,r5,r3
  80bc78:	003ff206 	br	80bc44 <__ratio+0x78>

0080bc7c <_mprec_log10>:
  80bc7c:	defffe04 	addi	sp,sp,-8
  80bc80:	008005c4 	movi	r2,23
  80bc84:	dc000015 	stw	r16,0(sp)
  80bc88:	dfc00115 	stw	ra,4(sp)
  80bc8c:	2021883a 	mov	r16,r4
  80bc90:	11000c16 	blt	r2,r4,80bcc4 <_mprec_log10+0x48>
  80bc94:	200490fa 	slli	r2,r4,3
  80bc98:	00c02074 	movhi	r3,129
  80bc9c:	18cb4904 	addi	r3,r3,11556
  80bca0:	10c5883a 	add	r2,r2,r3
  80bca4:	12400117 	ldw	r9,4(r2)
  80bca8:	12000017 	ldw	r8,0(r2)
  80bcac:	4807883a 	mov	r3,r9
  80bcb0:	4005883a 	mov	r2,r8
  80bcb4:	dfc00117 	ldw	ra,4(sp)
  80bcb8:	dc000017 	ldw	r16,0(sp)
  80bcbc:	dec00204 	addi	sp,sp,8
  80bcc0:	f800283a 	ret
  80bcc4:	0011883a 	mov	r8,zero
  80bcc8:	024ffc34 	movhi	r9,16368
  80bccc:	0005883a 	mov	r2,zero
  80bcd0:	00d00934 	movhi	r3,16420
  80bcd4:	480b883a 	mov	r5,r9
  80bcd8:	4009883a 	mov	r4,r8
  80bcdc:	180f883a 	mov	r7,r3
  80bce0:	100d883a 	mov	r6,r2
  80bce4:	08042ac0 	call	8042ac <__muldf3>
  80bce8:	843fffc4 	addi	r16,r16,-1
  80bcec:	1011883a 	mov	r8,r2
  80bcf0:	1813883a 	mov	r9,r3
  80bcf4:	803ff51e 	bne	r16,zero,80bccc <_mprec_log10+0x50>
  80bcf8:	4005883a 	mov	r2,r8
  80bcfc:	4807883a 	mov	r3,r9
  80bd00:	dfc00117 	ldw	ra,4(sp)
  80bd04:	dc000017 	ldw	r16,0(sp)
  80bd08:	dec00204 	addi	sp,sp,8
  80bd0c:	f800283a 	ret

0080bd10 <__copybits>:
  80bd10:	297fffc4 	addi	r5,r5,-1
  80bd14:	30800417 	ldw	r2,16(r6)
  80bd18:	280bd17a 	srai	r5,r5,5
  80bd1c:	31800504 	addi	r6,r6,20
  80bd20:	1085883a 	add	r2,r2,r2
  80bd24:	294b883a 	add	r5,r5,r5
  80bd28:	294b883a 	add	r5,r5,r5
  80bd2c:	1085883a 	add	r2,r2,r2
  80bd30:	290b883a 	add	r5,r5,r4
  80bd34:	3087883a 	add	r3,r6,r2
  80bd38:	29400104 	addi	r5,r5,4
  80bd3c:	30c0052e 	bgeu	r6,r3,80bd54 <__copybits+0x44>
  80bd40:	30800017 	ldw	r2,0(r6)
  80bd44:	31800104 	addi	r6,r6,4
  80bd48:	20800015 	stw	r2,0(r4)
  80bd4c:	21000104 	addi	r4,r4,4
  80bd50:	30fffb36 	bltu	r6,r3,80bd40 <__copybits+0x30>
  80bd54:	2140032e 	bgeu	r4,r5,80bd64 <__copybits+0x54>
  80bd58:	20000015 	stw	zero,0(r4)
  80bd5c:	21000104 	addi	r4,r4,4
  80bd60:	217ffd36 	bltu	r4,r5,80bd58 <__copybits+0x48>
  80bd64:	f800283a 	ret

0080bd68 <__any_on>:
  80bd68:	20800417 	ldw	r2,16(r4)
  80bd6c:	2807d17a 	srai	r3,r5,5
  80bd70:	21000504 	addi	r4,r4,20
  80bd74:	10c00d0e 	bge	r2,r3,80bdac <__any_on+0x44>
  80bd78:	1085883a 	add	r2,r2,r2
  80bd7c:	1085883a 	add	r2,r2,r2
  80bd80:	208d883a 	add	r6,r4,r2
  80bd84:	2180182e 	bgeu	r4,r6,80bde8 <__any_on+0x80>
  80bd88:	30bfff17 	ldw	r2,-4(r6)
  80bd8c:	30ffff04 	addi	r3,r6,-4
  80bd90:	1000041e 	bne	r2,zero,80bda4 <__any_on+0x3c>
  80bd94:	20c0142e 	bgeu	r4,r3,80bde8 <__any_on+0x80>
  80bd98:	18ffff04 	addi	r3,r3,-4
  80bd9c:	18800017 	ldw	r2,0(r3)
  80bda0:	103ffc26 	beq	r2,zero,80bd94 <__any_on+0x2c>
  80bda4:	00800044 	movi	r2,1
  80bda8:	f800283a 	ret
  80bdac:	18800a0e 	bge	r3,r2,80bdd8 <__any_on+0x70>
  80bdb0:	294007cc 	andi	r5,r5,31
  80bdb4:	28000826 	beq	r5,zero,80bdd8 <__any_on+0x70>
  80bdb8:	18c5883a 	add	r2,r3,r3
  80bdbc:	1085883a 	add	r2,r2,r2
  80bdc0:	208d883a 	add	r6,r4,r2
  80bdc4:	30c00017 	ldw	r3,0(r6)
  80bdc8:	1944d83a 	srl	r2,r3,r5
  80bdcc:	1144983a 	sll	r2,r2,r5
  80bdd0:	18bff41e 	bne	r3,r2,80bda4 <__any_on+0x3c>
  80bdd4:	003feb06 	br	80bd84 <__any_on+0x1c>
  80bdd8:	18c5883a 	add	r2,r3,r3
  80bddc:	1085883a 	add	r2,r2,r2
  80bde0:	208d883a 	add	r6,r4,r2
  80bde4:	003fe706 	br	80bd84 <__any_on+0x1c>
  80bde8:	0005883a 	mov	r2,zero
  80bdec:	f800283a 	ret

0080bdf0 <_Balloc>:
  80bdf0:	20c01317 	ldw	r3,76(r4)
  80bdf4:	defffb04 	addi	sp,sp,-20
  80bdf8:	dcc00315 	stw	r19,12(sp)
  80bdfc:	dc800215 	stw	r18,8(sp)
  80be00:	dfc00415 	stw	ra,16(sp)
  80be04:	2825883a 	mov	r18,r5
  80be08:	dc400115 	stw	r17,4(sp)
  80be0c:	dc000015 	stw	r16,0(sp)
  80be10:	2027883a 	mov	r19,r4
  80be14:	01800404 	movi	r6,16
  80be18:	01400104 	movi	r5,4
  80be1c:	18001726 	beq	r3,zero,80be7c <_Balloc+0x8c>
  80be20:	01400044 	movi	r5,1
  80be24:	9485883a 	add	r2,r18,r18
  80be28:	2ca2983a 	sll	r17,r5,r18
  80be2c:	1085883a 	add	r2,r2,r2
  80be30:	10c7883a 	add	r3,r2,r3
  80be34:	1c000017 	ldw	r16,0(r3)
  80be38:	8c4d883a 	add	r6,r17,r17
  80be3c:	318d883a 	add	r6,r6,r6
  80be40:	9809883a 	mov	r4,r19
  80be44:	31800504 	addi	r6,r6,20
  80be48:	80001226 	beq	r16,zero,80be94 <_Balloc+0xa4>
  80be4c:	80800017 	ldw	r2,0(r16)
  80be50:	18800015 	stw	r2,0(r3)
  80be54:	80000415 	stw	zero,16(r16)
  80be58:	80000315 	stw	zero,12(r16)
  80be5c:	8005883a 	mov	r2,r16
  80be60:	dfc00417 	ldw	ra,16(sp)
  80be64:	dcc00317 	ldw	r19,12(sp)
  80be68:	dc800217 	ldw	r18,8(sp)
  80be6c:	dc400117 	ldw	r17,4(sp)
  80be70:	dc000017 	ldw	r16,0(sp)
  80be74:	dec00504 	addi	sp,sp,20
  80be78:	f800283a 	ret
  80be7c:	080d3780 	call	80d378 <_calloc_r>
  80be80:	1007883a 	mov	r3,r2
  80be84:	0021883a 	mov	r16,zero
  80be88:	98801315 	stw	r2,76(r19)
  80be8c:	103fe41e 	bne	r2,zero,80be20 <_Balloc+0x30>
  80be90:	003ff206 	br	80be5c <_Balloc+0x6c>
  80be94:	080d3780 	call	80d378 <_calloc_r>
  80be98:	103ff026 	beq	r2,zero,80be5c <_Balloc+0x6c>
  80be9c:	1021883a 	mov	r16,r2
  80bea0:	14800115 	stw	r18,4(r2)
  80bea4:	14400215 	stw	r17,8(r2)
  80bea8:	003fea06 	br	80be54 <_Balloc+0x64>

0080beac <__d2b>:
  80beac:	defff504 	addi	sp,sp,-44
  80beb0:	dcc00515 	stw	r19,20(sp)
  80beb4:	04c00044 	movi	r19,1
  80beb8:	dc000215 	stw	r16,8(sp)
  80bebc:	2821883a 	mov	r16,r5
  80bec0:	980b883a 	mov	r5,r19
  80bec4:	ddc00915 	stw	r23,36(sp)
  80bec8:	dd800815 	stw	r22,32(sp)
  80becc:	dd400715 	stw	r21,28(sp)
  80bed0:	dd000615 	stw	r20,24(sp)
  80bed4:	dc800415 	stw	r18,16(sp)
  80bed8:	dc400315 	stw	r17,12(sp)
  80bedc:	dfc00a15 	stw	ra,40(sp)
  80bee0:	3023883a 	mov	r17,r6
  80bee4:	382d883a 	mov	r22,r7
  80bee8:	ddc00b17 	ldw	r23,44(sp)
  80beec:	080bdf00 	call	80bdf0 <_Balloc>
  80bef0:	1025883a 	mov	r18,r2
  80bef4:	00a00034 	movhi	r2,32768
  80bef8:	10bfffc4 	addi	r2,r2,-1
  80befc:	8888703a 	and	r4,r17,r2
  80bf00:	202ad53a 	srli	r21,r4,20
  80bf04:	00800434 	movhi	r2,16
  80bf08:	10bfffc4 	addi	r2,r2,-1
  80bf0c:	8886703a 	and	r3,r17,r2
  80bf10:	a829003a 	cmpeq	r20,r21,zero
  80bf14:	800b883a 	mov	r5,r16
  80bf18:	d8c00115 	stw	r3,4(sp)
  80bf1c:	94000504 	addi	r16,r18,20
  80bf20:	a000021e 	bne	r20,zero,80bf2c <__d2b+0x80>
  80bf24:	18c00434 	orhi	r3,r3,16
  80bf28:	d8c00115 	stw	r3,4(sp)
  80bf2c:	28002726 	beq	r5,zero,80bfcc <__d2b+0x120>
  80bf30:	d809883a 	mov	r4,sp
  80bf34:	d9400015 	stw	r5,0(sp)
  80bf38:	080b9080 	call	80b908 <__lo0bits>
  80bf3c:	100d883a 	mov	r6,r2
  80bf40:	10003526 	beq	r2,zero,80c018 <__d2b+0x16c>
  80bf44:	d8c00117 	ldw	r3,4(sp)
  80bf48:	00800804 	movi	r2,32
  80bf4c:	1185c83a 	sub	r2,r2,r6
  80bf50:	d9000017 	ldw	r4,0(sp)
  80bf54:	1886983a 	sll	r3,r3,r2
  80bf58:	1906b03a 	or	r3,r3,r4
  80bf5c:	90c00515 	stw	r3,20(r18)
  80bf60:	d8c00117 	ldw	r3,4(sp)
  80bf64:	1986d83a 	srl	r3,r3,r6
  80bf68:	d8c00115 	stw	r3,4(sp)
  80bf6c:	180b003a 	cmpeq	r5,r3,zero
  80bf70:	00800084 	movi	r2,2
  80bf74:	114bc83a 	sub	r5,r2,r5
  80bf78:	80c00115 	stw	r3,4(r16)
  80bf7c:	91400415 	stw	r5,16(r18)
  80bf80:	a0001a1e 	bne	r20,zero,80bfec <__d2b+0x140>
  80bf84:	3545883a 	add	r2,r6,r21
  80bf88:	10bef344 	addi	r2,r2,-1075
  80bf8c:	00c00d44 	movi	r3,53
  80bf90:	b0800015 	stw	r2,0(r22)
  80bf94:	1987c83a 	sub	r3,r3,r6
  80bf98:	b8c00015 	stw	r3,0(r23)
  80bf9c:	9005883a 	mov	r2,r18
  80bfa0:	dfc00a17 	ldw	ra,40(sp)
  80bfa4:	ddc00917 	ldw	r23,36(sp)
  80bfa8:	dd800817 	ldw	r22,32(sp)
  80bfac:	dd400717 	ldw	r21,28(sp)
  80bfb0:	dd000617 	ldw	r20,24(sp)
  80bfb4:	dcc00517 	ldw	r19,20(sp)
  80bfb8:	dc800417 	ldw	r18,16(sp)
  80bfbc:	dc400317 	ldw	r17,12(sp)
  80bfc0:	dc000217 	ldw	r16,8(sp)
  80bfc4:	dec00b04 	addi	sp,sp,44
  80bfc8:	f800283a 	ret
  80bfcc:	d9000104 	addi	r4,sp,4
  80bfd0:	080b9080 	call	80b908 <__lo0bits>
  80bfd4:	11800804 	addi	r6,r2,32
  80bfd8:	d8800117 	ldw	r2,4(sp)
  80bfdc:	94c00415 	stw	r19,16(r18)
  80bfe0:	980b883a 	mov	r5,r19
  80bfe4:	90800515 	stw	r2,20(r18)
  80bfe8:	a03fe626 	beq	r20,zero,80bf84 <__d2b+0xd8>
  80bfec:	2945883a 	add	r2,r5,r5
  80bff0:	1085883a 	add	r2,r2,r2
  80bff4:	1405883a 	add	r2,r2,r16
  80bff8:	113fff17 	ldw	r4,-4(r2)
  80bffc:	30fef384 	addi	r3,r6,-1074
  80c000:	2820917a 	slli	r16,r5,5
  80c004:	b0c00015 	stw	r3,0(r22)
  80c008:	080b8980 	call	80b898 <__hi0bits>
  80c00c:	80a1c83a 	sub	r16,r16,r2
  80c010:	bc000015 	stw	r16,0(r23)
  80c014:	003fe106 	br	80bf9c <__d2b+0xf0>
  80c018:	d8800017 	ldw	r2,0(sp)
  80c01c:	90800515 	stw	r2,20(r18)
  80c020:	d8c00117 	ldw	r3,4(sp)
  80c024:	003fd106 	br	80bf6c <__d2b+0xc0>

0080c028 <__mdiff>:
  80c028:	defffb04 	addi	sp,sp,-20
  80c02c:	dc000015 	stw	r16,0(sp)
  80c030:	2821883a 	mov	r16,r5
  80c034:	dc800215 	stw	r18,8(sp)
  80c038:	300b883a 	mov	r5,r6
  80c03c:	2025883a 	mov	r18,r4
  80c040:	8009883a 	mov	r4,r16
  80c044:	dc400115 	stw	r17,4(sp)
  80c048:	dfc00415 	stw	ra,16(sp)
  80c04c:	dcc00315 	stw	r19,12(sp)
  80c050:	3023883a 	mov	r17,r6
  80c054:	080b9cc0 	call	80b9cc <__mcmp>
  80c058:	10004226 	beq	r2,zero,80c164 <__mdiff+0x13c>
  80c05c:	10005016 	blt	r2,zero,80c1a0 <__mdiff+0x178>
  80c060:	0027883a 	mov	r19,zero
  80c064:	81400117 	ldw	r5,4(r16)
  80c068:	9009883a 	mov	r4,r18
  80c06c:	080bdf00 	call	80bdf0 <_Balloc>
  80c070:	1019883a 	mov	r12,r2
  80c074:	82800417 	ldw	r10,16(r16)
  80c078:	88800417 	ldw	r2,16(r17)
  80c07c:	81800504 	addi	r6,r16,20
  80c080:	5287883a 	add	r3,r10,r10
  80c084:	1085883a 	add	r2,r2,r2
  80c088:	18c7883a 	add	r3,r3,r3
  80c08c:	1085883a 	add	r2,r2,r2
  80c090:	8a000504 	addi	r8,r17,20
  80c094:	64c00315 	stw	r19,12(r12)
  80c098:	30db883a 	add	r13,r6,r3
  80c09c:	4097883a 	add	r11,r8,r2
  80c0a0:	61c00504 	addi	r7,r12,20
  80c0a4:	0013883a 	mov	r9,zero
  80c0a8:	31000017 	ldw	r4,0(r6)
  80c0ac:	41400017 	ldw	r5,0(r8)
  80c0b0:	42000104 	addi	r8,r8,4
  80c0b4:	20bfffcc 	andi	r2,r4,65535
  80c0b8:	28ffffcc 	andi	r3,r5,65535
  80c0bc:	10c5c83a 	sub	r2,r2,r3
  80c0c0:	1245883a 	add	r2,r2,r9
  80c0c4:	2008d43a 	srli	r4,r4,16
  80c0c8:	280ad43a 	srli	r5,r5,16
  80c0cc:	1007d43a 	srai	r3,r2,16
  80c0d0:	3880000d 	sth	r2,0(r7)
  80c0d4:	2149c83a 	sub	r4,r4,r5
  80c0d8:	20c9883a 	add	r4,r4,r3
  80c0dc:	3900008d 	sth	r4,2(r7)
  80c0e0:	31800104 	addi	r6,r6,4
  80c0e4:	39c00104 	addi	r7,r7,4
  80c0e8:	2013d43a 	srai	r9,r4,16
  80c0ec:	42ffee36 	bltu	r8,r11,80c0a8 <__mdiff+0x80>
  80c0f0:	33400c2e 	bgeu	r6,r13,80c124 <__mdiff+0xfc>
  80c0f4:	30800017 	ldw	r2,0(r6)
  80c0f8:	31800104 	addi	r6,r6,4
  80c0fc:	10ffffcc 	andi	r3,r2,65535
  80c100:	1a47883a 	add	r3,r3,r9
  80c104:	1004d43a 	srli	r2,r2,16
  80c108:	1809d43a 	srai	r4,r3,16
  80c10c:	38c0000d 	sth	r3,0(r7)
  80c110:	1105883a 	add	r2,r2,r4
  80c114:	3880008d 	sth	r2,2(r7)
  80c118:	1013d43a 	srai	r9,r2,16
  80c11c:	39c00104 	addi	r7,r7,4
  80c120:	337ff436 	bltu	r6,r13,80c0f4 <__mdiff+0xcc>
  80c124:	38bfff17 	ldw	r2,-4(r7)
  80c128:	38ffff04 	addi	r3,r7,-4
  80c12c:	1000041e 	bne	r2,zero,80c140 <__mdiff+0x118>
  80c130:	18ffff04 	addi	r3,r3,-4
  80c134:	18800017 	ldw	r2,0(r3)
  80c138:	52bfffc4 	addi	r10,r10,-1
  80c13c:	103ffc26 	beq	r2,zero,80c130 <__mdiff+0x108>
  80c140:	6005883a 	mov	r2,r12
  80c144:	62800415 	stw	r10,16(r12)
  80c148:	dfc00417 	ldw	ra,16(sp)
  80c14c:	dcc00317 	ldw	r19,12(sp)
  80c150:	dc800217 	ldw	r18,8(sp)
  80c154:	dc400117 	ldw	r17,4(sp)
  80c158:	dc000017 	ldw	r16,0(sp)
  80c15c:	dec00504 	addi	sp,sp,20
  80c160:	f800283a 	ret
  80c164:	9009883a 	mov	r4,r18
  80c168:	000b883a 	mov	r5,zero
  80c16c:	080bdf00 	call	80bdf0 <_Balloc>
  80c170:	1019883a 	mov	r12,r2
  80c174:	00800044 	movi	r2,1
  80c178:	60800415 	stw	r2,16(r12)
  80c17c:	6005883a 	mov	r2,r12
  80c180:	60000515 	stw	zero,20(r12)
  80c184:	dfc00417 	ldw	ra,16(sp)
  80c188:	dcc00317 	ldw	r19,12(sp)
  80c18c:	dc800217 	ldw	r18,8(sp)
  80c190:	dc400117 	ldw	r17,4(sp)
  80c194:	dc000017 	ldw	r16,0(sp)
  80c198:	dec00504 	addi	sp,sp,20
  80c19c:	f800283a 	ret
  80c1a0:	880d883a 	mov	r6,r17
  80c1a4:	04c00044 	movi	r19,1
  80c1a8:	8023883a 	mov	r17,r16
  80c1ac:	3021883a 	mov	r16,r6
  80c1b0:	003fac06 	br	80c064 <__mdiff+0x3c>

0080c1b4 <__lshift>:
  80c1b4:	defff904 	addi	sp,sp,-28
  80c1b8:	28800417 	ldw	r2,16(r5)
  80c1bc:	dc000015 	stw	r16,0(sp)
  80c1c0:	3021d17a 	srai	r16,r6,5
  80c1c4:	28c00217 	ldw	r3,8(r5)
  80c1c8:	10800044 	addi	r2,r2,1
  80c1cc:	dc400115 	stw	r17,4(sp)
  80c1d0:	80a3883a 	add	r17,r16,r2
  80c1d4:	dd400515 	stw	r21,20(sp)
  80c1d8:	dd000415 	stw	r20,16(sp)
  80c1dc:	dc800215 	stw	r18,8(sp)
  80c1e0:	dfc00615 	stw	ra,24(sp)
  80c1e4:	2825883a 	mov	r18,r5
  80c1e8:	dcc00315 	stw	r19,12(sp)
  80c1ec:	3029883a 	mov	r20,r6
  80c1f0:	202b883a 	mov	r21,r4
  80c1f4:	29400117 	ldw	r5,4(r5)
  80c1f8:	1c40030e 	bge	r3,r17,80c208 <__lshift+0x54>
  80c1fc:	18c7883a 	add	r3,r3,r3
  80c200:	29400044 	addi	r5,r5,1
  80c204:	1c7ffd16 	blt	r3,r17,80c1fc <__lshift+0x48>
  80c208:	a809883a 	mov	r4,r21
  80c20c:	080bdf00 	call	80bdf0 <_Balloc>
  80c210:	1027883a 	mov	r19,r2
  80c214:	11400504 	addi	r5,r2,20
  80c218:	0400090e 	bge	zero,r16,80c240 <__lshift+0x8c>
  80c21c:	2805883a 	mov	r2,r5
  80c220:	0007883a 	mov	r3,zero
  80c224:	18c00044 	addi	r3,r3,1
  80c228:	10000015 	stw	zero,0(r2)
  80c22c:	10800104 	addi	r2,r2,4
  80c230:	80fffc1e 	bne	r16,r3,80c224 <__lshift+0x70>
  80c234:	8405883a 	add	r2,r16,r16
  80c238:	1085883a 	add	r2,r2,r2
  80c23c:	288b883a 	add	r5,r5,r2
  80c240:	90800417 	ldw	r2,16(r18)
  80c244:	91000504 	addi	r4,r18,20
  80c248:	a18007cc 	andi	r6,r20,31
  80c24c:	1085883a 	add	r2,r2,r2
  80c250:	1085883a 	add	r2,r2,r2
  80c254:	208f883a 	add	r7,r4,r2
  80c258:	30001e26 	beq	r6,zero,80c2d4 <__lshift+0x120>
  80c25c:	00800804 	movi	r2,32
  80c260:	1191c83a 	sub	r8,r2,r6
  80c264:	0007883a 	mov	r3,zero
  80c268:	20800017 	ldw	r2,0(r4)
  80c26c:	1184983a 	sll	r2,r2,r6
  80c270:	1884b03a 	or	r2,r3,r2
  80c274:	28800015 	stw	r2,0(r5)
  80c278:	20c00017 	ldw	r3,0(r4)
  80c27c:	21000104 	addi	r4,r4,4
  80c280:	29400104 	addi	r5,r5,4
  80c284:	1a06d83a 	srl	r3,r3,r8
  80c288:	21fff736 	bltu	r4,r7,80c268 <__lshift+0xb4>
  80c28c:	28c00015 	stw	r3,0(r5)
  80c290:	18000126 	beq	r3,zero,80c298 <__lshift+0xe4>
  80c294:	8c400044 	addi	r17,r17,1
  80c298:	88bfffc4 	addi	r2,r17,-1
  80c29c:	98800415 	stw	r2,16(r19)
  80c2a0:	a809883a 	mov	r4,r21
  80c2a4:	900b883a 	mov	r5,r18
  80c2a8:	080b8700 	call	80b870 <_Bfree>
  80c2ac:	9805883a 	mov	r2,r19
  80c2b0:	dfc00617 	ldw	ra,24(sp)
  80c2b4:	dd400517 	ldw	r21,20(sp)
  80c2b8:	dd000417 	ldw	r20,16(sp)
  80c2bc:	dcc00317 	ldw	r19,12(sp)
  80c2c0:	dc800217 	ldw	r18,8(sp)
  80c2c4:	dc400117 	ldw	r17,4(sp)
  80c2c8:	dc000017 	ldw	r16,0(sp)
  80c2cc:	dec00704 	addi	sp,sp,28
  80c2d0:	f800283a 	ret
  80c2d4:	20800017 	ldw	r2,0(r4)
  80c2d8:	21000104 	addi	r4,r4,4
  80c2dc:	28800015 	stw	r2,0(r5)
  80c2e0:	29400104 	addi	r5,r5,4
  80c2e4:	21ffec2e 	bgeu	r4,r7,80c298 <__lshift+0xe4>
  80c2e8:	20800017 	ldw	r2,0(r4)
  80c2ec:	21000104 	addi	r4,r4,4
  80c2f0:	28800015 	stw	r2,0(r5)
  80c2f4:	29400104 	addi	r5,r5,4
  80c2f8:	21fff636 	bltu	r4,r7,80c2d4 <__lshift+0x120>
  80c2fc:	003fe606 	br	80c298 <__lshift+0xe4>

0080c300 <__multiply>:
  80c300:	defff904 	addi	sp,sp,-28
  80c304:	dcc00315 	stw	r19,12(sp)
  80c308:	dc800215 	stw	r18,8(sp)
  80c30c:	2cc00417 	ldw	r19,16(r5)
  80c310:	34800417 	ldw	r18,16(r6)
  80c314:	dd000415 	stw	r20,16(sp)
  80c318:	dc400115 	stw	r17,4(sp)
  80c31c:	dfc00615 	stw	ra,24(sp)
  80c320:	dd400515 	stw	r21,20(sp)
  80c324:	dc000015 	stw	r16,0(sp)
  80c328:	2823883a 	mov	r17,r5
  80c32c:	3029883a 	mov	r20,r6
  80c330:	9c80040e 	bge	r19,r18,80c344 <__multiply+0x44>
  80c334:	9027883a 	mov	r19,r18
  80c338:	2c800417 	ldw	r18,16(r5)
  80c33c:	2829883a 	mov	r20,r5
  80c340:	3023883a 	mov	r17,r6
  80c344:	88800217 	ldw	r2,8(r17)
  80c348:	9ca1883a 	add	r16,r19,r18
  80c34c:	89400117 	ldw	r5,4(r17)
  80c350:	1400010e 	bge	r2,r16,80c358 <__multiply+0x58>
  80c354:	29400044 	addi	r5,r5,1
  80c358:	080bdf00 	call	80bdf0 <_Balloc>
  80c35c:	102b883a 	mov	r21,r2
  80c360:	8405883a 	add	r2,r16,r16
  80c364:	1085883a 	add	r2,r2,r2
  80c368:	a9000504 	addi	r4,r21,20
  80c36c:	209d883a 	add	r14,r4,r2
  80c370:	2380042e 	bgeu	r4,r14,80c384 <__multiply+0x84>
  80c374:	2005883a 	mov	r2,r4
  80c378:	10000015 	stw	zero,0(r2)
  80c37c:	10800104 	addi	r2,r2,4
  80c380:	13bffd36 	bltu	r2,r14,80c378 <__multiply+0x78>
  80c384:	9485883a 	add	r2,r18,r18
  80c388:	9cc7883a 	add	r3,r19,r19
  80c38c:	a1800504 	addi	r6,r20,20
  80c390:	1085883a 	add	r2,r2,r2
  80c394:	8b400504 	addi	r13,r17,20
  80c398:	18c7883a 	add	r3,r3,r3
  80c39c:	309f883a 	add	r15,r6,r2
  80c3a0:	68d7883a 	add	r11,r13,r3
  80c3a4:	33c03b2e 	bgeu	r6,r15,80c494 <__multiply+0x194>
  80c3a8:	2019883a 	mov	r12,r4
  80c3ac:	30800017 	ldw	r2,0(r6)
  80c3b0:	127fffcc 	andi	r9,r2,65535
  80c3b4:	48001826 	beq	r9,zero,80c418 <__multiply+0x118>
  80c3b8:	6811883a 	mov	r8,r13
  80c3bc:	600f883a 	mov	r7,r12
  80c3c0:	0015883a 	mov	r10,zero
  80c3c4:	40c00017 	ldw	r3,0(r8)
  80c3c8:	39400017 	ldw	r5,0(r7)
  80c3cc:	42000104 	addi	r8,r8,4
  80c3d0:	193fffcc 	andi	r4,r3,65535
  80c3d4:	4909383a 	mul	r4,r9,r4
  80c3d8:	1806d43a 	srli	r3,r3,16
  80c3dc:	28bfffcc 	andi	r2,r5,65535
  80c3e0:	5085883a 	add	r2,r10,r2
  80c3e4:	2089883a 	add	r4,r4,r2
  80c3e8:	48c7383a 	mul	r3,r9,r3
  80c3ec:	280ad43a 	srli	r5,r5,16
  80c3f0:	2004d43a 	srli	r2,r4,16
  80c3f4:	3900000d 	sth	r4,0(r7)
  80c3f8:	1947883a 	add	r3,r3,r5
  80c3fc:	10c5883a 	add	r2,r2,r3
  80c400:	3880008d 	sth	r2,2(r7)
  80c404:	1014d43a 	srli	r10,r2,16
  80c408:	39c00104 	addi	r7,r7,4
  80c40c:	42ffed36 	bltu	r8,r11,80c3c4 <__multiply+0xc4>
  80c410:	3a800015 	stw	r10,0(r7)
  80c414:	30800017 	ldw	r2,0(r6)
  80c418:	1012d43a 	srli	r9,r2,16
  80c41c:	48001926 	beq	r9,zero,80c484 <__multiply+0x184>
  80c420:	60800017 	ldw	r2,0(r12)
  80c424:	6811883a 	mov	r8,r13
  80c428:	600f883a 	mov	r7,r12
  80c42c:	0015883a 	mov	r10,zero
  80c430:	100b883a 	mov	r5,r2
  80c434:	41000017 	ldw	r4,0(r8)
  80c438:	2806d43a 	srli	r3,r5,16
  80c43c:	3880000d 	sth	r2,0(r7)
  80c440:	20bfffcc 	andi	r2,r4,65535
  80c444:	4885383a 	mul	r2,r9,r2
  80c448:	50c7883a 	add	r3,r10,r3
  80c44c:	2008d43a 	srli	r4,r4,16
  80c450:	10c5883a 	add	r2,r2,r3
  80c454:	3880008d 	sth	r2,2(r7)
  80c458:	39c00104 	addi	r7,r7,4
  80c45c:	39400017 	ldw	r5,0(r7)
  80c460:	4909383a 	mul	r4,r9,r4
  80c464:	1004d43a 	srli	r2,r2,16
  80c468:	28ffffcc 	andi	r3,r5,65535
  80c46c:	20c9883a 	add	r4,r4,r3
  80c470:	1105883a 	add	r2,r2,r4
  80c474:	42000104 	addi	r8,r8,4
  80c478:	1014d43a 	srli	r10,r2,16
  80c47c:	42ffed36 	bltu	r8,r11,80c434 <__multiply+0x134>
  80c480:	38800015 	stw	r2,0(r7)
  80c484:	31800104 	addi	r6,r6,4
  80c488:	33c0022e 	bgeu	r6,r15,80c494 <__multiply+0x194>
  80c48c:	63000104 	addi	r12,r12,4
  80c490:	003fc606 	br	80c3ac <__multiply+0xac>
  80c494:	0400090e 	bge	zero,r16,80c4bc <__multiply+0x1bc>
  80c498:	70bfff17 	ldw	r2,-4(r14)
  80c49c:	70ffff04 	addi	r3,r14,-4
  80c4a0:	10000326 	beq	r2,zero,80c4b0 <__multiply+0x1b0>
  80c4a4:	00000506 	br	80c4bc <__multiply+0x1bc>
  80c4a8:	18800017 	ldw	r2,0(r3)
  80c4ac:	1000031e 	bne	r2,zero,80c4bc <__multiply+0x1bc>
  80c4b0:	843fffc4 	addi	r16,r16,-1
  80c4b4:	18ffff04 	addi	r3,r3,-4
  80c4b8:	803ffb1e 	bne	r16,zero,80c4a8 <__multiply+0x1a8>
  80c4bc:	a805883a 	mov	r2,r21
  80c4c0:	ac000415 	stw	r16,16(r21)
  80c4c4:	dfc00617 	ldw	ra,24(sp)
  80c4c8:	dd400517 	ldw	r21,20(sp)
  80c4cc:	dd000417 	ldw	r20,16(sp)
  80c4d0:	dcc00317 	ldw	r19,12(sp)
  80c4d4:	dc800217 	ldw	r18,8(sp)
  80c4d8:	dc400117 	ldw	r17,4(sp)
  80c4dc:	dc000017 	ldw	r16,0(sp)
  80c4e0:	dec00704 	addi	sp,sp,28
  80c4e4:	f800283a 	ret

0080c4e8 <__i2b>:
  80c4e8:	defffd04 	addi	sp,sp,-12
  80c4ec:	dc000015 	stw	r16,0(sp)
  80c4f0:	04000044 	movi	r16,1
  80c4f4:	dc800115 	stw	r18,4(sp)
  80c4f8:	2825883a 	mov	r18,r5
  80c4fc:	800b883a 	mov	r5,r16
  80c500:	dfc00215 	stw	ra,8(sp)
  80c504:	080bdf00 	call	80bdf0 <_Balloc>
  80c508:	14000415 	stw	r16,16(r2)
  80c50c:	14800515 	stw	r18,20(r2)
  80c510:	dfc00217 	ldw	ra,8(sp)
  80c514:	dc800117 	ldw	r18,4(sp)
  80c518:	dc000017 	ldw	r16,0(sp)
  80c51c:	dec00304 	addi	sp,sp,12
  80c520:	f800283a 	ret

0080c524 <__multadd>:
  80c524:	defffa04 	addi	sp,sp,-24
  80c528:	dc800215 	stw	r18,8(sp)
  80c52c:	2c800417 	ldw	r18,16(r5)
  80c530:	dd000415 	stw	r20,16(sp)
  80c534:	dcc00315 	stw	r19,12(sp)
  80c538:	dc000015 	stw	r16,0(sp)
  80c53c:	dfc00515 	stw	ra,20(sp)
  80c540:	3821883a 	mov	r16,r7
  80c544:	dc400115 	stw	r17,4(sp)
  80c548:	2827883a 	mov	r19,r5
  80c54c:	2029883a 	mov	r20,r4
  80c550:	2a000504 	addi	r8,r5,20
  80c554:	000f883a 	mov	r7,zero
  80c558:	40800017 	ldw	r2,0(r8)
  80c55c:	39c00044 	addi	r7,r7,1
  80c560:	10ffffcc 	andi	r3,r2,65535
  80c564:	1987383a 	mul	r3,r3,r6
  80c568:	1004d43a 	srli	r2,r2,16
  80c56c:	1c07883a 	add	r3,r3,r16
  80c570:	180ad43a 	srli	r5,r3,16
  80c574:	1185383a 	mul	r2,r2,r6
  80c578:	18ffffcc 	andi	r3,r3,65535
  80c57c:	1145883a 	add	r2,r2,r5
  80c580:	1008943a 	slli	r4,r2,16
  80c584:	1020d43a 	srli	r16,r2,16
  80c588:	20c9883a 	add	r4,r4,r3
  80c58c:	41000015 	stw	r4,0(r8)
  80c590:	42000104 	addi	r8,r8,4
  80c594:	3cbff016 	blt	r7,r18,80c558 <__multadd+0x34>
  80c598:	80000826 	beq	r16,zero,80c5bc <__multadd+0x98>
  80c59c:	98800217 	ldw	r2,8(r19)
  80c5a0:	90800f0e 	bge	r18,r2,80c5e0 <__multadd+0xbc>
  80c5a4:	9485883a 	add	r2,r18,r18
  80c5a8:	1085883a 	add	r2,r2,r2
  80c5ac:	14c5883a 	add	r2,r2,r19
  80c5b0:	90c00044 	addi	r3,r18,1
  80c5b4:	14000515 	stw	r16,20(r2)
  80c5b8:	98c00415 	stw	r3,16(r19)
  80c5bc:	9805883a 	mov	r2,r19
  80c5c0:	dfc00517 	ldw	ra,20(sp)
  80c5c4:	dd000417 	ldw	r20,16(sp)
  80c5c8:	dcc00317 	ldw	r19,12(sp)
  80c5cc:	dc800217 	ldw	r18,8(sp)
  80c5d0:	dc400117 	ldw	r17,4(sp)
  80c5d4:	dc000017 	ldw	r16,0(sp)
  80c5d8:	dec00604 	addi	sp,sp,24
  80c5dc:	f800283a 	ret
  80c5e0:	99400117 	ldw	r5,4(r19)
  80c5e4:	a009883a 	mov	r4,r20
  80c5e8:	29400044 	addi	r5,r5,1
  80c5ec:	080bdf00 	call	80bdf0 <_Balloc>
  80c5f0:	99800417 	ldw	r6,16(r19)
  80c5f4:	99400304 	addi	r5,r19,12
  80c5f8:	11000304 	addi	r4,r2,12
  80c5fc:	318d883a 	add	r6,r6,r6
  80c600:	318d883a 	add	r6,r6,r6
  80c604:	31800204 	addi	r6,r6,8
  80c608:	1023883a 	mov	r17,r2
  80c60c:	080b6f00 	call	80b6f0 <memcpy>
  80c610:	980b883a 	mov	r5,r19
  80c614:	a009883a 	mov	r4,r20
  80c618:	080b8700 	call	80b870 <_Bfree>
  80c61c:	8827883a 	mov	r19,r17
  80c620:	003fe006 	br	80c5a4 <__multadd+0x80>

0080c624 <__pow5mult>:
  80c624:	defffa04 	addi	sp,sp,-24
  80c628:	308000cc 	andi	r2,r6,3
  80c62c:	dd000415 	stw	r20,16(sp)
  80c630:	dcc00315 	stw	r19,12(sp)
  80c634:	dc000015 	stw	r16,0(sp)
  80c638:	dfc00515 	stw	ra,20(sp)
  80c63c:	dc800215 	stw	r18,8(sp)
  80c640:	dc400115 	stw	r17,4(sp)
  80c644:	3021883a 	mov	r16,r6
  80c648:	2027883a 	mov	r19,r4
  80c64c:	2829883a 	mov	r20,r5
  80c650:	10002b1e 	bne	r2,zero,80c700 <__pow5mult+0xdc>
  80c654:	8025d0ba 	srai	r18,r16,2
  80c658:	90001b26 	beq	r18,zero,80c6c8 <__pow5mult+0xa4>
  80c65c:	9c001217 	ldw	r16,72(r19)
  80c660:	8000081e 	bne	r16,zero,80c684 <__pow5mult+0x60>
  80c664:	00003006 	br	80c728 <__pow5mult+0x104>
  80c668:	800b883a 	mov	r5,r16
  80c66c:	800d883a 	mov	r6,r16
  80c670:	9809883a 	mov	r4,r19
  80c674:	90001426 	beq	r18,zero,80c6c8 <__pow5mult+0xa4>
  80c678:	80800017 	ldw	r2,0(r16)
  80c67c:	10001b26 	beq	r2,zero,80c6ec <__pow5mult+0xc8>
  80c680:	1021883a 	mov	r16,r2
  80c684:	9080004c 	andi	r2,r18,1
  80c688:	1005003a 	cmpeq	r2,r2,zero
  80c68c:	9025d07a 	srai	r18,r18,1
  80c690:	800d883a 	mov	r6,r16
  80c694:	9809883a 	mov	r4,r19
  80c698:	a00b883a 	mov	r5,r20
  80c69c:	103ff21e 	bne	r2,zero,80c668 <__pow5mult+0x44>
  80c6a0:	080c3000 	call	80c300 <__multiply>
  80c6a4:	a00b883a 	mov	r5,r20
  80c6a8:	9809883a 	mov	r4,r19
  80c6ac:	1023883a 	mov	r17,r2
  80c6b0:	080b8700 	call	80b870 <_Bfree>
  80c6b4:	8829883a 	mov	r20,r17
  80c6b8:	800b883a 	mov	r5,r16
  80c6bc:	800d883a 	mov	r6,r16
  80c6c0:	9809883a 	mov	r4,r19
  80c6c4:	903fec1e 	bne	r18,zero,80c678 <__pow5mult+0x54>
  80c6c8:	a005883a 	mov	r2,r20
  80c6cc:	dfc00517 	ldw	ra,20(sp)
  80c6d0:	dd000417 	ldw	r20,16(sp)
  80c6d4:	dcc00317 	ldw	r19,12(sp)
  80c6d8:	dc800217 	ldw	r18,8(sp)
  80c6dc:	dc400117 	ldw	r17,4(sp)
  80c6e0:	dc000017 	ldw	r16,0(sp)
  80c6e4:	dec00604 	addi	sp,sp,24
  80c6e8:	f800283a 	ret
  80c6ec:	080c3000 	call	80c300 <__multiply>
  80c6f0:	80800015 	stw	r2,0(r16)
  80c6f4:	1021883a 	mov	r16,r2
  80c6f8:	10000015 	stw	zero,0(r2)
  80c6fc:	003fe106 	br	80c684 <__pow5mult+0x60>
  80c700:	1085883a 	add	r2,r2,r2
  80c704:	00c02074 	movhi	r3,129
  80c708:	18cb8f04 	addi	r3,r3,11836
  80c70c:	1085883a 	add	r2,r2,r2
  80c710:	10c5883a 	add	r2,r2,r3
  80c714:	11bfff17 	ldw	r6,-4(r2)
  80c718:	000f883a 	mov	r7,zero
  80c71c:	080c5240 	call	80c524 <__multadd>
  80c720:	1029883a 	mov	r20,r2
  80c724:	003fcb06 	br	80c654 <__pow5mult+0x30>
  80c728:	9809883a 	mov	r4,r19
  80c72c:	01409c44 	movi	r5,625
  80c730:	080c4e80 	call	80c4e8 <__i2b>
  80c734:	98801215 	stw	r2,72(r19)
  80c738:	1021883a 	mov	r16,r2
  80c73c:	10000015 	stw	zero,0(r2)
  80c740:	003fd006 	br	80c684 <__pow5mult+0x60>

0080c744 <__s2b>:
  80c744:	defff904 	addi	sp,sp,-28
  80c748:	dcc00315 	stw	r19,12(sp)
  80c74c:	dc800215 	stw	r18,8(sp)
  80c750:	2827883a 	mov	r19,r5
  80c754:	2025883a 	mov	r18,r4
  80c758:	01400244 	movi	r5,9
  80c75c:	39000204 	addi	r4,r7,8
  80c760:	dd000415 	stw	r20,16(sp)
  80c764:	dc400115 	stw	r17,4(sp)
  80c768:	dfc00615 	stw	ra,24(sp)
  80c76c:	dd400515 	stw	r21,20(sp)
  80c770:	dc000015 	stw	r16,0(sp)
  80c774:	3829883a 	mov	r20,r7
  80c778:	3023883a 	mov	r17,r6
  80c77c:	080e2500 	call	80e250 <__divsi3>
  80c780:	00c00044 	movi	r3,1
  80c784:	1880350e 	bge	r3,r2,80c85c <__s2b+0x118>
  80c788:	000b883a 	mov	r5,zero
  80c78c:	18c7883a 	add	r3,r3,r3
  80c790:	29400044 	addi	r5,r5,1
  80c794:	18bffd16 	blt	r3,r2,80c78c <__s2b+0x48>
  80c798:	9009883a 	mov	r4,r18
  80c79c:	080bdf00 	call	80bdf0 <_Balloc>
  80c7a0:	1011883a 	mov	r8,r2
  80c7a4:	d8800717 	ldw	r2,28(sp)
  80c7a8:	00c00044 	movi	r3,1
  80c7ac:	01800244 	movi	r6,9
  80c7b0:	40800515 	stw	r2,20(r8)
  80c7b4:	40c00415 	stw	r3,16(r8)
  80c7b8:	3440260e 	bge	r6,r17,80c854 <__s2b+0x110>
  80c7bc:	3021883a 	mov	r16,r6
  80c7c0:	99ab883a 	add	r21,r19,r6
  80c7c4:	9c05883a 	add	r2,r19,r16
  80c7c8:	11c00007 	ldb	r7,0(r2)
  80c7cc:	400b883a 	mov	r5,r8
  80c7d0:	9009883a 	mov	r4,r18
  80c7d4:	39fff404 	addi	r7,r7,-48
  80c7d8:	01800284 	movi	r6,10
  80c7dc:	080c5240 	call	80c524 <__multadd>
  80c7e0:	84000044 	addi	r16,r16,1
  80c7e4:	1011883a 	mov	r8,r2
  80c7e8:	8c3ff61e 	bne	r17,r16,80c7c4 <__s2b+0x80>
  80c7ec:	ac45883a 	add	r2,r21,r17
  80c7f0:	117ffe04 	addi	r5,r2,-8
  80c7f4:	880d883a 	mov	r6,r17
  80c7f8:	35000c0e 	bge	r6,r20,80c82c <__s2b+0xe8>
  80c7fc:	a185c83a 	sub	r2,r20,r6
  80c800:	2821883a 	mov	r16,r5
  80c804:	28a3883a 	add	r17,r5,r2
  80c808:	81c00007 	ldb	r7,0(r16)
  80c80c:	400b883a 	mov	r5,r8
  80c810:	9009883a 	mov	r4,r18
  80c814:	39fff404 	addi	r7,r7,-48
  80c818:	01800284 	movi	r6,10
  80c81c:	080c5240 	call	80c524 <__multadd>
  80c820:	84000044 	addi	r16,r16,1
  80c824:	1011883a 	mov	r8,r2
  80c828:	847ff71e 	bne	r16,r17,80c808 <__s2b+0xc4>
  80c82c:	4005883a 	mov	r2,r8
  80c830:	dfc00617 	ldw	ra,24(sp)
  80c834:	dd400517 	ldw	r21,20(sp)
  80c838:	dd000417 	ldw	r20,16(sp)
  80c83c:	dcc00317 	ldw	r19,12(sp)
  80c840:	dc800217 	ldw	r18,8(sp)
  80c844:	dc400117 	ldw	r17,4(sp)
  80c848:	dc000017 	ldw	r16,0(sp)
  80c84c:	dec00704 	addi	sp,sp,28
  80c850:	f800283a 	ret
  80c854:	99400284 	addi	r5,r19,10
  80c858:	003fe706 	br	80c7f8 <__s2b+0xb4>
  80c85c:	000b883a 	mov	r5,zero
  80c860:	003fcd06 	br	80c798 <__s2b+0x54>

0080c864 <putc>:
  80c864:	defffc04 	addi	sp,sp,-16
  80c868:	dc800215 	stw	r18,8(sp)
  80c86c:	04802074 	movhi	r18,129
  80c870:	94934c04 	addi	r18,r18,19760
  80c874:	90c00017 	ldw	r3,0(r18)
  80c878:	dc400115 	stw	r17,4(sp)
  80c87c:	dc000015 	stw	r16,0(sp)
  80c880:	dfc00315 	stw	ra,12(sp)
  80c884:	2023883a 	mov	r17,r4
  80c888:	2821883a 	mov	r16,r5
  80c88c:	18000226 	beq	r3,zero,80c898 <putc+0x34>
  80c890:	18800e17 	ldw	r2,56(r3)
  80c894:	10001126 	beq	r2,zero,80c8dc <putc+0x78>
  80c898:	80800217 	ldw	r2,8(r16)
  80c89c:	10ffffc4 	addi	r3,r2,-1
  80c8a0:	80c00215 	stw	r3,8(r16)
  80c8a4:	18001316 	blt	r3,zero,80c8f4 <putc+0x90>
  80c8a8:	80800017 	ldw	r2,0(r16)
  80c8ac:	14400005 	stb	r17,0(r2)
  80c8b0:	80c00017 	ldw	r3,0(r16)
  80c8b4:	18800044 	addi	r2,r3,1
  80c8b8:	18c00003 	ldbu	r3,0(r3)
  80c8bc:	80800015 	stw	r2,0(r16)
  80c8c0:	1805883a 	mov	r2,r3
  80c8c4:	dfc00317 	ldw	ra,12(sp)
  80c8c8:	dc800217 	ldw	r18,8(sp)
  80c8cc:	dc400117 	ldw	r17,4(sp)
  80c8d0:	dc000017 	ldw	r16,0(sp)
  80c8d4:	dec00404 	addi	sp,sp,16
  80c8d8:	f800283a 	ret
  80c8dc:	1809883a 	mov	r4,r3
  80c8e0:	08057380 	call	805738 <__sinit>
  80c8e4:	80800217 	ldw	r2,8(r16)
  80c8e8:	10ffffc4 	addi	r3,r2,-1
  80c8ec:	80c00215 	stw	r3,8(r16)
  80c8f0:	183fed0e 	bge	r3,zero,80c8a8 <putc+0x44>
  80c8f4:	80800617 	ldw	r2,24(r16)
  80c8f8:	18800f16 	blt	r3,r2,80c938 <putc+0xd4>
  80c8fc:	80800017 	ldw	r2,0(r16)
  80c900:	14400005 	stb	r17,0(r2)
  80c904:	81000017 	ldw	r4,0(r16)
  80c908:	00800284 	movi	r2,10
  80c90c:	20c00003 	ldbu	r3,0(r4)
  80c910:	18801226 	beq	r3,r2,80c95c <putc+0xf8>
  80c914:	20800044 	addi	r2,r4,1
  80c918:	80800015 	stw	r2,0(r16)
  80c91c:	1805883a 	mov	r2,r3
  80c920:	dfc00317 	ldw	ra,12(sp)
  80c924:	dc800217 	ldw	r18,8(sp)
  80c928:	dc400117 	ldw	r17,4(sp)
  80c92c:	dc000017 	ldw	r16,0(sp)
  80c930:	dec00404 	addi	sp,sp,16
  80c934:	f800283a 	ret
  80c938:	91000017 	ldw	r4,0(r18)
  80c93c:	880b883a 	mov	r5,r17
  80c940:	800d883a 	mov	r6,r16
  80c944:	dfc00317 	ldw	ra,12(sp)
  80c948:	dc800217 	ldw	r18,8(sp)
  80c94c:	dc400117 	ldw	r17,4(sp)
  80c950:	dc000017 	ldw	r16,0(sp)
  80c954:	dec00404 	addi	sp,sp,16
  80c958:	080d22c1 	jmpi	80d22c <__swbuf_r>
  80c95c:	91000017 	ldw	r4,0(r18)
  80c960:	180b883a 	mov	r5,r3
  80c964:	003ff606 	br	80c940 <putc+0xdc>

0080c968 <_putc_r>:
  80c968:	defffc04 	addi	sp,sp,-16
  80c96c:	dc400215 	stw	r17,8(sp)
  80c970:	dc000115 	stw	r16,4(sp)
  80c974:	dfc00315 	stw	ra,12(sp)
  80c978:	2021883a 	mov	r16,r4
  80c97c:	2823883a 	mov	r17,r5
  80c980:	20000226 	beq	r4,zero,80c98c <_putc_r+0x24>
  80c984:	20800e17 	ldw	r2,56(r4)
  80c988:	10001026 	beq	r2,zero,80c9cc <_putc_r+0x64>
  80c98c:	30800217 	ldw	r2,8(r6)
  80c990:	10ffffc4 	addi	r3,r2,-1
  80c994:	30c00215 	stw	r3,8(r6)
  80c998:	18001316 	blt	r3,zero,80c9e8 <_putc_r+0x80>
  80c99c:	30800017 	ldw	r2,0(r6)
  80c9a0:	14400005 	stb	r17,0(r2)
  80c9a4:	30c00017 	ldw	r3,0(r6)
  80c9a8:	18800044 	addi	r2,r3,1
  80c9ac:	18c00003 	ldbu	r3,0(r3)
  80c9b0:	30800015 	stw	r2,0(r6)
  80c9b4:	1805883a 	mov	r2,r3
  80c9b8:	dfc00317 	ldw	ra,12(sp)
  80c9bc:	dc400217 	ldw	r17,8(sp)
  80c9c0:	dc000117 	ldw	r16,4(sp)
  80c9c4:	dec00404 	addi	sp,sp,16
  80c9c8:	f800283a 	ret
  80c9cc:	d9800015 	stw	r6,0(sp)
  80c9d0:	08057380 	call	805738 <__sinit>
  80c9d4:	d9800017 	ldw	r6,0(sp)
  80c9d8:	30800217 	ldw	r2,8(r6)
  80c9dc:	10ffffc4 	addi	r3,r2,-1
  80c9e0:	30c00215 	stw	r3,8(r6)
  80c9e4:	183fed0e 	bge	r3,zero,80c99c <_putc_r+0x34>
  80c9e8:	30800617 	ldw	r2,24(r6)
  80c9ec:	18800e16 	blt	r3,r2,80ca28 <_putc_r+0xc0>
  80c9f0:	30800017 	ldw	r2,0(r6)
  80c9f4:	14400005 	stb	r17,0(r2)
  80c9f8:	31000017 	ldw	r4,0(r6)
  80c9fc:	00800284 	movi	r2,10
  80ca00:	20c00003 	ldbu	r3,0(r4)
  80ca04:	18800f26 	beq	r3,r2,80ca44 <_putc_r+0xdc>
  80ca08:	20800044 	addi	r2,r4,1
  80ca0c:	30800015 	stw	r2,0(r6)
  80ca10:	1805883a 	mov	r2,r3
  80ca14:	dfc00317 	ldw	ra,12(sp)
  80ca18:	dc400217 	ldw	r17,8(sp)
  80ca1c:	dc000117 	ldw	r16,4(sp)
  80ca20:	dec00404 	addi	sp,sp,16
  80ca24:	f800283a 	ret
  80ca28:	8009883a 	mov	r4,r16
  80ca2c:	880b883a 	mov	r5,r17
  80ca30:	dfc00317 	ldw	ra,12(sp)
  80ca34:	dc400217 	ldw	r17,8(sp)
  80ca38:	dc000117 	ldw	r16,4(sp)
  80ca3c:	dec00404 	addi	sp,sp,16
  80ca40:	080d22c1 	jmpi	80d22c <__swbuf_r>
  80ca44:	8009883a 	mov	r4,r16
  80ca48:	180b883a 	mov	r5,r3
  80ca4c:	003ff806 	br	80ca30 <_putc_r+0xc8>

0080ca50 <_read_r>:
  80ca50:	defffd04 	addi	sp,sp,-12
  80ca54:	dc000015 	stw	r16,0(sp)
  80ca58:	04002074 	movhi	r16,129
  80ca5c:	841a7104 	addi	r16,r16,27076
  80ca60:	dc400115 	stw	r17,4(sp)
  80ca64:	80000015 	stw	zero,0(r16)
  80ca68:	2023883a 	mov	r17,r4
  80ca6c:	2809883a 	mov	r4,r5
  80ca70:	300b883a 	mov	r5,r6
  80ca74:	380d883a 	mov	r6,r7
  80ca78:	dfc00215 	stw	ra,8(sp)
  80ca7c:	080eca80 	call	80eca8 <read>
  80ca80:	1007883a 	mov	r3,r2
  80ca84:	00bfffc4 	movi	r2,-1
  80ca88:	18800626 	beq	r3,r2,80caa4 <_read_r+0x54>
  80ca8c:	1805883a 	mov	r2,r3
  80ca90:	dfc00217 	ldw	ra,8(sp)
  80ca94:	dc400117 	ldw	r17,4(sp)
  80ca98:	dc000017 	ldw	r16,0(sp)
  80ca9c:	dec00304 	addi	sp,sp,12
  80caa0:	f800283a 	ret
  80caa4:	80800017 	ldw	r2,0(r16)
  80caa8:	103ff826 	beq	r2,zero,80ca8c <_read_r+0x3c>
  80caac:	88800015 	stw	r2,0(r17)
  80cab0:	1805883a 	mov	r2,r3
  80cab4:	dfc00217 	ldw	ra,8(sp)
  80cab8:	dc400117 	ldw	r17,4(sp)
  80cabc:	dc000017 	ldw	r16,0(sp)
  80cac0:	dec00304 	addi	sp,sp,12
  80cac4:	f800283a 	ret

0080cac8 <_realloc_r>:
  80cac8:	defff404 	addi	sp,sp,-48
  80cacc:	dd800815 	stw	r22,32(sp)
  80cad0:	dc800415 	stw	r18,16(sp)
  80cad4:	dc400315 	stw	r17,12(sp)
  80cad8:	dfc00b15 	stw	ra,44(sp)
  80cadc:	df000a15 	stw	fp,40(sp)
  80cae0:	ddc00915 	stw	r23,36(sp)
  80cae4:	dd400715 	stw	r21,28(sp)
  80cae8:	dd000615 	stw	r20,24(sp)
  80caec:	dcc00515 	stw	r19,20(sp)
  80caf0:	dc000215 	stw	r16,8(sp)
  80caf4:	2825883a 	mov	r18,r5
  80caf8:	3023883a 	mov	r17,r6
  80cafc:	202d883a 	mov	r22,r4
  80cb00:	2800c926 	beq	r5,zero,80ce28 <_realloc_r+0x360>
  80cb04:	080e9a40 	call	80e9a4 <__malloc_lock>
  80cb08:	943ffe04 	addi	r16,r18,-8
  80cb0c:	88c002c4 	addi	r3,r17,11
  80cb10:	00800584 	movi	r2,22
  80cb14:	82000117 	ldw	r8,4(r16)
  80cb18:	10c01b2e 	bgeu	r2,r3,80cb88 <_realloc_r+0xc0>
  80cb1c:	00bffe04 	movi	r2,-8
  80cb20:	188e703a 	and	r7,r3,r2
  80cb24:	3839883a 	mov	fp,r7
  80cb28:	38001a16 	blt	r7,zero,80cb94 <_realloc_r+0xcc>
  80cb2c:	e4401936 	bltu	fp,r17,80cb94 <_realloc_r+0xcc>
  80cb30:	013fff04 	movi	r4,-4
  80cb34:	4126703a 	and	r19,r8,r4
  80cb38:	99c02616 	blt	r19,r7,80cbd4 <_realloc_r+0x10c>
  80cb3c:	802b883a 	mov	r21,r16
  80cb40:	9829883a 	mov	r20,r19
  80cb44:	84000204 	addi	r16,r16,8
  80cb48:	a80f883a 	mov	r7,r21
  80cb4c:	a70dc83a 	sub	r6,r20,fp
  80cb50:	008003c4 	movi	r2,15
  80cb54:	1180c136 	bltu	r2,r6,80ce5c <_realloc_r+0x394>
  80cb58:	38800117 	ldw	r2,4(r7)
  80cb5c:	a549883a 	add	r4,r20,r21
  80cb60:	1080004c 	andi	r2,r2,1
  80cb64:	a084b03a 	or	r2,r20,r2
  80cb68:	38800115 	stw	r2,4(r7)
  80cb6c:	20c00117 	ldw	r3,4(r4)
  80cb70:	18c00054 	ori	r3,r3,1
  80cb74:	20c00115 	stw	r3,4(r4)
  80cb78:	b009883a 	mov	r4,r22
  80cb7c:	080e9c40 	call	80e9c4 <__malloc_unlock>
  80cb80:	8023883a 	mov	r17,r16
  80cb84:	00000606 	br	80cba0 <_realloc_r+0xd8>
  80cb88:	01c00404 	movi	r7,16
  80cb8c:	3839883a 	mov	fp,r7
  80cb90:	e47fe72e 	bgeu	fp,r17,80cb30 <_realloc_r+0x68>
  80cb94:	00800304 	movi	r2,12
  80cb98:	0023883a 	mov	r17,zero
  80cb9c:	b0800015 	stw	r2,0(r22)
  80cba0:	8805883a 	mov	r2,r17
  80cba4:	dfc00b17 	ldw	ra,44(sp)
  80cba8:	df000a17 	ldw	fp,40(sp)
  80cbac:	ddc00917 	ldw	r23,36(sp)
  80cbb0:	dd800817 	ldw	r22,32(sp)
  80cbb4:	dd400717 	ldw	r21,28(sp)
  80cbb8:	dd000617 	ldw	r20,24(sp)
  80cbbc:	dcc00517 	ldw	r19,20(sp)
  80cbc0:	dc800417 	ldw	r18,16(sp)
  80cbc4:	dc400317 	ldw	r17,12(sp)
  80cbc8:	dc000217 	ldw	r16,8(sp)
  80cbcc:	dec00c04 	addi	sp,sp,48
  80cbd0:	f800283a 	ret
  80cbd4:	00802074 	movhi	r2,129
  80cbd8:	108d4b04 	addi	r2,r2,13612
  80cbdc:	12400217 	ldw	r9,8(r2)
  80cbe0:	84cd883a 	add	r6,r16,r19
  80cbe4:	802b883a 	mov	r21,r16
  80cbe8:	3240b926 	beq	r6,r9,80ced0 <_realloc_r+0x408>
  80cbec:	31400117 	ldw	r5,4(r6)
  80cbf0:	00bfff84 	movi	r2,-2
  80cbf4:	2884703a 	and	r2,r5,r2
  80cbf8:	1185883a 	add	r2,r2,r6
  80cbfc:	10c00117 	ldw	r3,4(r2)
  80cc00:	18c0004c 	andi	r3,r3,1
  80cc04:	1807003a 	cmpeq	r3,r3,zero
  80cc08:	1800a326 	beq	r3,zero,80ce98 <_realloc_r+0x3d0>
  80cc0c:	2908703a 	and	r4,r5,r4
  80cc10:	9929883a 	add	r20,r19,r4
  80cc14:	a1c0a30e 	bge	r20,r7,80cea4 <_realloc_r+0x3dc>
  80cc18:	4080004c 	andi	r2,r8,1
  80cc1c:	1000551e 	bne	r2,zero,80cd74 <_realloc_r+0x2ac>
  80cc20:	80800017 	ldw	r2,0(r16)
  80cc24:	80afc83a 	sub	r23,r16,r2
  80cc28:	b8c00117 	ldw	r3,4(r23)
  80cc2c:	00bfff04 	movi	r2,-4
  80cc30:	1884703a 	and	r2,r3,r2
  80cc34:	30002e26 	beq	r6,zero,80ccf0 <_realloc_r+0x228>
  80cc38:	3240b926 	beq	r6,r9,80cf20 <_realloc_r+0x458>
  80cc3c:	98a9883a 	add	r20,r19,r2
  80cc40:	2509883a 	add	r4,r4,r20
  80cc44:	d9000015 	stw	r4,0(sp)
  80cc48:	21c02a16 	blt	r4,r7,80ccf4 <_realloc_r+0x22c>
  80cc4c:	30800317 	ldw	r2,12(r6)
  80cc50:	30c00217 	ldw	r3,8(r6)
  80cc54:	01400904 	movi	r5,36
  80cc58:	99bfff04 	addi	r6,r19,-4
  80cc5c:	18800315 	stw	r2,12(r3)
  80cc60:	10c00215 	stw	r3,8(r2)
  80cc64:	b9000317 	ldw	r4,12(r23)
  80cc68:	b8800217 	ldw	r2,8(r23)
  80cc6c:	b82b883a 	mov	r21,r23
  80cc70:	bc000204 	addi	r16,r23,8
  80cc74:	20800215 	stw	r2,8(r4)
  80cc78:	11000315 	stw	r4,12(r2)
  80cc7c:	2980e436 	bltu	r5,r6,80d010 <_realloc_r+0x548>
  80cc80:	008004c4 	movi	r2,19
  80cc84:	9009883a 	mov	r4,r18
  80cc88:	8011883a 	mov	r8,r16
  80cc8c:	11800f2e 	bgeu	r2,r6,80cccc <_realloc_r+0x204>
  80cc90:	90800017 	ldw	r2,0(r18)
  80cc94:	ba000404 	addi	r8,r23,16
  80cc98:	91000204 	addi	r4,r18,8
  80cc9c:	b8800215 	stw	r2,8(r23)
  80cca0:	90c00117 	ldw	r3,4(r18)
  80cca4:	008006c4 	movi	r2,27
  80cca8:	b8c00315 	stw	r3,12(r23)
  80ccac:	1180072e 	bgeu	r2,r6,80cccc <_realloc_r+0x204>
  80ccb0:	90c00217 	ldw	r3,8(r18)
  80ccb4:	ba000604 	addi	r8,r23,24
  80ccb8:	91000404 	addi	r4,r18,16
  80ccbc:	b8c00415 	stw	r3,16(r23)
  80ccc0:	90800317 	ldw	r2,12(r18)
  80ccc4:	b8800515 	stw	r2,20(r23)
  80ccc8:	3140e726 	beq	r6,r5,80d068 <_realloc_r+0x5a0>
  80cccc:	20800017 	ldw	r2,0(r4)
  80ccd0:	dd000017 	ldw	r20,0(sp)
  80ccd4:	b80f883a 	mov	r7,r23
  80ccd8:	40800015 	stw	r2,0(r8)
  80ccdc:	20c00117 	ldw	r3,4(r4)
  80cce0:	40c00115 	stw	r3,4(r8)
  80cce4:	20800217 	ldw	r2,8(r4)
  80cce8:	40800215 	stw	r2,8(r8)
  80ccec:	003f9706 	br	80cb4c <_realloc_r+0x84>
  80ccf0:	98a9883a 	add	r20,r19,r2
  80ccf4:	a1c01f16 	blt	r20,r7,80cd74 <_realloc_r+0x2ac>
  80ccf8:	b8c00317 	ldw	r3,12(r23)
  80ccfc:	b8800217 	ldw	r2,8(r23)
  80cd00:	99bfff04 	addi	r6,r19,-4
  80cd04:	01400904 	movi	r5,36
  80cd08:	b82b883a 	mov	r21,r23
  80cd0c:	18800215 	stw	r2,8(r3)
  80cd10:	10c00315 	stw	r3,12(r2)
  80cd14:	bc000204 	addi	r16,r23,8
  80cd18:	2980c336 	bltu	r5,r6,80d028 <_realloc_r+0x560>
  80cd1c:	008004c4 	movi	r2,19
  80cd20:	9009883a 	mov	r4,r18
  80cd24:	8011883a 	mov	r8,r16
  80cd28:	11800f2e 	bgeu	r2,r6,80cd68 <_realloc_r+0x2a0>
  80cd2c:	90800017 	ldw	r2,0(r18)
  80cd30:	ba000404 	addi	r8,r23,16
  80cd34:	91000204 	addi	r4,r18,8
  80cd38:	b8800215 	stw	r2,8(r23)
  80cd3c:	90c00117 	ldw	r3,4(r18)
  80cd40:	008006c4 	movi	r2,27
  80cd44:	b8c00315 	stw	r3,12(r23)
  80cd48:	1180072e 	bgeu	r2,r6,80cd68 <_realloc_r+0x2a0>
  80cd4c:	90c00217 	ldw	r3,8(r18)
  80cd50:	ba000604 	addi	r8,r23,24
  80cd54:	91000404 	addi	r4,r18,16
  80cd58:	b8c00415 	stw	r3,16(r23)
  80cd5c:	90800317 	ldw	r2,12(r18)
  80cd60:	b8800515 	stw	r2,20(r23)
  80cd64:	3140c726 	beq	r6,r5,80d084 <_realloc_r+0x5bc>
  80cd68:	20800017 	ldw	r2,0(r4)
  80cd6c:	b80f883a 	mov	r7,r23
  80cd70:	003fd906 	br	80ccd8 <_realloc_r+0x210>
  80cd74:	880b883a 	mov	r5,r17
  80cd78:	b009883a 	mov	r4,r22
  80cd7c:	08068500 	call	806850 <_malloc_r>
  80cd80:	1023883a 	mov	r17,r2
  80cd84:	10002526 	beq	r2,zero,80ce1c <_realloc_r+0x354>
  80cd88:	80800117 	ldw	r2,4(r16)
  80cd8c:	00ffff84 	movi	r3,-2
  80cd90:	893ffe04 	addi	r4,r17,-8
  80cd94:	10c4703a 	and	r2,r2,r3
  80cd98:	8085883a 	add	r2,r16,r2
  80cd9c:	20809526 	beq	r4,r2,80cff4 <_realloc_r+0x52c>
  80cda0:	99bfff04 	addi	r6,r19,-4
  80cda4:	01c00904 	movi	r7,36
  80cda8:	39804536 	bltu	r7,r6,80cec0 <_realloc_r+0x3f8>
  80cdac:	008004c4 	movi	r2,19
  80cdb0:	9009883a 	mov	r4,r18
  80cdb4:	880b883a 	mov	r5,r17
  80cdb8:	11800f2e 	bgeu	r2,r6,80cdf8 <_realloc_r+0x330>
  80cdbc:	90800017 	ldw	r2,0(r18)
  80cdc0:	89400204 	addi	r5,r17,8
  80cdc4:	91000204 	addi	r4,r18,8
  80cdc8:	88800015 	stw	r2,0(r17)
  80cdcc:	90c00117 	ldw	r3,4(r18)
  80cdd0:	008006c4 	movi	r2,27
  80cdd4:	88c00115 	stw	r3,4(r17)
  80cdd8:	1180072e 	bgeu	r2,r6,80cdf8 <_realloc_r+0x330>
  80cddc:	90c00217 	ldw	r3,8(r18)
  80cde0:	89400404 	addi	r5,r17,16
  80cde4:	91000404 	addi	r4,r18,16
  80cde8:	88c00215 	stw	r3,8(r17)
  80cdec:	90800317 	ldw	r2,12(r18)
  80cdf0:	88800315 	stw	r2,12(r17)
  80cdf4:	31c09126 	beq	r6,r7,80d03c <_realloc_r+0x574>
  80cdf8:	20800017 	ldw	r2,0(r4)
  80cdfc:	28800015 	stw	r2,0(r5)
  80ce00:	20c00117 	ldw	r3,4(r4)
  80ce04:	28c00115 	stw	r3,4(r5)
  80ce08:	20800217 	ldw	r2,8(r4)
  80ce0c:	28800215 	stw	r2,8(r5)
  80ce10:	900b883a 	mov	r5,r18
  80ce14:	b009883a 	mov	r4,r22
  80ce18:	0805c2c0 	call	805c2c <_free_r>
  80ce1c:	b009883a 	mov	r4,r22
  80ce20:	080e9c40 	call	80e9c4 <__malloc_unlock>
  80ce24:	003f5e06 	br	80cba0 <_realloc_r+0xd8>
  80ce28:	300b883a 	mov	r5,r6
  80ce2c:	dfc00b17 	ldw	ra,44(sp)
  80ce30:	df000a17 	ldw	fp,40(sp)
  80ce34:	ddc00917 	ldw	r23,36(sp)
  80ce38:	dd800817 	ldw	r22,32(sp)
  80ce3c:	dd400717 	ldw	r21,28(sp)
  80ce40:	dd000617 	ldw	r20,24(sp)
  80ce44:	dcc00517 	ldw	r19,20(sp)
  80ce48:	dc800417 	ldw	r18,16(sp)
  80ce4c:	dc400317 	ldw	r17,12(sp)
  80ce50:	dc000217 	ldw	r16,8(sp)
  80ce54:	dec00c04 	addi	sp,sp,48
  80ce58:	08068501 	jmpi	806850 <_malloc_r>
  80ce5c:	38800117 	ldw	r2,4(r7)
  80ce60:	e54b883a 	add	r5,fp,r21
  80ce64:	31000054 	ori	r4,r6,1
  80ce68:	1080004c 	andi	r2,r2,1
  80ce6c:	1704b03a 	or	r2,r2,fp
  80ce70:	38800115 	stw	r2,4(r7)
  80ce74:	29000115 	stw	r4,4(r5)
  80ce78:	2987883a 	add	r3,r5,r6
  80ce7c:	18800117 	ldw	r2,4(r3)
  80ce80:	29400204 	addi	r5,r5,8
  80ce84:	b009883a 	mov	r4,r22
  80ce88:	10800054 	ori	r2,r2,1
  80ce8c:	18800115 	stw	r2,4(r3)
  80ce90:	0805c2c0 	call	805c2c <_free_r>
  80ce94:	003f3806 	br	80cb78 <_realloc_r+0xb0>
  80ce98:	000d883a 	mov	r6,zero
  80ce9c:	0009883a 	mov	r4,zero
  80cea0:	003f5d06 	br	80cc18 <_realloc_r+0x150>
  80cea4:	30c00217 	ldw	r3,8(r6)
  80cea8:	30800317 	ldw	r2,12(r6)
  80ceac:	800f883a 	mov	r7,r16
  80ceb0:	84000204 	addi	r16,r16,8
  80ceb4:	10c00215 	stw	r3,8(r2)
  80ceb8:	18800315 	stw	r2,12(r3)
  80cebc:	003f2306 	br	80cb4c <_realloc_r+0x84>
  80cec0:	8809883a 	mov	r4,r17
  80cec4:	900b883a 	mov	r5,r18
  80cec8:	080b7900 	call	80b790 <memmove>
  80cecc:	003fd006 	br	80ce10 <_realloc_r+0x348>
  80ced0:	30800117 	ldw	r2,4(r6)
  80ced4:	e0c00404 	addi	r3,fp,16
  80ced8:	1108703a 	and	r4,r2,r4
  80cedc:	9905883a 	add	r2,r19,r4
  80cee0:	10ff4d16 	blt	r2,r3,80cc18 <_realloc_r+0x150>
  80cee4:	1705c83a 	sub	r2,r2,fp
  80cee8:	870b883a 	add	r5,r16,fp
  80ceec:	10800054 	ori	r2,r2,1
  80cef0:	28800115 	stw	r2,4(r5)
  80cef4:	80c00117 	ldw	r3,4(r16)
  80cef8:	00802074 	movhi	r2,129
  80cefc:	108d4b04 	addi	r2,r2,13612
  80cf00:	b009883a 	mov	r4,r22
  80cf04:	18c0004c 	andi	r3,r3,1
  80cf08:	e0c6b03a 	or	r3,fp,r3
  80cf0c:	11400215 	stw	r5,8(r2)
  80cf10:	80c00115 	stw	r3,4(r16)
  80cf14:	080e9c40 	call	80e9c4 <__malloc_unlock>
  80cf18:	84400204 	addi	r17,r16,8
  80cf1c:	003f2006 	br	80cba0 <_realloc_r+0xd8>
  80cf20:	98a9883a 	add	r20,r19,r2
  80cf24:	2509883a 	add	r4,r4,r20
  80cf28:	e0800404 	addi	r2,fp,16
  80cf2c:	d9000115 	stw	r4,4(sp)
  80cf30:	20bf7016 	blt	r4,r2,80ccf4 <_realloc_r+0x22c>
  80cf34:	b8c00317 	ldw	r3,12(r23)
  80cf38:	b8800217 	ldw	r2,8(r23)
  80cf3c:	99bfff04 	addi	r6,r19,-4
  80cf40:	01400904 	movi	r5,36
  80cf44:	18800215 	stw	r2,8(r3)
  80cf48:	10c00315 	stw	r3,12(r2)
  80cf4c:	bc400204 	addi	r17,r23,8
  80cf50:	29804136 	bltu	r5,r6,80d058 <_realloc_r+0x590>
  80cf54:	008004c4 	movi	r2,19
  80cf58:	9009883a 	mov	r4,r18
  80cf5c:	880f883a 	mov	r7,r17
  80cf60:	11800f2e 	bgeu	r2,r6,80cfa0 <_realloc_r+0x4d8>
  80cf64:	90800017 	ldw	r2,0(r18)
  80cf68:	b9c00404 	addi	r7,r23,16
  80cf6c:	91000204 	addi	r4,r18,8
  80cf70:	b8800215 	stw	r2,8(r23)
  80cf74:	90c00117 	ldw	r3,4(r18)
  80cf78:	008006c4 	movi	r2,27
  80cf7c:	b8c00315 	stw	r3,12(r23)
  80cf80:	1180072e 	bgeu	r2,r6,80cfa0 <_realloc_r+0x4d8>
  80cf84:	90c00217 	ldw	r3,8(r18)
  80cf88:	b9c00604 	addi	r7,r23,24
  80cf8c:	91000404 	addi	r4,r18,16
  80cf90:	b8c00415 	stw	r3,16(r23)
  80cf94:	90800317 	ldw	r2,12(r18)
  80cf98:	b8800515 	stw	r2,20(r23)
  80cf9c:	31404026 	beq	r6,r5,80d0a0 <_realloc_r+0x5d8>
  80cfa0:	20800017 	ldw	r2,0(r4)
  80cfa4:	38800015 	stw	r2,0(r7)
  80cfa8:	20c00117 	ldw	r3,4(r4)
  80cfac:	38c00115 	stw	r3,4(r7)
  80cfb0:	20800217 	ldw	r2,8(r4)
  80cfb4:	38800215 	stw	r2,8(r7)
  80cfb8:	d8c00117 	ldw	r3,4(sp)
  80cfbc:	bf0b883a 	add	r5,r23,fp
  80cfc0:	b009883a 	mov	r4,r22
  80cfc4:	1f05c83a 	sub	r2,r3,fp
  80cfc8:	10800054 	ori	r2,r2,1
  80cfcc:	28800115 	stw	r2,4(r5)
  80cfd0:	b8c00117 	ldw	r3,4(r23)
  80cfd4:	00802074 	movhi	r2,129
  80cfd8:	108d4b04 	addi	r2,r2,13612
  80cfdc:	11400215 	stw	r5,8(r2)
  80cfe0:	18c0004c 	andi	r3,r3,1
  80cfe4:	e0c6b03a 	or	r3,fp,r3
  80cfe8:	b8c00115 	stw	r3,4(r23)
  80cfec:	080e9c40 	call	80e9c4 <__malloc_unlock>
  80cff0:	003eeb06 	br	80cba0 <_realloc_r+0xd8>
  80cff4:	20800117 	ldw	r2,4(r4)
  80cff8:	00ffff04 	movi	r3,-4
  80cffc:	800f883a 	mov	r7,r16
  80d000:	10c4703a 	and	r2,r2,r3
  80d004:	98a9883a 	add	r20,r19,r2
  80d008:	84000204 	addi	r16,r16,8
  80d00c:	003ecf06 	br	80cb4c <_realloc_r+0x84>
  80d010:	900b883a 	mov	r5,r18
  80d014:	8009883a 	mov	r4,r16
  80d018:	080b7900 	call	80b790 <memmove>
  80d01c:	dd000017 	ldw	r20,0(sp)
  80d020:	b80f883a 	mov	r7,r23
  80d024:	003ec906 	br	80cb4c <_realloc_r+0x84>
  80d028:	900b883a 	mov	r5,r18
  80d02c:	8009883a 	mov	r4,r16
  80d030:	080b7900 	call	80b790 <memmove>
  80d034:	b80f883a 	mov	r7,r23
  80d038:	003ec406 	br	80cb4c <_realloc_r+0x84>
  80d03c:	90c00417 	ldw	r3,16(r18)
  80d040:	89400604 	addi	r5,r17,24
  80d044:	91000604 	addi	r4,r18,24
  80d048:	88c00415 	stw	r3,16(r17)
  80d04c:	90800517 	ldw	r2,20(r18)
  80d050:	88800515 	stw	r2,20(r17)
  80d054:	003f6806 	br	80cdf8 <_realloc_r+0x330>
  80d058:	900b883a 	mov	r5,r18
  80d05c:	8809883a 	mov	r4,r17
  80d060:	080b7900 	call	80b790 <memmove>
  80d064:	003fd406 	br	80cfb8 <_realloc_r+0x4f0>
  80d068:	90c00417 	ldw	r3,16(r18)
  80d06c:	91000604 	addi	r4,r18,24
  80d070:	ba000804 	addi	r8,r23,32
  80d074:	b8c00615 	stw	r3,24(r23)
  80d078:	90800517 	ldw	r2,20(r18)
  80d07c:	b8800715 	stw	r2,28(r23)
  80d080:	003f1206 	br	80cccc <_realloc_r+0x204>
  80d084:	90c00417 	ldw	r3,16(r18)
  80d088:	91000604 	addi	r4,r18,24
  80d08c:	ba000804 	addi	r8,r23,32
  80d090:	b8c00615 	stw	r3,24(r23)
  80d094:	90800517 	ldw	r2,20(r18)
  80d098:	b8800715 	stw	r2,28(r23)
  80d09c:	003f3206 	br	80cd68 <_realloc_r+0x2a0>
  80d0a0:	90c00417 	ldw	r3,16(r18)
  80d0a4:	91000604 	addi	r4,r18,24
  80d0a8:	b9c00804 	addi	r7,r23,32
  80d0ac:	b8c00615 	stw	r3,24(r23)
  80d0b0:	90800517 	ldw	r2,20(r18)
  80d0b4:	b8800715 	stw	r2,28(r23)
  80d0b8:	003fb906 	br	80cfa0 <_realloc_r+0x4d8>

0080d0bc <__isinfd>:
  80d0bc:	200d883a 	mov	r6,r4
  80d0c0:	0109c83a 	sub	r4,zero,r4
  80d0c4:	2188b03a 	or	r4,r4,r6
  80d0c8:	2008d7fa 	srli	r4,r4,31
  80d0cc:	00a00034 	movhi	r2,32768
  80d0d0:	10bfffc4 	addi	r2,r2,-1
  80d0d4:	1144703a 	and	r2,r2,r5
  80d0d8:	2088b03a 	or	r4,r4,r2
  80d0dc:	009ffc34 	movhi	r2,32752
  80d0e0:	1105c83a 	sub	r2,r2,r4
  80d0e4:	0087c83a 	sub	r3,zero,r2
  80d0e8:	10c4b03a 	or	r2,r2,r3
  80d0ec:	1004d7fa 	srli	r2,r2,31
  80d0f0:	00c00044 	movi	r3,1
  80d0f4:	1885c83a 	sub	r2,r3,r2
  80d0f8:	f800283a 	ret

0080d0fc <strcmp>:
  80d0fc:	2144b03a 	or	r2,r4,r5
  80d100:	108000cc 	andi	r2,r2,3
  80d104:	10001d1e 	bne	r2,zero,80d17c <strcmp+0x80>
  80d108:	200f883a 	mov	r7,r4
  80d10c:	28800017 	ldw	r2,0(r5)
  80d110:	21000017 	ldw	r4,0(r4)
  80d114:	280d883a 	mov	r6,r5
  80d118:	2080161e 	bne	r4,r2,80d174 <strcmp+0x78>
  80d11c:	023fbff4 	movhi	r8,65279
  80d120:	423fbfc4 	addi	r8,r8,-257
  80d124:	2207883a 	add	r3,r4,r8
  80d128:	01602074 	movhi	r5,32897
  80d12c:	29602004 	addi	r5,r5,-32640
  80d130:	1946703a 	and	r3,r3,r5
  80d134:	0104303a 	nor	r2,zero,r4
  80d138:	10c4703a 	and	r2,r2,r3
  80d13c:	10001c1e 	bne	r2,zero,80d1b0 <strcmp+0xb4>
  80d140:	4013883a 	mov	r9,r8
  80d144:	2811883a 	mov	r8,r5
  80d148:	00000106 	br	80d150 <strcmp+0x54>
  80d14c:	1800181e 	bne	r3,zero,80d1b0 <strcmp+0xb4>
  80d150:	39c00104 	addi	r7,r7,4
  80d154:	39000017 	ldw	r4,0(r7)
  80d158:	31800104 	addi	r6,r6,4
  80d15c:	31400017 	ldw	r5,0(r6)
  80d160:	2245883a 	add	r2,r4,r9
  80d164:	1204703a 	and	r2,r2,r8
  80d168:	0106303a 	nor	r3,zero,r4
  80d16c:	1886703a 	and	r3,r3,r2
  80d170:	217ff626 	beq	r4,r5,80d14c <strcmp+0x50>
  80d174:	3809883a 	mov	r4,r7
  80d178:	300b883a 	mov	r5,r6
  80d17c:	20c00007 	ldb	r3,0(r4)
  80d180:	1800051e 	bne	r3,zero,80d198 <strcmp+0x9c>
  80d184:	00000606 	br	80d1a0 <strcmp+0xa4>
  80d188:	21000044 	addi	r4,r4,1
  80d18c:	20c00007 	ldb	r3,0(r4)
  80d190:	29400044 	addi	r5,r5,1
  80d194:	18000226 	beq	r3,zero,80d1a0 <strcmp+0xa4>
  80d198:	28800007 	ldb	r2,0(r5)
  80d19c:	18bffa26 	beq	r3,r2,80d188 <strcmp+0x8c>
  80d1a0:	20c00003 	ldbu	r3,0(r4)
  80d1a4:	28800003 	ldbu	r2,0(r5)
  80d1a8:	1885c83a 	sub	r2,r3,r2
  80d1ac:	f800283a 	ret
  80d1b0:	0005883a 	mov	r2,zero
  80d1b4:	f800283a 	ret

0080d1b8 <strlen>:
  80d1b8:	208000cc 	andi	r2,r4,3
  80d1bc:	2011883a 	mov	r8,r4
  80d1c0:	1000161e 	bne	r2,zero,80d21c <strlen+0x64>
  80d1c4:	20c00017 	ldw	r3,0(r4)
  80d1c8:	017fbff4 	movhi	r5,65279
  80d1cc:	297fbfc4 	addi	r5,r5,-257
  80d1d0:	01e02074 	movhi	r7,32897
  80d1d4:	39e02004 	addi	r7,r7,-32640
  80d1d8:	1945883a 	add	r2,r3,r5
  80d1dc:	11c4703a 	and	r2,r2,r7
  80d1e0:	00c6303a 	nor	r3,zero,r3
  80d1e4:	1886703a 	and	r3,r3,r2
  80d1e8:	18000c1e 	bne	r3,zero,80d21c <strlen+0x64>
  80d1ec:	280d883a 	mov	r6,r5
  80d1f0:	380b883a 	mov	r5,r7
  80d1f4:	21000104 	addi	r4,r4,4
  80d1f8:	20800017 	ldw	r2,0(r4)
  80d1fc:	1187883a 	add	r3,r2,r6
  80d200:	1946703a 	and	r3,r3,r5
  80d204:	0084303a 	nor	r2,zero,r2
  80d208:	10c4703a 	and	r2,r2,r3
  80d20c:	103ff926 	beq	r2,zero,80d1f4 <strlen+0x3c>
  80d210:	20800007 	ldb	r2,0(r4)
  80d214:	10000326 	beq	r2,zero,80d224 <strlen+0x6c>
  80d218:	21000044 	addi	r4,r4,1
  80d21c:	20800007 	ldb	r2,0(r4)
  80d220:	103ffd1e 	bne	r2,zero,80d218 <strlen+0x60>
  80d224:	2205c83a 	sub	r2,r4,r8
  80d228:	f800283a 	ret

0080d22c <__swbuf_r>:
  80d22c:	defffc04 	addi	sp,sp,-16
  80d230:	dc400215 	stw	r17,8(sp)
  80d234:	dc000115 	stw	r16,4(sp)
  80d238:	dfc00315 	stw	ra,12(sp)
  80d23c:	2023883a 	mov	r17,r4
  80d240:	2821883a 	mov	r16,r5
  80d244:	20000226 	beq	r4,zero,80d250 <__swbuf_r+0x24>
  80d248:	20800e17 	ldw	r2,56(r4)
  80d24c:	10002f26 	beq	r2,zero,80d30c <__swbuf_r+0xe0>
  80d250:	3080030b 	ldhu	r2,12(r6)
  80d254:	30c00617 	ldw	r3,24(r6)
  80d258:	1080020c 	andi	r2,r2,8
  80d25c:	30c00215 	stw	r3,8(r6)
  80d260:	10002226 	beq	r2,zero,80d2ec <__swbuf_r+0xc0>
  80d264:	30c00417 	ldw	r3,16(r6)
  80d268:	18002026 	beq	r3,zero,80d2ec <__swbuf_r+0xc0>
  80d26c:	31000017 	ldw	r4,0(r6)
  80d270:	30800517 	ldw	r2,20(r6)
  80d274:	20c7c83a 	sub	r3,r4,r3
  80d278:	18802f0e 	bge	r3,r2,80d338 <__swbuf_r+0x10c>
  80d27c:	19400044 	addi	r5,r3,1
  80d280:	30800217 	ldw	r2,8(r6)
  80d284:	84003fcc 	andi	r16,r16,255
  80d288:	20c00044 	addi	r3,r4,1
  80d28c:	10bfffc4 	addi	r2,r2,-1
  80d290:	30800215 	stw	r2,8(r6)
  80d294:	24000005 	stb	r16,0(r4)
  80d298:	30800517 	ldw	r2,20(r6)
  80d29c:	30c00015 	stw	r3,0(r6)
  80d2a0:	11400c26 	beq	r2,r5,80d2d4 <__swbuf_r+0xa8>
  80d2a4:	3080030b 	ldhu	r2,12(r6)
  80d2a8:	1080004c 	andi	r2,r2,1
  80d2ac:	1005003a 	cmpeq	r2,r2,zero
  80d2b0:	10000626 	beq	r2,zero,80d2cc <__swbuf_r+0xa0>
  80d2b4:	8005883a 	mov	r2,r16
  80d2b8:	dfc00317 	ldw	ra,12(sp)
  80d2bc:	dc400217 	ldw	r17,8(sp)
  80d2c0:	dc000117 	ldw	r16,4(sp)
  80d2c4:	dec00404 	addi	sp,sp,16
  80d2c8:	f800283a 	ret
  80d2cc:	00800284 	movi	r2,10
  80d2d0:	80bff81e 	bne	r16,r2,80d2b4 <__swbuf_r+0x88>
  80d2d4:	8809883a 	mov	r4,r17
  80d2d8:	300b883a 	mov	r5,r6
  80d2dc:	08054a00 	call	8054a0 <_fflush_r>
  80d2e0:	103ff426 	beq	r2,zero,80d2b4 <__swbuf_r+0x88>
  80d2e4:	043fffc4 	movi	r16,-1
  80d2e8:	003ff206 	br	80d2b4 <__swbuf_r+0x88>
  80d2ec:	300b883a 	mov	r5,r6
  80d2f0:	8809883a 	mov	r4,r17
  80d2f4:	d9800015 	stw	r6,0(sp)
  80d2f8:	08095ac0 	call	8095ac <__swsetup_r>
  80d2fc:	d9800017 	ldw	r6,0(sp)
  80d300:	1000061e 	bne	r2,zero,80d31c <__swbuf_r+0xf0>
  80d304:	30c00417 	ldw	r3,16(r6)
  80d308:	003fd806 	br	80d26c <__swbuf_r+0x40>
  80d30c:	d9800015 	stw	r6,0(sp)
  80d310:	08057380 	call	805738 <__sinit>
  80d314:	d9800017 	ldw	r6,0(sp)
  80d318:	003fcd06 	br	80d250 <__swbuf_r+0x24>
  80d31c:	3080030b 	ldhu	r2,12(r6)
  80d320:	00c00244 	movi	r3,9
  80d324:	043fffc4 	movi	r16,-1
  80d328:	10801014 	ori	r2,r2,64
  80d32c:	3080030d 	sth	r2,12(r6)
  80d330:	88c00015 	stw	r3,0(r17)
  80d334:	003fdf06 	br	80d2b4 <__swbuf_r+0x88>
  80d338:	300b883a 	mov	r5,r6
  80d33c:	8809883a 	mov	r4,r17
  80d340:	d9800015 	stw	r6,0(sp)
  80d344:	08054a00 	call	8054a0 <_fflush_r>
  80d348:	d9800017 	ldw	r6,0(sp)
  80d34c:	103fe51e 	bne	r2,zero,80d2e4 <__swbuf_r+0xb8>
  80d350:	31000017 	ldw	r4,0(r6)
  80d354:	01400044 	movi	r5,1
  80d358:	003fc906 	br	80d280 <__swbuf_r+0x54>

0080d35c <__swbuf>:
  80d35c:	01802074 	movhi	r6,129
  80d360:	31934c04 	addi	r6,r6,19760
  80d364:	2007883a 	mov	r3,r4
  80d368:	31000017 	ldw	r4,0(r6)
  80d36c:	280d883a 	mov	r6,r5
  80d370:	180b883a 	mov	r5,r3
  80d374:	080d22c1 	jmpi	80d22c <__swbuf_r>

0080d378 <_calloc_r>:
  80d378:	298b383a 	mul	r5,r5,r6
  80d37c:	defffe04 	addi	sp,sp,-8
  80d380:	dc000015 	stw	r16,0(sp)
  80d384:	dfc00115 	stw	ra,4(sp)
  80d388:	08068500 	call	806850 <_malloc_r>
  80d38c:	1021883a 	mov	r16,r2
  80d390:	01c00904 	movi	r7,36
  80d394:	10000d26 	beq	r2,zero,80d3cc <_calloc_r+0x54>
  80d398:	10ffff17 	ldw	r3,-4(r2)
  80d39c:	1009883a 	mov	r4,r2
  80d3a0:	00bfff04 	movi	r2,-4
  80d3a4:	1886703a 	and	r3,r3,r2
  80d3a8:	1887883a 	add	r3,r3,r2
  80d3ac:	180d883a 	mov	r6,r3
  80d3b0:	000b883a 	mov	r5,zero
  80d3b4:	38c01736 	bltu	r7,r3,80d414 <_calloc_r+0x9c>
  80d3b8:	008004c4 	movi	r2,19
  80d3bc:	10c00836 	bltu	r2,r3,80d3e0 <_calloc_r+0x68>
  80d3c0:	20000215 	stw	zero,8(r4)
  80d3c4:	20000015 	stw	zero,0(r4)
  80d3c8:	20000115 	stw	zero,4(r4)
  80d3cc:	8005883a 	mov	r2,r16
  80d3d0:	dfc00117 	ldw	ra,4(sp)
  80d3d4:	dc000017 	ldw	r16,0(sp)
  80d3d8:	dec00204 	addi	sp,sp,8
  80d3dc:	f800283a 	ret
  80d3e0:	008006c4 	movi	r2,27
  80d3e4:	80000015 	stw	zero,0(r16)
  80d3e8:	80000115 	stw	zero,4(r16)
  80d3ec:	81000204 	addi	r4,r16,8
  80d3f0:	10fff32e 	bgeu	r2,r3,80d3c0 <_calloc_r+0x48>
  80d3f4:	80000215 	stw	zero,8(r16)
  80d3f8:	80000315 	stw	zero,12(r16)
  80d3fc:	81000404 	addi	r4,r16,16
  80d400:	19ffef1e 	bne	r3,r7,80d3c0 <_calloc_r+0x48>
  80d404:	81000604 	addi	r4,r16,24
  80d408:	80000415 	stw	zero,16(r16)
  80d40c:	80000515 	stw	zero,20(r16)
  80d410:	003feb06 	br	80d3c0 <_calloc_r+0x48>
  80d414:	0806f900 	call	806f90 <memset>
  80d418:	8005883a 	mov	r2,r16
  80d41c:	dfc00117 	ldw	ra,4(sp)
  80d420:	dc000017 	ldw	r16,0(sp)
  80d424:	dec00204 	addi	sp,sp,8
  80d428:	f800283a 	ret

0080d42c <__udivdi3>:
  80d42c:	defff004 	addi	sp,sp,-64
  80d430:	2005883a 	mov	r2,r4
  80d434:	3011883a 	mov	r8,r6
  80d438:	df000e15 	stw	fp,56(sp)
  80d43c:	dd000a15 	stw	r20,40(sp)
  80d440:	dc000615 	stw	r16,24(sp)
  80d444:	dfc00f15 	stw	ra,60(sp)
  80d448:	ddc00d15 	stw	r23,52(sp)
  80d44c:	dd800c15 	stw	r22,48(sp)
  80d450:	dd400b15 	stw	r21,44(sp)
  80d454:	dcc00915 	stw	r19,36(sp)
  80d458:	dc800815 	stw	r18,32(sp)
  80d45c:	dc400715 	stw	r17,28(sp)
  80d460:	4021883a 	mov	r16,r8
  80d464:	1039883a 	mov	fp,r2
  80d468:	2829883a 	mov	r20,r5
  80d46c:	38003b1e 	bne	r7,zero,80d55c <__udivdi3+0x130>
  80d470:	2a005c36 	bltu	r5,r8,80d5e4 <__udivdi3+0x1b8>
  80d474:	4000a626 	beq	r8,zero,80d710 <__udivdi3+0x2e4>
  80d478:	00bfffd4 	movui	r2,65535
  80d47c:	14009e36 	bltu	r2,r16,80d6f8 <__udivdi3+0x2cc>
  80d480:	00803fc4 	movi	r2,255
  80d484:	14013d36 	bltu	r2,r16,80d97c <__udivdi3+0x550>
  80d488:	000b883a 	mov	r5,zero
  80d48c:	0005883a 	mov	r2,zero
  80d490:	8084d83a 	srl	r2,r16,r2
  80d494:	01002074 	movhi	r4,129
  80d498:	210ad404 	addi	r4,r4,11088
  80d49c:	01800804 	movi	r6,32
  80d4a0:	1105883a 	add	r2,r2,r4
  80d4a4:	10c00003 	ldbu	r3,0(r2)
  80d4a8:	28c7883a 	add	r3,r5,r3
  80d4ac:	30edc83a 	sub	r22,r6,r3
  80d4b0:	b000ee1e 	bne	r22,zero,80d86c <__udivdi3+0x440>
  80d4b4:	802ad43a 	srli	r21,r16,16
  80d4b8:	00800044 	movi	r2,1
  80d4bc:	a423c83a 	sub	r17,r20,r16
  80d4c0:	85ffffcc 	andi	r23,r16,65535
  80d4c4:	d8800315 	stw	r2,12(sp)
  80d4c8:	8809883a 	mov	r4,r17
  80d4cc:	a80b883a 	mov	r5,r21
  80d4d0:	080e3100 	call	80e310 <__udivsi3>
  80d4d4:	8809883a 	mov	r4,r17
  80d4d8:	a80b883a 	mov	r5,r21
  80d4dc:	102d883a 	mov	r22,r2
  80d4e0:	080e3180 	call	80e318 <__umodsi3>
  80d4e4:	1004943a 	slli	r2,r2,16
  80d4e8:	e006d43a 	srli	r3,fp,16
  80d4ec:	bda3383a 	mul	r17,r23,r22
  80d4f0:	10c4b03a 	or	r2,r2,r3
  80d4f4:	1440042e 	bgeu	r2,r17,80d508 <__udivdi3+0xdc>
  80d4f8:	1405883a 	add	r2,r2,r16
  80d4fc:	b5bfffc4 	addi	r22,r22,-1
  80d500:	14000136 	bltu	r2,r16,80d508 <__udivdi3+0xdc>
  80d504:	14413d36 	bltu	r2,r17,80d9fc <__udivdi3+0x5d0>
  80d508:	1463c83a 	sub	r17,r2,r17
  80d50c:	8809883a 	mov	r4,r17
  80d510:	a80b883a 	mov	r5,r21
  80d514:	080e3100 	call	80e310 <__udivsi3>
  80d518:	8809883a 	mov	r4,r17
  80d51c:	a80b883a 	mov	r5,r21
  80d520:	1029883a 	mov	r20,r2
  80d524:	080e3180 	call	80e318 <__umodsi3>
  80d528:	1004943a 	slli	r2,r2,16
  80d52c:	bd09383a 	mul	r4,r23,r20
  80d530:	e0ffffcc 	andi	r3,fp,65535
  80d534:	10c4b03a 	or	r2,r2,r3
  80d538:	1100042e 	bgeu	r2,r4,80d54c <__udivdi3+0x120>
  80d53c:	8085883a 	add	r2,r16,r2
  80d540:	a53fffc4 	addi	r20,r20,-1
  80d544:	14000136 	bltu	r2,r16,80d54c <__udivdi3+0x120>
  80d548:	11012036 	bltu	r2,r4,80d9cc <__udivdi3+0x5a0>
  80d54c:	b004943a 	slli	r2,r22,16
  80d550:	d9000317 	ldw	r4,12(sp)
  80d554:	a084b03a 	or	r2,r20,r2
  80d558:	00001506 	br	80d5b0 <__udivdi3+0x184>
  80d55c:	380d883a 	mov	r6,r7
  80d560:	29c06236 	bltu	r5,r7,80d6ec <__udivdi3+0x2c0>
  80d564:	00bfffd4 	movui	r2,65535
  80d568:	11c05a36 	bltu	r2,r7,80d6d4 <__udivdi3+0x2a8>
  80d56c:	00803fc4 	movi	r2,255
  80d570:	11c0fc36 	bltu	r2,r7,80d964 <__udivdi3+0x538>
  80d574:	000b883a 	mov	r5,zero
  80d578:	0005883a 	mov	r2,zero
  80d57c:	3084d83a 	srl	r2,r6,r2
  80d580:	01002074 	movhi	r4,129
  80d584:	210ad404 	addi	r4,r4,11088
  80d588:	01c00804 	movi	r7,32
  80d58c:	1105883a 	add	r2,r2,r4
  80d590:	10c00003 	ldbu	r3,0(r2)
  80d594:	28c7883a 	add	r3,r5,r3
  80d598:	38efc83a 	sub	r23,r7,r3
  80d59c:	b800691e 	bne	r23,zero,80d744 <__udivdi3+0x318>
  80d5a0:	35000136 	bltu	r6,r20,80d5a8 <__udivdi3+0x17c>
  80d5a4:	e4005136 	bltu	fp,r16,80d6ec <__udivdi3+0x2c0>
  80d5a8:	00800044 	movi	r2,1
  80d5ac:	0009883a 	mov	r4,zero
  80d5b0:	2007883a 	mov	r3,r4
  80d5b4:	dfc00f17 	ldw	ra,60(sp)
  80d5b8:	df000e17 	ldw	fp,56(sp)
  80d5bc:	ddc00d17 	ldw	r23,52(sp)
  80d5c0:	dd800c17 	ldw	r22,48(sp)
  80d5c4:	dd400b17 	ldw	r21,44(sp)
  80d5c8:	dd000a17 	ldw	r20,40(sp)
  80d5cc:	dcc00917 	ldw	r19,36(sp)
  80d5d0:	dc800817 	ldw	r18,32(sp)
  80d5d4:	dc400717 	ldw	r17,28(sp)
  80d5d8:	dc000617 	ldw	r16,24(sp)
  80d5dc:	dec01004 	addi	sp,sp,64
  80d5e0:	f800283a 	ret
  80d5e4:	00bfffd4 	movui	r2,65535
  80d5e8:	12005036 	bltu	r2,r8,80d72c <__udivdi3+0x300>
  80d5ec:	00803fc4 	movi	r2,255
  80d5f0:	1200e836 	bltu	r2,r8,80d994 <__udivdi3+0x568>
  80d5f4:	000b883a 	mov	r5,zero
  80d5f8:	0005883a 	mov	r2,zero
  80d5fc:	8084d83a 	srl	r2,r16,r2
  80d600:	01002074 	movhi	r4,129
  80d604:	210ad404 	addi	r4,r4,11088
  80d608:	01800804 	movi	r6,32
  80d60c:	1105883a 	add	r2,r2,r4
  80d610:	10c00003 	ldbu	r3,0(r2)
  80d614:	28c7883a 	add	r3,r5,r3
  80d618:	30cbc83a 	sub	r5,r6,r3
  80d61c:	28000626 	beq	r5,zero,80d638 <__udivdi3+0x20c>
  80d620:	3145c83a 	sub	r2,r6,r5
  80d624:	e084d83a 	srl	r2,fp,r2
  80d628:	a146983a 	sll	r3,r20,r5
  80d62c:	e178983a 	sll	fp,fp,r5
  80d630:	8160983a 	sll	r16,r16,r5
  80d634:	18a8b03a 	or	r20,r3,r2
  80d638:	802ad43a 	srli	r21,r16,16
  80d63c:	a009883a 	mov	r4,r20
  80d640:	85ffffcc 	andi	r23,r16,65535
  80d644:	a80b883a 	mov	r5,r21
  80d648:	080e3100 	call	80e310 <__udivsi3>
  80d64c:	a009883a 	mov	r4,r20
  80d650:	a80b883a 	mov	r5,r21
  80d654:	102d883a 	mov	r22,r2
  80d658:	080e3180 	call	80e318 <__umodsi3>
  80d65c:	1004943a 	slli	r2,r2,16
  80d660:	e006d43a 	srli	r3,fp,16
  80d664:	bda3383a 	mul	r17,r23,r22
  80d668:	10c4b03a 	or	r2,r2,r3
  80d66c:	1440042e 	bgeu	r2,r17,80d680 <__udivdi3+0x254>
  80d670:	1405883a 	add	r2,r2,r16
  80d674:	b5bfffc4 	addi	r22,r22,-1
  80d678:	14000136 	bltu	r2,r16,80d680 <__udivdi3+0x254>
  80d67c:	1440d536 	bltu	r2,r17,80d9d4 <__udivdi3+0x5a8>
  80d680:	1463c83a 	sub	r17,r2,r17
  80d684:	8809883a 	mov	r4,r17
  80d688:	a80b883a 	mov	r5,r21
  80d68c:	080e3100 	call	80e310 <__udivsi3>
  80d690:	8809883a 	mov	r4,r17
  80d694:	a80b883a 	mov	r5,r21
  80d698:	1029883a 	mov	r20,r2
  80d69c:	080e3180 	call	80e318 <__umodsi3>
  80d6a0:	1004943a 	slli	r2,r2,16
  80d6a4:	bd09383a 	mul	r4,r23,r20
  80d6a8:	e0ffffcc 	andi	r3,fp,65535
  80d6ac:	10c4b03a 	or	r2,r2,r3
  80d6b0:	1100042e 	bgeu	r2,r4,80d6c4 <__udivdi3+0x298>
  80d6b4:	8085883a 	add	r2,r16,r2
  80d6b8:	a53fffc4 	addi	r20,r20,-1
  80d6bc:	14000136 	bltu	r2,r16,80d6c4 <__udivdi3+0x298>
  80d6c0:	1100c736 	bltu	r2,r4,80d9e0 <__udivdi3+0x5b4>
  80d6c4:	b004943a 	slli	r2,r22,16
  80d6c8:	0009883a 	mov	r4,zero
  80d6cc:	a084b03a 	or	r2,r20,r2
  80d6d0:	003fb706 	br	80d5b0 <__udivdi3+0x184>
  80d6d4:	00804034 	movhi	r2,256
  80d6d8:	10bfffc4 	addi	r2,r2,-1
  80d6dc:	11c0a436 	bltu	r2,r7,80d970 <__udivdi3+0x544>
  80d6e0:	01400404 	movi	r5,16
  80d6e4:	2805883a 	mov	r2,r5
  80d6e8:	003fa406 	br	80d57c <__udivdi3+0x150>
  80d6ec:	0005883a 	mov	r2,zero
  80d6f0:	0009883a 	mov	r4,zero
  80d6f4:	003fae06 	br	80d5b0 <__udivdi3+0x184>
  80d6f8:	00804034 	movhi	r2,256
  80d6fc:	10bfffc4 	addi	r2,r2,-1
  80d700:	1400a136 	bltu	r2,r16,80d988 <__udivdi3+0x55c>
  80d704:	01400404 	movi	r5,16
  80d708:	2805883a 	mov	r2,r5
  80d70c:	003f6006 	br	80d490 <__udivdi3+0x64>
  80d710:	01000044 	movi	r4,1
  80d714:	000b883a 	mov	r5,zero
  80d718:	080e3100 	call	80e310 <__udivsi3>
  80d71c:	1021883a 	mov	r16,r2
  80d720:	00bfffd4 	movui	r2,65535
  80d724:	143ff436 	bltu	r2,r16,80d6f8 <__udivdi3+0x2cc>
  80d728:	003f5506 	br	80d480 <__udivdi3+0x54>
  80d72c:	00804034 	movhi	r2,256
  80d730:	10bfffc4 	addi	r2,r2,-1
  80d734:	12009a36 	bltu	r2,r8,80d9a0 <__udivdi3+0x574>
  80d738:	01400404 	movi	r5,16
  80d73c:	2805883a 	mov	r2,r5
  80d740:	003fae06 	br	80d5fc <__udivdi3+0x1d0>
  80d744:	3dc5c83a 	sub	r2,r7,r23
  80d748:	35c8983a 	sll	r4,r6,r23
  80d74c:	8086d83a 	srl	r3,r16,r2
  80d750:	a0a2d83a 	srl	r17,r20,r2
  80d754:	e084d83a 	srl	r2,fp,r2
  80d758:	20eab03a 	or	r21,r4,r3
  80d75c:	a82cd43a 	srli	r22,r21,16
  80d760:	a5c6983a 	sll	r3,r20,r23
  80d764:	8809883a 	mov	r4,r17
  80d768:	b00b883a 	mov	r5,r22
  80d76c:	1886b03a 	or	r3,r3,r2
  80d770:	d8c00215 	stw	r3,8(sp)
  80d774:	080e3100 	call	80e310 <__udivsi3>
  80d778:	8809883a 	mov	r4,r17
  80d77c:	b00b883a 	mov	r5,r22
  80d780:	1029883a 	mov	r20,r2
  80d784:	080e3180 	call	80e318 <__umodsi3>
  80d788:	a8ffffcc 	andi	r3,r21,65535
  80d78c:	d8c00515 	stw	r3,20(sp)
  80d790:	d9000217 	ldw	r4,8(sp)
  80d794:	d9400517 	ldw	r5,20(sp)
  80d798:	1004943a 	slli	r2,r2,16
  80d79c:	2006d43a 	srli	r3,r4,16
  80d7a0:	85e0983a 	sll	r16,r16,r23
  80d7a4:	2d23383a 	mul	r17,r5,r20
  80d7a8:	10c4b03a 	or	r2,r2,r3
  80d7ac:	dc000015 	stw	r16,0(sp)
  80d7b0:	1440032e 	bgeu	r2,r17,80d7c0 <__udivdi3+0x394>
  80d7b4:	1545883a 	add	r2,r2,r21
  80d7b8:	a53fffc4 	addi	r20,r20,-1
  80d7bc:	15407f2e 	bgeu	r2,r21,80d9bc <__udivdi3+0x590>
  80d7c0:	1463c83a 	sub	r17,r2,r17
  80d7c4:	8809883a 	mov	r4,r17
  80d7c8:	b00b883a 	mov	r5,r22
  80d7cc:	080e3100 	call	80e310 <__udivsi3>
  80d7d0:	8809883a 	mov	r4,r17
  80d7d4:	b00b883a 	mov	r5,r22
  80d7d8:	1021883a 	mov	r16,r2
  80d7dc:	080e3180 	call	80e318 <__umodsi3>
  80d7e0:	d8c00517 	ldw	r3,20(sp)
  80d7e4:	d9000217 	ldw	r4,8(sp)
  80d7e8:	1004943a 	slli	r2,r2,16
  80d7ec:	1c0f383a 	mul	r7,r3,r16
  80d7f0:	20ffffcc 	andi	r3,r4,65535
  80d7f4:	10e2b03a 	or	r17,r2,r3
  80d7f8:	89c0032e 	bgeu	r17,r7,80d808 <__udivdi3+0x3dc>
  80d7fc:	8d63883a 	add	r17,r17,r21
  80d800:	843fffc4 	addi	r16,r16,-1
  80d804:	8d40692e 	bgeu	r17,r21,80d9ac <__udivdi3+0x580>
  80d808:	a008943a 	slli	r4,r20,16
  80d80c:	d9400017 	ldw	r5,0(sp)
  80d810:	89e3c83a 	sub	r17,r17,r7
  80d814:	8110b03a 	or	r8,r16,r4
  80d818:	280cd43a 	srli	r6,r5,16
  80d81c:	28ffffcc 	andi	r3,r5,65535
  80d820:	40bfffcc 	andi	r2,r8,65535
  80d824:	400ad43a 	srli	r5,r8,16
  80d828:	10d3383a 	mul	r9,r2,r3
  80d82c:	1185383a 	mul	r2,r2,r6
  80d830:	28c7383a 	mul	r3,r5,r3
  80d834:	4808d43a 	srli	r4,r9,16
  80d838:	298b383a 	mul	r5,r5,r6
  80d83c:	10c5883a 	add	r2,r2,r3
  80d840:	2089883a 	add	r4,r4,r2
  80d844:	20c0022e 	bgeu	r4,r3,80d850 <__udivdi3+0x424>
  80d848:	00800074 	movhi	r2,1
  80d84c:	288b883a 	add	r5,r5,r2
  80d850:	2004d43a 	srli	r2,r4,16
  80d854:	288b883a 	add	r5,r5,r2
  80d858:	89403f36 	bltu	r17,r5,80d958 <__udivdi3+0x52c>
  80d85c:	89403926 	beq	r17,r5,80d944 <__udivdi3+0x518>
  80d860:	4005883a 	mov	r2,r8
  80d864:	0009883a 	mov	r4,zero
  80d868:	003f5106 	br	80d5b0 <__udivdi3+0x184>
  80d86c:	85a0983a 	sll	r16,r16,r22
  80d870:	3585c83a 	sub	r2,r6,r22
  80d874:	a0a2d83a 	srl	r17,r20,r2
  80d878:	802ad43a 	srli	r21,r16,16
  80d87c:	e084d83a 	srl	r2,fp,r2
  80d880:	a586983a 	sll	r3,r20,r22
  80d884:	8809883a 	mov	r4,r17
  80d888:	a80b883a 	mov	r5,r21
  80d88c:	1886b03a 	or	r3,r3,r2
  80d890:	d8c00115 	stw	r3,4(sp)
  80d894:	080e3100 	call	80e310 <__udivsi3>
  80d898:	8809883a 	mov	r4,r17
  80d89c:	a80b883a 	mov	r5,r21
  80d8a0:	d8800415 	stw	r2,16(sp)
  80d8a4:	080e3180 	call	80e318 <__umodsi3>
  80d8a8:	d9000117 	ldw	r4,4(sp)
  80d8ac:	d9400417 	ldw	r5,16(sp)
  80d8b0:	1004943a 	slli	r2,r2,16
  80d8b4:	85ffffcc 	andi	r23,r16,65535
  80d8b8:	2006d43a 	srli	r3,r4,16
  80d8bc:	b963383a 	mul	r17,r23,r5
  80d8c0:	10c4b03a 	or	r2,r2,r3
  80d8c4:	1440042e 	bgeu	r2,r17,80d8d8 <__udivdi3+0x4ac>
  80d8c8:	297fffc4 	addi	r5,r5,-1
  80d8cc:	1405883a 	add	r2,r2,r16
  80d8d0:	d9400415 	stw	r5,16(sp)
  80d8d4:	1400442e 	bgeu	r2,r16,80d9e8 <__udivdi3+0x5bc>
  80d8d8:	1463c83a 	sub	r17,r2,r17
  80d8dc:	8809883a 	mov	r4,r17
  80d8e0:	a80b883a 	mov	r5,r21
  80d8e4:	080e3100 	call	80e310 <__udivsi3>
  80d8e8:	8809883a 	mov	r4,r17
  80d8ec:	a80b883a 	mov	r5,r21
  80d8f0:	1029883a 	mov	r20,r2
  80d8f4:	080e3180 	call	80e318 <__umodsi3>
  80d8f8:	d9400117 	ldw	r5,4(sp)
  80d8fc:	1004943a 	slli	r2,r2,16
  80d900:	bd09383a 	mul	r4,r23,r20
  80d904:	28ffffcc 	andi	r3,r5,65535
  80d908:	10c6b03a 	or	r3,r2,r3
  80d90c:	1900062e 	bgeu	r3,r4,80d928 <__udivdi3+0x4fc>
  80d910:	1c07883a 	add	r3,r3,r16
  80d914:	a53fffc4 	addi	r20,r20,-1
  80d918:	1c000336 	bltu	r3,r16,80d928 <__udivdi3+0x4fc>
  80d91c:	1900022e 	bgeu	r3,r4,80d928 <__udivdi3+0x4fc>
  80d920:	a53fffc4 	addi	r20,r20,-1
  80d924:	1c07883a 	add	r3,r3,r16
  80d928:	d9400417 	ldw	r5,16(sp)
  80d92c:	e5b8983a 	sll	fp,fp,r22
  80d930:	1923c83a 	sub	r17,r3,r4
  80d934:	2804943a 	slli	r2,r5,16
  80d938:	a0a8b03a 	or	r20,r20,r2
  80d93c:	dd000315 	stw	r20,12(sp)
  80d940:	003ee106 	br	80d4c8 <__udivdi3+0x9c>
  80d944:	2004943a 	slli	r2,r4,16
  80d948:	e5c8983a 	sll	r4,fp,r23
  80d94c:	48ffffcc 	andi	r3,r9,65535
  80d950:	10c5883a 	add	r2,r2,r3
  80d954:	20bfc22e 	bgeu	r4,r2,80d860 <__udivdi3+0x434>
  80d958:	40bfffc4 	addi	r2,r8,-1
  80d95c:	0009883a 	mov	r4,zero
  80d960:	003f1306 	br	80d5b0 <__udivdi3+0x184>
  80d964:	01400204 	movi	r5,8
  80d968:	2805883a 	mov	r2,r5
  80d96c:	003f0306 	br	80d57c <__udivdi3+0x150>
  80d970:	01400604 	movi	r5,24
  80d974:	2805883a 	mov	r2,r5
  80d978:	003f0006 	br	80d57c <__udivdi3+0x150>
  80d97c:	01400204 	movi	r5,8
  80d980:	2805883a 	mov	r2,r5
  80d984:	003ec206 	br	80d490 <__udivdi3+0x64>
  80d988:	01400604 	movi	r5,24
  80d98c:	2805883a 	mov	r2,r5
  80d990:	003ebf06 	br	80d490 <__udivdi3+0x64>
  80d994:	01400204 	movi	r5,8
  80d998:	2805883a 	mov	r2,r5
  80d99c:	003f1706 	br	80d5fc <__udivdi3+0x1d0>
  80d9a0:	01400604 	movi	r5,24
  80d9a4:	2805883a 	mov	r2,r5
  80d9a8:	003f1406 	br	80d5fc <__udivdi3+0x1d0>
  80d9ac:	89ff962e 	bgeu	r17,r7,80d808 <__udivdi3+0x3dc>
  80d9b0:	8d63883a 	add	r17,r17,r21
  80d9b4:	843fffc4 	addi	r16,r16,-1
  80d9b8:	003f9306 	br	80d808 <__udivdi3+0x3dc>
  80d9bc:	147f802e 	bgeu	r2,r17,80d7c0 <__udivdi3+0x394>
  80d9c0:	a53fffc4 	addi	r20,r20,-1
  80d9c4:	1545883a 	add	r2,r2,r21
  80d9c8:	003f7d06 	br	80d7c0 <__udivdi3+0x394>
  80d9cc:	a53fffc4 	addi	r20,r20,-1
  80d9d0:	003ede06 	br	80d54c <__udivdi3+0x120>
  80d9d4:	b5bfffc4 	addi	r22,r22,-1
  80d9d8:	1405883a 	add	r2,r2,r16
  80d9dc:	003f2806 	br	80d680 <__udivdi3+0x254>
  80d9e0:	a53fffc4 	addi	r20,r20,-1
  80d9e4:	003f3706 	br	80d6c4 <__udivdi3+0x298>
  80d9e8:	147fbb2e 	bgeu	r2,r17,80d8d8 <__udivdi3+0x4ac>
  80d9ec:	297fffc4 	addi	r5,r5,-1
  80d9f0:	1405883a 	add	r2,r2,r16
  80d9f4:	d9400415 	stw	r5,16(sp)
  80d9f8:	003fb706 	br	80d8d8 <__udivdi3+0x4ac>
  80d9fc:	b5bfffc4 	addi	r22,r22,-1
  80da00:	1405883a 	add	r2,r2,r16
  80da04:	003ec006 	br	80d508 <__udivdi3+0xdc>

0080da08 <__umoddi3>:
  80da08:	defff104 	addi	sp,sp,-60
  80da0c:	dd800b15 	stw	r22,44(sp)
  80da10:	dd000915 	stw	r20,36(sp)
  80da14:	dc000515 	stw	r16,20(sp)
  80da18:	dfc00e15 	stw	ra,56(sp)
  80da1c:	df000d15 	stw	fp,52(sp)
  80da20:	ddc00c15 	stw	r23,48(sp)
  80da24:	dd400a15 	stw	r21,40(sp)
  80da28:	dcc00815 	stw	r19,32(sp)
  80da2c:	dc800715 	stw	r18,28(sp)
  80da30:	dc400615 	stw	r17,24(sp)
  80da34:	3021883a 	mov	r16,r6
  80da38:	202d883a 	mov	r22,r4
  80da3c:	2829883a 	mov	r20,r5
  80da40:	38002b1e 	bne	r7,zero,80daf0 <__umoddi3+0xe8>
  80da44:	29805036 	bltu	r5,r6,80db88 <__umoddi3+0x180>
  80da48:	30008a26 	beq	r6,zero,80dc74 <__umoddi3+0x26c>
  80da4c:	00bfffd4 	movui	r2,65535
  80da50:	14008236 	bltu	r2,r16,80dc5c <__umoddi3+0x254>
  80da54:	00803fc4 	movi	r2,255
  80da58:	14013636 	bltu	r2,r16,80df34 <__umoddi3+0x52c>
  80da5c:	000b883a 	mov	r5,zero
  80da60:	0005883a 	mov	r2,zero
  80da64:	8084d83a 	srl	r2,r16,r2
  80da68:	01002074 	movhi	r4,129
  80da6c:	210ad404 	addi	r4,r4,11088
  80da70:	01800804 	movi	r6,32
  80da74:	1105883a 	add	r2,r2,r4
  80da78:	10c00003 	ldbu	r3,0(r2)
  80da7c:	28c7883a 	add	r3,r5,r3
  80da80:	30efc83a 	sub	r23,r6,r3
  80da84:	b800941e 	bne	r23,zero,80dcd8 <__umoddi3+0x2d0>
  80da88:	802ad43a 	srli	r21,r16,16
  80da8c:	a423c83a 	sub	r17,r20,r16
  80da90:	0039883a 	mov	fp,zero
  80da94:	853fffcc 	andi	r20,r16,65535
  80da98:	8809883a 	mov	r4,r17
  80da9c:	a80b883a 	mov	r5,r21
  80daa0:	080e3100 	call	80e310 <__udivsi3>
  80daa4:	8809883a 	mov	r4,r17
  80daa8:	a80b883a 	mov	r5,r21
  80daac:	a0a3383a 	mul	r17,r20,r2
  80dab0:	080e3180 	call	80e318 <__umodsi3>
  80dab4:	1004943a 	slli	r2,r2,16
  80dab8:	b006d43a 	srli	r3,r22,16
  80dabc:	10c4b03a 	or	r2,r2,r3
  80dac0:	1440032e 	bgeu	r2,r17,80dad0 <__umoddi3+0xc8>
  80dac4:	1405883a 	add	r2,r2,r16
  80dac8:	14000136 	bltu	r2,r16,80dad0 <__umoddi3+0xc8>
  80dacc:	14413536 	bltu	r2,r17,80dfa4 <__umoddi3+0x59c>
  80dad0:	1463c83a 	sub	r17,r2,r17
  80dad4:	8809883a 	mov	r4,r17
  80dad8:	a80b883a 	mov	r5,r21
  80dadc:	080e3100 	call	80e310 <__udivsi3>
  80dae0:	8809883a 	mov	r4,r17
  80dae4:	a0a3383a 	mul	r17,r20,r2
  80dae8:	a80b883a 	mov	r5,r21
  80daec:	00004d06 	br	80dc24 <__umoddi3+0x21c>
  80daf0:	380d883a 	mov	r6,r7
  80daf4:	29c0102e 	bgeu	r5,r7,80db38 <__umoddi3+0x130>
  80daf8:	2011883a 	mov	r8,r4
  80dafc:	2813883a 	mov	r9,r5
  80db00:	4005883a 	mov	r2,r8
  80db04:	4807883a 	mov	r3,r9
  80db08:	dfc00e17 	ldw	ra,56(sp)
  80db0c:	df000d17 	ldw	fp,52(sp)
  80db10:	ddc00c17 	ldw	r23,48(sp)
  80db14:	dd800b17 	ldw	r22,44(sp)
  80db18:	dd400a17 	ldw	r21,40(sp)
  80db1c:	dd000917 	ldw	r20,36(sp)
  80db20:	dcc00817 	ldw	r19,32(sp)
  80db24:	dc800717 	ldw	r18,28(sp)
  80db28:	dc400617 	ldw	r17,24(sp)
  80db2c:	dc000517 	ldw	r16,20(sp)
  80db30:	dec00f04 	addi	sp,sp,60
  80db34:	f800283a 	ret
  80db38:	00bfffd4 	movui	r2,65535
  80db3c:	11c05a36 	bltu	r2,r7,80dca8 <__umoddi3+0x2a0>
  80db40:	00803fc4 	movi	r2,255
  80db44:	11c0fe36 	bltu	r2,r7,80df40 <__umoddi3+0x538>
  80db48:	000b883a 	mov	r5,zero
  80db4c:	0005883a 	mov	r2,zero
  80db50:	3084d83a 	srl	r2,r6,r2
  80db54:	01002074 	movhi	r4,129
  80db58:	210ad404 	addi	r4,r4,11088
  80db5c:	01c00804 	movi	r7,32
  80db60:	1105883a 	add	r2,r2,r4
  80db64:	10c00003 	ldbu	r3,0(r2)
  80db68:	28c7883a 	add	r3,r5,r3
  80db6c:	38ebc83a 	sub	r21,r7,r3
  80db70:	a800851e 	bne	r21,zero,80dd88 <__umoddi3+0x380>
  80db74:	35005236 	bltu	r6,r20,80dcc0 <__umoddi3+0x2b8>
  80db78:	b400512e 	bgeu	r22,r16,80dcc0 <__umoddi3+0x2b8>
  80db7c:	b011883a 	mov	r8,r22
  80db80:	a013883a 	mov	r9,r20
  80db84:	003fde06 	br	80db00 <__umoddi3+0xf8>
  80db88:	00bfffd4 	movui	r2,65535
  80db8c:	11804036 	bltu	r2,r6,80dc90 <__umoddi3+0x288>
  80db90:	00803fc4 	movi	r2,255
  80db94:	1180ed36 	bltu	r2,r6,80df4c <__umoddi3+0x544>
  80db98:	000b883a 	mov	r5,zero
  80db9c:	0005883a 	mov	r2,zero
  80dba0:	8084d83a 	srl	r2,r16,r2
  80dba4:	01002074 	movhi	r4,129
  80dba8:	210ad404 	addi	r4,r4,11088
  80dbac:	01800804 	movi	r6,32
  80dbb0:	1105883a 	add	r2,r2,r4
  80dbb4:	10c00003 	ldbu	r3,0(r2)
  80dbb8:	28c7883a 	add	r3,r5,r3
  80dbbc:	30c7c83a 	sub	r3,r6,r3
  80dbc0:	1800bf1e 	bne	r3,zero,80dec0 <__umoddi3+0x4b8>
  80dbc4:	0039883a 	mov	fp,zero
  80dbc8:	802ad43a 	srli	r21,r16,16
  80dbcc:	a009883a 	mov	r4,r20
  80dbd0:	85ffffcc 	andi	r23,r16,65535
  80dbd4:	a80b883a 	mov	r5,r21
  80dbd8:	080e3100 	call	80e310 <__udivsi3>
  80dbdc:	a009883a 	mov	r4,r20
  80dbe0:	a80b883a 	mov	r5,r21
  80dbe4:	b8a3383a 	mul	r17,r23,r2
  80dbe8:	080e3180 	call	80e318 <__umodsi3>
  80dbec:	1004943a 	slli	r2,r2,16
  80dbf0:	b006d43a 	srli	r3,r22,16
  80dbf4:	10c4b03a 	or	r2,r2,r3
  80dbf8:	1440032e 	bgeu	r2,r17,80dc08 <__umoddi3+0x200>
  80dbfc:	1405883a 	add	r2,r2,r16
  80dc00:	14000136 	bltu	r2,r16,80dc08 <__umoddi3+0x200>
  80dc04:	1440e536 	bltu	r2,r17,80df9c <__umoddi3+0x594>
  80dc08:	1463c83a 	sub	r17,r2,r17
  80dc0c:	8809883a 	mov	r4,r17
  80dc10:	a80b883a 	mov	r5,r21
  80dc14:	080e3100 	call	80e310 <__udivsi3>
  80dc18:	8809883a 	mov	r4,r17
  80dc1c:	b8a3383a 	mul	r17,r23,r2
  80dc20:	a80b883a 	mov	r5,r21
  80dc24:	080e3180 	call	80e318 <__umodsi3>
  80dc28:	1004943a 	slli	r2,r2,16
  80dc2c:	b0ffffcc 	andi	r3,r22,65535
  80dc30:	10c4b03a 	or	r2,r2,r3
  80dc34:	1440042e 	bgeu	r2,r17,80dc48 <__umoddi3+0x240>
  80dc38:	1405883a 	add	r2,r2,r16
  80dc3c:	14000236 	bltu	r2,r16,80dc48 <__umoddi3+0x240>
  80dc40:	1440012e 	bgeu	r2,r17,80dc48 <__umoddi3+0x240>
  80dc44:	1405883a 	add	r2,r2,r16
  80dc48:	1445c83a 	sub	r2,r2,r17
  80dc4c:	1724d83a 	srl	r18,r2,fp
  80dc50:	0013883a 	mov	r9,zero
  80dc54:	9011883a 	mov	r8,r18
  80dc58:	003fa906 	br	80db00 <__umoddi3+0xf8>
  80dc5c:	00804034 	movhi	r2,256
  80dc60:	10bfffc4 	addi	r2,r2,-1
  80dc64:	1400b036 	bltu	r2,r16,80df28 <__umoddi3+0x520>
  80dc68:	01400404 	movi	r5,16
  80dc6c:	2805883a 	mov	r2,r5
  80dc70:	003f7c06 	br	80da64 <__umoddi3+0x5c>
  80dc74:	01000044 	movi	r4,1
  80dc78:	000b883a 	mov	r5,zero
  80dc7c:	080e3100 	call	80e310 <__udivsi3>
  80dc80:	1021883a 	mov	r16,r2
  80dc84:	00bfffd4 	movui	r2,65535
  80dc88:	143ff436 	bltu	r2,r16,80dc5c <__umoddi3+0x254>
  80dc8c:	003f7106 	br	80da54 <__umoddi3+0x4c>
  80dc90:	00804034 	movhi	r2,256
  80dc94:	10bfffc4 	addi	r2,r2,-1
  80dc98:	1180af36 	bltu	r2,r6,80df58 <__umoddi3+0x550>
  80dc9c:	01400404 	movi	r5,16
  80dca0:	2805883a 	mov	r2,r5
  80dca4:	003fbe06 	br	80dba0 <__umoddi3+0x198>
  80dca8:	00804034 	movhi	r2,256
  80dcac:	10bfffc4 	addi	r2,r2,-1
  80dcb0:	11c0ac36 	bltu	r2,r7,80df64 <__umoddi3+0x55c>
  80dcb4:	01400404 	movi	r5,16
  80dcb8:	2805883a 	mov	r2,r5
  80dcbc:	003fa406 	br	80db50 <__umoddi3+0x148>
  80dcc0:	b409c83a 	sub	r4,r22,r16
  80dcc4:	b105803a 	cmpltu	r2,r22,r4
  80dcc8:	a187c83a 	sub	r3,r20,r6
  80dccc:	18a9c83a 	sub	r20,r3,r2
  80dcd0:	202d883a 	mov	r22,r4
  80dcd4:	003fa906 	br	80db7c <__umoddi3+0x174>
  80dcd8:	85e0983a 	sll	r16,r16,r23
  80dcdc:	35c5c83a 	sub	r2,r6,r23
  80dce0:	a0a2d83a 	srl	r17,r20,r2
  80dce4:	802ad43a 	srli	r21,r16,16
  80dce8:	b084d83a 	srl	r2,r22,r2
  80dcec:	a5c6983a 	sll	r3,r20,r23
  80dcf0:	8809883a 	mov	r4,r17
  80dcf4:	a80b883a 	mov	r5,r21
  80dcf8:	1886b03a 	or	r3,r3,r2
  80dcfc:	d8c00115 	stw	r3,4(sp)
  80dd00:	853fffcc 	andi	r20,r16,65535
  80dd04:	080e3100 	call	80e310 <__udivsi3>
  80dd08:	8809883a 	mov	r4,r17
  80dd0c:	a80b883a 	mov	r5,r21
  80dd10:	a0a3383a 	mul	r17,r20,r2
  80dd14:	080e3180 	call	80e318 <__umodsi3>
  80dd18:	d9000117 	ldw	r4,4(sp)
  80dd1c:	1004943a 	slli	r2,r2,16
  80dd20:	b839883a 	mov	fp,r23
  80dd24:	2006d43a 	srli	r3,r4,16
  80dd28:	10c4b03a 	or	r2,r2,r3
  80dd2c:	1440022e 	bgeu	r2,r17,80dd38 <__umoddi3+0x330>
  80dd30:	1405883a 	add	r2,r2,r16
  80dd34:	1400962e 	bgeu	r2,r16,80df90 <__umoddi3+0x588>
  80dd38:	1463c83a 	sub	r17,r2,r17
  80dd3c:	8809883a 	mov	r4,r17
  80dd40:	a80b883a 	mov	r5,r21
  80dd44:	080e3100 	call	80e310 <__udivsi3>
  80dd48:	8809883a 	mov	r4,r17
  80dd4c:	a80b883a 	mov	r5,r21
  80dd50:	a0a3383a 	mul	r17,r20,r2
  80dd54:	080e3180 	call	80e318 <__umodsi3>
  80dd58:	d9400117 	ldw	r5,4(sp)
  80dd5c:	1004943a 	slli	r2,r2,16
  80dd60:	28ffffcc 	andi	r3,r5,65535
  80dd64:	10c4b03a 	or	r2,r2,r3
  80dd68:	1440042e 	bgeu	r2,r17,80dd7c <__umoddi3+0x374>
  80dd6c:	1405883a 	add	r2,r2,r16
  80dd70:	14000236 	bltu	r2,r16,80dd7c <__umoddi3+0x374>
  80dd74:	1440012e 	bgeu	r2,r17,80dd7c <__umoddi3+0x374>
  80dd78:	1405883a 	add	r2,r2,r16
  80dd7c:	b5ec983a 	sll	r22,r22,r23
  80dd80:	1463c83a 	sub	r17,r2,r17
  80dd84:	003f4406 	br	80da98 <__umoddi3+0x90>
  80dd88:	3d4fc83a 	sub	r7,r7,r21
  80dd8c:	3546983a 	sll	r3,r6,r21
  80dd90:	81c4d83a 	srl	r2,r16,r7
  80dd94:	a1e2d83a 	srl	r17,r20,r7
  80dd98:	a54c983a 	sll	r6,r20,r21
  80dd9c:	18aeb03a 	or	r23,r3,r2
  80dda0:	b828d43a 	srli	r20,r23,16
  80dda4:	b1c4d83a 	srl	r2,r22,r7
  80dda8:	8809883a 	mov	r4,r17
  80ddac:	a00b883a 	mov	r5,r20
  80ddb0:	308cb03a 	or	r6,r6,r2
  80ddb4:	d9c00315 	stw	r7,12(sp)
  80ddb8:	d9800215 	stw	r6,8(sp)
  80ddbc:	080e3100 	call	80e310 <__udivsi3>
  80ddc0:	8809883a 	mov	r4,r17
  80ddc4:	a00b883a 	mov	r5,r20
  80ddc8:	1039883a 	mov	fp,r2
  80ddcc:	080e3180 	call	80e318 <__umodsi3>
  80ddd0:	b8ffffcc 	andi	r3,r23,65535
  80ddd4:	d8c00415 	stw	r3,16(sp)
  80ddd8:	d9000217 	ldw	r4,8(sp)
  80dddc:	d9400417 	ldw	r5,16(sp)
  80dde0:	1004943a 	slli	r2,r2,16
  80dde4:	2006d43a 	srli	r3,r4,16
  80dde8:	8560983a 	sll	r16,r16,r21
  80ddec:	2f23383a 	mul	r17,r5,fp
  80ddf0:	10c4b03a 	or	r2,r2,r3
  80ddf4:	dc000015 	stw	r16,0(sp)
  80ddf8:	b56c983a 	sll	r22,r22,r21
  80ddfc:	1440032e 	bgeu	r2,r17,80de0c <__umoddi3+0x404>
  80de00:	15c5883a 	add	r2,r2,r23
  80de04:	e73fffc4 	addi	fp,fp,-1
  80de08:	15c05d2e 	bgeu	r2,r23,80df80 <__umoddi3+0x578>
  80de0c:	1463c83a 	sub	r17,r2,r17
  80de10:	8809883a 	mov	r4,r17
  80de14:	a00b883a 	mov	r5,r20
  80de18:	080e3100 	call	80e310 <__udivsi3>
  80de1c:	8809883a 	mov	r4,r17
  80de20:	a00b883a 	mov	r5,r20
  80de24:	1021883a 	mov	r16,r2
  80de28:	080e3180 	call	80e318 <__umodsi3>
  80de2c:	d8c00417 	ldw	r3,16(sp)
  80de30:	d9000217 	ldw	r4,8(sp)
  80de34:	1004943a 	slli	r2,r2,16
  80de38:	1c23383a 	mul	r17,r3,r16
  80de3c:	20ffffcc 	andi	r3,r4,65535
  80de40:	10ceb03a 	or	r7,r2,r3
  80de44:	3c40032e 	bgeu	r7,r17,80de54 <__umoddi3+0x44c>
  80de48:	3dcf883a 	add	r7,r7,r23
  80de4c:	843fffc4 	addi	r16,r16,-1
  80de50:	3dc0472e 	bgeu	r7,r23,80df70 <__umoddi3+0x568>
  80de54:	e004943a 	slli	r2,fp,16
  80de58:	d9400017 	ldw	r5,0(sp)
  80de5c:	3c4fc83a 	sub	r7,r7,r17
  80de60:	8084b03a 	or	r2,r16,r2
  80de64:	28ffffcc 	andi	r3,r5,65535
  80de68:	280cd43a 	srli	r6,r5,16
  80de6c:	100ad43a 	srli	r5,r2,16
  80de70:	10bfffcc 	andi	r2,r2,65535
  80de74:	10d1383a 	mul	r8,r2,r3
  80de78:	28c7383a 	mul	r3,r5,r3
  80de7c:	1185383a 	mul	r2,r2,r6
  80de80:	4008d43a 	srli	r4,r8,16
  80de84:	298b383a 	mul	r5,r5,r6
  80de88:	10c5883a 	add	r2,r2,r3
  80de8c:	2089883a 	add	r4,r4,r2
  80de90:	20c0022e 	bgeu	r4,r3,80de9c <__umoddi3+0x494>
  80de94:	00800074 	movhi	r2,1
  80de98:	288b883a 	add	r5,r5,r2
  80de9c:	2004d43a 	srli	r2,r4,16
  80dea0:	2008943a 	slli	r4,r4,16
  80dea4:	40ffffcc 	andi	r3,r8,65535
  80dea8:	288b883a 	add	r5,r5,r2
  80deac:	20c9883a 	add	r4,r4,r3
  80deb0:	39400b36 	bltu	r7,r5,80dee0 <__umoddi3+0x4d8>
  80deb4:	39403d26 	beq	r7,r5,80dfac <__umoddi3+0x5a4>
  80deb8:	394bc83a 	sub	r5,r7,r5
  80debc:	00000f06 	br	80defc <__umoddi3+0x4f4>
  80dec0:	30c5c83a 	sub	r2,r6,r3
  80dec4:	1839883a 	mov	fp,r3
  80dec8:	b084d83a 	srl	r2,r22,r2
  80decc:	a0c6983a 	sll	r3,r20,r3
  80ded0:	8720983a 	sll	r16,r16,fp
  80ded4:	b72c983a 	sll	r22,r22,fp
  80ded8:	18a8b03a 	or	r20,r3,r2
  80dedc:	003f3a06 	br	80dbc8 <__umoddi3+0x1c0>
  80dee0:	d8c00017 	ldw	r3,0(sp)
  80dee4:	20c5c83a 	sub	r2,r4,r3
  80dee8:	2089803a 	cmpltu	r4,r4,r2
  80deec:	2dc7c83a 	sub	r3,r5,r23
  80def0:	1907c83a 	sub	r3,r3,r4
  80def4:	38cbc83a 	sub	r5,r7,r3
  80def8:	1009883a 	mov	r4,r2
  80defc:	b105c83a 	sub	r2,r22,r4
  80df00:	b087803a 	cmpltu	r3,r22,r2
  80df04:	28c7c83a 	sub	r3,r5,r3
  80df08:	d9400317 	ldw	r5,12(sp)
  80df0c:	1544d83a 	srl	r2,r2,r21
  80df10:	1948983a 	sll	r4,r3,r5
  80df14:	1d46d83a 	srl	r3,r3,r21
  80df18:	20a4b03a 	or	r18,r4,r2
  80df1c:	9011883a 	mov	r8,r18
  80df20:	1813883a 	mov	r9,r3
  80df24:	003ef606 	br	80db00 <__umoddi3+0xf8>
  80df28:	01400604 	movi	r5,24
  80df2c:	2805883a 	mov	r2,r5
  80df30:	003ecc06 	br	80da64 <__umoddi3+0x5c>
  80df34:	01400204 	movi	r5,8
  80df38:	2805883a 	mov	r2,r5
  80df3c:	003ec906 	br	80da64 <__umoddi3+0x5c>
  80df40:	01400204 	movi	r5,8
  80df44:	2805883a 	mov	r2,r5
  80df48:	003f0106 	br	80db50 <__umoddi3+0x148>
  80df4c:	01400204 	movi	r5,8
  80df50:	2805883a 	mov	r2,r5
  80df54:	003f1206 	br	80dba0 <__umoddi3+0x198>
  80df58:	01400604 	movi	r5,24
  80df5c:	2805883a 	mov	r2,r5
  80df60:	003f0f06 	br	80dba0 <__umoddi3+0x198>
  80df64:	01400604 	movi	r5,24
  80df68:	2805883a 	mov	r2,r5
  80df6c:	003ef806 	br	80db50 <__umoddi3+0x148>
  80df70:	3c7fb82e 	bgeu	r7,r17,80de54 <__umoddi3+0x44c>
  80df74:	843fffc4 	addi	r16,r16,-1
  80df78:	3dcf883a 	add	r7,r7,r23
  80df7c:	003fb506 	br	80de54 <__umoddi3+0x44c>
  80df80:	147fa22e 	bgeu	r2,r17,80de0c <__umoddi3+0x404>
  80df84:	e73fffc4 	addi	fp,fp,-1
  80df88:	15c5883a 	add	r2,r2,r23
  80df8c:	003f9f06 	br	80de0c <__umoddi3+0x404>
  80df90:	147f692e 	bgeu	r2,r17,80dd38 <__umoddi3+0x330>
  80df94:	1405883a 	add	r2,r2,r16
  80df98:	003f6706 	br	80dd38 <__umoddi3+0x330>
  80df9c:	1405883a 	add	r2,r2,r16
  80dfa0:	003f1906 	br	80dc08 <__umoddi3+0x200>
  80dfa4:	1405883a 	add	r2,r2,r16
  80dfa8:	003ec906 	br	80dad0 <__umoddi3+0xc8>
  80dfac:	b13fcc36 	bltu	r22,r4,80dee0 <__umoddi3+0x4d8>
  80dfb0:	000b883a 	mov	r5,zero
  80dfb4:	003fd106 	br	80defc <__umoddi3+0x4f4>

0080dfb8 <__gedf2>:
  80dfb8:	deffef04 	addi	sp,sp,-68
  80dfbc:	dc400f15 	stw	r17,60(sp)
  80dfc0:	dc400404 	addi	r17,sp,16
  80dfc4:	2005883a 	mov	r2,r4
  80dfc8:	2807883a 	mov	r3,r5
  80dfcc:	dc000e15 	stw	r16,56(sp)
  80dfd0:	d809883a 	mov	r4,sp
  80dfd4:	880b883a 	mov	r5,r17
  80dfd8:	dc000904 	addi	r16,sp,36
  80dfdc:	d8c00115 	stw	r3,4(sp)
  80dfe0:	d8800015 	stw	r2,0(sp)
  80dfe4:	d9800215 	stw	r6,8(sp)
  80dfe8:	dfc01015 	stw	ra,64(sp)
  80dfec:	d9c00315 	stw	r7,12(sp)
  80dff0:	080516c0 	call	80516c <__unpack_d>
  80dff4:	d9000204 	addi	r4,sp,8
  80dff8:	800b883a 	mov	r5,r16
  80dffc:	080516c0 	call	80516c <__unpack_d>
  80e000:	d8800417 	ldw	r2,16(sp)
  80e004:	00c00044 	movi	r3,1
  80e008:	01bfffc4 	movi	r6,-1
  80e00c:	1880062e 	bgeu	r3,r2,80e028 <__gedf2+0x70>
  80e010:	d8800917 	ldw	r2,36(sp)
  80e014:	8809883a 	mov	r4,r17
  80e018:	800b883a 	mov	r5,r16
  80e01c:	1880022e 	bgeu	r3,r2,80e028 <__gedf2+0x70>
  80e020:	08052a40 	call	8052a4 <__fpcmp_parts_d>
  80e024:	100d883a 	mov	r6,r2
  80e028:	3005883a 	mov	r2,r6
  80e02c:	dfc01017 	ldw	ra,64(sp)
  80e030:	dc400f17 	ldw	r17,60(sp)
  80e034:	dc000e17 	ldw	r16,56(sp)
  80e038:	dec01104 	addi	sp,sp,68
  80e03c:	f800283a 	ret

0080e040 <__floatunsidf>:
  80e040:	defff204 	addi	sp,sp,-56
  80e044:	dfc00d15 	stw	ra,52(sp)
  80e048:	ddc00c15 	stw	r23,48(sp)
  80e04c:	dd800b15 	stw	r22,44(sp)
  80e050:	dd400a15 	stw	r21,40(sp)
  80e054:	dd000915 	stw	r20,36(sp)
  80e058:	dcc00815 	stw	r19,32(sp)
  80e05c:	dc800715 	stw	r18,28(sp)
  80e060:	dc400615 	stw	r17,24(sp)
  80e064:	dc000515 	stw	r16,20(sp)
  80e068:	d8000115 	stw	zero,4(sp)
  80e06c:	20000f1e 	bne	r4,zero,80e0ac <__floatunsidf+0x6c>
  80e070:	00800084 	movi	r2,2
  80e074:	d8800015 	stw	r2,0(sp)
  80e078:	d809883a 	mov	r4,sp
  80e07c:	0804e580 	call	804e58 <__pack_d>
  80e080:	dfc00d17 	ldw	ra,52(sp)
  80e084:	ddc00c17 	ldw	r23,48(sp)
  80e088:	dd800b17 	ldw	r22,44(sp)
  80e08c:	dd400a17 	ldw	r21,40(sp)
  80e090:	dd000917 	ldw	r20,36(sp)
  80e094:	dcc00817 	ldw	r19,32(sp)
  80e098:	dc800717 	ldw	r18,28(sp)
  80e09c:	dc400617 	ldw	r17,24(sp)
  80e0a0:	dc000517 	ldw	r16,20(sp)
  80e0a4:	dec00e04 	addi	sp,sp,56
  80e0a8:	f800283a 	ret
  80e0ac:	008000c4 	movi	r2,3
  80e0b0:	00c00f04 	movi	r3,60
  80e0b4:	002f883a 	mov	r23,zero
  80e0b8:	202d883a 	mov	r22,r4
  80e0bc:	d8800015 	stw	r2,0(sp)
  80e0c0:	d8c00215 	stw	r3,8(sp)
  80e0c4:	d9000315 	stw	r4,12(sp)
  80e0c8:	ddc00415 	stw	r23,16(sp)
  80e0cc:	0804dd80 	call	804dd8 <__clzsi2>
  80e0d0:	12400744 	addi	r9,r2,29
  80e0d4:	48000b16 	blt	r9,zero,80e104 <__floatunsidf+0xc4>
  80e0d8:	483fe726 	beq	r9,zero,80e078 <__floatunsidf+0x38>
  80e0dc:	10bfff44 	addi	r2,r2,-3
  80e0e0:	10002e16 	blt	r2,zero,80e19c <__floatunsidf+0x15c>
  80e0e4:	b0a2983a 	sll	r17,r22,r2
  80e0e8:	0021883a 	mov	r16,zero
  80e0ec:	d8800217 	ldw	r2,8(sp)
  80e0f0:	dc400415 	stw	r17,16(sp)
  80e0f4:	dc000315 	stw	r16,12(sp)
  80e0f8:	1245c83a 	sub	r2,r2,r9
  80e0fc:	d8800215 	stw	r2,8(sp)
  80e100:	003fdd06 	br	80e078 <__floatunsidf+0x38>
  80e104:	0255c83a 	sub	r10,zero,r9
  80e108:	51bff804 	addi	r6,r10,-32
  80e10c:	30001b16 	blt	r6,zero,80e17c <__floatunsidf+0x13c>
  80e110:	b9a8d83a 	srl	r20,r23,r6
  80e114:	002b883a 	mov	r21,zero
  80e118:	000f883a 	mov	r7,zero
  80e11c:	01000044 	movi	r4,1
  80e120:	0011883a 	mov	r8,zero
  80e124:	30002516 	blt	r6,zero,80e1bc <__floatunsidf+0x17c>
  80e128:	21a6983a 	sll	r19,r4,r6
  80e12c:	0025883a 	mov	r18,zero
  80e130:	00bfffc4 	movi	r2,-1
  80e134:	9089883a 	add	r4,r18,r2
  80e138:	988b883a 	add	r5,r19,r2
  80e13c:	248d803a 	cmpltu	r6,r4,r18
  80e140:	314b883a 	add	r5,r6,r5
  80e144:	b104703a 	and	r2,r22,r4
  80e148:	b946703a 	and	r3,r23,r5
  80e14c:	10c4b03a 	or	r2,r2,r3
  80e150:	10000226 	beq	r2,zero,80e15c <__floatunsidf+0x11c>
  80e154:	01c00044 	movi	r7,1
  80e158:	0011883a 	mov	r8,zero
  80e15c:	d9000217 	ldw	r4,8(sp)
  80e160:	a1c4b03a 	or	r2,r20,r7
  80e164:	aa06b03a 	or	r3,r21,r8
  80e168:	2249c83a 	sub	r4,r4,r9
  80e16c:	d8c00415 	stw	r3,16(sp)
  80e170:	d9000215 	stw	r4,8(sp)
  80e174:	d8800315 	stw	r2,12(sp)
  80e178:	003fbf06 	br	80e078 <__floatunsidf+0x38>
  80e17c:	bdc7883a 	add	r3,r23,r23
  80e180:	008007c4 	movi	r2,31
  80e184:	1285c83a 	sub	r2,r2,r10
  80e188:	1886983a 	sll	r3,r3,r2
  80e18c:	b2a8d83a 	srl	r20,r22,r10
  80e190:	baaad83a 	srl	r21,r23,r10
  80e194:	1d28b03a 	or	r20,r3,r20
  80e198:	003fdf06 	br	80e118 <__floatunsidf+0xd8>
  80e19c:	b006d07a 	srli	r3,r22,1
  80e1a0:	008007c4 	movi	r2,31
  80e1a4:	1245c83a 	sub	r2,r2,r9
  80e1a8:	1886d83a 	srl	r3,r3,r2
  80e1ac:	ba62983a 	sll	r17,r23,r9
  80e1b0:	b260983a 	sll	r16,r22,r9
  80e1b4:	1c62b03a 	or	r17,r3,r17
  80e1b8:	003fcc06 	br	80e0ec <__floatunsidf+0xac>
  80e1bc:	2006d07a 	srli	r3,r4,1
  80e1c0:	008007c4 	movi	r2,31
  80e1c4:	1285c83a 	sub	r2,r2,r10
  80e1c8:	18a6d83a 	srl	r19,r3,r2
  80e1cc:	22a4983a 	sll	r18,r4,r10
  80e1d0:	003fd706 	br	80e130 <__floatunsidf+0xf0>

0080e1d4 <udivmodsi4>:
  80e1d4:	29001b2e 	bgeu	r5,r4,80e244 <udivmodsi4+0x70>
  80e1d8:	28001a16 	blt	r5,zero,80e244 <udivmodsi4+0x70>
  80e1dc:	00800044 	movi	r2,1
  80e1e0:	0007883a 	mov	r3,zero
  80e1e4:	01c007c4 	movi	r7,31
  80e1e8:	00000306 	br	80e1f8 <udivmodsi4+0x24>
  80e1ec:	19c01326 	beq	r3,r7,80e23c <udivmodsi4+0x68>
  80e1f0:	18c00044 	addi	r3,r3,1
  80e1f4:	28000416 	blt	r5,zero,80e208 <udivmodsi4+0x34>
  80e1f8:	294b883a 	add	r5,r5,r5
  80e1fc:	1085883a 	add	r2,r2,r2
  80e200:	293ffa36 	bltu	r5,r4,80e1ec <udivmodsi4+0x18>
  80e204:	10000d26 	beq	r2,zero,80e23c <udivmodsi4+0x68>
  80e208:	0007883a 	mov	r3,zero
  80e20c:	21400236 	bltu	r4,r5,80e218 <udivmodsi4+0x44>
  80e210:	2149c83a 	sub	r4,r4,r5
  80e214:	1886b03a 	or	r3,r3,r2
  80e218:	1004d07a 	srli	r2,r2,1
  80e21c:	280ad07a 	srli	r5,r5,1
  80e220:	103ffa1e 	bne	r2,zero,80e20c <udivmodsi4+0x38>
  80e224:	30000226 	beq	r6,zero,80e230 <udivmodsi4+0x5c>
  80e228:	2005883a 	mov	r2,r4
  80e22c:	f800283a 	ret
  80e230:	1809883a 	mov	r4,r3
  80e234:	2005883a 	mov	r2,r4
  80e238:	f800283a 	ret
  80e23c:	0007883a 	mov	r3,zero
  80e240:	003ff806 	br	80e224 <udivmodsi4+0x50>
  80e244:	00800044 	movi	r2,1
  80e248:	0007883a 	mov	r3,zero
  80e24c:	003fef06 	br	80e20c <udivmodsi4+0x38>

0080e250 <__divsi3>:
  80e250:	defffe04 	addi	sp,sp,-8
  80e254:	dc000015 	stw	r16,0(sp)
  80e258:	dfc00115 	stw	ra,4(sp)
  80e25c:	0021883a 	mov	r16,zero
  80e260:	20000c16 	blt	r4,zero,80e294 <__divsi3+0x44>
  80e264:	000d883a 	mov	r6,zero
  80e268:	28000e16 	blt	r5,zero,80e2a4 <__divsi3+0x54>
  80e26c:	080e1d40 	call	80e1d4 <udivmodsi4>
  80e270:	1007883a 	mov	r3,r2
  80e274:	8005003a 	cmpeq	r2,r16,zero
  80e278:	1000011e 	bne	r2,zero,80e280 <__divsi3+0x30>
  80e27c:	00c7c83a 	sub	r3,zero,r3
  80e280:	1805883a 	mov	r2,r3
  80e284:	dfc00117 	ldw	ra,4(sp)
  80e288:	dc000017 	ldw	r16,0(sp)
  80e28c:	dec00204 	addi	sp,sp,8
  80e290:	f800283a 	ret
  80e294:	0109c83a 	sub	r4,zero,r4
  80e298:	04000044 	movi	r16,1
  80e29c:	000d883a 	mov	r6,zero
  80e2a0:	283ff20e 	bge	r5,zero,80e26c <__divsi3+0x1c>
  80e2a4:	014bc83a 	sub	r5,zero,r5
  80e2a8:	8021003a 	cmpeq	r16,r16,zero
  80e2ac:	003fef06 	br	80e26c <__divsi3+0x1c>

0080e2b0 <__modsi3>:
  80e2b0:	deffff04 	addi	sp,sp,-4
  80e2b4:	dfc00015 	stw	ra,0(sp)
  80e2b8:	01800044 	movi	r6,1
  80e2bc:	2807883a 	mov	r3,r5
  80e2c0:	20000416 	blt	r4,zero,80e2d4 <__modsi3+0x24>
  80e2c4:	28000c16 	blt	r5,zero,80e2f8 <__modsi3+0x48>
  80e2c8:	dfc00017 	ldw	ra,0(sp)
  80e2cc:	dec00104 	addi	sp,sp,4
  80e2d0:	080e1d41 	jmpi	80e1d4 <udivmodsi4>
  80e2d4:	0109c83a 	sub	r4,zero,r4
  80e2d8:	28000b16 	blt	r5,zero,80e308 <__modsi3+0x58>
  80e2dc:	180b883a 	mov	r5,r3
  80e2e0:	01800044 	movi	r6,1
  80e2e4:	080e1d40 	call	80e1d4 <udivmodsi4>
  80e2e8:	0085c83a 	sub	r2,zero,r2
  80e2ec:	dfc00017 	ldw	ra,0(sp)
  80e2f0:	dec00104 	addi	sp,sp,4
  80e2f4:	f800283a 	ret
  80e2f8:	014bc83a 	sub	r5,zero,r5
  80e2fc:	dfc00017 	ldw	ra,0(sp)
  80e300:	dec00104 	addi	sp,sp,4
  80e304:	080e1d41 	jmpi	80e1d4 <udivmodsi4>
  80e308:	0147c83a 	sub	r3,zero,r5
  80e30c:	003ff306 	br	80e2dc <__modsi3+0x2c>

0080e310 <__udivsi3>:
  80e310:	000d883a 	mov	r6,zero
  80e314:	080e1d41 	jmpi	80e1d4 <udivmodsi4>

0080e318 <__umodsi3>:
  80e318:	01800044 	movi	r6,1
  80e31c:	080e1d41 	jmpi	80e1d4 <udivmodsi4>

0080e320 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e320:	defff804 	addi	sp,sp,-32
  80e324:	dfc00715 	stw	ra,28(sp)
  80e328:	df000615 	stw	fp,24(sp)
  80e32c:	df000604 	addi	fp,sp,24
  80e330:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e334:	e0bffc17 	ldw	r2,-16(fp)
  80e338:	1004803a 	cmplt	r2,r2,zero
  80e33c:	1000081e 	bne	r2,zero,80e360 <close+0x40>
  80e340:	e0bffc17 	ldw	r2,-16(fp)
  80e344:	10800324 	muli	r2,r2,12
  80e348:	1007883a 	mov	r3,r2
  80e34c:	00802074 	movhi	r2,129
  80e350:	108e5a04 	addi	r2,r2,14696
  80e354:	1887883a 	add	r3,r3,r2
  80e358:	e0ffff15 	stw	r3,-4(fp)
  80e35c:	00000106 	br	80e364 <close+0x44>
  80e360:	e03fff15 	stw	zero,-4(fp)
  80e364:	e0bfff17 	ldw	r2,-4(fp)
  80e368:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80e36c:	e0bffb17 	ldw	r2,-20(fp)
  80e370:	1005003a 	cmpeq	r2,r2,zero
  80e374:	10001d1e 	bne	r2,zero,80e3ec <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e378:	e0bffb17 	ldw	r2,-20(fp)
  80e37c:	10800017 	ldw	r2,0(r2)
  80e380:	10800417 	ldw	r2,16(r2)
  80e384:	1005003a 	cmpeq	r2,r2,zero
  80e388:	1000071e 	bne	r2,zero,80e3a8 <close+0x88>
  80e38c:	e0bffb17 	ldw	r2,-20(fp)
  80e390:	10800017 	ldw	r2,0(r2)
  80e394:	10800417 	ldw	r2,16(r2)
  80e398:	e13ffb17 	ldw	r4,-20(fp)
  80e39c:	103ee83a 	callr	r2
  80e3a0:	e0bffe15 	stw	r2,-8(fp)
  80e3a4:	00000106 	br	80e3ac <close+0x8c>
  80e3a8:	e03ffe15 	stw	zero,-8(fp)
  80e3ac:	e0bffe17 	ldw	r2,-8(fp)
  80e3b0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e3b4:	e13ffc17 	ldw	r4,-16(fp)
  80e3b8:	080ee280 	call	80ee28 <alt_release_fd>
    if (rval < 0)
  80e3bc:	e0bffa17 	ldw	r2,-24(fp)
  80e3c0:	1004403a 	cmpge	r2,r2,zero
  80e3c4:	1000071e 	bne	r2,zero,80e3e4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80e3c8:	080e41c0 	call	80e41c <alt_get_errno>
  80e3cc:	e0fffa17 	ldw	r3,-24(fp)
  80e3d0:	00c7c83a 	sub	r3,zero,r3
  80e3d4:	10c00015 	stw	r3,0(r2)
      return -1;
  80e3d8:	00bfffc4 	movi	r2,-1
  80e3dc:	e0bffd15 	stw	r2,-12(fp)
  80e3e0:	00000806 	br	80e404 <close+0xe4>
    }
    return 0;
  80e3e4:	e03ffd15 	stw	zero,-12(fp)
  80e3e8:	00000606 	br	80e404 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e3ec:	080e41c0 	call	80e41c <alt_get_errno>
  80e3f0:	1007883a 	mov	r3,r2
  80e3f4:	00801444 	movi	r2,81
  80e3f8:	18800015 	stw	r2,0(r3)
    return -1;
  80e3fc:	00bfffc4 	movi	r2,-1
  80e400:	e0bffd15 	stw	r2,-12(fp)
  80e404:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80e408:	e037883a 	mov	sp,fp
  80e40c:	dfc00117 	ldw	ra,4(sp)
  80e410:	df000017 	ldw	fp,0(sp)
  80e414:	dec00204 	addi	sp,sp,8
  80e418:	f800283a 	ret

0080e41c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e41c:	defffd04 	addi	sp,sp,-12
  80e420:	dfc00215 	stw	ra,8(sp)
  80e424:	df000115 	stw	fp,4(sp)
  80e428:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e42c:	00802074 	movhi	r2,129
  80e430:	10935704 	addi	r2,r2,19804
  80e434:	10800017 	ldw	r2,0(r2)
  80e438:	1005003a 	cmpeq	r2,r2,zero
  80e43c:	1000061e 	bne	r2,zero,80e458 <alt_get_errno+0x3c>
  80e440:	00802074 	movhi	r2,129
  80e444:	10935704 	addi	r2,r2,19804
  80e448:	10800017 	ldw	r2,0(r2)
  80e44c:	103ee83a 	callr	r2
  80e450:	e0bfff15 	stw	r2,-4(fp)
  80e454:	00000306 	br	80e464 <alt_get_errno+0x48>
  80e458:	00802074 	movhi	r2,129
  80e45c:	109a7104 	addi	r2,r2,27076
  80e460:	e0bfff15 	stw	r2,-4(fp)
  80e464:	e0bfff17 	ldw	r2,-4(fp)
}
  80e468:	e037883a 	mov	sp,fp
  80e46c:	dfc00117 	ldw	ra,4(sp)
  80e470:	df000017 	ldw	fp,0(sp)
  80e474:	dec00204 	addi	sp,sp,8
  80e478:	f800283a 	ret

0080e47c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e47c:	defffc04 	addi	sp,sp,-16
  80e480:	df000315 	stw	fp,12(sp)
  80e484:	df000304 	addi	fp,sp,12
  80e488:	e13ffd15 	stw	r4,-12(fp)
  80e48c:	e17ffe15 	stw	r5,-8(fp)
  80e490:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80e494:	e0bfff17 	ldw	r2,-4(fp)
}
  80e498:	e037883a 	mov	sp,fp
  80e49c:	df000017 	ldw	fp,0(sp)
  80e4a0:	dec00104 	addi	sp,sp,4
  80e4a4:	f800283a 	ret

0080e4a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e4a8:	defff904 	addi	sp,sp,-28
  80e4ac:	dfc00615 	stw	ra,24(sp)
  80e4b0:	df000515 	stw	fp,20(sp)
  80e4b4:	df000504 	addi	fp,sp,20
  80e4b8:	e13ffc15 	stw	r4,-16(fp)
  80e4bc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e4c0:	e0bffc17 	ldw	r2,-16(fp)
  80e4c4:	1004803a 	cmplt	r2,r2,zero
  80e4c8:	1000081e 	bne	r2,zero,80e4ec <fstat+0x44>
  80e4cc:	e0bffc17 	ldw	r2,-16(fp)
  80e4d0:	10800324 	muli	r2,r2,12
  80e4d4:	1007883a 	mov	r3,r2
  80e4d8:	00802074 	movhi	r2,129
  80e4dc:	108e5a04 	addi	r2,r2,14696
  80e4e0:	1887883a 	add	r3,r3,r2
  80e4e4:	e0ffff15 	stw	r3,-4(fp)
  80e4e8:	00000106 	br	80e4f0 <fstat+0x48>
  80e4ec:	e03fff15 	stw	zero,-4(fp)
  80e4f0:	e0bfff17 	ldw	r2,-4(fp)
  80e4f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e4f8:	e0bffb17 	ldw	r2,-20(fp)
  80e4fc:	1005003a 	cmpeq	r2,r2,zero
  80e500:	1000121e 	bne	r2,zero,80e54c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e504:	e0bffb17 	ldw	r2,-20(fp)
  80e508:	10800017 	ldw	r2,0(r2)
  80e50c:	10800817 	ldw	r2,32(r2)
  80e510:	1005003a 	cmpeq	r2,r2,zero
  80e514:	1000081e 	bne	r2,zero,80e538 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80e518:	e0bffb17 	ldw	r2,-20(fp)
  80e51c:	10800017 	ldw	r2,0(r2)
  80e520:	10800817 	ldw	r2,32(r2)
  80e524:	e13ffb17 	ldw	r4,-20(fp)
  80e528:	e17ffd17 	ldw	r5,-12(fp)
  80e52c:	103ee83a 	callr	r2
  80e530:	e0bffe15 	stw	r2,-8(fp)
  80e534:	00000b06 	br	80e564 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e538:	e0fffd17 	ldw	r3,-12(fp)
  80e53c:	00880004 	movi	r2,8192
  80e540:	18800115 	stw	r2,4(r3)
      return 0;
  80e544:	e03ffe15 	stw	zero,-8(fp)
  80e548:	00000606 	br	80e564 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e54c:	080e57c0 	call	80e57c <alt_get_errno>
  80e550:	1007883a 	mov	r3,r2
  80e554:	00801444 	movi	r2,81
  80e558:	18800015 	stw	r2,0(r3)
    return -1;
  80e55c:	00bfffc4 	movi	r2,-1
  80e560:	e0bffe15 	stw	r2,-8(fp)
  80e564:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80e568:	e037883a 	mov	sp,fp
  80e56c:	dfc00117 	ldw	ra,4(sp)
  80e570:	df000017 	ldw	fp,0(sp)
  80e574:	dec00204 	addi	sp,sp,8
  80e578:	f800283a 	ret

0080e57c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e57c:	defffd04 	addi	sp,sp,-12
  80e580:	dfc00215 	stw	ra,8(sp)
  80e584:	df000115 	stw	fp,4(sp)
  80e588:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e58c:	00802074 	movhi	r2,129
  80e590:	10935704 	addi	r2,r2,19804
  80e594:	10800017 	ldw	r2,0(r2)
  80e598:	1005003a 	cmpeq	r2,r2,zero
  80e59c:	1000061e 	bne	r2,zero,80e5b8 <alt_get_errno+0x3c>
  80e5a0:	00802074 	movhi	r2,129
  80e5a4:	10935704 	addi	r2,r2,19804
  80e5a8:	10800017 	ldw	r2,0(r2)
  80e5ac:	103ee83a 	callr	r2
  80e5b0:	e0bfff15 	stw	r2,-4(fp)
  80e5b4:	00000306 	br	80e5c4 <alt_get_errno+0x48>
  80e5b8:	00802074 	movhi	r2,129
  80e5bc:	109a7104 	addi	r2,r2,27076
  80e5c0:	e0bfff15 	stw	r2,-4(fp)
  80e5c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80e5c8:	e037883a 	mov	sp,fp
  80e5cc:	dfc00117 	ldw	ra,4(sp)
  80e5d0:	df000017 	ldw	fp,0(sp)
  80e5d4:	dec00204 	addi	sp,sp,8
  80e5d8:	f800283a 	ret

0080e5dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80e5dc:	deffeb04 	addi	sp,sp,-84
  80e5e0:	dfc01415 	stw	ra,80(sp)
  80e5e4:	df001315 	stw	fp,76(sp)
  80e5e8:	df001304 	addi	fp,sp,76
  80e5ec:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e5f0:	e0bffd17 	ldw	r2,-12(fp)
  80e5f4:	1004803a 	cmplt	r2,r2,zero
  80e5f8:	1000081e 	bne	r2,zero,80e61c <isatty+0x40>
  80e5fc:	e0bffd17 	ldw	r2,-12(fp)
  80e600:	10800324 	muli	r2,r2,12
  80e604:	1007883a 	mov	r3,r2
  80e608:	00802074 	movhi	r2,129
  80e60c:	108e5a04 	addi	r2,r2,14696
  80e610:	1887883a 	add	r3,r3,r2
  80e614:	e0ffff15 	stw	r3,-4(fp)
  80e618:	00000106 	br	80e620 <isatty+0x44>
  80e61c:	e03fff15 	stw	zero,-4(fp)
  80e620:	e0bfff17 	ldw	r2,-4(fp)
  80e624:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80e628:	e0bfed17 	ldw	r2,-76(fp)
  80e62c:	1005003a 	cmpeq	r2,r2,zero
  80e630:	10000f1e 	bne	r2,zero,80e670 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80e634:	e0bfed17 	ldw	r2,-76(fp)
  80e638:	10800017 	ldw	r2,0(r2)
  80e63c:	10800817 	ldw	r2,32(r2)
  80e640:	1004c03a 	cmpne	r2,r2,zero
  80e644:	1000031e 	bne	r2,zero,80e654 <isatty+0x78>
    {
      return 1;
  80e648:	00800044 	movi	r2,1
  80e64c:	e0bffe15 	stw	r2,-8(fp)
  80e650:	00000c06 	br	80e684 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80e654:	e17fee04 	addi	r5,fp,-72
  80e658:	e13ffd17 	ldw	r4,-12(fp)
  80e65c:	080e4a80 	call	80e4a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80e660:	e0bfef17 	ldw	r2,-68(fp)
  80e664:	10880020 	cmpeqi	r2,r2,8192
  80e668:	e0bffe15 	stw	r2,-8(fp)
  80e66c:	00000506 	br	80e684 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e670:	080e69c0 	call	80e69c <alt_get_errno>
  80e674:	1007883a 	mov	r3,r2
  80e678:	00801444 	movi	r2,81
  80e67c:	18800015 	stw	r2,0(r3)
    return 0;
  80e680:	e03ffe15 	stw	zero,-8(fp)
  80e684:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80e688:	e037883a 	mov	sp,fp
  80e68c:	dfc00117 	ldw	ra,4(sp)
  80e690:	df000017 	ldw	fp,0(sp)
  80e694:	dec00204 	addi	sp,sp,8
  80e698:	f800283a 	ret

0080e69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e69c:	defffd04 	addi	sp,sp,-12
  80e6a0:	dfc00215 	stw	ra,8(sp)
  80e6a4:	df000115 	stw	fp,4(sp)
  80e6a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e6ac:	00802074 	movhi	r2,129
  80e6b0:	10935704 	addi	r2,r2,19804
  80e6b4:	10800017 	ldw	r2,0(r2)
  80e6b8:	1005003a 	cmpeq	r2,r2,zero
  80e6bc:	1000061e 	bne	r2,zero,80e6d8 <alt_get_errno+0x3c>
  80e6c0:	00802074 	movhi	r2,129
  80e6c4:	10935704 	addi	r2,r2,19804
  80e6c8:	10800017 	ldw	r2,0(r2)
  80e6cc:	103ee83a 	callr	r2
  80e6d0:	e0bfff15 	stw	r2,-4(fp)
  80e6d4:	00000306 	br	80e6e4 <alt_get_errno+0x48>
  80e6d8:	00802074 	movhi	r2,129
  80e6dc:	109a7104 	addi	r2,r2,27076
  80e6e0:	e0bfff15 	stw	r2,-4(fp)
  80e6e4:	e0bfff17 	ldw	r2,-4(fp)
}
  80e6e8:	e037883a 	mov	sp,fp
  80e6ec:	dfc00117 	ldw	ra,4(sp)
  80e6f0:	df000017 	ldw	fp,0(sp)
  80e6f4:	dec00204 	addi	sp,sp,8
  80e6f8:	f800283a 	ret

0080e6fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80e6fc:	defffe04 	addi	sp,sp,-8
  80e700:	dfc00115 	stw	ra,4(sp)
  80e704:	df000015 	stw	fp,0(sp)
  80e708:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80e70c:	01002074 	movhi	r4,129
  80e710:	21135e04 	addi	r4,r4,19832
  80e714:	01402074 	movhi	r5,129
  80e718:	294c4b04 	addi	r5,r5,12588
  80e71c:	01802074 	movhi	r6,129
  80e720:	31935e04 	addi	r6,r6,19832
  80e724:	080e77c0 	call	80e77c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80e728:	01002034 	movhi	r4,128
  80e72c:	21000804 	addi	r4,r4,32
  80e730:	01402034 	movhi	r5,128
  80e734:	29400804 	addi	r5,r5,32
  80e738:	01802034 	movhi	r6,128
  80e73c:	31806d04 	addi	r6,r6,436
  80e740:	080e77c0 	call	80e77c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80e744:	01002074 	movhi	r4,129
  80e748:	210a2604 	addi	r4,r4,10392
  80e74c:	01402074 	movhi	r5,129
  80e750:	294a2604 	addi	r5,r5,10392
  80e754:	01802074 	movhi	r6,129
  80e758:	318c4b04 	addi	r6,r6,12588
  80e75c:	080e77c0 	call	80e77c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80e760:	08117b40 	call	8117b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80e764:	0811c180 	call	811c18 <alt_icache_flush_all>
}
  80e768:	e037883a 	mov	sp,fp
  80e76c:	dfc00117 	ldw	ra,4(sp)
  80e770:	df000017 	ldw	fp,0(sp)
  80e774:	dec00204 	addi	sp,sp,8
  80e778:	f800283a 	ret

0080e77c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80e77c:	defffc04 	addi	sp,sp,-16
  80e780:	df000315 	stw	fp,12(sp)
  80e784:	df000304 	addi	fp,sp,12
  80e788:	e13ffd15 	stw	r4,-12(fp)
  80e78c:	e17ffe15 	stw	r5,-8(fp)
  80e790:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80e794:	e0fffe17 	ldw	r3,-8(fp)
  80e798:	e0bffd17 	ldw	r2,-12(fp)
  80e79c:	18800e26 	beq	r3,r2,80e7d8 <alt_load_section+0x5c>
  {
    while( to != end )
  80e7a0:	00000a06 	br	80e7cc <alt_load_section+0x50>
    {
      *to++ = *from++;
  80e7a4:	e0bffd17 	ldw	r2,-12(fp)
  80e7a8:	10c00017 	ldw	r3,0(r2)
  80e7ac:	e0bffe17 	ldw	r2,-8(fp)
  80e7b0:	10c00015 	stw	r3,0(r2)
  80e7b4:	e0bffe17 	ldw	r2,-8(fp)
  80e7b8:	10800104 	addi	r2,r2,4
  80e7bc:	e0bffe15 	stw	r2,-8(fp)
  80e7c0:	e0bffd17 	ldw	r2,-12(fp)
  80e7c4:	10800104 	addi	r2,r2,4
  80e7c8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80e7cc:	e0fffe17 	ldw	r3,-8(fp)
  80e7d0:	e0bfff17 	ldw	r2,-4(fp)
  80e7d4:	18bff31e 	bne	r3,r2,80e7a4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80e7d8:	e037883a 	mov	sp,fp
  80e7dc:	df000017 	ldw	fp,0(sp)
  80e7e0:	dec00104 	addi	sp,sp,4
  80e7e4:	f800283a 	ret

0080e7e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80e7e8:	defff804 	addi	sp,sp,-32
  80e7ec:	dfc00715 	stw	ra,28(sp)
  80e7f0:	df000615 	stw	fp,24(sp)
  80e7f4:	df000604 	addi	fp,sp,24
  80e7f8:	e13ffc15 	stw	r4,-16(fp)
  80e7fc:	e17ffd15 	stw	r5,-12(fp)
  80e800:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80e804:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e808:	e0bffc17 	ldw	r2,-16(fp)
  80e80c:	1004803a 	cmplt	r2,r2,zero
  80e810:	1000081e 	bne	r2,zero,80e834 <lseek+0x4c>
  80e814:	e0bffc17 	ldw	r2,-16(fp)
  80e818:	10800324 	muli	r2,r2,12
  80e81c:	1007883a 	mov	r3,r2
  80e820:	00802074 	movhi	r2,129
  80e824:	108e5a04 	addi	r2,r2,14696
  80e828:	1887883a 	add	r3,r3,r2
  80e82c:	e0ffff15 	stw	r3,-4(fp)
  80e830:	00000106 	br	80e838 <lseek+0x50>
  80e834:	e03fff15 	stw	zero,-4(fp)
  80e838:	e0bfff17 	ldw	r2,-4(fp)
  80e83c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80e840:	e0bffb17 	ldw	r2,-20(fp)
  80e844:	1005003a 	cmpeq	r2,r2,zero
  80e848:	1000111e 	bne	r2,zero,80e890 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80e84c:	e0bffb17 	ldw	r2,-20(fp)
  80e850:	10800017 	ldw	r2,0(r2)
  80e854:	10800717 	ldw	r2,28(r2)
  80e858:	1005003a 	cmpeq	r2,r2,zero
  80e85c:	1000091e 	bne	r2,zero,80e884 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80e860:	e0bffb17 	ldw	r2,-20(fp)
  80e864:	10800017 	ldw	r2,0(r2)
  80e868:	10800717 	ldw	r2,28(r2)
  80e86c:	e13ffb17 	ldw	r4,-20(fp)
  80e870:	e17ffd17 	ldw	r5,-12(fp)
  80e874:	e1bffe17 	ldw	r6,-8(fp)
  80e878:	103ee83a 	callr	r2
  80e87c:	e0bffa15 	stw	r2,-24(fp)
  80e880:	00000506 	br	80e898 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80e884:	00bfde84 	movi	r2,-134
  80e888:	e0bffa15 	stw	r2,-24(fp)
  80e88c:	00000206 	br	80e898 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80e890:	00bfebc4 	movi	r2,-81
  80e894:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80e898:	e0bffa17 	ldw	r2,-24(fp)
  80e89c:	1004403a 	cmpge	r2,r2,zero
  80e8a0:	1000071e 	bne	r2,zero,80e8c0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80e8a4:	080e8d80 	call	80e8d8 <alt_get_errno>
  80e8a8:	1007883a 	mov	r3,r2
  80e8ac:	e0bffa17 	ldw	r2,-24(fp)
  80e8b0:	0085c83a 	sub	r2,zero,r2
  80e8b4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80e8b8:	00bfffc4 	movi	r2,-1
  80e8bc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80e8c0:	e0bffa17 	ldw	r2,-24(fp)
}
  80e8c4:	e037883a 	mov	sp,fp
  80e8c8:	dfc00117 	ldw	ra,4(sp)
  80e8cc:	df000017 	ldw	fp,0(sp)
  80e8d0:	dec00204 	addi	sp,sp,8
  80e8d4:	f800283a 	ret

0080e8d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e8d8:	defffd04 	addi	sp,sp,-12
  80e8dc:	dfc00215 	stw	ra,8(sp)
  80e8e0:	df000115 	stw	fp,4(sp)
  80e8e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80e8e8:	00802074 	movhi	r2,129
  80e8ec:	10935704 	addi	r2,r2,19804
  80e8f0:	10800017 	ldw	r2,0(r2)
  80e8f4:	1005003a 	cmpeq	r2,r2,zero
  80e8f8:	1000061e 	bne	r2,zero,80e914 <alt_get_errno+0x3c>
  80e8fc:	00802074 	movhi	r2,129
  80e900:	10935704 	addi	r2,r2,19804
  80e904:	10800017 	ldw	r2,0(r2)
  80e908:	103ee83a 	callr	r2
  80e90c:	e0bfff15 	stw	r2,-4(fp)
  80e910:	00000306 	br	80e920 <alt_get_errno+0x48>
  80e914:	00802074 	movhi	r2,129
  80e918:	109a7104 	addi	r2,r2,27076
  80e91c:	e0bfff15 	stw	r2,-4(fp)
  80e920:	e0bfff17 	ldw	r2,-4(fp)
}
  80e924:	e037883a 	mov	sp,fp
  80e928:	dfc00117 	ldw	ra,4(sp)
  80e92c:	df000017 	ldw	fp,0(sp)
  80e930:	dec00204 	addi	sp,sp,8
  80e934:	f800283a 	ret

0080e938 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80e938:	defffd04 	addi	sp,sp,-12
  80e93c:	dfc00215 	stw	ra,8(sp)
  80e940:	df000115 	stw	fp,4(sp)
  80e944:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80e948:	0009883a 	mov	r4,zero
  80e94c:	080f0c40 	call	80f0c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80e950:	080f0f80 	call	80f0f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80e954:	01002074 	movhi	r4,129
  80e958:	210b9504 	addi	r4,r4,11860
  80e95c:	01402074 	movhi	r5,129
  80e960:	294b9a04 	addi	r5,r5,11880
  80e964:	01802074 	movhi	r6,129
  80e968:	318b9504 	addi	r6,r6,11860
  80e96c:	0811fd80 	call	811fd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80e970:	08118e40 	call	8118e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80e974:	01002074 	movhi	r4,129
  80e978:	21065204 	addi	r4,r4,6472
  80e97c:	08124200 	call	812420 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80e980:	d1272d17 	ldw	r4,-25420(gp)
  80e984:	d1672e17 	ldw	r5,-25416(gp)
  80e988:	d1a72f17 	ldw	r6,-25412(gp)
  80e98c:	0801c840 	call	801c84 <main>
  80e990:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80e994:	01000044 	movi	r4,1
  80e998:	080e3200 	call	80e320 <close>
  exit (result);
  80e99c:	e13fff17 	ldw	r4,-4(fp)
  80e9a0:	08124340 	call	812434 <exit>

0080e9a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80e9a4:	defffe04 	addi	sp,sp,-8
  80e9a8:	df000115 	stw	fp,4(sp)
  80e9ac:	df000104 	addi	fp,sp,4
  80e9b0:	e13fff15 	stw	r4,-4(fp)
}
  80e9b4:	e037883a 	mov	sp,fp
  80e9b8:	df000017 	ldw	fp,0(sp)
  80e9bc:	dec00104 	addi	sp,sp,4
  80e9c0:	f800283a 	ret

0080e9c4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80e9c4:	defffe04 	addi	sp,sp,-8
  80e9c8:	df000115 	stw	fp,4(sp)
  80e9cc:	df000104 	addi	fp,sp,4
  80e9d0:	e13fff15 	stw	r4,-4(fp)
}
  80e9d4:	e037883a 	mov	sp,fp
  80e9d8:	df000017 	ldw	fp,0(sp)
  80e9dc:	dec00104 	addi	sp,sp,4
  80e9e0:	f800283a 	ret

0080e9e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80e9e4:	defffc04 	addi	sp,sp,-16
  80e9e8:	df000315 	stw	fp,12(sp)
  80e9ec:	df000304 	addi	fp,sp,12
  80e9f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80e9f4:	e0bffe17 	ldw	r2,-8(fp)
  80e9f8:	10800217 	ldw	r2,8(r2)
  80e9fc:	10d00034 	orhi	r3,r2,16384
  80ea00:	e0bffe17 	ldw	r2,-8(fp)
  80ea04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ea08:	e03ffd15 	stw	zero,-12(fp)
  80ea0c:	00002006 	br	80ea90 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80ea10:	e0bffd17 	ldw	r2,-12(fp)
  80ea14:	00c02074 	movhi	r3,129
  80ea18:	18ce5a04 	addi	r3,r3,14696
  80ea1c:	10800324 	muli	r2,r2,12
  80ea20:	10c5883a 	add	r2,r2,r3
  80ea24:	10c00017 	ldw	r3,0(r2)
  80ea28:	e0bffe17 	ldw	r2,-8(fp)
  80ea2c:	10800017 	ldw	r2,0(r2)
  80ea30:	1880141e 	bne	r3,r2,80ea84 <alt_file_locked+0xa0>
  80ea34:	e0bffd17 	ldw	r2,-12(fp)
  80ea38:	00c02074 	movhi	r3,129
  80ea3c:	18ce5a04 	addi	r3,r3,14696
  80ea40:	10800324 	muli	r2,r2,12
  80ea44:	10c5883a 	add	r2,r2,r3
  80ea48:	10800204 	addi	r2,r2,8
  80ea4c:	10800017 	ldw	r2,0(r2)
  80ea50:	1004403a 	cmpge	r2,r2,zero
  80ea54:	10000b1e 	bne	r2,zero,80ea84 <alt_file_locked+0xa0>
  80ea58:	e0bffd17 	ldw	r2,-12(fp)
  80ea5c:	10800324 	muli	r2,r2,12
  80ea60:	1007883a 	mov	r3,r2
  80ea64:	00802074 	movhi	r2,129
  80ea68:	108e5a04 	addi	r2,r2,14696
  80ea6c:	1887883a 	add	r3,r3,r2
  80ea70:	e0bffe17 	ldw	r2,-8(fp)
  80ea74:	18800326 	beq	r3,r2,80ea84 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80ea78:	00bffcc4 	movi	r2,-13
  80ea7c:	e0bfff15 	stw	r2,-4(fp)
  80ea80:	00000a06 	br	80eaac <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ea84:	e0bffd17 	ldw	r2,-12(fp)
  80ea88:	10800044 	addi	r2,r2,1
  80ea8c:	e0bffd15 	stw	r2,-12(fp)
  80ea90:	00802074 	movhi	r2,129
  80ea94:	10935604 	addi	r2,r2,19800
  80ea98:	10800017 	ldw	r2,0(r2)
  80ea9c:	1007883a 	mov	r3,r2
  80eaa0:	e0bffd17 	ldw	r2,-12(fp)
  80eaa4:	18bfda2e 	bgeu	r3,r2,80ea10 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80eaa8:	e03fff15 	stw	zero,-4(fp)
  80eaac:	e0bfff17 	ldw	r2,-4(fp)
}
  80eab0:	e037883a 	mov	sp,fp
  80eab4:	df000017 	ldw	fp,0(sp)
  80eab8:	dec00104 	addi	sp,sp,4
  80eabc:	f800283a 	ret

0080eac0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80eac0:	defff404 	addi	sp,sp,-48
  80eac4:	dfc00b15 	stw	ra,44(sp)
  80eac8:	df000a15 	stw	fp,40(sp)
  80eacc:	df000a04 	addi	fp,sp,40
  80ead0:	e13ffb15 	stw	r4,-20(fp)
  80ead4:	e17ffc15 	stw	r5,-16(fp)
  80ead8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80eadc:	00bfffc4 	movi	r2,-1
  80eae0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80eae4:	00bffb44 	movi	r2,-19
  80eae8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80eaec:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80eaf0:	e13ffb17 	ldw	r4,-20(fp)
  80eaf4:	01402074 	movhi	r5,129
  80eaf8:	29535404 	addi	r5,r5,19792
  80eafc:	08119ac0 	call	8119ac <alt_find_dev>
  80eb00:	e0bffa15 	stw	r2,-24(fp)
  80eb04:	e0bffa17 	ldw	r2,-24(fp)
  80eb08:	1004c03a 	cmpne	r2,r2,zero
  80eb0c:	1000051e 	bne	r2,zero,80eb24 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80eb10:	e13ffb17 	ldw	r4,-20(fp)
  80eb14:	0811a400 	call	811a40 <alt_find_file>
  80eb18:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80eb1c:	00800044 	movi	r2,1
  80eb20:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80eb24:	e0bffa17 	ldw	r2,-24(fp)
  80eb28:	1005003a 	cmpeq	r2,r2,zero
  80eb2c:	1000301e 	bne	r2,zero,80ebf0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80eb30:	e13ffa17 	ldw	r4,-24(fp)
  80eb34:	0811b600 	call	811b60 <alt_get_fd>
  80eb38:	e0bff815 	stw	r2,-32(fp)
  80eb3c:	e0bff817 	ldw	r2,-32(fp)
  80eb40:	1004403a 	cmpge	r2,r2,zero
  80eb44:	1000031e 	bne	r2,zero,80eb54 <open+0x94>
    {
      status = index;
  80eb48:	e0bff817 	ldw	r2,-32(fp)
  80eb4c:	e0bff715 	stw	r2,-36(fp)
  80eb50:	00002906 	br	80ebf8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80eb54:	e0bff817 	ldw	r2,-32(fp)
  80eb58:	10800324 	muli	r2,r2,12
  80eb5c:	1007883a 	mov	r3,r2
  80eb60:	00802074 	movhi	r2,129
  80eb64:	108e5a04 	addi	r2,r2,14696
  80eb68:	1885883a 	add	r2,r3,r2
  80eb6c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80eb70:	e0fffc17 	ldw	r3,-16(fp)
  80eb74:	00900034 	movhi	r2,16384
  80eb78:	10bfffc4 	addi	r2,r2,-1
  80eb7c:	1886703a 	and	r3,r3,r2
  80eb80:	e0bff917 	ldw	r2,-28(fp)
  80eb84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80eb88:	e0bff617 	ldw	r2,-40(fp)
  80eb8c:	1004c03a 	cmpne	r2,r2,zero
  80eb90:	1000061e 	bne	r2,zero,80ebac <open+0xec>
  80eb94:	e13ff917 	ldw	r4,-28(fp)
  80eb98:	080e9e40 	call	80e9e4 <alt_file_locked>
  80eb9c:	e0bff715 	stw	r2,-36(fp)
  80eba0:	e0bff717 	ldw	r2,-36(fp)
  80eba4:	1004803a 	cmplt	r2,r2,zero
  80eba8:	1000131e 	bne	r2,zero,80ebf8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80ebac:	e0bffa17 	ldw	r2,-24(fp)
  80ebb0:	10800317 	ldw	r2,12(r2)
  80ebb4:	1005003a 	cmpeq	r2,r2,zero
  80ebb8:	1000091e 	bne	r2,zero,80ebe0 <open+0x120>
  80ebbc:	e0bffa17 	ldw	r2,-24(fp)
  80ebc0:	10800317 	ldw	r2,12(r2)
  80ebc4:	e13ff917 	ldw	r4,-28(fp)
  80ebc8:	e17ffb17 	ldw	r5,-20(fp)
  80ebcc:	e1bffc17 	ldw	r6,-16(fp)
  80ebd0:	e1fffd17 	ldw	r7,-12(fp)
  80ebd4:	103ee83a 	callr	r2
  80ebd8:	e0bfff15 	stw	r2,-4(fp)
  80ebdc:	00000106 	br	80ebe4 <open+0x124>
  80ebe0:	e03fff15 	stw	zero,-4(fp)
  80ebe4:	e0bfff17 	ldw	r2,-4(fp)
  80ebe8:	e0bff715 	stw	r2,-36(fp)
  80ebec:	00000206 	br	80ebf8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80ebf0:	00bffb44 	movi	r2,-19
  80ebf4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80ebf8:	e0bff717 	ldw	r2,-36(fp)
  80ebfc:	1004403a 	cmpge	r2,r2,zero
  80ec00:	1000091e 	bne	r2,zero,80ec28 <open+0x168>
  {
    alt_release_fd (index);  
  80ec04:	e13ff817 	ldw	r4,-32(fp)
  80ec08:	080ee280 	call	80ee28 <alt_release_fd>
    ALT_ERRNO = -status;
  80ec0c:	080ec480 	call	80ec48 <alt_get_errno>
  80ec10:	e0fff717 	ldw	r3,-36(fp)
  80ec14:	00c7c83a 	sub	r3,zero,r3
  80ec18:	10c00015 	stw	r3,0(r2)
    return -1;
  80ec1c:	00bfffc4 	movi	r2,-1
  80ec20:	e0bffe15 	stw	r2,-8(fp)
  80ec24:	00000206 	br	80ec30 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80ec28:	e0bff817 	ldw	r2,-32(fp)
  80ec2c:	e0bffe15 	stw	r2,-8(fp)
  80ec30:	e0bffe17 	ldw	r2,-8(fp)
}
  80ec34:	e037883a 	mov	sp,fp
  80ec38:	dfc00117 	ldw	ra,4(sp)
  80ec3c:	df000017 	ldw	fp,0(sp)
  80ec40:	dec00204 	addi	sp,sp,8
  80ec44:	f800283a 	ret

0080ec48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ec48:	defffd04 	addi	sp,sp,-12
  80ec4c:	dfc00215 	stw	ra,8(sp)
  80ec50:	df000115 	stw	fp,4(sp)
  80ec54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ec58:	00802074 	movhi	r2,129
  80ec5c:	10935704 	addi	r2,r2,19804
  80ec60:	10800017 	ldw	r2,0(r2)
  80ec64:	1005003a 	cmpeq	r2,r2,zero
  80ec68:	1000061e 	bne	r2,zero,80ec84 <alt_get_errno+0x3c>
  80ec6c:	00802074 	movhi	r2,129
  80ec70:	10935704 	addi	r2,r2,19804
  80ec74:	10800017 	ldw	r2,0(r2)
  80ec78:	103ee83a 	callr	r2
  80ec7c:	e0bfff15 	stw	r2,-4(fp)
  80ec80:	00000306 	br	80ec90 <alt_get_errno+0x48>
  80ec84:	00802074 	movhi	r2,129
  80ec88:	109a7104 	addi	r2,r2,27076
  80ec8c:	e0bfff15 	stw	r2,-4(fp)
  80ec90:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec94:	e037883a 	mov	sp,fp
  80ec98:	dfc00117 	ldw	ra,4(sp)
  80ec9c:	df000017 	ldw	fp,0(sp)
  80eca0:	dec00204 	addi	sp,sp,8
  80eca4:	f800283a 	ret

0080eca8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80eca8:	defff704 	addi	sp,sp,-36
  80ecac:	dfc00815 	stw	ra,32(sp)
  80ecb0:	df000715 	stw	fp,28(sp)
  80ecb4:	df000704 	addi	fp,sp,28
  80ecb8:	e13ffb15 	stw	r4,-20(fp)
  80ecbc:	e17ffc15 	stw	r5,-16(fp)
  80ecc0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ecc4:	e0bffb17 	ldw	r2,-20(fp)
  80ecc8:	1004803a 	cmplt	r2,r2,zero
  80eccc:	1000081e 	bne	r2,zero,80ecf0 <read+0x48>
  80ecd0:	e0bffb17 	ldw	r2,-20(fp)
  80ecd4:	10800324 	muli	r2,r2,12
  80ecd8:	1007883a 	mov	r3,r2
  80ecdc:	00802074 	movhi	r2,129
  80ece0:	108e5a04 	addi	r2,r2,14696
  80ece4:	1887883a 	add	r3,r3,r2
  80ece8:	e0ffff15 	stw	r3,-4(fp)
  80ecec:	00000106 	br	80ecf4 <read+0x4c>
  80ecf0:	e03fff15 	stw	zero,-4(fp)
  80ecf4:	e0bfff17 	ldw	r2,-4(fp)
  80ecf8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80ecfc:	e0bffa17 	ldw	r2,-24(fp)
  80ed00:	1005003a 	cmpeq	r2,r2,zero
  80ed04:	1000241e 	bne	r2,zero,80ed98 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80ed08:	e0bffa17 	ldw	r2,-24(fp)
  80ed0c:	10800217 	ldw	r2,8(r2)
  80ed10:	108000cc 	andi	r2,r2,3
  80ed14:	10800060 	cmpeqi	r2,r2,1
  80ed18:	10001a1e 	bne	r2,zero,80ed84 <read+0xdc>
  80ed1c:	e0bffa17 	ldw	r2,-24(fp)
  80ed20:	10800017 	ldw	r2,0(r2)
  80ed24:	10800517 	ldw	r2,20(r2)
  80ed28:	1005003a 	cmpeq	r2,r2,zero
  80ed2c:	1000151e 	bne	r2,zero,80ed84 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80ed30:	e0bffa17 	ldw	r2,-24(fp)
  80ed34:	10800017 	ldw	r2,0(r2)
  80ed38:	10800517 	ldw	r2,20(r2)
  80ed3c:	e17ffc17 	ldw	r5,-16(fp)
  80ed40:	e1bffd17 	ldw	r6,-12(fp)
  80ed44:	e13ffa17 	ldw	r4,-24(fp)
  80ed48:	103ee83a 	callr	r2
  80ed4c:	e0bff915 	stw	r2,-28(fp)
  80ed50:	e0bff917 	ldw	r2,-28(fp)
  80ed54:	1004403a 	cmpge	r2,r2,zero
  80ed58:	1000071e 	bne	r2,zero,80ed78 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80ed5c:	080edc80 	call	80edc8 <alt_get_errno>
  80ed60:	e0fff917 	ldw	r3,-28(fp)
  80ed64:	00c7c83a 	sub	r3,zero,r3
  80ed68:	10c00015 	stw	r3,0(r2)
          return -1;
  80ed6c:	00bfffc4 	movi	r2,-1
  80ed70:	e0bffe15 	stw	r2,-8(fp)
  80ed74:	00000e06 	br	80edb0 <read+0x108>
        }
        return rval;
  80ed78:	e0bff917 	ldw	r2,-28(fp)
  80ed7c:	e0bffe15 	stw	r2,-8(fp)
  80ed80:	00000b06 	br	80edb0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80ed84:	080edc80 	call	80edc8 <alt_get_errno>
  80ed88:	1007883a 	mov	r3,r2
  80ed8c:	00800344 	movi	r2,13
  80ed90:	18800015 	stw	r2,0(r3)
  80ed94:	00000406 	br	80eda8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80ed98:	080edc80 	call	80edc8 <alt_get_errno>
  80ed9c:	1007883a 	mov	r3,r2
  80eda0:	00801444 	movi	r2,81
  80eda4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80eda8:	00bfffc4 	movi	r2,-1
  80edac:	e0bffe15 	stw	r2,-8(fp)
  80edb0:	e0bffe17 	ldw	r2,-8(fp)
}
  80edb4:	e037883a 	mov	sp,fp
  80edb8:	dfc00117 	ldw	ra,4(sp)
  80edbc:	df000017 	ldw	fp,0(sp)
  80edc0:	dec00204 	addi	sp,sp,8
  80edc4:	f800283a 	ret

0080edc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80edc8:	defffd04 	addi	sp,sp,-12
  80edcc:	dfc00215 	stw	ra,8(sp)
  80edd0:	df000115 	stw	fp,4(sp)
  80edd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80edd8:	00802074 	movhi	r2,129
  80eddc:	10935704 	addi	r2,r2,19804
  80ede0:	10800017 	ldw	r2,0(r2)
  80ede4:	1005003a 	cmpeq	r2,r2,zero
  80ede8:	1000061e 	bne	r2,zero,80ee04 <alt_get_errno+0x3c>
  80edec:	00802074 	movhi	r2,129
  80edf0:	10935704 	addi	r2,r2,19804
  80edf4:	10800017 	ldw	r2,0(r2)
  80edf8:	103ee83a 	callr	r2
  80edfc:	e0bfff15 	stw	r2,-4(fp)
  80ee00:	00000306 	br	80ee10 <alt_get_errno+0x48>
  80ee04:	00802074 	movhi	r2,129
  80ee08:	109a7104 	addi	r2,r2,27076
  80ee0c:	e0bfff15 	stw	r2,-4(fp)
  80ee10:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee14:	e037883a 	mov	sp,fp
  80ee18:	dfc00117 	ldw	ra,4(sp)
  80ee1c:	df000017 	ldw	fp,0(sp)
  80ee20:	dec00204 	addi	sp,sp,8
  80ee24:	f800283a 	ret

0080ee28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ee28:	defffe04 	addi	sp,sp,-8
  80ee2c:	df000115 	stw	fp,4(sp)
  80ee30:	df000104 	addi	fp,sp,4
  80ee34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ee38:	e0bfff17 	ldw	r2,-4(fp)
  80ee3c:	108000d0 	cmplti	r2,r2,3
  80ee40:	10000d1e 	bne	r2,zero,80ee78 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ee44:	e0bfff17 	ldw	r2,-4(fp)
  80ee48:	00c02074 	movhi	r3,129
  80ee4c:	18ce5a04 	addi	r3,r3,14696
  80ee50:	10800324 	muli	r2,r2,12
  80ee54:	10c5883a 	add	r2,r2,r3
  80ee58:	10800204 	addi	r2,r2,8
  80ee5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ee60:	e0bfff17 	ldw	r2,-4(fp)
  80ee64:	00c02074 	movhi	r3,129
  80ee68:	18ce5a04 	addi	r3,r3,14696
  80ee6c:	10800324 	muli	r2,r2,12
  80ee70:	10c5883a 	add	r2,r2,r3
  80ee74:	10000015 	stw	zero,0(r2)
  }
}
  80ee78:	e037883a 	mov	sp,fp
  80ee7c:	df000017 	ldw	fp,0(sp)
  80ee80:	dec00104 	addi	sp,sp,4
  80ee84:	f800283a 	ret

0080ee88 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ee88:	defff804 	addi	sp,sp,-32
  80ee8c:	df000715 	stw	fp,28(sp)
  80ee90:	df000704 	addi	fp,sp,28
  80ee94:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee98:	0005303a 	rdctl	r2,status
  80ee9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eea0:	e0fffb17 	ldw	r3,-20(fp)
  80eea4:	00bfff84 	movi	r2,-2
  80eea8:	1884703a 	and	r2,r3,r2
  80eeac:	1001703a 	wrctl	status,r2
  
  return context;
  80eeb0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80eeb4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80eeb8:	d0a00d17 	ldw	r2,-32716(gp)
  80eebc:	10c000c4 	addi	r3,r2,3
  80eec0:	00bfff04 	movi	r2,-4
  80eec4:	1884703a 	and	r2,r3,r2
  80eec8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80eecc:	d0e00d17 	ldw	r3,-32716(gp)
  80eed0:	e0bffe17 	ldw	r2,-8(fp)
  80eed4:	1887883a 	add	r3,r3,r2
  80eed8:	00804034 	movhi	r2,256
  80eedc:	10800004 	addi	r2,r2,0
  80eee0:	10c0072e 	bgeu	r2,r3,80ef00 <sbrk+0x78>
  80eee4:	e0bffd17 	ldw	r2,-12(fp)
  80eee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eeec:	e0bffa17 	ldw	r2,-24(fp)
  80eef0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80eef4:	00bfffc4 	movi	r2,-1
  80eef8:	e0bfff15 	stw	r2,-4(fp)
  80eefc:	00000c06 	br	80ef30 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80ef00:	d0a00d17 	ldw	r2,-32716(gp)
  80ef04:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80ef08:	d0e00d17 	ldw	r3,-32716(gp)
  80ef0c:	e0bffe17 	ldw	r2,-8(fp)
  80ef10:	1885883a 	add	r2,r3,r2
  80ef14:	d0a00d15 	stw	r2,-32716(gp)
  80ef18:	e0bffd17 	ldw	r2,-12(fp)
  80ef1c:	e0bff915 	stw	r2,-28(fp)
  80ef20:	e0bff917 	ldw	r2,-28(fp)
  80ef24:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ef28:	e0bffc17 	ldw	r2,-16(fp)
  80ef2c:	e0bfff15 	stw	r2,-4(fp)
  80ef30:	e0bfff17 	ldw	r2,-4(fp)
} 
  80ef34:	e037883a 	mov	sp,fp
  80ef38:	df000017 	ldw	fp,0(sp)
  80ef3c:	dec00104 	addi	sp,sp,4
  80ef40:	f800283a 	ret

0080ef44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80ef44:	defff704 	addi	sp,sp,-36
  80ef48:	dfc00815 	stw	ra,32(sp)
  80ef4c:	df000715 	stw	fp,28(sp)
  80ef50:	df000704 	addi	fp,sp,28
  80ef54:	e13ffb15 	stw	r4,-20(fp)
  80ef58:	e17ffc15 	stw	r5,-16(fp)
  80ef5c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ef60:	e0bffb17 	ldw	r2,-20(fp)
  80ef64:	1004803a 	cmplt	r2,r2,zero
  80ef68:	1000081e 	bne	r2,zero,80ef8c <write+0x48>
  80ef6c:	e0bffb17 	ldw	r2,-20(fp)
  80ef70:	10800324 	muli	r2,r2,12
  80ef74:	1007883a 	mov	r3,r2
  80ef78:	00802074 	movhi	r2,129
  80ef7c:	108e5a04 	addi	r2,r2,14696
  80ef80:	1887883a 	add	r3,r3,r2
  80ef84:	e0ffff15 	stw	r3,-4(fp)
  80ef88:	00000106 	br	80ef90 <write+0x4c>
  80ef8c:	e03fff15 	stw	zero,-4(fp)
  80ef90:	e0bfff17 	ldw	r2,-4(fp)
  80ef94:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80ef98:	e0bffa17 	ldw	r2,-24(fp)
  80ef9c:	1005003a 	cmpeq	r2,r2,zero
  80efa0:	1000241e 	bne	r2,zero,80f034 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80efa4:	e0bffa17 	ldw	r2,-24(fp)
  80efa8:	10800217 	ldw	r2,8(r2)
  80efac:	108000cc 	andi	r2,r2,3
  80efb0:	1005003a 	cmpeq	r2,r2,zero
  80efb4:	10001a1e 	bne	r2,zero,80f020 <write+0xdc>
  80efb8:	e0bffa17 	ldw	r2,-24(fp)
  80efbc:	10800017 	ldw	r2,0(r2)
  80efc0:	10800617 	ldw	r2,24(r2)
  80efc4:	1005003a 	cmpeq	r2,r2,zero
  80efc8:	1000151e 	bne	r2,zero,80f020 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80efcc:	e0bffa17 	ldw	r2,-24(fp)
  80efd0:	10800017 	ldw	r2,0(r2)
  80efd4:	10800617 	ldw	r2,24(r2)
  80efd8:	e17ffc17 	ldw	r5,-16(fp)
  80efdc:	e1bffd17 	ldw	r6,-12(fp)
  80efe0:	e13ffa17 	ldw	r4,-24(fp)
  80efe4:	103ee83a 	callr	r2
  80efe8:	e0bff915 	stw	r2,-28(fp)
  80efec:	e0bff917 	ldw	r2,-28(fp)
  80eff0:	1004403a 	cmpge	r2,r2,zero
  80eff4:	1000071e 	bne	r2,zero,80f014 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80eff8:	080f0640 	call	80f064 <alt_get_errno>
  80effc:	e0fff917 	ldw	r3,-28(fp)
  80f000:	00c7c83a 	sub	r3,zero,r3
  80f004:	10c00015 	stw	r3,0(r2)
        return -1;
  80f008:	00bfffc4 	movi	r2,-1
  80f00c:	e0bffe15 	stw	r2,-8(fp)
  80f010:	00000e06 	br	80f04c <write+0x108>
      }
      return rval;
  80f014:	e0bff917 	ldw	r2,-28(fp)
  80f018:	e0bffe15 	stw	r2,-8(fp)
  80f01c:	00000b06 	br	80f04c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f020:	080f0640 	call	80f064 <alt_get_errno>
  80f024:	1007883a 	mov	r3,r2
  80f028:	00800344 	movi	r2,13
  80f02c:	18800015 	stw	r2,0(r3)
  80f030:	00000406 	br	80f044 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f034:	080f0640 	call	80f064 <alt_get_errno>
  80f038:	1007883a 	mov	r3,r2
  80f03c:	00801444 	movi	r2,81
  80f040:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f044:	00bfffc4 	movi	r2,-1
  80f048:	e0bffe15 	stw	r2,-8(fp)
  80f04c:	e0bffe17 	ldw	r2,-8(fp)
}
  80f050:	e037883a 	mov	sp,fp
  80f054:	dfc00117 	ldw	ra,4(sp)
  80f058:	df000017 	ldw	fp,0(sp)
  80f05c:	dec00204 	addi	sp,sp,8
  80f060:	f800283a 	ret

0080f064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f064:	defffd04 	addi	sp,sp,-12
  80f068:	dfc00215 	stw	ra,8(sp)
  80f06c:	df000115 	stw	fp,4(sp)
  80f070:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80f074:	00802074 	movhi	r2,129
  80f078:	10935704 	addi	r2,r2,19804
  80f07c:	10800017 	ldw	r2,0(r2)
  80f080:	1005003a 	cmpeq	r2,r2,zero
  80f084:	1000061e 	bne	r2,zero,80f0a0 <alt_get_errno+0x3c>
  80f088:	00802074 	movhi	r2,129
  80f08c:	10935704 	addi	r2,r2,19804
  80f090:	10800017 	ldw	r2,0(r2)
  80f094:	103ee83a 	callr	r2
  80f098:	e0bfff15 	stw	r2,-4(fp)
  80f09c:	00000306 	br	80f0ac <alt_get_errno+0x48>
  80f0a0:	00802074 	movhi	r2,129
  80f0a4:	109a7104 	addi	r2,r2,27076
  80f0a8:	e0bfff15 	stw	r2,-4(fp)
  80f0ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80f0b0:	e037883a 	mov	sp,fp
  80f0b4:	dfc00117 	ldw	ra,4(sp)
  80f0b8:	df000017 	ldw	fp,0(sp)
  80f0bc:	dec00204 	addi	sp,sp,8
  80f0c0:	f800283a 	ret

0080f0c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80f0c4:	defffd04 	addi	sp,sp,-12
  80f0c8:	dfc00215 	stw	ra,8(sp)
  80f0cc:	df000115 	stw	fp,4(sp)
  80f0d0:	df000104 	addi	fp,sp,4
  80f0d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_NIOS, cpu_nios);
  80f0d8:	08122240 	call	812224 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80f0dc:	00800044 	movi	r2,1
  80f0e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80f0e4:	e037883a 	mov	sp,fp
  80f0e8:	dfc00117 	ldw	ra,4(sp)
  80f0ec:	df000017 	ldw	fp,0(sp)
  80f0f0:	dec00204 	addi	sp,sp,8
  80f0f4:	f800283a 	ret

0080f0f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80f0f8:	defffe04 	addi	sp,sp,-8
  80f0fc:	dfc00115 	stw	ra,4(sp)
  80f100:	df000015 	stw	fp,0(sp)
  80f104:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80f108:	01004034 	movhi	r4,256
  80f10c:	21040804 	addi	r4,r4,4128
  80f110:	000b883a 	mov	r5,zero
  80f114:	01800084 	movi	r6,2
  80f118:	01c01904 	movi	r7,100
  80f11c:	0810c200 	call	810c20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80f120:	01002074 	movhi	r4,129
  80f124:	210ec404 	addi	r4,r4,15120
  80f128:	000b883a 	mov	r5,zero
  80f12c:	000d883a 	mov	r6,zero
  80f130:	080f30c0 	call	80f30c <altera_avalon_jtag_uart_init>
  80f134:	01002074 	movhi	r4,129
  80f138:	210eba04 	addi	r4,r4,15080
  80f13c:	080f18c0 	call	80f18c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
  80f140:	01002074 	movhi	r4,129
  80f144:	2112dc04 	addi	r4,r4,19312
  80f148:	0810a1c0 	call	810a1c <altera_avalon_lcd_16207_init>
  80f14c:	01002074 	movhi	r4,129
  80f150:	2112d204 	addi	r4,r4,19272
  80f154:	080f18c0 	call	80f18c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_RS232, uart_RS232);
  80f158:	01002074 	movhi	r4,129
  80f15c:	21132404 	addi	r4,r4,19600
  80f160:	000b883a 	mov	r5,zero
  80f164:	01800044 	movi	r6,1
  80f168:	0810da80 	call	810da8 <altera_avalon_uart_init>
  80f16c:	01002074 	movhi	r4,129
  80f170:	21131a04 	addi	r4,r4,19560
  80f174:	080f18c0 	call	80f18c <alt_dev_reg>
}
  80f178:	e037883a 	mov	sp,fp
  80f17c:	dfc00117 	ldw	ra,4(sp)
  80f180:	df000017 	ldw	fp,0(sp)
  80f184:	dec00204 	addi	sp,sp,8
  80f188:	f800283a 	ret

0080f18c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80f18c:	defffd04 	addi	sp,sp,-12
  80f190:	dfc00215 	stw	ra,8(sp)
  80f194:	df000115 	stw	fp,4(sp)
  80f198:	df000104 	addi	fp,sp,4
  80f19c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80f1a0:	e13fff17 	ldw	r4,-4(fp)
  80f1a4:	01402074 	movhi	r5,129
  80f1a8:	29535404 	addi	r5,r5,19792
  80f1ac:	08117d00 	call	8117d0 <alt_dev_llist_insert>
}
  80f1b0:	e037883a 	mov	sp,fp
  80f1b4:	dfc00117 	ldw	ra,4(sp)
  80f1b8:	df000017 	ldw	fp,0(sp)
  80f1bc:	dec00204 	addi	sp,sp,8
  80f1c0:	f800283a 	ret

0080f1c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f1c4:	defffa04 	addi	sp,sp,-24
  80f1c8:	dfc00515 	stw	ra,20(sp)
  80f1cc:	df000415 	stw	fp,16(sp)
  80f1d0:	df000404 	addi	fp,sp,16
  80f1d4:	e13ffd15 	stw	r4,-12(fp)
  80f1d8:	e17ffe15 	stw	r5,-8(fp)
  80f1dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f1e0:	e0bffd17 	ldw	r2,-12(fp)
  80f1e4:	10800017 	ldw	r2,0(r2)
  80f1e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80f1ec:	e0bffc17 	ldw	r2,-16(fp)
  80f1f0:	11000a04 	addi	r4,r2,40
  80f1f4:	e0bffd17 	ldw	r2,-12(fp)
  80f1f8:	11c00217 	ldw	r7,8(r2)
  80f1fc:	e17ffe17 	ldw	r5,-8(fp)
  80f200:	e1bfff17 	ldw	r6,-4(fp)
  80f204:	080f80c0 	call	80f80c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80f208:	e037883a 	mov	sp,fp
  80f20c:	dfc00117 	ldw	ra,4(sp)
  80f210:	df000017 	ldw	fp,0(sp)
  80f214:	dec00204 	addi	sp,sp,8
  80f218:	f800283a 	ret

0080f21c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80f21c:	defffa04 	addi	sp,sp,-24
  80f220:	dfc00515 	stw	ra,20(sp)
  80f224:	df000415 	stw	fp,16(sp)
  80f228:	df000404 	addi	fp,sp,16
  80f22c:	e13ffd15 	stw	r4,-12(fp)
  80f230:	e17ffe15 	stw	r5,-8(fp)
  80f234:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f238:	e0bffd17 	ldw	r2,-12(fp)
  80f23c:	10800017 	ldw	r2,0(r2)
  80f240:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80f244:	e0bffc17 	ldw	r2,-16(fp)
  80f248:	11000a04 	addi	r4,r2,40
  80f24c:	e0bffd17 	ldw	r2,-12(fp)
  80f250:	11c00217 	ldw	r7,8(r2)
  80f254:	e17ffe17 	ldw	r5,-8(fp)
  80f258:	e1bfff17 	ldw	r6,-4(fp)
  80f25c:	080fa300 	call	80fa30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80f260:	e037883a 	mov	sp,fp
  80f264:	dfc00117 	ldw	ra,4(sp)
  80f268:	df000017 	ldw	fp,0(sp)
  80f26c:	dec00204 	addi	sp,sp,8
  80f270:	f800283a 	ret

0080f274 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80f274:	defffc04 	addi	sp,sp,-16
  80f278:	dfc00315 	stw	ra,12(sp)
  80f27c:	df000215 	stw	fp,8(sp)
  80f280:	df000204 	addi	fp,sp,8
  80f284:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f288:	e0bfff17 	ldw	r2,-4(fp)
  80f28c:	10800017 	ldw	r2,0(r2)
  80f290:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80f294:	e0bffe17 	ldw	r2,-8(fp)
  80f298:	11000a04 	addi	r4,r2,40
  80f29c:	e0bfff17 	ldw	r2,-4(fp)
  80f2a0:	11400217 	ldw	r5,8(r2)
  80f2a4:	080f6a40 	call	80f6a4 <altera_avalon_jtag_uart_close>
}
  80f2a8:	e037883a 	mov	sp,fp
  80f2ac:	dfc00117 	ldw	ra,4(sp)
  80f2b0:	df000017 	ldw	fp,0(sp)
  80f2b4:	dec00204 	addi	sp,sp,8
  80f2b8:	f800283a 	ret

0080f2bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80f2bc:	defffa04 	addi	sp,sp,-24
  80f2c0:	dfc00515 	stw	ra,20(sp)
  80f2c4:	df000415 	stw	fp,16(sp)
  80f2c8:	df000404 	addi	fp,sp,16
  80f2cc:	e13ffd15 	stw	r4,-12(fp)
  80f2d0:	e17ffe15 	stw	r5,-8(fp)
  80f2d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80f2d8:	e0bffd17 	ldw	r2,-12(fp)
  80f2dc:	10800017 	ldw	r2,0(r2)
  80f2e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80f2e4:	e0bffc17 	ldw	r2,-16(fp)
  80f2e8:	11000a04 	addi	r4,r2,40
  80f2ec:	e17ffe17 	ldw	r5,-8(fp)
  80f2f0:	e1bfff17 	ldw	r6,-4(fp)
  80f2f4:	080f7180 	call	80f718 <altera_avalon_jtag_uart_ioctl>
}
  80f2f8:	e037883a 	mov	sp,fp
  80f2fc:	dfc00117 	ldw	ra,4(sp)
  80f300:	df000017 	ldw	fp,0(sp)
  80f304:	dec00204 	addi	sp,sp,8
  80f308:	f800283a 	ret

0080f30c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80f30c:	defffa04 	addi	sp,sp,-24
  80f310:	dfc00515 	stw	ra,20(sp)
  80f314:	df000415 	stw	fp,16(sp)
  80f318:	df000404 	addi	fp,sp,16
  80f31c:	e13ffd15 	stw	r4,-12(fp)
  80f320:	e17ffe15 	stw	r5,-8(fp)
  80f324:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f328:	e0fffd17 	ldw	r3,-12(fp)
  80f32c:	00800044 	movi	r2,1
  80f330:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80f334:	e0bffd17 	ldw	r2,-12(fp)
  80f338:	10800017 	ldw	r2,0(r2)
  80f33c:	11000104 	addi	r4,r2,4
  80f340:	e0bffd17 	ldw	r2,-12(fp)
  80f344:	10800817 	ldw	r2,32(r2)
  80f348:	1007883a 	mov	r3,r2
  80f34c:	2005883a 	mov	r2,r4
  80f350:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80f354:	e13ffe17 	ldw	r4,-8(fp)
  80f358:	e17fff17 	ldw	r5,-4(fp)
  80f35c:	d8000015 	stw	zero,0(sp)
  80f360:	01802074 	movhi	r6,129
  80f364:	31bcf304 	addi	r6,r6,-3124
  80f368:	e1fffd17 	ldw	r7,-12(fp)
  80f36c:	0811c480 	call	811c48 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80f370:	e0bffd17 	ldw	r2,-12(fp)
  80f374:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f378:	e0bffd17 	ldw	r2,-12(fp)
  80f37c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f380:	00802074 	movhi	r2,129
  80f384:	109a7c04 	addi	r2,r2,27120
  80f388:	10800017 	ldw	r2,0(r2)
  80f38c:	100b883a 	mov	r5,r2
  80f390:	01802074 	movhi	r6,129
  80f394:	31bd7d04 	addi	r6,r6,-2572
  80f398:	e1fffd17 	ldw	r7,-12(fp)
  80f39c:	08116600 	call	811660 <alt_alarm_start>
  80f3a0:	1004403a 	cmpge	r2,r2,zero
  80f3a4:	1000041e 	bne	r2,zero,80f3b8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f3a8:	e0fffd17 	ldw	r3,-12(fp)
  80f3ac:	00a00034 	movhi	r2,32768
  80f3b0:	10bfffc4 	addi	r2,r2,-1
  80f3b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f3b8:	e037883a 	mov	sp,fp
  80f3bc:	dfc00117 	ldw	ra,4(sp)
  80f3c0:	df000017 	ldw	fp,0(sp)
  80f3c4:	dec00204 	addi	sp,sp,8
  80f3c8:	f800283a 	ret

0080f3cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f3cc:	defff804 	addi	sp,sp,-32
  80f3d0:	df000715 	stw	fp,28(sp)
  80f3d4:	df000704 	addi	fp,sp,28
  80f3d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f3dc:	e0bfff17 	ldw	r2,-4(fp)
  80f3e0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80f3e4:	e0bffe17 	ldw	r2,-8(fp)
  80f3e8:	10800017 	ldw	r2,0(r2)
  80f3ec:	e0bffd15 	stw	r2,-12(fp)
  80f3f0:	00000006 	br	80f3f4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f3f4:	e0bffd17 	ldw	r2,-12(fp)
  80f3f8:	10800104 	addi	r2,r2,4
  80f3fc:	10800037 	ldwio	r2,0(r2)
  80f400:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f404:	e0bffc17 	ldw	r2,-16(fp)
  80f408:	1080c00c 	andi	r2,r2,768
  80f40c:	1005003a 	cmpeq	r2,r2,zero
  80f410:	1000741e 	bne	r2,zero,80f5e4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f414:	e0bffc17 	ldw	r2,-16(fp)
  80f418:	1080400c 	andi	r2,r2,256
  80f41c:	1005003a 	cmpeq	r2,r2,zero
  80f420:	1000351e 	bne	r2,zero,80f4f8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80f424:	00800074 	movhi	r2,1
  80f428:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f42c:	e0bffe17 	ldw	r2,-8(fp)
  80f430:	10800a17 	ldw	r2,40(r2)
  80f434:	10800044 	addi	r2,r2,1
  80f438:	1081ffcc 	andi	r2,r2,2047
  80f43c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80f440:	e0bffe17 	ldw	r2,-8(fp)
  80f444:	10c00b17 	ldw	r3,44(r2)
  80f448:	e0bffa17 	ldw	r2,-24(fp)
  80f44c:	18801626 	beq	r3,r2,80f4a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80f450:	e0bffd17 	ldw	r2,-12(fp)
  80f454:	10800037 	ldwio	r2,0(r2)
  80f458:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80f45c:	e0bffb17 	ldw	r2,-20(fp)
  80f460:	10a0000c 	andi	r2,r2,32768
  80f464:	1005003a 	cmpeq	r2,r2,zero
  80f468:	10000f1e 	bne	r2,zero,80f4a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80f46c:	e0bffe17 	ldw	r2,-8(fp)
  80f470:	10c00a17 	ldw	r3,40(r2)
  80f474:	e0bffb17 	ldw	r2,-20(fp)
  80f478:	1009883a 	mov	r4,r2
  80f47c:	e0bffe17 	ldw	r2,-8(fp)
  80f480:	1885883a 	add	r2,r3,r2
  80f484:	10800e04 	addi	r2,r2,56
  80f488:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f48c:	e0bffe17 	ldw	r2,-8(fp)
  80f490:	10800a17 	ldw	r2,40(r2)
  80f494:	10800044 	addi	r2,r2,1
  80f498:	10c1ffcc 	andi	r3,r2,2047
  80f49c:	e0bffe17 	ldw	r2,-8(fp)
  80f4a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80f4a4:	003fe106 	br	80f42c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80f4a8:	e0bffb17 	ldw	r2,-20(fp)
  80f4ac:	10bfffec 	andhi	r2,r2,65535
  80f4b0:	1005003a 	cmpeq	r2,r2,zero
  80f4b4:	1000101e 	bne	r2,zero,80f4f8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f4b8:	e0bffe17 	ldw	r2,-8(fp)
  80f4bc:	10c00817 	ldw	r3,32(r2)
  80f4c0:	00bfff84 	movi	r2,-2
  80f4c4:	1886703a 	and	r3,r3,r2
  80f4c8:	e0bffe17 	ldw	r2,-8(fp)
  80f4cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80f4d0:	e0bffd17 	ldw	r2,-12(fp)
  80f4d4:	11000104 	addi	r4,r2,4
  80f4d8:	e0bffe17 	ldw	r2,-8(fp)
  80f4dc:	10800817 	ldw	r2,32(r2)
  80f4e0:	1007883a 	mov	r3,r2
  80f4e4:	2005883a 	mov	r2,r4
  80f4e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f4ec:	e0bffd17 	ldw	r2,-12(fp)
  80f4f0:	10800104 	addi	r2,r2,4
  80f4f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80f4f8:	e0bffc17 	ldw	r2,-16(fp)
  80f4fc:	1080800c 	andi	r2,r2,512
  80f500:	1005003a 	cmpeq	r2,r2,zero
  80f504:	103fbb1e 	bne	r2,zero,80f3f4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80f508:	e0bffc17 	ldw	r2,-16(fp)
  80f50c:	10bfffec 	andhi	r2,r2,65535
  80f510:	1004d43a 	srli	r2,r2,16
  80f514:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f518:	00001506 	br	80f570 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80f51c:	e13ffd17 	ldw	r4,-12(fp)
  80f520:	e0bffe17 	ldw	r2,-8(fp)
  80f524:	10c00d17 	ldw	r3,52(r2)
  80f528:	e0bffe17 	ldw	r2,-8(fp)
  80f52c:	1885883a 	add	r2,r3,r2
  80f530:	10820e04 	addi	r2,r2,2104
  80f534:	10800003 	ldbu	r2,0(r2)
  80f538:	10c03fcc 	andi	r3,r2,255
  80f53c:	18c0201c 	xori	r3,r3,128
  80f540:	18ffe004 	addi	r3,r3,-128
  80f544:	2005883a 	mov	r2,r4
  80f548:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f54c:	e0bffe17 	ldw	r2,-8(fp)
  80f550:	10800d17 	ldw	r2,52(r2)
  80f554:	10800044 	addi	r2,r2,1
  80f558:	10c1ffcc 	andi	r3,r2,2047
  80f55c:	e0bffe17 	ldw	r2,-8(fp)
  80f560:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80f564:	e0bff917 	ldw	r2,-28(fp)
  80f568:	10bfffc4 	addi	r2,r2,-1
  80f56c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80f570:	e0bff917 	ldw	r2,-28(fp)
  80f574:	1005003a 	cmpeq	r2,r2,zero
  80f578:	1000051e 	bne	r2,zero,80f590 <altera_avalon_jtag_uart_irq+0x1c4>
  80f57c:	e0bffe17 	ldw	r2,-8(fp)
  80f580:	10c00d17 	ldw	r3,52(r2)
  80f584:	e0bffe17 	ldw	r2,-8(fp)
  80f588:	10800c17 	ldw	r2,48(r2)
  80f58c:	18bfe31e 	bne	r3,r2,80f51c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80f590:	e0bff917 	ldw	r2,-28(fp)
  80f594:	1005003a 	cmpeq	r2,r2,zero
  80f598:	103f961e 	bne	r2,zero,80f3f4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f59c:	e0bffe17 	ldw	r2,-8(fp)
  80f5a0:	10c00817 	ldw	r3,32(r2)
  80f5a4:	00bfff44 	movi	r2,-3
  80f5a8:	1886703a 	and	r3,r3,r2
  80f5ac:	e0bffe17 	ldw	r2,-8(fp)
  80f5b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f5b4:	e0bffe17 	ldw	r2,-8(fp)
  80f5b8:	10800017 	ldw	r2,0(r2)
  80f5bc:	11000104 	addi	r4,r2,4
  80f5c0:	e0bffe17 	ldw	r2,-8(fp)
  80f5c4:	10800817 	ldw	r2,32(r2)
  80f5c8:	1007883a 	mov	r3,r2
  80f5cc:	2005883a 	mov	r2,r4
  80f5d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f5d4:	e0bffd17 	ldw	r2,-12(fp)
  80f5d8:	10800104 	addi	r2,r2,4
  80f5dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80f5e0:	003f8406 	br	80f3f4 <altera_avalon_jtag_uart_irq+0x28>
}
  80f5e4:	e037883a 	mov	sp,fp
  80f5e8:	df000017 	ldw	fp,0(sp)
  80f5ec:	dec00104 	addi	sp,sp,4
  80f5f0:	f800283a 	ret

0080f5f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80f5f4:	defffc04 	addi	sp,sp,-16
  80f5f8:	df000315 	stw	fp,12(sp)
  80f5fc:	df000304 	addi	fp,sp,12
  80f600:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80f604:	e0bfff17 	ldw	r2,-4(fp)
  80f608:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80f60c:	e0bffe17 	ldw	r2,-8(fp)
  80f610:	10800017 	ldw	r2,0(r2)
  80f614:	10800104 	addi	r2,r2,4
  80f618:	10800037 	ldwio	r2,0(r2)
  80f61c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80f620:	e0bffd17 	ldw	r2,-12(fp)
  80f624:	1081000c 	andi	r2,r2,1024
  80f628:	1005003a 	cmpeq	r2,r2,zero
  80f62c:	10000c1e 	bne	r2,zero,80f660 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80f630:	e0bffe17 	ldw	r2,-8(fp)
  80f634:	10800017 	ldw	r2,0(r2)
  80f638:	11000104 	addi	r4,r2,4
  80f63c:	e0bffe17 	ldw	r2,-8(fp)
  80f640:	10800817 	ldw	r2,32(r2)
  80f644:	10810014 	ori	r2,r2,1024
  80f648:	1007883a 	mov	r3,r2
  80f64c:	2005883a 	mov	r2,r4
  80f650:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80f654:	e0bffe17 	ldw	r2,-8(fp)
  80f658:	10000915 	stw	zero,36(r2)
  80f65c:	00000a06 	br	80f688 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80f660:	e0bffe17 	ldw	r2,-8(fp)
  80f664:	10c00917 	ldw	r3,36(r2)
  80f668:	00a00034 	movhi	r2,32768
  80f66c:	10bfff04 	addi	r2,r2,-4
  80f670:	10c00536 	bltu	r2,r3,80f688 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80f674:	e0bffe17 	ldw	r2,-8(fp)
  80f678:	10800917 	ldw	r2,36(r2)
  80f67c:	10c00044 	addi	r3,r2,1
  80f680:	e0bffe17 	ldw	r2,-8(fp)
  80f684:	10c00915 	stw	r3,36(r2)
  80f688:	00802074 	movhi	r2,129
  80f68c:	109a7c04 	addi	r2,r2,27120
  80f690:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80f694:	e037883a 	mov	sp,fp
  80f698:	df000017 	ldw	fp,0(sp)
  80f69c:	dec00104 	addi	sp,sp,4
  80f6a0:	f800283a 	ret

0080f6a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80f6a4:	defffc04 	addi	sp,sp,-16
  80f6a8:	df000315 	stw	fp,12(sp)
  80f6ac:	df000304 	addi	fp,sp,12
  80f6b0:	e13ffd15 	stw	r4,-12(fp)
  80f6b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f6b8:	00000706 	br	80f6d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80f6bc:	e0bffe17 	ldw	r2,-8(fp)
  80f6c0:	1090000c 	andi	r2,r2,16384
  80f6c4:	1005003a 	cmpeq	r2,r2,zero
  80f6c8:	1000031e 	bne	r2,zero,80f6d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80f6cc:	00bffd44 	movi	r2,-11
  80f6d0:	e0bfff15 	stw	r2,-4(fp)
  80f6d4:	00000b06 	br	80f704 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80f6d8:	e0bffd17 	ldw	r2,-12(fp)
  80f6dc:	10c00d17 	ldw	r3,52(r2)
  80f6e0:	e0bffd17 	ldw	r2,-12(fp)
  80f6e4:	10800c17 	ldw	r2,48(r2)
  80f6e8:	18800526 	beq	r3,r2,80f700 <altera_avalon_jtag_uart_close+0x5c>
  80f6ec:	e0bffd17 	ldw	r2,-12(fp)
  80f6f0:	10c00917 	ldw	r3,36(r2)
  80f6f4:	e0bffd17 	ldw	r2,-12(fp)
  80f6f8:	10800117 	ldw	r2,4(r2)
  80f6fc:	18bfef36 	bltu	r3,r2,80f6bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f700:	e03fff15 	stw	zero,-4(fp)
  80f704:	e0bfff17 	ldw	r2,-4(fp)
}
  80f708:	e037883a 	mov	sp,fp
  80f70c:	df000017 	ldw	fp,0(sp)
  80f710:	dec00104 	addi	sp,sp,4
  80f714:	f800283a 	ret

0080f718 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80f718:	defff804 	addi	sp,sp,-32
  80f71c:	df000715 	stw	fp,28(sp)
  80f720:	df000704 	addi	fp,sp,28
  80f724:	e13ffb15 	stw	r4,-20(fp)
  80f728:	e17ffc15 	stw	r5,-16(fp)
  80f72c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80f730:	00bff9c4 	movi	r2,-25
  80f734:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80f738:	e0bffc17 	ldw	r2,-16(fp)
  80f73c:	e0bfff15 	stw	r2,-4(fp)
  80f740:	e0ffff17 	ldw	r3,-4(fp)
  80f744:	189a8060 	cmpeqi	r2,r3,27137
  80f748:	1000041e 	bne	r2,zero,80f75c <altera_avalon_jtag_uart_ioctl+0x44>
  80f74c:	e0ffff17 	ldw	r3,-4(fp)
  80f750:	189a80a0 	cmpeqi	r2,r3,27138
  80f754:	10001b1e 	bne	r2,zero,80f7c4 <altera_avalon_jtag_uart_ioctl+0xac>
  80f758:	00002706 	br	80f7f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80f75c:	e0bffb17 	ldw	r2,-20(fp)
  80f760:	10c00117 	ldw	r3,4(r2)
  80f764:	00a00034 	movhi	r2,32768
  80f768:	10bfffc4 	addi	r2,r2,-1
  80f76c:	18802226 	beq	r3,r2,80f7f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80f770:	e0bffd17 	ldw	r2,-12(fp)
  80f774:	10800017 	ldw	r2,0(r2)
  80f778:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80f77c:	e0bff917 	ldw	r2,-28(fp)
  80f780:	10800090 	cmplti	r2,r2,2
  80f784:	1000071e 	bne	r2,zero,80f7a4 <altera_avalon_jtag_uart_ioctl+0x8c>
  80f788:	e0fff917 	ldw	r3,-28(fp)
  80f78c:	00a00034 	movhi	r2,32768
  80f790:	10bfffc4 	addi	r2,r2,-1
  80f794:	18800326 	beq	r3,r2,80f7a4 <altera_avalon_jtag_uart_ioctl+0x8c>
  80f798:	e0bff917 	ldw	r2,-28(fp)
  80f79c:	e0bffe15 	stw	r2,-8(fp)
  80f7a0:	00000306 	br	80f7b0 <altera_avalon_jtag_uart_ioctl+0x98>
  80f7a4:	00e00034 	movhi	r3,32768
  80f7a8:	18ffff84 	addi	r3,r3,-2
  80f7ac:	e0fffe15 	stw	r3,-8(fp)
  80f7b0:	e0bffb17 	ldw	r2,-20(fp)
  80f7b4:	e0fffe17 	ldw	r3,-8(fp)
  80f7b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80f7bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80f7c0:	00000d06 	br	80f7f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80f7c4:	e0bffb17 	ldw	r2,-20(fp)
  80f7c8:	10c00117 	ldw	r3,4(r2)
  80f7cc:	00a00034 	movhi	r2,32768
  80f7d0:	10bfffc4 	addi	r2,r2,-1
  80f7d4:	18800826 	beq	r3,r2,80f7f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80f7d8:	e13ffd17 	ldw	r4,-12(fp)
  80f7dc:	e0bffb17 	ldw	r2,-20(fp)
  80f7e0:	10c00917 	ldw	r3,36(r2)
  80f7e4:	e0bffb17 	ldw	r2,-20(fp)
  80f7e8:	10800117 	ldw	r2,4(r2)
  80f7ec:	1885803a 	cmpltu	r2,r3,r2
  80f7f0:	20800015 	stw	r2,0(r4)
      rc = 0;
  80f7f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80f7f8:	e0bffa17 	ldw	r2,-24(fp)
}
  80f7fc:	e037883a 	mov	sp,fp
  80f800:	df000017 	ldw	fp,0(sp)
  80f804:	dec00104 	addi	sp,sp,4
  80f808:	f800283a 	ret

0080f80c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80f80c:	defff204 	addi	sp,sp,-56
  80f810:	dfc00d15 	stw	ra,52(sp)
  80f814:	df000c15 	stw	fp,48(sp)
  80f818:	df000c04 	addi	fp,sp,48
  80f81c:	e13ffb15 	stw	r4,-20(fp)
  80f820:	e17ffc15 	stw	r5,-16(fp)
  80f824:	e1bffd15 	stw	r6,-12(fp)
  80f828:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80f82c:	e0bffc17 	ldw	r2,-16(fp)
  80f830:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f834:	00004806 	br	80f958 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80f838:	e0bffb17 	ldw	r2,-20(fp)
  80f83c:	10800a17 	ldw	r2,40(r2)
  80f840:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80f844:	e0bffb17 	ldw	r2,-20(fp)
  80f848:	10800b17 	ldw	r2,44(r2)
  80f84c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80f850:	e0fff717 	ldw	r3,-36(fp)
  80f854:	e0bff617 	ldw	r2,-40(fp)
  80f858:	18800536 	bltu	r3,r2,80f870 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80f85c:	e0bff717 	ldw	r2,-36(fp)
  80f860:	e0fff617 	ldw	r3,-40(fp)
  80f864:	10c5c83a 	sub	r2,r2,r3
  80f868:	e0bff815 	stw	r2,-32(fp)
  80f86c:	00000406 	br	80f880 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80f870:	00820004 	movi	r2,2048
  80f874:	e0fff617 	ldw	r3,-40(fp)
  80f878:	10c5c83a 	sub	r2,r2,r3
  80f87c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80f880:	e0bff817 	ldw	r2,-32(fp)
  80f884:	1005003a 	cmpeq	r2,r2,zero
  80f888:	10001f1e 	bne	r2,zero,80f908 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80f88c:	e0fffd17 	ldw	r3,-12(fp)
  80f890:	e0bff817 	ldw	r2,-32(fp)
  80f894:	1880022e 	bgeu	r3,r2,80f8a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80f898:	e0bffd17 	ldw	r2,-12(fp)
  80f89c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80f8a0:	e0bffb17 	ldw	r2,-20(fp)
  80f8a4:	10c00e04 	addi	r3,r2,56
  80f8a8:	e0bff617 	ldw	r2,-40(fp)
  80f8ac:	1887883a 	add	r3,r3,r2
  80f8b0:	e0bffa17 	ldw	r2,-24(fp)
  80f8b4:	1009883a 	mov	r4,r2
  80f8b8:	180b883a 	mov	r5,r3
  80f8bc:	e1bff817 	ldw	r6,-32(fp)
  80f8c0:	080b6f00 	call	80b6f0 <memcpy>
      ptr   += n;
  80f8c4:	e0fff817 	ldw	r3,-32(fp)
  80f8c8:	e0bffa17 	ldw	r2,-24(fp)
  80f8cc:	10c5883a 	add	r2,r2,r3
  80f8d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80f8d4:	e0fffd17 	ldw	r3,-12(fp)
  80f8d8:	e0bff817 	ldw	r2,-32(fp)
  80f8dc:	1885c83a 	sub	r2,r3,r2
  80f8e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f8e4:	e0fff617 	ldw	r3,-40(fp)
  80f8e8:	e0bff817 	ldw	r2,-32(fp)
  80f8ec:	1885883a 	add	r2,r3,r2
  80f8f0:	10c1ffcc 	andi	r3,r2,2047
  80f8f4:	e0bffb17 	ldw	r2,-20(fp)
  80f8f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80f8fc:	e0bffd17 	ldw	r2,-12(fp)
  80f900:	10800048 	cmpgei	r2,r2,1
  80f904:	103fcc1e 	bne	r2,zero,80f838 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80f908:	e0fffa17 	ldw	r3,-24(fp)
  80f90c:	e0bffc17 	ldw	r2,-16(fp)
  80f910:	1880141e 	bne	r3,r2,80f964 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80f914:	e0bffe17 	ldw	r2,-8(fp)
  80f918:	1090000c 	andi	r2,r2,16384
  80f91c:	1004c03a 	cmpne	r2,r2,zero
  80f920:	1000101e 	bne	r2,zero,80f964 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80f924:	e0bffb17 	ldw	r2,-20(fp)
  80f928:	10c00a17 	ldw	r3,40(r2)
  80f92c:	e0bff717 	ldw	r2,-36(fp)
  80f930:	1880051e 	bne	r3,r2,80f948 <altera_avalon_jtag_uart_read+0x13c>
  80f934:	e0bffb17 	ldw	r2,-20(fp)
  80f938:	10c00917 	ldw	r3,36(r2)
  80f93c:	e0bffb17 	ldw	r2,-20(fp)
  80f940:	10800117 	ldw	r2,4(r2)
  80f944:	18bff736 	bltu	r3,r2,80f924 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80f948:	e0bffb17 	ldw	r2,-20(fp)
  80f94c:	10c00a17 	ldw	r3,40(r2)
  80f950:	e0bff717 	ldw	r2,-36(fp)
  80f954:	18800326 	beq	r3,r2,80f964 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80f958:	e0bffd17 	ldw	r2,-12(fp)
  80f95c:	10800048 	cmpgei	r2,r2,1
  80f960:	103fb51e 	bne	r2,zero,80f838 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80f964:	e0fffa17 	ldw	r3,-24(fp)
  80f968:	e0bffc17 	ldw	r2,-16(fp)
  80f96c:	18801926 	beq	r3,r2,80f9d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f970:	0005303a 	rdctl	r2,status
  80f974:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f978:	e0fff517 	ldw	r3,-44(fp)
  80f97c:	00bfff84 	movi	r2,-2
  80f980:	1884703a 	and	r2,r3,r2
  80f984:	1001703a 	wrctl	status,r2
  
  return context;
  80f988:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f98c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f990:	e0bffb17 	ldw	r2,-20(fp)
  80f994:	10800817 	ldw	r2,32(r2)
  80f998:	10c00054 	ori	r3,r2,1
  80f99c:	e0bffb17 	ldw	r2,-20(fp)
  80f9a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f9a4:	e0bffb17 	ldw	r2,-20(fp)
  80f9a8:	10800017 	ldw	r2,0(r2)
  80f9ac:	11000104 	addi	r4,r2,4
  80f9b0:	e0bffb17 	ldw	r2,-20(fp)
  80f9b4:	10800817 	ldw	r2,32(r2)
  80f9b8:	1007883a 	mov	r3,r2
  80f9bc:	2005883a 	mov	r2,r4
  80f9c0:	10c00035 	stwio	r3,0(r2)
  80f9c4:	e0bff917 	ldw	r2,-28(fp)
  80f9c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f9cc:	e0bff417 	ldw	r2,-48(fp)
  80f9d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f9d4:	e0fffa17 	ldw	r3,-24(fp)
  80f9d8:	e0bffc17 	ldw	r2,-16(fp)
  80f9dc:	18800526 	beq	r3,r2,80f9f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80f9e0:	e0fffa17 	ldw	r3,-24(fp)
  80f9e4:	e0bffc17 	ldw	r2,-16(fp)
  80f9e8:	1887c83a 	sub	r3,r3,r2
  80f9ec:	e0ffff15 	stw	r3,-4(fp)
  80f9f0:	00000906 	br	80fa18 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80f9f4:	e0bffe17 	ldw	r2,-8(fp)
  80f9f8:	1090000c 	andi	r2,r2,16384
  80f9fc:	1005003a 	cmpeq	r2,r2,zero
  80fa00:	1000031e 	bne	r2,zero,80fa10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80fa04:	00bffd44 	movi	r2,-11
  80fa08:	e0bfff15 	stw	r2,-4(fp)
  80fa0c:	00000206 	br	80fa18 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80fa10:	00bffec4 	movi	r2,-5
  80fa14:	e0bfff15 	stw	r2,-4(fp)
  80fa18:	e0bfff17 	ldw	r2,-4(fp)
}
  80fa1c:	e037883a 	mov	sp,fp
  80fa20:	dfc00117 	ldw	ra,4(sp)
  80fa24:	df000017 	ldw	fp,0(sp)
  80fa28:	dec00204 	addi	sp,sp,8
  80fa2c:	f800283a 	ret

0080fa30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80fa30:	defff204 	addi	sp,sp,-56
  80fa34:	dfc00d15 	stw	ra,52(sp)
  80fa38:	df000c15 	stw	fp,48(sp)
  80fa3c:	df000c04 	addi	fp,sp,48
  80fa40:	e13ffb15 	stw	r4,-20(fp)
  80fa44:	e17ffc15 	stw	r5,-16(fp)
  80fa48:	e1bffd15 	stw	r6,-12(fp)
  80fa4c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80fa50:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80fa54:	e0bffc17 	ldw	r2,-16(fp)
  80fa58:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80fa5c:	00003a06 	br	80fb48 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80fa60:	e0bffb17 	ldw	r2,-20(fp)
  80fa64:	10800c17 	ldw	r2,48(r2)
  80fa68:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80fa6c:	e0bffb17 	ldw	r2,-20(fp)
  80fa70:	10800d17 	ldw	r2,52(r2)
  80fa74:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80fa78:	e0fffa17 	ldw	r3,-24(fp)
  80fa7c:	e0bff917 	ldw	r2,-28(fp)
  80fa80:	1880062e 	bgeu	r3,r2,80fa9c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80fa84:	e0fff917 	ldw	r3,-28(fp)
  80fa88:	e0bffa17 	ldw	r2,-24(fp)
  80fa8c:	1885c83a 	sub	r2,r3,r2
  80fa90:	10bfffc4 	addi	r2,r2,-1
  80fa94:	e0bff815 	stw	r2,-32(fp)
  80fa98:	00000c06 	br	80facc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80fa9c:	e0bff917 	ldw	r2,-28(fp)
  80faa0:	1005003a 	cmpeq	r2,r2,zero
  80faa4:	1000051e 	bne	r2,zero,80fabc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80faa8:	00820004 	movi	r2,2048
  80faac:	e0fffa17 	ldw	r3,-24(fp)
  80fab0:	10c5c83a 	sub	r2,r2,r3
  80fab4:	e0bff815 	stw	r2,-32(fp)
  80fab8:	00000406 	br	80facc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80fabc:	0081ffc4 	movi	r2,2047
  80fac0:	e0fffa17 	ldw	r3,-24(fp)
  80fac4:	10c5c83a 	sub	r2,r2,r3
  80fac8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80facc:	e0bff817 	ldw	r2,-32(fp)
  80fad0:	1005003a 	cmpeq	r2,r2,zero
  80fad4:	10001f1e 	bne	r2,zero,80fb54 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80fad8:	e0fffd17 	ldw	r3,-12(fp)
  80fadc:	e0bff817 	ldw	r2,-32(fp)
  80fae0:	1880022e 	bgeu	r3,r2,80faec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80fae4:	e0bffd17 	ldw	r2,-12(fp)
  80fae8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80faec:	e0bffb17 	ldw	r2,-20(fp)
  80faf0:	10c20e04 	addi	r3,r2,2104
  80faf4:	e0bffa17 	ldw	r2,-24(fp)
  80faf8:	1885883a 	add	r2,r3,r2
  80fafc:	e0fffc17 	ldw	r3,-16(fp)
  80fb00:	1009883a 	mov	r4,r2
  80fb04:	180b883a 	mov	r5,r3
  80fb08:	e1bff817 	ldw	r6,-32(fp)
  80fb0c:	080b6f00 	call	80b6f0 <memcpy>
      ptr   += n;
  80fb10:	e0fff817 	ldw	r3,-32(fp)
  80fb14:	e0bffc17 	ldw	r2,-16(fp)
  80fb18:	10c5883a 	add	r2,r2,r3
  80fb1c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80fb20:	e0fffd17 	ldw	r3,-12(fp)
  80fb24:	e0bff817 	ldw	r2,-32(fp)
  80fb28:	1885c83a 	sub	r2,r3,r2
  80fb2c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fb30:	e0fffa17 	ldw	r3,-24(fp)
  80fb34:	e0bff817 	ldw	r2,-32(fp)
  80fb38:	1885883a 	add	r2,r3,r2
  80fb3c:	10c1ffcc 	andi	r3,r2,2047
  80fb40:	e0bffb17 	ldw	r2,-20(fp)
  80fb44:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80fb48:	e0bffd17 	ldw	r2,-12(fp)
  80fb4c:	10800048 	cmpgei	r2,r2,1
  80fb50:	103fc31e 	bne	r2,zero,80fa60 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb54:	0005303a 	rdctl	r2,status
  80fb58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb5c:	e0fff517 	ldw	r3,-44(fp)
  80fb60:	00bfff84 	movi	r2,-2
  80fb64:	1884703a 	and	r2,r3,r2
  80fb68:	1001703a 	wrctl	status,r2
  
  return context;
  80fb6c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80fb70:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80fb74:	e0bffb17 	ldw	r2,-20(fp)
  80fb78:	10800817 	ldw	r2,32(r2)
  80fb7c:	10c00094 	ori	r3,r2,2
  80fb80:	e0bffb17 	ldw	r2,-20(fp)
  80fb84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80fb88:	e0bffb17 	ldw	r2,-20(fp)
  80fb8c:	10800017 	ldw	r2,0(r2)
  80fb90:	11000104 	addi	r4,r2,4
  80fb94:	e0bffb17 	ldw	r2,-20(fp)
  80fb98:	10800817 	ldw	r2,32(r2)
  80fb9c:	1007883a 	mov	r3,r2
  80fba0:	2005883a 	mov	r2,r4
  80fba4:	10c00035 	stwio	r3,0(r2)
  80fba8:	e0bff717 	ldw	r2,-36(fp)
  80fbac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbb0:	e0bff417 	ldw	r2,-48(fp)
  80fbb4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80fbb8:	e0bffd17 	ldw	r2,-12(fp)
  80fbbc:	10800050 	cmplti	r2,r2,1
  80fbc0:	1000111e 	bne	r2,zero,80fc08 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80fbc4:	e0bffe17 	ldw	r2,-8(fp)
  80fbc8:	1090000c 	andi	r2,r2,16384
  80fbcc:	1004c03a 	cmpne	r2,r2,zero
  80fbd0:	1000101e 	bne	r2,zero,80fc14 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80fbd4:	e0bffb17 	ldw	r2,-20(fp)
  80fbd8:	10c00d17 	ldw	r3,52(r2)
  80fbdc:	e0bff917 	ldw	r2,-28(fp)
  80fbe0:	1880051e 	bne	r3,r2,80fbf8 <altera_avalon_jtag_uart_write+0x1c8>
  80fbe4:	e0bffb17 	ldw	r2,-20(fp)
  80fbe8:	10c00917 	ldw	r3,36(r2)
  80fbec:	e0bffb17 	ldw	r2,-20(fp)
  80fbf0:	10800117 	ldw	r2,4(r2)
  80fbf4:	18bff736 	bltu	r3,r2,80fbd4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80fbf8:	e0bffb17 	ldw	r2,-20(fp)
  80fbfc:	10c00d17 	ldw	r3,52(r2)
  80fc00:	e0bff917 	ldw	r2,-28(fp)
  80fc04:	18800326 	beq	r3,r2,80fc14 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  80fc08:	e0bffd17 	ldw	r2,-12(fp)
  80fc0c:	10800048 	cmpgei	r2,r2,1
  80fc10:	103fcd1e 	bne	r2,zero,80fb48 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80fc14:	e0fffc17 	ldw	r3,-16(fp)
  80fc18:	e0bff617 	ldw	r2,-40(fp)
  80fc1c:	18800526 	beq	r3,r2,80fc34 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80fc20:	e0fffc17 	ldw	r3,-16(fp)
  80fc24:	e0bff617 	ldw	r2,-40(fp)
  80fc28:	1887c83a 	sub	r3,r3,r2
  80fc2c:	e0ffff15 	stw	r3,-4(fp)
  80fc30:	00000906 	br	80fc58 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80fc34:	e0bffe17 	ldw	r2,-8(fp)
  80fc38:	1090000c 	andi	r2,r2,16384
  80fc3c:	1005003a 	cmpeq	r2,r2,zero
  80fc40:	1000031e 	bne	r2,zero,80fc50 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80fc44:	00bffd44 	movi	r2,-11
  80fc48:	e0bfff15 	stw	r2,-4(fp)
  80fc4c:	00000206 	br	80fc58 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  80fc50:	00bffec4 	movi	r2,-5
  80fc54:	e0bfff15 	stw	r2,-4(fp)
  80fc58:	e0bfff17 	ldw	r2,-4(fp)
}
  80fc5c:	e037883a 	mov	sp,fp
  80fc60:	dfc00117 	ldw	ra,4(sp)
  80fc64:	df000017 	ldw	fp,0(sp)
  80fc68:	dec00204 	addi	sp,sp,8
  80fc6c:	f800283a 	ret

0080fc70 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80fc70:	defffa04 	addi	sp,sp,-24
  80fc74:	dfc00515 	stw	ra,20(sp)
  80fc78:	df000415 	stw	fp,16(sp)
  80fc7c:	df000404 	addi	fp,sp,16
  80fc80:	e13ffe15 	stw	r4,-8(fp)
  80fc84:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80fc88:	e0bffe17 	ldw	r2,-8(fp)
  80fc8c:	10800017 	ldw	r2,0(r2)
  80fc90:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80fc94:	008003f4 	movhi	r2,15
  80fc98:	10909004 	addi	r2,r2,16960
  80fc9c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80fca0:	e0bffe17 	ldw	r2,-8(fp)
  80fca4:	10800803 	ldbu	r2,32(r2)
  80fca8:	10803fcc 	andi	r2,r2,255
  80fcac:	1080201c 	xori	r2,r2,128
  80fcb0:	10bfe004 	addi	r2,r2,-128
  80fcb4:	1004c03a 	cmpne	r2,r2,zero
  80fcb8:	1000161e 	bne	r2,zero,80fd14 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fcbc:	00000a06 	br	80fce8 <lcd_write_command+0x78>
    if (--i == 0)
  80fcc0:	e0bffc17 	ldw	r2,-16(fp)
  80fcc4:	10bfffc4 	addi	r2,r2,-1
  80fcc8:	e0bffc15 	stw	r2,-16(fp)
  80fccc:	e0bffc17 	ldw	r2,-16(fp)
  80fcd0:	1004c03a 	cmpne	r2,r2,zero
  80fcd4:	1000041e 	bne	r2,zero,80fce8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80fcd8:	e0fffe17 	ldw	r3,-8(fp)
  80fcdc:	00800044 	movi	r2,1
  80fce0:	18800805 	stb	r2,32(r3)
      return;
  80fce4:	00000b06 	br	80fd14 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fce8:	e0bffd17 	ldw	r2,-12(fp)
  80fcec:	10800104 	addi	r2,r2,4
  80fcf0:	10800037 	ldwio	r2,0(r2)
  80fcf4:	1080200c 	andi	r2,r2,128
  80fcf8:	1004c03a 	cmpne	r2,r2,zero
  80fcfc:	103ff01e 	bne	r2,zero,80fcc0 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80fd00:	01001904 	movi	r4,100
  80fd04:	08121f40 	call	8121f4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80fd08:	e0bffd17 	ldw	r2,-12(fp)
  80fd0c:	e0ffff03 	ldbu	r3,-4(fp)
  80fd10:	10c00035 	stwio	r3,0(r2)
}
  80fd14:	e037883a 	mov	sp,fp
  80fd18:	dfc00117 	ldw	ra,4(sp)
  80fd1c:	df000017 	ldw	fp,0(sp)
  80fd20:	dec00204 	addi	sp,sp,8
  80fd24:	f800283a 	ret

0080fd28 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80fd28:	defffa04 	addi	sp,sp,-24
  80fd2c:	dfc00515 	stw	ra,20(sp)
  80fd30:	df000415 	stw	fp,16(sp)
  80fd34:	df000404 	addi	fp,sp,16
  80fd38:	e13ffe15 	stw	r4,-8(fp)
  80fd3c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80fd40:	e0bffe17 	ldw	r2,-8(fp)
  80fd44:	10800017 	ldw	r2,0(r2)
  80fd48:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80fd4c:	008003f4 	movhi	r2,15
  80fd50:	10909004 	addi	r2,r2,16960
  80fd54:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80fd58:	e0bffe17 	ldw	r2,-8(fp)
  80fd5c:	10800803 	ldbu	r2,32(r2)
  80fd60:	10803fcc 	andi	r2,r2,255
  80fd64:	1080201c 	xori	r2,r2,128
  80fd68:	10bfe004 	addi	r2,r2,-128
  80fd6c:	1004c03a 	cmpne	r2,r2,zero
  80fd70:	10001d1e 	bne	r2,zero,80fde8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fd74:	00000a06 	br	80fda0 <lcd_write_data+0x78>
    if (--i == 0)
  80fd78:	e0bffc17 	ldw	r2,-16(fp)
  80fd7c:	10bfffc4 	addi	r2,r2,-1
  80fd80:	e0bffc15 	stw	r2,-16(fp)
  80fd84:	e0bffc17 	ldw	r2,-16(fp)
  80fd88:	1004c03a 	cmpne	r2,r2,zero
  80fd8c:	1000041e 	bne	r2,zero,80fda0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80fd90:	e0fffe17 	ldw	r3,-8(fp)
  80fd94:	00800044 	movi	r2,1
  80fd98:	18800805 	stb	r2,32(r3)
      return;
  80fd9c:	00001206 	br	80fde8 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80fda0:	e0bffd17 	ldw	r2,-12(fp)
  80fda4:	10800104 	addi	r2,r2,4
  80fda8:	10800037 	ldwio	r2,0(r2)
  80fdac:	1080200c 	andi	r2,r2,128
  80fdb0:	1004c03a 	cmpne	r2,r2,zero
  80fdb4:	103ff01e 	bne	r2,zero,80fd78 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80fdb8:	01001904 	movi	r4,100
  80fdbc:	08121f40 	call	8121f4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80fdc0:	e0bffd17 	ldw	r2,-12(fp)
  80fdc4:	10800204 	addi	r2,r2,8
  80fdc8:	e0ffff03 	ldbu	r3,-4(fp)
  80fdcc:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80fdd0:	e0bffe17 	ldw	r2,-8(fp)
  80fdd4:	108008c3 	ldbu	r2,35(r2)
  80fdd8:	10800044 	addi	r2,r2,1
  80fddc:	1007883a 	mov	r3,r2
  80fde0:	e0bffe17 	ldw	r2,-8(fp)
  80fde4:	10c008c5 	stb	r3,35(r2)
}
  80fde8:	e037883a 	mov	sp,fp
  80fdec:	dfc00117 	ldw	ra,4(sp)
  80fdf0:	df000017 	ldw	fp,0(sp)
  80fdf4:	dec00204 	addi	sp,sp,8
  80fdf8:	f800283a 	ret

0080fdfc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80fdfc:	defffc04 	addi	sp,sp,-16
  80fe00:	dfc00315 	stw	ra,12(sp)
  80fe04:	df000215 	stw	fp,8(sp)
  80fe08:	df000204 	addi	fp,sp,8
  80fe0c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80fe10:	e13fff17 	ldw	r4,-4(fp)
  80fe14:	01400044 	movi	r5,1
  80fe18:	080fc700 	call	80fc70 <lcd_write_command>

  sp->x = 0;
  80fe1c:	e0bfff17 	ldw	r2,-4(fp)
  80fe20:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80fe24:	e0bfff17 	ldw	r2,-4(fp)
  80fe28:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80fe2c:	e0bfff17 	ldw	r2,-4(fp)
  80fe30:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fe34:	e03ffe15 	stw	zero,-8(fp)
  80fe38:	00001906 	br	80fea0 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80fe3c:	e0bffe17 	ldw	r2,-8(fp)
  80fe40:	108018e4 	muli	r2,r2,99
  80fe44:	10c01004 	addi	r3,r2,64
  80fe48:	e0bfff17 	ldw	r2,-4(fp)
  80fe4c:	1889883a 	add	r4,r3,r2
  80fe50:	01400804 	movi	r5,32
  80fe54:	01801444 	movi	r6,81
  80fe58:	0806f900 	call	806f90 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80fe5c:	e0bffe17 	ldw	r2,-8(fp)
  80fe60:	108018e4 	muli	r2,r2,99
  80fe64:	10c00c04 	addi	r3,r2,48
  80fe68:	e0bfff17 	ldw	r2,-4(fp)
  80fe6c:	1889883a 	add	r4,r3,r2
  80fe70:	01400804 	movi	r5,32
  80fe74:	01800404 	movi	r6,16
  80fe78:	0806f900 	call	806f90 <memset>
    sp->line[y].width = 0;
  80fe7c:	e0bffe17 	ldw	r2,-8(fp)
  80fe80:	e0ffff17 	ldw	r3,-4(fp)
  80fe84:	108018e4 	muli	r2,r2,99
  80fe88:	10c5883a 	add	r2,r2,r3
  80fe8c:	10802404 	addi	r2,r2,144
  80fe90:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fe94:	e0bffe17 	ldw	r2,-8(fp)
  80fe98:	10800044 	addi	r2,r2,1
  80fe9c:	e0bffe15 	stw	r2,-8(fp)
  80fea0:	e0bffe17 	ldw	r2,-8(fp)
  80fea4:	10800090 	cmplti	r2,r2,2
  80fea8:	103fe41e 	bne	r2,zero,80fe3c <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80feac:	e037883a 	mov	sp,fp
  80feb0:	dfc00117 	ldw	ra,4(sp)
  80feb4:	df000017 	ldw	fp,0(sp)
  80feb8:	dec00204 	addi	sp,sp,8
  80febc:	f800283a 	ret

0080fec0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80fec0:	defff604 	addi	sp,sp,-40
  80fec4:	dfc00915 	stw	ra,36(sp)
  80fec8:	df000815 	stw	fp,32(sp)
  80fecc:	dc000715 	stw	r16,28(sp)
  80fed0:	df000704 	addi	fp,sp,28
  80fed4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80fed8:	e0bfff17 	ldw	r2,-4(fp)
  80fedc:	10800943 	ldbu	r2,37(r2)
  80fee0:	10803fcc 	andi	r2,r2,255
  80fee4:	1080201c 	xori	r2,r2,128
  80fee8:	10bfe004 	addi	r2,r2,-128
  80feec:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fef0:	e03ffe15 	stw	zero,-8(fp)
  80fef4:	00006406 	br	810088 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80fef8:	e0bffe17 	ldw	r2,-8(fp)
  80fefc:	e0ffff17 	ldw	r3,-4(fp)
  80ff00:	108018e4 	muli	r2,r2,99
  80ff04:	10c5883a 	add	r2,r2,r3
  80ff08:	10802404 	addi	r2,r2,144
  80ff0c:	10800043 	ldbu	r2,1(r2)
  80ff10:	10803fcc 	andi	r2,r2,255
  80ff14:	1080201c 	xori	r2,r2,128
  80ff18:	10bfe004 	addi	r2,r2,-128
  80ff1c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80ff20:	e0bffe17 	ldw	r2,-8(fp)
  80ff24:	e0ffff17 	ldw	r3,-4(fp)
  80ff28:	108018e4 	muli	r2,r2,99
  80ff2c:	10c5883a 	add	r2,r2,r3
  80ff30:	10802404 	addi	r2,r2,144
  80ff34:	10800083 	ldbu	r2,2(r2)
  80ff38:	10c03fcc 	andi	r3,r2,255
  80ff3c:	e0bffc17 	ldw	r2,-16(fp)
  80ff40:	1885383a 	mul	r2,r3,r2
  80ff44:	1005d23a 	srai	r2,r2,8
  80ff48:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80ff4c:	e0fffa17 	ldw	r3,-24(fp)
  80ff50:	e0bffb17 	ldw	r2,-20(fp)
  80ff54:	18800116 	blt	r3,r2,80ff5c <lcd_repaint_screen+0x9c>
      offset = 0;
  80ff58:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80ff5c:	e03ffd15 	stw	zero,-12(fp)
  80ff60:	00004306 	br	810070 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80ff64:	e43ffe17 	ldw	r16,-8(fp)
  80ff68:	e0fffd17 	ldw	r3,-12(fp)
  80ff6c:	e0bffa17 	ldw	r2,-24(fp)
  80ff70:	1889883a 	add	r4,r3,r2
  80ff74:	e17ffb17 	ldw	r5,-20(fp)
  80ff78:	080e2b00 	call	80e2b0 <__modsi3>
  80ff7c:	1009883a 	mov	r4,r2
  80ff80:	e0ffff17 	ldw	r3,-4(fp)
  80ff84:	808018e4 	muli	r2,r16,99
  80ff88:	10c5883a 	add	r2,r2,r3
  80ff8c:	1105883a 	add	r2,r2,r4
  80ff90:	10801004 	addi	r2,r2,64
  80ff94:	10800003 	ldbu	r2,0(r2)
  80ff98:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80ff9c:	e0bffe17 	ldw	r2,-8(fp)
  80ffa0:	e13ffd17 	ldw	r4,-12(fp)
  80ffa4:	e0ffff17 	ldw	r3,-4(fp)
  80ffa8:	108018e4 	muli	r2,r2,99
  80ffac:	10c5883a 	add	r2,r2,r3
  80ffb0:	1105883a 	add	r2,r2,r4
  80ffb4:	10800c04 	addi	r2,r2,48
  80ffb8:	10800003 	ldbu	r2,0(r2)
  80ffbc:	10c03fcc 	andi	r3,r2,255
  80ffc0:	18c0201c 	xori	r3,r3,128
  80ffc4:	18ffe004 	addi	r3,r3,-128
  80ffc8:	e0bff947 	ldb	r2,-27(fp)
  80ffcc:	18802526 	beq	r3,r2,810064 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80ffd0:	e0fffe17 	ldw	r3,-8(fp)
  80ffd4:	d0a00e04 	addi	r2,gp,-32712
  80ffd8:	1885883a 	add	r2,r3,r2
  80ffdc:	10800003 	ldbu	r2,0(r2)
  80ffe0:	1007883a 	mov	r3,r2
  80ffe4:	e0bffd17 	ldw	r2,-12(fp)
  80ffe8:	1885883a 	add	r2,r3,r2
  80ffec:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80fff0:	e0fff903 	ldbu	r3,-28(fp)
  80fff4:	e0bfff17 	ldw	r2,-4(fp)
  80fff8:	108008c3 	ldbu	r2,35(r2)
  80fffc:	10803fcc 	andi	r2,r2,255
  810000:	1080201c 	xori	r2,r2,128
  810004:	10bfe004 	addi	r2,r2,-128
  810008:	18800926 	beq	r3,r2,810030 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  81000c:	e0fff903 	ldbu	r3,-28(fp)
  810010:	00bfe004 	movi	r2,-128
  810014:	1884b03a 	or	r2,r3,r2
  810018:	11403fcc 	andi	r5,r2,255
  81001c:	e13fff17 	ldw	r4,-4(fp)
  810020:	080fc700 	call	80fc70 <lcd_write_command>
          sp->address = address;
  810024:	e0fff903 	ldbu	r3,-28(fp)
  810028:	e0bfff17 	ldw	r2,-4(fp)
  81002c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  810030:	e0bff943 	ldbu	r2,-27(fp)
  810034:	11403fcc 	andi	r5,r2,255
  810038:	e13fff17 	ldw	r4,-4(fp)
  81003c:	080fd280 	call	80fd28 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810040:	e0bffe17 	ldw	r2,-8(fp)
  810044:	e13ffd17 	ldw	r4,-12(fp)
  810048:	e0ffff17 	ldw	r3,-4(fp)
  81004c:	108018e4 	muli	r2,r2,99
  810050:	10c5883a 	add	r2,r2,r3
  810054:	1105883a 	add	r2,r2,r4
  810058:	10c00c04 	addi	r3,r2,48
  81005c:	e0bff943 	ldbu	r2,-27(fp)
  810060:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810064:	e0bffd17 	ldw	r2,-12(fp)
  810068:	10800044 	addi	r2,r2,1
  81006c:	e0bffd15 	stw	r2,-12(fp)
  810070:	e0bffd17 	ldw	r2,-12(fp)
  810074:	10800410 	cmplti	r2,r2,16
  810078:	103fba1e 	bne	r2,zero,80ff64 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81007c:	e0bffe17 	ldw	r2,-8(fp)
  810080:	10800044 	addi	r2,r2,1
  810084:	e0bffe15 	stw	r2,-8(fp)
  810088:	e0bffe17 	ldw	r2,-8(fp)
  81008c:	10800090 	cmplti	r2,r2,2
  810090:	103f991e 	bne	r2,zero,80fef8 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  810094:	e037883a 	mov	sp,fp
  810098:	dfc00217 	ldw	ra,8(sp)
  81009c:	df000117 	ldw	fp,4(sp)
  8100a0:	dc000017 	ldw	r16,0(sp)
  8100a4:	dec00304 	addi	sp,sp,12
  8100a8:	f800283a 	ret

008100ac <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8100ac:	defffc04 	addi	sp,sp,-16
  8100b0:	dfc00315 	stw	ra,12(sp)
  8100b4:	df000215 	stw	fp,8(sp)
  8100b8:	df000204 	addi	fp,sp,8
  8100bc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8100c0:	e03ffe15 	stw	zero,-8(fp)
  8100c4:	00001d06 	br	81013c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8100c8:	e0bffe17 	ldw	r2,-8(fp)
  8100cc:	10800048 	cmpgei	r2,r2,1
  8100d0:	10000f1e 	bne	r2,zero,810110 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8100d4:	e0bffe17 	ldw	r2,-8(fp)
  8100d8:	108018e4 	muli	r2,r2,99
  8100dc:	10c01004 	addi	r3,r2,64
  8100e0:	e0bfff17 	ldw	r2,-4(fp)
  8100e4:	1889883a 	add	r4,r3,r2
  8100e8:	e0bffe17 	ldw	r2,-8(fp)
  8100ec:	10800044 	addi	r2,r2,1
  8100f0:	108018e4 	muli	r2,r2,99
  8100f4:	10c01004 	addi	r3,r2,64
  8100f8:	e0bfff17 	ldw	r2,-4(fp)
  8100fc:	1885883a 	add	r2,r3,r2
  810100:	100b883a 	mov	r5,r2
  810104:	01801404 	movi	r6,80
  810108:	080b6f00 	call	80b6f0 <memcpy>
  81010c:	00000806 	br	810130 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  810110:	e0bffe17 	ldw	r2,-8(fp)
  810114:	108018e4 	muli	r2,r2,99
  810118:	10c01004 	addi	r3,r2,64
  81011c:	e0bfff17 	ldw	r2,-4(fp)
  810120:	1889883a 	add	r4,r3,r2
  810124:	01400804 	movi	r5,32
  810128:	01801404 	movi	r6,80
  81012c:	0806f900 	call	806f90 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810130:	e0bffe17 	ldw	r2,-8(fp)
  810134:	10800044 	addi	r2,r2,1
  810138:	e0bffe15 	stw	r2,-8(fp)
  81013c:	e0bffe17 	ldw	r2,-8(fp)
  810140:	10800090 	cmplti	r2,r2,2
  810144:	103fe01e 	bne	r2,zero,8100c8 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810148:	e0bfff17 	ldw	r2,-4(fp)
  81014c:	10800883 	ldbu	r2,34(r2)
  810150:	10bfffc4 	addi	r2,r2,-1
  810154:	1007883a 	mov	r3,r2
  810158:	e0bfff17 	ldw	r2,-4(fp)
  81015c:	10c00885 	stb	r3,34(r2)
}
  810160:	e037883a 	mov	sp,fp
  810164:	dfc00117 	ldw	ra,4(sp)
  810168:	df000017 	ldw	fp,0(sp)
  81016c:	dec00204 	addi	sp,sp,8
  810170:	f800283a 	ret

00810174 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810174:	defff804 	addi	sp,sp,-32
  810178:	dfc00715 	stw	ra,28(sp)
  81017c:	df000615 	stw	fp,24(sp)
  810180:	df000604 	addi	fp,sp,24
  810184:	e13ffd15 	stw	r4,-12(fp)
  810188:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  81018c:	e03ffc15 	stw	zero,-16(fp)
  810190:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  810194:	e0bffd17 	ldw	r2,-12(fp)
  810198:	10800a03 	ldbu	r2,40(r2)
  81019c:	10803fcc 	andi	r2,r2,255
  8101a0:	1080201c 	xori	r2,r2,128
  8101a4:	10bfe004 	addi	r2,r2,-128
  8101a8:	108016d8 	cmpnei	r2,r2,91
  8101ac:	1000491e 	bne	r2,zero,8102d4 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  8101b0:	e0bffd17 	ldw	r2,-12(fp)
  8101b4:	10800a04 	addi	r2,r2,40
  8101b8:	10800044 	addi	r2,r2,1
  8101bc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  8101c0:	00000d06 	br	8101f8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8101c4:	e0bffc17 	ldw	r2,-16(fp)
  8101c8:	10c002a4 	muli	r3,r2,10
  8101cc:	e0bffa17 	ldw	r2,-24(fp)
  8101d0:	10800003 	ldbu	r2,0(r2)
  8101d4:	10803fcc 	andi	r2,r2,255
  8101d8:	1080201c 	xori	r2,r2,128
  8101dc:	10bfe004 	addi	r2,r2,-128
  8101e0:	1885883a 	add	r2,r3,r2
  8101e4:	10bff404 	addi	r2,r2,-48
  8101e8:	e0bffc15 	stw	r2,-16(fp)
  8101ec:	e0bffa17 	ldw	r2,-24(fp)
  8101f0:	10800044 	addi	r2,r2,1
  8101f4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8101f8:	e0bffa17 	ldw	r2,-24(fp)
  8101fc:	10800003 	ldbu	r2,0(r2)
  810200:	10803fcc 	andi	r2,r2,255
  810204:	1080201c 	xori	r2,r2,128
  810208:	10bfe004 	addi	r2,r2,-128
  81020c:	1007883a 	mov	r3,r2
  810210:	00802074 	movhi	r2,129
  810214:	10935d04 	addi	r2,r2,19828
  810218:	10800017 	ldw	r2,0(r2)
  81021c:	1885883a 	add	r2,r3,r2
  810220:	10800003 	ldbu	r2,0(r2)
  810224:	10803fcc 	andi	r2,r2,255
  810228:	1080010c 	andi	r2,r2,4
  81022c:	1004c03a 	cmpne	r2,r2,zero
  810230:	103fe41e 	bne	r2,zero,8101c4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  810234:	e0bffa17 	ldw	r2,-24(fp)
  810238:	10800003 	ldbu	r2,0(r2)
  81023c:	10803fcc 	andi	r2,r2,255
  810240:	1080201c 	xori	r2,r2,128
  810244:	10bfe004 	addi	r2,r2,-128
  810248:	10800ed8 	cmpnei	r2,r2,59
  81024c:	1000231e 	bne	r2,zero,8102dc <lcd_handle_escape+0x168>
    {
      ptr++;
  810250:	e0bffa17 	ldw	r2,-24(fp)
  810254:	10800044 	addi	r2,r2,1
  810258:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  81025c:	00000d06 	br	810294 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810260:	e0bffb17 	ldw	r2,-20(fp)
  810264:	10c002a4 	muli	r3,r2,10
  810268:	e0bffa17 	ldw	r2,-24(fp)
  81026c:	10800003 	ldbu	r2,0(r2)
  810270:	10803fcc 	andi	r2,r2,255
  810274:	1080201c 	xori	r2,r2,128
  810278:	10bfe004 	addi	r2,r2,-128
  81027c:	1885883a 	add	r2,r3,r2
  810280:	10bff404 	addi	r2,r2,-48
  810284:	e0bffb15 	stw	r2,-20(fp)
  810288:	e0bffa17 	ldw	r2,-24(fp)
  81028c:	10800044 	addi	r2,r2,1
  810290:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810294:	e0bffa17 	ldw	r2,-24(fp)
  810298:	10800003 	ldbu	r2,0(r2)
  81029c:	10803fcc 	andi	r2,r2,255
  8102a0:	1080201c 	xori	r2,r2,128
  8102a4:	10bfe004 	addi	r2,r2,-128
  8102a8:	1007883a 	mov	r3,r2
  8102ac:	00802074 	movhi	r2,129
  8102b0:	10935d04 	addi	r2,r2,19828
  8102b4:	10800017 	ldw	r2,0(r2)
  8102b8:	1885883a 	add	r2,r3,r2
  8102bc:	10800003 	ldbu	r2,0(r2)
  8102c0:	10803fcc 	andi	r2,r2,255
  8102c4:	1080010c 	andi	r2,r2,4
  8102c8:	1004c03a 	cmpne	r2,r2,zero
  8102cc:	103fe41e 	bne	r2,zero,810260 <lcd_handle_escape+0xec>
  8102d0:	00000206 	br	8102dc <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8102d4:	00bfffc4 	movi	r2,-1
  8102d8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  8102dc:	e0bffe07 	ldb	r2,-8(fp)
  8102e0:	e0bfff15 	stw	r2,-4(fp)
  8102e4:	e0ffff17 	ldw	r3,-4(fp)
  8102e8:	188012a0 	cmpeqi	r2,r3,74
  8102ec:	10002f1e 	bne	r2,zero,8103ac <lcd_handle_escape+0x238>
  8102f0:	e0ffff17 	ldw	r3,-4(fp)
  8102f4:	188012c8 	cmpgei	r2,r3,75
  8102f8:	1000041e 	bne	r2,zero,81030c <lcd_handle_escape+0x198>
  8102fc:	e0ffff17 	ldw	r3,-4(fp)
  810300:	18801220 	cmpeqi	r2,r3,72
  810304:	1000081e 	bne	r2,zero,810328 <lcd_handle_escape+0x1b4>
  810308:	00004906 	br	810430 <lcd_handle_escape+0x2bc>
  81030c:	e0ffff17 	ldw	r3,-4(fp)
  810310:	188012e0 	cmpeqi	r2,r3,75
  810314:	10002b1e 	bne	r2,zero,8103c4 <lcd_handle_escape+0x250>
  810318:	e0ffff17 	ldw	r3,-4(fp)
  81031c:	188019a0 	cmpeqi	r2,r3,102
  810320:	1000011e 	bne	r2,zero,810328 <lcd_handle_escape+0x1b4>
  810324:	00004206 	br	810430 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810328:	e0bffb17 	ldw	r2,-20(fp)
  81032c:	10800050 	cmplti	r2,r2,1
  810330:	1000051e 	bne	r2,zero,810348 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  810334:	e0bffb17 	ldw	r2,-20(fp)
  810338:	10bfffc4 	addi	r2,r2,-1
  81033c:	1007883a 	mov	r3,r2
  810340:	e0bffd17 	ldw	r2,-12(fp)
  810344:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  810348:	e0bffc17 	ldw	r2,-16(fp)
  81034c:	10800050 	cmplti	r2,r2,1
  810350:	1000371e 	bne	r2,zero,810430 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  810354:	e0bffc17 	ldw	r2,-16(fp)
  810358:	10bfffc4 	addi	r2,r2,-1
  81035c:	1007883a 	mov	r3,r2
  810360:	e0bffd17 	ldw	r2,-12(fp)
  810364:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810368:	e0bffd17 	ldw	r2,-12(fp)
  81036c:	10800883 	ldbu	r2,34(r2)
  810370:	10803fcc 	andi	r2,r2,255
  810374:	10800170 	cmpltui	r2,r2,5
  810378:	1000061e 	bne	r2,zero,810394 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  81037c:	e0fffd17 	ldw	r3,-12(fp)
  810380:	00800104 	movi	r2,4
  810384:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  810388:	00000206 	br	810394 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  81038c:	e13ffd17 	ldw	r4,-12(fp)
  810390:	08100ac0 	call	8100ac <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  810394:	e0bffd17 	ldw	r2,-12(fp)
  810398:	10800883 	ldbu	r2,34(r2)
  81039c:	10803fcc 	andi	r2,r2,255
  8103a0:	108000e8 	cmpgeui	r2,r2,3
  8103a4:	103ff91e 	bne	r2,zero,81038c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  8103a8:	00002106 	br	810430 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8103ac:	e0bffc17 	ldw	r2,-16(fp)
  8103b0:	10800098 	cmpnei	r2,r2,2
  8103b4:	10001e1e 	bne	r2,zero,810430 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  8103b8:	e13ffd17 	ldw	r4,-12(fp)
  8103bc:	080fdfc0 	call	80fdfc <lcd_clear_screen>
    break;
  8103c0:	00001b06 	br	810430 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8103c4:	e0bffc17 	ldw	r2,-16(fp)
  8103c8:	10800048 	cmpgei	r2,r2,1
  8103cc:	1000181e 	bne	r2,zero,810430 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8103d0:	e0bffd17 	ldw	r2,-12(fp)
  8103d4:	10800843 	ldbu	r2,33(r2)
  8103d8:	10803fcc 	andi	r2,r2,255
  8103dc:	10801428 	cmpgeui	r2,r2,80
  8103e0:	1000131e 	bne	r2,zero,810430 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8103e4:	e0bffd17 	ldw	r2,-12(fp)
  8103e8:	10800883 	ldbu	r2,34(r2)
  8103ec:	10803fcc 	andi	r2,r2,255
  8103f0:	108018e4 	muli	r2,r2,99
  8103f4:	10c01004 	addi	r3,r2,64
  8103f8:	e0bffd17 	ldw	r2,-12(fp)
  8103fc:	1887883a 	add	r3,r3,r2
  810400:	e0bffd17 	ldw	r2,-12(fp)
  810404:	10800843 	ldbu	r2,33(r2)
  810408:	10803fcc 	andi	r2,r2,255
  81040c:	1889883a 	add	r4,r3,r2
  810410:	e0bffd17 	ldw	r2,-12(fp)
  810414:	10800843 	ldbu	r2,33(r2)
  810418:	10c03fcc 	andi	r3,r2,255
  81041c:	00801404 	movi	r2,80
  810420:	10c5c83a 	sub	r2,r2,r3
  810424:	100d883a 	mov	r6,r2
  810428:	01400804 	movi	r5,32
  81042c:	0806f900 	call	806f90 <memset>
    }
    break;
  }
}
  810430:	e037883a 	mov	sp,fp
  810434:	dfc00117 	ldw	ra,4(sp)
  810438:	df000017 	ldw	fp,0(sp)
  81043c:	dec00204 	addi	sp,sp,8
  810440:	f800283a 	ret

00810444 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  810444:	defff204 	addi	sp,sp,-56
  810448:	dfc00d15 	stw	ra,52(sp)
  81044c:	df000c15 	stw	fp,48(sp)
  810450:	dc000b15 	stw	r16,44(sp)
  810454:	df000b04 	addi	fp,sp,44
  810458:	e13ffc15 	stw	r4,-16(fp)
  81045c:	e17ffd15 	stw	r5,-12(fp)
  810460:	e1bffe15 	stw	r6,-8(fp)
  810464:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  810468:	e0bffe17 	ldw	r2,-8(fp)
  81046c:	1007883a 	mov	r3,r2
  810470:	e0bffd17 	ldw	r2,-12(fp)
  810474:	10c5883a 	add	r2,r2,r3
  810478:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  81047c:	e0fffc17 	ldw	r3,-16(fp)
  810480:	00800044 	movi	r2,1
  810484:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  810488:	0000a206 	br	810714 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  81048c:	e0bffd17 	ldw	r2,-12(fp)
  810490:	10800003 	ldbu	r2,0(r2)
  810494:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  810498:	e0bffc17 	ldw	r2,-16(fp)
  81049c:	10800903 	ldbu	r2,36(r2)
  8104a0:	10803fcc 	andi	r2,r2,255
  8104a4:	1080201c 	xori	r2,r2,128
  8104a8:	10bfe004 	addi	r2,r2,-128
  8104ac:	1004803a 	cmplt	r2,r2,zero
  8104b0:	10003b1e 	bne	r2,zero,8105a0 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  8104b4:	e0bffc17 	ldw	r2,-16(fp)
  8104b8:	10800903 	ldbu	r2,36(r2)
  8104bc:	10803fcc 	andi	r2,r2,255
  8104c0:	1080201c 	xori	r2,r2,128
  8104c4:	10bfe004 	addi	r2,r2,-128
  8104c8:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8104cc:	e0bff717 	ldw	r2,-36(fp)
  8104d0:	1004c03a 	cmpne	r2,r2,zero
  8104d4:	1000031e 	bne	r2,zero,8104e4 <altera_avalon_lcd_16207_write+0xa0>
  8104d8:	e0bff807 	ldb	r2,-32(fp)
  8104dc:	108016d8 	cmpnei	r2,r2,91
  8104e0:	1000111e 	bne	r2,zero,810528 <altera_avalon_lcd_16207_write+0xe4>
  8104e4:	e0bff717 	ldw	r2,-36(fp)
  8104e8:	1005003a 	cmpeq	r2,r2,zero
  8104ec:	10001a1e 	bne	r2,zero,810558 <altera_avalon_lcd_16207_write+0x114>
  8104f0:	e0bff807 	ldb	r2,-32(fp)
  8104f4:	1007883a 	mov	r3,r2
  8104f8:	00802074 	movhi	r2,129
  8104fc:	10935d04 	addi	r2,r2,19828
  810500:	10800017 	ldw	r2,0(r2)
  810504:	1885883a 	add	r2,r3,r2
  810508:	10800003 	ldbu	r2,0(r2)
  81050c:	10803fcc 	andi	r2,r2,255
  810510:	1080010c 	andi	r2,r2,4
  810514:	1004c03a 	cmpne	r2,r2,zero
  810518:	10000f1e 	bne	r2,zero,810558 <altera_avalon_lcd_16207_write+0x114>
  81051c:	e0bff807 	ldb	r2,-32(fp)
  810520:	10800ee0 	cmpeqi	r2,r2,59
  810524:	10000c1e 	bne	r2,zero,810558 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  810528:	e0fff717 	ldw	r3,-36(fp)
  81052c:	e0bffc17 	ldw	r2,-16(fp)
  810530:	1885883a 	add	r2,r3,r2
  810534:	10800a04 	addi	r2,r2,40
  810538:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  81053c:	e17ff807 	ldb	r5,-32(fp)
  810540:	e13ffc17 	ldw	r4,-16(fp)
  810544:	08101740 	call	810174 <lcd_handle_escape>

        sp->esccount = -1;
  810548:	e0fffc17 	ldw	r3,-16(fp)
  81054c:	00bfffc4 	movi	r2,-1
  810550:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  810554:	00006c06 	br	810708 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810558:	e0bffc17 	ldw	r2,-16(fp)
  81055c:	10800903 	ldbu	r2,36(r2)
  810560:	10803fcc 	andi	r2,r2,255
  810564:	108001e8 	cmpgeui	r2,r2,7
  810568:	1000671e 	bne	r2,zero,810708 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  81056c:	e0fff717 	ldw	r3,-36(fp)
  810570:	e0bffc17 	ldw	r2,-16(fp)
  810574:	1885883a 	add	r2,r3,r2
  810578:	10c00a04 	addi	r3,r2,40
  81057c:	e0bff803 	ldbu	r2,-32(fp)
  810580:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  810584:	e0bffc17 	ldw	r2,-16(fp)
  810588:	10800903 	ldbu	r2,36(r2)
  81058c:	10800044 	addi	r2,r2,1
  810590:	1007883a 	mov	r3,r2
  810594:	e0bffc17 	ldw	r2,-16(fp)
  810598:	10c00905 	stb	r3,36(r2)
  81059c:	00005a06 	br	810708 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  8105a0:	e0bff807 	ldb	r2,-32(fp)
  8105a4:	108006d8 	cmpnei	r2,r2,27
  8105a8:	1000031e 	bne	r2,zero,8105b8 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  8105ac:	e0bffc17 	ldw	r2,-16(fp)
  8105b0:	10000905 	stb	zero,36(r2)
  8105b4:	00005406 	br	810708 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  8105b8:	e0bff807 	ldb	r2,-32(fp)
  8105bc:	10800358 	cmpnei	r2,r2,13
  8105c0:	1000031e 	bne	r2,zero,8105d0 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  8105c4:	e0bffc17 	ldw	r2,-16(fp)
  8105c8:	10000845 	stb	zero,33(r2)
  8105cc:	00004e06 	br	810708 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  8105d0:	e0bff807 	ldb	r2,-32(fp)
  8105d4:	10800298 	cmpnei	r2,r2,10
  8105d8:	1000101e 	bne	r2,zero,81061c <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  8105dc:	e0bffc17 	ldw	r2,-16(fp)
  8105e0:	10000845 	stb	zero,33(r2)
      sp->y++;
  8105e4:	e0bffc17 	ldw	r2,-16(fp)
  8105e8:	10800883 	ldbu	r2,34(r2)
  8105ec:	10800044 	addi	r2,r2,1
  8105f0:	1007883a 	mov	r3,r2
  8105f4:	e0bffc17 	ldw	r2,-16(fp)
  8105f8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8105fc:	e0bffc17 	ldw	r2,-16(fp)
  810600:	10800883 	ldbu	r2,34(r2)
  810604:	10803fcc 	andi	r2,r2,255
  810608:	108000f0 	cmpltui	r2,r2,3
  81060c:	10003e1e 	bne	r2,zero,810708 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  810610:	e13ffc17 	ldw	r4,-16(fp)
  810614:	08100ac0 	call	8100ac <lcd_scroll_up>
  810618:	00003b06 	br	810708 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  81061c:	e0bff807 	ldb	r2,-32(fp)
  810620:	10800218 	cmpnei	r2,r2,8
  810624:	10000c1e 	bne	r2,zero,810658 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  810628:	e0bffc17 	ldw	r2,-16(fp)
  81062c:	10800843 	ldbu	r2,33(r2)
  810630:	10803fcc 	andi	r2,r2,255
  810634:	1005003a 	cmpeq	r2,r2,zero
  810638:	1000331e 	bne	r2,zero,810708 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  81063c:	e0bffc17 	ldw	r2,-16(fp)
  810640:	10800843 	ldbu	r2,33(r2)
  810644:	10bfffc4 	addi	r2,r2,-1
  810648:	1007883a 	mov	r3,r2
  81064c:	e0bffc17 	ldw	r2,-16(fp)
  810650:	10c00845 	stb	r3,33(r2)
  810654:	00002c06 	br	810708 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  810658:	e0bff807 	ldb	r2,-32(fp)
  81065c:	1007883a 	mov	r3,r2
  810660:	00802074 	movhi	r2,129
  810664:	10935d04 	addi	r2,r2,19828
  810668:	10800017 	ldw	r2,0(r2)
  81066c:	1885883a 	add	r2,r3,r2
  810670:	10800003 	ldbu	r2,0(r2)
  810674:	10803fcc 	andi	r2,r2,255
  810678:	1080201c 	xori	r2,r2,128
  81067c:	10bfe004 	addi	r2,r2,-128
  810680:	108025cc 	andi	r2,r2,151
  810684:	1005003a 	cmpeq	r2,r2,zero
  810688:	10001f1e 	bne	r2,zero,810708 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  81068c:	e0bffc17 	ldw	r2,-16(fp)
  810690:	10800883 	ldbu	r2,34(r2)
  810694:	10803fcc 	andi	r2,r2,255
  810698:	108000b0 	cmpltui	r2,r2,2
  81069c:	1000021e 	bne	r2,zero,8106a8 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  8106a0:	e13ffc17 	ldw	r4,-16(fp)
  8106a4:	08100ac0 	call	8100ac <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8106a8:	e0bffc17 	ldw	r2,-16(fp)
  8106ac:	10800843 	ldbu	r2,33(r2)
  8106b0:	10803fcc 	andi	r2,r2,255
  8106b4:	10801428 	cmpgeui	r2,r2,80
  8106b8:	10000d1e 	bne	r2,zero,8106f0 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  8106bc:	e0bffc17 	ldw	r2,-16(fp)
  8106c0:	10800883 	ldbu	r2,34(r2)
  8106c4:	11003fcc 	andi	r4,r2,255
  8106c8:	e0bffc17 	ldw	r2,-16(fp)
  8106cc:	10800843 	ldbu	r2,33(r2)
  8106d0:	11403fcc 	andi	r5,r2,255
  8106d4:	e0fffc17 	ldw	r3,-16(fp)
  8106d8:	208018e4 	muli	r2,r4,99
  8106dc:	10c5883a 	add	r2,r2,r3
  8106e0:	1145883a 	add	r2,r2,r5
  8106e4:	10c01004 	addi	r3,r2,64
  8106e8:	e0bff803 	ldbu	r2,-32(fp)
  8106ec:	18800005 	stb	r2,0(r3)

      sp->x++;
  8106f0:	e0bffc17 	ldw	r2,-16(fp)
  8106f4:	10800843 	ldbu	r2,33(r2)
  8106f8:	10800044 	addi	r2,r2,1
  8106fc:	1007883a 	mov	r3,r2
  810700:	e0bffc17 	ldw	r2,-16(fp)
  810704:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  810708:	e0bffd17 	ldw	r2,-12(fp)
  81070c:	10800044 	addi	r2,r2,1
  810710:	e0bffd15 	stw	r2,-12(fp)
  810714:	e0fffd17 	ldw	r3,-12(fp)
  810718:	e0bffb17 	ldw	r2,-20(fp)
  81071c:	18bf5b36 	bltu	r3,r2,81048c <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  810720:	00800404 	movi	r2,16
  810724:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810728:	e03ffa15 	stw	zero,-24(fp)
  81072c:	00003606 	br	810808 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810730:	00801404 	movi	r2,80
  810734:	e0bff615 	stw	r2,-40(fp)
  810738:	00001106 	br	810780 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  81073c:	e13ffa17 	ldw	r4,-24(fp)
  810740:	e0bff617 	ldw	r2,-40(fp)
  810744:	117fffc4 	addi	r5,r2,-1
  810748:	e0fffc17 	ldw	r3,-16(fp)
  81074c:	208018e4 	muli	r2,r4,99
  810750:	10c5883a 	add	r2,r2,r3
  810754:	1145883a 	add	r2,r2,r5
  810758:	10801004 	addi	r2,r2,64
  81075c:	10800003 	ldbu	r2,0(r2)
  810760:	10803fcc 	andi	r2,r2,255
  810764:	1080201c 	xori	r2,r2,128
  810768:	10bfe004 	addi	r2,r2,-128
  81076c:	10800818 	cmpnei	r2,r2,32
  810770:	1000061e 	bne	r2,zero,81078c <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810774:	e0bff617 	ldw	r2,-40(fp)
  810778:	10bfffc4 	addi	r2,r2,-1
  81077c:	e0bff615 	stw	r2,-40(fp)
  810780:	e0bff617 	ldw	r2,-40(fp)
  810784:	10800048 	cmpgei	r2,r2,1
  810788:	103fec1e 	bne	r2,zero,81073c <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  81078c:	e0bff617 	ldw	r2,-40(fp)
  810790:	10800448 	cmpgei	r2,r2,17
  810794:	1000031e 	bne	r2,zero,8107a4 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  810798:	00800404 	movi	r2,16
  81079c:	e0bff615 	stw	r2,-40(fp)
  8107a0:	00000306 	br	8107b0 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  8107a4:	e0bff617 	ldw	r2,-40(fp)
  8107a8:	10800044 	addi	r2,r2,1
  8107ac:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  8107b0:	e13ffa17 	ldw	r4,-24(fp)
  8107b4:	e0bff617 	ldw	r2,-40(fp)
  8107b8:	100b883a 	mov	r5,r2
  8107bc:	e0fffc17 	ldw	r3,-16(fp)
  8107c0:	208018e4 	muli	r2,r4,99
  8107c4:	10c5883a 	add	r2,r2,r3
  8107c8:	10802404 	addi	r2,r2,144
  8107cc:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  8107d0:	e0fff917 	ldw	r3,-28(fp)
  8107d4:	e0bff617 	ldw	r2,-40(fp)
  8107d8:	1880020e 	bge	r3,r2,8107e4 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  8107dc:	e0bff617 	ldw	r2,-40(fp)
  8107e0:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8107e4:	e0bffa17 	ldw	r2,-24(fp)
  8107e8:	e0fffc17 	ldw	r3,-16(fp)
  8107ec:	108018e4 	muli	r2,r2,99
  8107f0:	10c5883a 	add	r2,r2,r3
  8107f4:	10802404 	addi	r2,r2,144
  8107f8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8107fc:	e0bffa17 	ldw	r2,-24(fp)
  810800:	10800044 	addi	r2,r2,1
  810804:	e0bffa15 	stw	r2,-24(fp)
  810808:	e0bffa17 	ldw	r2,-24(fp)
  81080c:	10800090 	cmplti	r2,r2,2
  810810:	103fc71e 	bne	r2,zero,810730 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  810814:	e0bff917 	ldw	r2,-28(fp)
  810818:	10800448 	cmpgei	r2,r2,17
  81081c:	1000031e 	bne	r2,zero,81082c <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  810820:	e0bffc17 	ldw	r2,-16(fp)
  810824:	10000985 	stb	zero,38(r2)
  810828:	00002d06 	br	8108e0 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  81082c:	e0bff917 	ldw	r2,-28(fp)
  810830:	1085883a 	add	r2,r2,r2
  810834:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  810838:	e0bff917 	ldw	r2,-28(fp)
  81083c:	1007883a 	mov	r3,r2
  810840:	e0bffc17 	ldw	r2,-16(fp)
  810844:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810848:	e03ffa15 	stw	zero,-24(fp)
  81084c:	00002106 	br	8108d4 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  810850:	e0bffa17 	ldw	r2,-24(fp)
  810854:	e0fffc17 	ldw	r3,-16(fp)
  810858:	108018e4 	muli	r2,r2,99
  81085c:	10c5883a 	add	r2,r2,r3
  810860:	10802404 	addi	r2,r2,144
  810864:	10800043 	ldbu	r2,1(r2)
  810868:	10803fcc 	andi	r2,r2,255
  81086c:	1080201c 	xori	r2,r2,128
  810870:	10bfe004 	addi	r2,r2,-128
  810874:	10800450 	cmplti	r2,r2,17
  810878:	1000131e 	bne	r2,zero,8108c8 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  81087c:	e43ffa17 	ldw	r16,-24(fp)
  810880:	e0bffa17 	ldw	r2,-24(fp)
  810884:	e0fffc17 	ldw	r3,-16(fp)
  810888:	108018e4 	muli	r2,r2,99
  81088c:	10c5883a 	add	r2,r2,r3
  810890:	10802404 	addi	r2,r2,144
  810894:	10800043 	ldbu	r2,1(r2)
  810898:	10803fcc 	andi	r2,r2,255
  81089c:	1080201c 	xori	r2,r2,128
  8108a0:	10bfe004 	addi	r2,r2,-128
  8108a4:	1008923a 	slli	r4,r2,8
  8108a8:	e17ff917 	ldw	r5,-28(fp)
  8108ac:	080e2500 	call	80e250 <__divsi3>
  8108b0:	1009883a 	mov	r4,r2
  8108b4:	e0fffc17 	ldw	r3,-16(fp)
  8108b8:	808018e4 	muli	r2,r16,99
  8108bc:	10c5883a 	add	r2,r2,r3
  8108c0:	10802404 	addi	r2,r2,144
  8108c4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8108c8:	e0bffa17 	ldw	r2,-24(fp)
  8108cc:	10800044 	addi	r2,r2,1
  8108d0:	e0bffa15 	stw	r2,-24(fp)
  8108d4:	e0bffa17 	ldw	r2,-24(fp)
  8108d8:	10800090 	cmplti	r2,r2,2
  8108dc:	103fdc1e 	bne	r2,zero,810850 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8108e0:	e0bffc17 	ldw	r2,-16(fp)
  8108e4:	10800943 	ldbu	r2,37(r2)
  8108e8:	10803fcc 	andi	r2,r2,255
  8108ec:	1080201c 	xori	r2,r2,128
  8108f0:	10bfe004 	addi	r2,r2,-128
  8108f4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  8108f8:	e13ffc17 	ldw	r4,-16(fp)
  8108fc:	080fec00 	call	80fec0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  810900:	e0bffc17 	ldw	r2,-16(fp)
  810904:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  810908:	e0bffc17 	ldw	r2,-16(fp)
  81090c:	10800943 	ldbu	r2,37(r2)
  810910:	10c03fcc 	andi	r3,r2,255
  810914:	18c0201c 	xori	r3,r3,128
  810918:	18ffe004 	addi	r3,r3,-128
  81091c:	e0bff517 	ldw	r2,-44(fp)
  810920:	18800426 	beq	r3,r2,810934 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  810924:	e0fffc17 	ldw	r3,-16(fp)
  810928:	00800044 	movi	r2,1
  81092c:	188009c5 	stb	r2,39(r3)
  }
  810930:	003feb06 	br	8108e0 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  810934:	e0bffe17 	ldw	r2,-8(fp)
}
  810938:	e037883a 	mov	sp,fp
  81093c:	dfc00217 	ldw	ra,8(sp)
  810940:	df000117 	ldw	fp,4(sp)
  810944:	dc000017 	ldw	r16,0(sp)
  810948:	dec00304 	addi	sp,sp,12
  81094c:	f800283a 	ret

00810950 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  810950:	defffc04 	addi	sp,sp,-16
  810954:	dfc00315 	stw	ra,12(sp)
  810958:	df000215 	stw	fp,8(sp)
  81095c:	df000204 	addi	fp,sp,8
  810960:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  810964:	e0bfff17 	ldw	r2,-4(fp)
  810968:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81096c:	e0bffe17 	ldw	r2,-8(fp)
  810970:	10800943 	ldbu	r2,37(r2)
  810974:	10803fcc 	andi	r2,r2,255
  810978:	1080201c 	xori	r2,r2,128
  81097c:	10bfe004 	addi	r2,r2,-128
  810980:	10c00044 	addi	r3,r2,1
  810984:	e0bffe17 	ldw	r2,-8(fp)
  810988:	10800983 	ldbu	r2,38(r2)
  81098c:	10803fcc 	andi	r2,r2,255
  810990:	1080201c 	xori	r2,r2,128
  810994:	10bfe004 	addi	r2,r2,-128
  810998:	18800316 	blt	r3,r2,8109a8 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  81099c:	e0bffe17 	ldw	r2,-8(fp)
  8109a0:	10000945 	stb	zero,37(r2)
  8109a4:	00000606 	br	8109c0 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8109a8:	e0bffe17 	ldw	r2,-8(fp)
  8109ac:	10800943 	ldbu	r2,37(r2)
  8109b0:	10800044 	addi	r2,r2,1
  8109b4:	1007883a 	mov	r3,r2
  8109b8:	e0bffe17 	ldw	r2,-8(fp)
  8109bc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8109c0:	e0bffe17 	ldw	r2,-8(fp)
  8109c4:	10800983 	ldbu	r2,38(r2)
  8109c8:	10803fcc 	andi	r2,r2,255
  8109cc:	1080201c 	xori	r2,r2,128
  8109d0:	10bfe004 	addi	r2,r2,-128
  8109d4:	10800050 	cmplti	r2,r2,1
  8109d8:	1000091e 	bne	r2,zero,810a00 <alt_lcd_16207_timeout+0xb0>
  8109dc:	e0bffe17 	ldw	r2,-8(fp)
  8109e0:	108009c3 	ldbu	r2,39(r2)
  8109e4:	10803fcc 	andi	r2,r2,255
  8109e8:	1080201c 	xori	r2,r2,128
  8109ec:	10bfe004 	addi	r2,r2,-128
  8109f0:	1004c03a 	cmpne	r2,r2,zero
  8109f4:	1000021e 	bne	r2,zero,810a00 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  8109f8:	e13ffe17 	ldw	r4,-8(fp)
  8109fc:	080fec00 	call	80fec0 <lcd_repaint_screen>

  return sp->period;
  810a00:	e0bffe17 	ldw	r2,-8(fp)
  810a04:	10800717 	ldw	r2,28(r2)
}
  810a08:	e037883a 	mov	sp,fp
  810a0c:	dfc00117 	ldw	ra,4(sp)
  810a10:	df000017 	ldw	fp,0(sp)
  810a14:	dec00204 	addi	sp,sp,8
  810a18:	f800283a 	ret

00810a1c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  810a1c:	defffc04 	addi	sp,sp,-16
  810a20:	dfc00315 	stw	ra,12(sp)
  810a24:	df000215 	stw	fp,8(sp)
  810a28:	df000204 	addi	fp,sp,8
  810a2c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  810a30:	e0bfff17 	ldw	r2,-4(fp)
  810a34:	10800017 	ldw	r2,0(r2)
  810a38:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  810a3c:	e0bfff17 	ldw	r2,-4(fp)
  810a40:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  810a44:	010ea604 	movi	r4,15000
  810a48:	08121f40 	call	8121f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810a4c:	e0bffe17 	ldw	r2,-8(fp)
  810a50:	1007883a 	mov	r3,r2
  810a54:	00800c04 	movi	r2,48
  810a58:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  810a5c:	01040104 	movi	r4,4100
  810a60:	08121f40 	call	8121f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810a64:	e0bffe17 	ldw	r2,-8(fp)
  810a68:	1007883a 	mov	r3,r2
  810a6c:	00800c04 	movi	r2,48
  810a70:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  810a74:	0100fa04 	movi	r4,1000
  810a78:	08121f40 	call	8121f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810a7c:	e0bffe17 	ldw	r2,-8(fp)
  810a80:	1007883a 	mov	r3,r2
  810a84:	00800c04 	movi	r2,48
  810a88:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810a8c:	e13fff17 	ldw	r4,-4(fp)
  810a90:	01400e04 	movi	r5,56
  810a94:	080fc700 	call	80fc70 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  810a98:	e13fff17 	ldw	r4,-4(fp)
  810a9c:	01400204 	movi	r5,8
  810aa0:	080fc700 	call	80fc70 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  810aa4:	e13fff17 	ldw	r4,-4(fp)
  810aa8:	080fdfc0 	call	80fdfc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  810aac:	e13fff17 	ldw	r4,-4(fp)
  810ab0:	01400184 	movi	r5,6
  810ab4:	080fc700 	call	80fc70 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  810ab8:	e13fff17 	ldw	r4,-4(fp)
  810abc:	01400304 	movi	r5,12
  810ac0:	080fc700 	call	80fc70 <lcd_write_command>

  sp->esccount = -1;
  810ac4:	e0ffff17 	ldw	r3,-4(fp)
  810ac8:	00bfffc4 	movi	r2,-1
  810acc:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  810ad0:	e0bfff17 	ldw	r2,-4(fp)
  810ad4:	11000a04 	addi	r4,r2,40
  810ad8:	000b883a 	mov	r5,zero
  810adc:	01800204 	movi	r6,8
  810ae0:	0806f900 	call	806f90 <memset>

  sp->scrollpos = 0;
  810ae4:	e0bfff17 	ldw	r2,-4(fp)
  810ae8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  810aec:	e0bfff17 	ldw	r2,-4(fp)
  810af0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  810af4:	e0bfff17 	ldw	r2,-4(fp)
  810af8:	100009c5 	stb	zero,39(r2)
  810afc:	00802074 	movhi	r2,129
  810b00:	109a7c04 	addi	r2,r2,27120
  810b04:	10800017 	ldw	r2,0(r2)
  810b08:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  810b0c:	01400284 	movi	r5,10
  810b10:	080e3100 	call	80e310 <__udivsi3>
  810b14:	1007883a 	mov	r3,r2
  810b18:	e0bfff17 	ldw	r2,-4(fp)
  810b1c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  810b20:	e0bfff17 	ldw	r2,-4(fp)
  810b24:	11000104 	addi	r4,r2,4
  810b28:	e0bfff17 	ldw	r2,-4(fp)
  810b2c:	10800717 	ldw	r2,28(r2)
  810b30:	100b883a 	mov	r5,r2
  810b34:	01802074 	movhi	r6,129
  810b38:	31825404 	addi	r6,r6,2384
  810b3c:	e1ffff17 	ldw	r7,-4(fp)
  810b40:	08116600 	call	811660 <alt_alarm_start>
}
  810b44:	e037883a 	mov	sp,fp
  810b48:	dfc00117 	ldw	ra,4(sp)
  810b4c:	df000017 	ldw	fp,0(sp)
  810b50:	dec00204 	addi	sp,sp,8
  810b54:	f800283a 	ret

00810b58 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810b58:	defffa04 	addi	sp,sp,-24
  810b5c:	dfc00515 	stw	ra,20(sp)
  810b60:	df000415 	stw	fp,16(sp)
  810b64:	df000404 	addi	fp,sp,16
  810b68:	e13ffd15 	stw	r4,-12(fp)
  810b6c:	e17ffe15 	stw	r5,-8(fp)
  810b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  810b74:	e0bffd17 	ldw	r2,-12(fp)
  810b78:	10800017 	ldw	r2,0(r2)
  810b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  810b80:	e0bffc17 	ldw	r2,-16(fp)
  810b84:	11000a04 	addi	r4,r2,40
  810b88:	e0bffd17 	ldw	r2,-12(fp)
  810b8c:	11c00217 	ldw	r7,8(r2)
  810b90:	e17ffe17 	ldw	r5,-8(fp)
  810b94:	e1bfff17 	ldw	r6,-4(fp)
  810b98:	08104440 	call	810444 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  810b9c:	e037883a 	mov	sp,fp
  810ba0:	dfc00117 	ldw	ra,4(sp)
  810ba4:	df000017 	ldw	fp,0(sp)
  810ba8:	dec00204 	addi	sp,sp,8
  810bac:	f800283a 	ret

00810bb0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  810bb0:	defffa04 	addi	sp,sp,-24
  810bb4:	dfc00515 	stw	ra,20(sp)
  810bb8:	df000415 	stw	fp,16(sp)
  810bbc:	df000404 	addi	fp,sp,16
  810bc0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  810bc4:	e0bfff17 	ldw	r2,-4(fp)
  810bc8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  810bcc:	e0bfff17 	ldw	r2,-4(fp)
  810bd0:	10800104 	addi	r2,r2,4
  810bd4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810bd8:	0005303a 	rdctl	r2,status
  810bdc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810be0:	e0fffd17 	ldw	r3,-12(fp)
  810be4:	00bfff84 	movi	r2,-2
  810be8:	1884703a 	and	r2,r3,r2
  810bec:	1001703a 	wrctl	status,r2
  
  return context;
  810bf0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  810bf4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  810bf8:	08120e80 	call	8120e8 <alt_tick>
  810bfc:	e0bffe17 	ldw	r2,-8(fp)
  810c00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c04:	e0bffc17 	ldw	r2,-16(fp)
  810c08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  810c0c:	e037883a 	mov	sp,fp
  810c10:	dfc00117 	ldw	ra,4(sp)
  810c14:	df000017 	ldw	fp,0(sp)
  810c18:	dec00204 	addi	sp,sp,8
  810c1c:	f800283a 	ret

00810c20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810c20:	defff804 	addi	sp,sp,-32
  810c24:	dfc00715 	stw	ra,28(sp)
  810c28:	df000615 	stw	fp,24(sp)
  810c2c:	df000604 	addi	fp,sp,24
  810c30:	e13ffc15 	stw	r4,-16(fp)
  810c34:	e17ffd15 	stw	r5,-12(fp)
  810c38:	e1bffe15 	stw	r6,-8(fp)
  810c3c:	e1ffff15 	stw	r7,-4(fp)
  810c40:	e0bfff17 	ldw	r2,-4(fp)
  810c44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  810c48:	00802074 	movhi	r2,129
  810c4c:	109a7c04 	addi	r2,r2,27120
  810c50:	10800017 	ldw	r2,0(r2)
  810c54:	1004c03a 	cmpne	r2,r2,zero
  810c58:	1000041e 	bne	r2,zero,810c6c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  810c5c:	00c02074 	movhi	r3,129
  810c60:	18da7c04 	addi	r3,r3,27120
  810c64:	e0bffb17 	ldw	r2,-20(fp)
  810c68:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810c6c:	e0bffc17 	ldw	r2,-16(fp)
  810c70:	10800104 	addi	r2,r2,4
  810c74:	1007883a 	mov	r3,r2
  810c78:	008001c4 	movi	r2,7
  810c7c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  810c80:	d8000015 	stw	zero,0(sp)
  810c84:	e13ffd17 	ldw	r4,-12(fp)
  810c88:	e17ffe17 	ldw	r5,-8(fp)
  810c8c:	01802074 	movhi	r6,129
  810c90:	3182ec04 	addi	r6,r6,2992
  810c94:	e1fffc17 	ldw	r7,-16(fp)
  810c98:	0811c480 	call	811c48 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  810c9c:	e037883a 	mov	sp,fp
  810ca0:	dfc00117 	ldw	ra,4(sp)
  810ca4:	df000017 	ldw	fp,0(sp)
  810ca8:	dec00204 	addi	sp,sp,8
  810cac:	f800283a 	ret

00810cb0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810cb0:	defffa04 	addi	sp,sp,-24
  810cb4:	dfc00515 	stw	ra,20(sp)
  810cb8:	df000415 	stw	fp,16(sp)
  810cbc:	df000404 	addi	fp,sp,16
  810cc0:	e13ffd15 	stw	r4,-12(fp)
  810cc4:	e17ffe15 	stw	r5,-8(fp)
  810cc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810ccc:	e0bffd17 	ldw	r2,-12(fp)
  810cd0:	10800017 	ldw	r2,0(r2)
  810cd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  810cd8:	e0bffc17 	ldw	r2,-16(fp)
  810cdc:	11000a04 	addi	r4,r2,40
  810ce0:	e0bffd17 	ldw	r2,-12(fp)
  810ce4:	11c00217 	ldw	r7,8(r2)
  810ce8:	e17ffe17 	ldw	r5,-8(fp)
  810cec:	e1bfff17 	ldw	r6,-4(fp)
  810cf0:	08111a80 	call	8111a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
  810cf4:	e037883a 	mov	sp,fp
  810cf8:	dfc00117 	ldw	ra,4(sp)
  810cfc:	df000017 	ldw	fp,0(sp)
  810d00:	dec00204 	addi	sp,sp,8
  810d04:	f800283a 	ret

00810d08 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810d08:	defffa04 	addi	sp,sp,-24
  810d0c:	dfc00515 	stw	ra,20(sp)
  810d10:	df000415 	stw	fp,16(sp)
  810d14:	df000404 	addi	fp,sp,16
  810d18:	e13ffd15 	stw	r4,-12(fp)
  810d1c:	e17ffe15 	stw	r5,-8(fp)
  810d20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810d24:	e0bffd17 	ldw	r2,-12(fp)
  810d28:	10800017 	ldw	r2,0(r2)
  810d2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  810d30:	e0bffc17 	ldw	r2,-16(fp)
  810d34:	11000a04 	addi	r4,r2,40
  810d38:	e0bffd17 	ldw	r2,-12(fp)
  810d3c:	11c00217 	ldw	r7,8(r2)
  810d40:	e17ffe17 	ldw	r5,-8(fp)
  810d44:	e1bfff17 	ldw	r6,-4(fp)
  810d48:	08114380 	call	811438 <altera_avalon_uart_write>
      fd->fd_flags);
}
  810d4c:	e037883a 	mov	sp,fp
  810d50:	dfc00117 	ldw	ra,4(sp)
  810d54:	df000017 	ldw	fp,0(sp)
  810d58:	dec00204 	addi	sp,sp,8
  810d5c:	f800283a 	ret

00810d60 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  810d60:	defffc04 	addi	sp,sp,-16
  810d64:	dfc00315 	stw	ra,12(sp)
  810d68:	df000215 	stw	fp,8(sp)
  810d6c:	df000204 	addi	fp,sp,8
  810d70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810d74:	e0bfff17 	ldw	r2,-4(fp)
  810d78:	10800017 	ldw	r2,0(r2)
  810d7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  810d80:	e0bffe17 	ldw	r2,-8(fp)
  810d84:	11000a04 	addi	r4,r2,40
  810d88:	e0bfff17 	ldw	r2,-4(fp)
  810d8c:	11400217 	ldw	r5,8(r2)
  810d90:	08111480 	call	811148 <altera_avalon_uart_close>
}
  810d94:	e037883a 	mov	sp,fp
  810d98:	dfc00117 	ldw	ra,4(sp)
  810d9c:	df000017 	ldw	fp,0(sp)
  810da0:	dec00204 	addi	sp,sp,8
  810da4:	f800283a 	ret

00810da8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  810da8:	defff704 	addi	sp,sp,-36
  810dac:	dfc00815 	stw	ra,32(sp)
  810db0:	df000715 	stw	fp,28(sp)
  810db4:	df000704 	addi	fp,sp,28
  810db8:	e13ffc15 	stw	r4,-16(fp)
  810dbc:	e17ffd15 	stw	r5,-12(fp)
  810dc0:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  810dc4:	e0bffc17 	ldw	r2,-16(fp)
  810dc8:	10800017 	ldw	r2,0(r2)
  810dcc:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  810dd0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  810dd4:	1004c03a 	cmpne	r2,r2,zero
  810dd8:	1000061e 	bne	r2,zero,810df4 <altera_avalon_uart_init+0x4c>
  810ddc:	0005883a 	mov	r2,zero
  810de0:	1004c03a 	cmpne	r2,r2,zero
  810de4:	1000031e 	bne	r2,zero,810df4 <altera_avalon_uart_init+0x4c>
  810de8:	0005883a 	mov	r2,zero
  810dec:	1005003a 	cmpeq	r2,r2,zero
  810df0:	1000031e 	bne	r2,zero,810e00 <altera_avalon_uart_init+0x58>
  810df4:	00800044 	movi	r2,1
  810df8:	e0bfff15 	stw	r2,-4(fp)
  810dfc:	00000106 	br	810e04 <altera_avalon_uart_init+0x5c>
  810e00:	e03fff15 	stw	zero,-4(fp)
  810e04:	e0bfff17 	ldw	r2,-4(fp)
  810e08:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  810e0c:	e0bffa17 	ldw	r2,-24(fp)
  810e10:	1004c03a 	cmpne	r2,r2,zero
  810e14:	1000111e 	bne	r2,zero,810e5c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  810e18:	e0fffc17 	ldw	r3,-16(fp)
  810e1c:	00832004 	movi	r2,3200
  810e20:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  810e24:	e0bffb17 	ldw	r2,-20(fp)
  810e28:	11000304 	addi	r4,r2,12
  810e2c:	e0bffc17 	ldw	r2,-16(fp)
  810e30:	10800117 	ldw	r2,4(r2)
  810e34:	1007883a 	mov	r3,r2
  810e38:	2005883a 	mov	r2,r4
  810e3c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  810e40:	d8000015 	stw	zero,0(sp)
  810e44:	e13ffd17 	ldw	r4,-12(fp)
  810e48:	e17ffe17 	ldw	r5,-8(fp)
  810e4c:	01802074 	movhi	r6,129
  810e50:	31839c04 	addi	r6,r6,3696
  810e54:	e1fffc17 	ldw	r7,-16(fp)
  810e58:	0811c480 	call	811c48 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  810e5c:	e037883a 	mov	sp,fp
  810e60:	dfc00117 	ldw	ra,4(sp)
  810e64:	df000017 	ldw	fp,0(sp)
  810e68:	dec00204 	addi	sp,sp,8
  810e6c:	f800283a 	ret

00810e70 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  810e70:	defffa04 	addi	sp,sp,-24
  810e74:	dfc00515 	stw	ra,20(sp)
  810e78:	df000415 	stw	fp,16(sp)
  810e7c:	df000404 	addi	fp,sp,16
  810e80:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  810e84:	e0bfff17 	ldw	r2,-4(fp)
  810e88:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  810e8c:	e0bffd17 	ldw	r2,-12(fp)
  810e90:	10800017 	ldw	r2,0(r2)
  810e94:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  810e98:	e0bffc17 	ldw	r2,-16(fp)
  810e9c:	10800204 	addi	r2,r2,8
  810ea0:	10800037 	ldwio	r2,0(r2)
  810ea4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  810ea8:	e0bffc17 	ldw	r2,-16(fp)
  810eac:	10800204 	addi	r2,r2,8
  810eb0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  810eb4:	e0bffc17 	ldw	r2,-16(fp)
  810eb8:	10800204 	addi	r2,r2,8
  810ebc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  810ec0:	e0bffe17 	ldw	r2,-8(fp)
  810ec4:	1080200c 	andi	r2,r2,128
  810ec8:	1005003a 	cmpeq	r2,r2,zero
  810ecc:	1000031e 	bne	r2,zero,810edc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  810ed0:	e13ffd17 	ldw	r4,-12(fp)
  810ed4:	e17ffe17 	ldw	r5,-8(fp)
  810ed8:	0810f0c0 	call	810f0c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  810edc:	e0bffe17 	ldw	r2,-8(fp)
  810ee0:	1081100c 	andi	r2,r2,1088
  810ee4:	1005003a 	cmpeq	r2,r2,zero
  810ee8:	1000031e 	bne	r2,zero,810ef8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  810eec:	e13ffd17 	ldw	r4,-12(fp)
  810ef0:	e17ffe17 	ldw	r5,-8(fp)
  810ef4:	0810fec0 	call	810fec <altera_avalon_uart_txirq>
  }
  

}
  810ef8:	e037883a 	mov	sp,fp
  810efc:	dfc00117 	ldw	ra,4(sp)
  810f00:	df000017 	ldw	fp,0(sp)
  810f04:	dec00204 	addi	sp,sp,8
  810f08:	f800283a 	ret

00810f0c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810f0c:	defffc04 	addi	sp,sp,-16
  810f10:	df000315 	stw	fp,12(sp)
  810f14:	df000304 	addi	fp,sp,12
  810f18:	e13ffe15 	stw	r4,-8(fp)
  810f1c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  810f20:	e0bfff17 	ldw	r2,-4(fp)
  810f24:	108000cc 	andi	r2,r2,3
  810f28:	1004c03a 	cmpne	r2,r2,zero
  810f2c:	10002b1e 	bne	r2,zero,810fdc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  810f30:	e0bffe17 	ldw	r2,-8(fp)
  810f34:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810f38:	e0bffe17 	ldw	r2,-8(fp)
  810f3c:	10800317 	ldw	r2,12(r2)
  810f40:	10800044 	addi	r2,r2,1
  810f44:	10800fcc 	andi	r2,r2,63
  810f48:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  810f4c:	e0bffe17 	ldw	r2,-8(fp)
  810f50:	11000317 	ldw	r4,12(r2)
  810f54:	e0bffe17 	ldw	r2,-8(fp)
  810f58:	10800017 	ldw	r2,0(r2)
  810f5c:	10800037 	ldwio	r2,0(r2)
  810f60:	1007883a 	mov	r3,r2
  810f64:	e0bffe17 	ldw	r2,-8(fp)
  810f68:	2085883a 	add	r2,r4,r2
  810f6c:	10800704 	addi	r2,r2,28
  810f70:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  810f74:	e0fffe17 	ldw	r3,-8(fp)
  810f78:	e0bffd17 	ldw	r2,-12(fp)
  810f7c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810f80:	e0bffe17 	ldw	r2,-8(fp)
  810f84:	10800317 	ldw	r2,12(r2)
  810f88:	10800044 	addi	r2,r2,1
  810f8c:	10800fcc 	andi	r2,r2,63
  810f90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  810f94:	e0bffe17 	ldw	r2,-8(fp)
  810f98:	10c00217 	ldw	r3,8(r2)
  810f9c:	e0bffd17 	ldw	r2,-12(fp)
  810fa0:	18800e1e 	bne	r3,r2,810fdc <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810fa4:	e0bffe17 	ldw	r2,-8(fp)
  810fa8:	10c00117 	ldw	r3,4(r2)
  810fac:	00bfdfc4 	movi	r2,-129
  810fb0:	1886703a 	and	r3,r3,r2
  810fb4:	e0bffe17 	ldw	r2,-8(fp)
  810fb8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  810fbc:	e0bffe17 	ldw	r2,-8(fp)
  810fc0:	10800017 	ldw	r2,0(r2)
  810fc4:	11000304 	addi	r4,r2,12
  810fc8:	e0bffe17 	ldw	r2,-8(fp)
  810fcc:	10800117 	ldw	r2,4(r2)
  810fd0:	1007883a 	mov	r3,r2
  810fd4:	2005883a 	mov	r2,r4
  810fd8:	10c00035 	stwio	r3,0(r2)
  }   
}
  810fdc:	e037883a 	mov	sp,fp
  810fe0:	df000017 	ldw	fp,0(sp)
  810fe4:	dec00104 	addi	sp,sp,4
  810fe8:	f800283a 	ret

00810fec <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  810fec:	defffd04 	addi	sp,sp,-12
  810ff0:	df000215 	stw	fp,8(sp)
  810ff4:	df000204 	addi	fp,sp,8
  810ff8:	e13ffe15 	stw	r4,-8(fp)
  810ffc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811000:	e0bffe17 	ldw	r2,-8(fp)
  811004:	10c00417 	ldw	r3,16(r2)
  811008:	e0bffe17 	ldw	r2,-8(fp)
  81100c:	10800517 	ldw	r2,20(r2)
  811010:	18803626 	beq	r3,r2,8110ec <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  811014:	e0bffe17 	ldw	r2,-8(fp)
  811018:	10800617 	ldw	r2,24(r2)
  81101c:	1080008c 	andi	r2,r2,2
  811020:	1005003a 	cmpeq	r2,r2,zero
  811024:	1000041e 	bne	r2,zero,811038 <altera_avalon_uart_txirq+0x4c>
  811028:	e0bfff17 	ldw	r2,-4(fp)
  81102c:	1082000c 	andi	r2,r2,2048
  811030:	1005003a 	cmpeq	r2,r2,zero
  811034:	10001e1e 	bne	r2,zero,8110b0 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  811038:	e0bffe17 	ldw	r2,-8(fp)
  81103c:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  811040:	e0bffe17 	ldw	r2,-8(fp)
  811044:	10800017 	ldw	r2,0(r2)
  811048:	11000104 	addi	r4,r2,4
  81104c:	e0bffe17 	ldw	r2,-8(fp)
  811050:	10c00417 	ldw	r3,16(r2)
  811054:	e0bffe17 	ldw	r2,-8(fp)
  811058:	1885883a 	add	r2,r3,r2
  81105c:	10801704 	addi	r2,r2,92
  811060:	10800003 	ldbu	r2,0(r2)
  811064:	10c03fcc 	andi	r3,r2,255
  811068:	2005883a 	mov	r2,r4
  81106c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  811070:	e0bffe17 	ldw	r2,-8(fp)
  811074:	10800417 	ldw	r2,16(r2)
  811078:	10c00044 	addi	r3,r2,1
  81107c:	e0bffe17 	ldw	r2,-8(fp)
  811080:	10c00415 	stw	r3,16(r2)
  811084:	e0bffe17 	ldw	r2,-8(fp)
  811088:	10800417 	ldw	r2,16(r2)
  81108c:	10c00fcc 	andi	r3,r2,63
  811090:	e0bffe17 	ldw	r2,-8(fp)
  811094:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811098:	e0bffe17 	ldw	r2,-8(fp)
  81109c:	10800117 	ldw	r2,4(r2)
  8110a0:	10c01014 	ori	r3,r2,64
  8110a4:	e0bffe17 	ldw	r2,-8(fp)
  8110a8:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8110ac:	00000f06 	br	8110ec <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8110b0:	e0bffe17 	ldw	r2,-8(fp)
  8110b4:	10800017 	ldw	r2,0(r2)
  8110b8:	10800204 	addi	r2,r2,8
  8110bc:	10800037 	ldwio	r2,0(r2)
  8110c0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8110c4:	e0bfff17 	ldw	r2,-4(fp)
  8110c8:	1082000c 	andi	r2,r2,2048
  8110cc:	1004c03a 	cmpne	r2,r2,zero
  8110d0:	1000061e 	bne	r2,zero,8110ec <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8110d4:	e0bffe17 	ldw	r2,-8(fp)
  8110d8:	10c00117 	ldw	r3,4(r2)
  8110dc:	00bfefc4 	movi	r2,-65
  8110e0:	1886703a 	and	r3,r3,r2
  8110e4:	e0bffe17 	ldw	r2,-8(fp)
  8110e8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8110ec:	e0bffe17 	ldw	r2,-8(fp)
  8110f0:	10c00417 	ldw	r3,16(r2)
  8110f4:	e0bffe17 	ldw	r2,-8(fp)
  8110f8:	10800517 	ldw	r2,20(r2)
  8110fc:	1880061e 	bne	r3,r2,811118 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811100:	e0bffe17 	ldw	r2,-8(fp)
  811104:	10c00117 	ldw	r3,4(r2)
  811108:	00beefc4 	movi	r2,-1089
  81110c:	1886703a 	and	r3,r3,r2
  811110:	e0bffe17 	ldw	r2,-8(fp)
  811114:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811118:	e0bffe17 	ldw	r2,-8(fp)
  81111c:	10800017 	ldw	r2,0(r2)
  811120:	11000304 	addi	r4,r2,12
  811124:	e0bffe17 	ldw	r2,-8(fp)
  811128:	10800117 	ldw	r2,4(r2)
  81112c:	1007883a 	mov	r3,r2
  811130:	2005883a 	mov	r2,r4
  811134:	10c00035 	stwio	r3,0(r2)
}
  811138:	e037883a 	mov	sp,fp
  81113c:	df000017 	ldw	fp,0(sp)
  811140:	dec00104 	addi	sp,sp,4
  811144:	f800283a 	ret

00811148 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  811148:	defffc04 	addi	sp,sp,-16
  81114c:	df000315 	stw	fp,12(sp)
  811150:	df000304 	addi	fp,sp,12
  811154:	e13ffd15 	stw	r4,-12(fp)
  811158:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81115c:	00000706 	br	81117c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  811160:	e0bffe17 	ldw	r2,-8(fp)
  811164:	1090000c 	andi	r2,r2,16384
  811168:	1005003a 	cmpeq	r2,r2,zero
  81116c:	1000031e 	bne	r2,zero,81117c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  811170:	00bffd44 	movi	r2,-11
  811174:	e0bfff15 	stw	r2,-4(fp)
  811178:	00000606 	br	811194 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81117c:	e0bffd17 	ldw	r2,-12(fp)
  811180:	10c00417 	ldw	r3,16(r2)
  811184:	e0bffd17 	ldw	r2,-12(fp)
  811188:	10800517 	ldw	r2,20(r2)
  81118c:	18bff41e 	bne	r3,r2,811160 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811190:	e03fff15 	stw	zero,-4(fp)
  811194:	e0bfff17 	ldw	r2,-4(fp)
}
  811198:	e037883a 	mov	sp,fp
  81119c:	df000017 	ldw	fp,0(sp)
  8111a0:	dec00104 	addi	sp,sp,4
  8111a4:	f800283a 	ret

008111a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8111a8:	defff004 	addi	sp,sp,-64
  8111ac:	dfc00f15 	stw	ra,60(sp)
  8111b0:	df000e15 	stw	fp,56(sp)
  8111b4:	df000e04 	addi	fp,sp,56
  8111b8:	e13ffb15 	stw	r4,-20(fp)
  8111bc:	e17ffc15 	stw	r5,-16(fp)
  8111c0:	e1bffd15 	stw	r6,-12(fp)
  8111c4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  8111c8:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  8111cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8111d0:	e0bffe17 	ldw	r2,-8(fp)
  8111d4:	1090000c 	andi	r2,r2,16384
  8111d8:	1005003a 	cmpeq	r2,r2,zero
  8111dc:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  8111e0:	e0bffb17 	ldw	r2,-20(fp)
  8111e4:	10800217 	ldw	r2,8(r2)
  8111e8:	10800044 	addi	r2,r2,1
  8111ec:	10800fcc 	andi	r2,r2,63
  8111f0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8111f4:	00001906 	br	81125c <altera_avalon_uart_read+0xb4>
    {
      count++;
  8111f8:	e0bff617 	ldw	r2,-40(fp)
  8111fc:	10800044 	addi	r2,r2,1
  811200:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  811204:	e0bffb17 	ldw	r2,-20(fp)
  811208:	10c00217 	ldw	r3,8(r2)
  81120c:	e0bffb17 	ldw	r2,-20(fp)
  811210:	1885883a 	add	r2,r3,r2
  811214:	10800704 	addi	r2,r2,28
  811218:	10800003 	ldbu	r2,0(r2)
  81121c:	1007883a 	mov	r3,r2
  811220:	e0bffc17 	ldw	r2,-16(fp)
  811224:	10c00005 	stb	r3,0(r2)
  811228:	e0bffc17 	ldw	r2,-16(fp)
  81122c:	10800044 	addi	r2,r2,1
  811230:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  811234:	e0bffb17 	ldw	r2,-20(fp)
  811238:	10800217 	ldw	r2,8(r2)
  81123c:	10c00044 	addi	r3,r2,1
  811240:	e0bffb17 	ldw	r2,-20(fp)
  811244:	10c00215 	stw	r3,8(r2)
  811248:	e0bffb17 	ldw	r2,-20(fp)
  81124c:	10800217 	ldw	r2,8(r2)
  811250:	10c00fcc 	andi	r3,r2,63
  811254:	e0bffb17 	ldw	r2,-20(fp)
  811258:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  81125c:	e0fff617 	ldw	r3,-40(fp)
  811260:	e0bffd17 	ldw	r2,-12(fp)
  811264:	1880050e 	bge	r3,r2,81127c <altera_avalon_uart_read+0xd4>
  811268:	e0bffb17 	ldw	r2,-20(fp)
  81126c:	10c00217 	ldw	r3,8(r2)
  811270:	e0bffb17 	ldw	r2,-20(fp)
  811274:	10800317 	ldw	r2,12(r2)
  811278:	18bfdf1e 	bne	r3,r2,8111f8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  81127c:	e0bff617 	ldw	r2,-40(fp)
  811280:	1004c03a 	cmpne	r2,r2,zero
  811284:	1000271e 	bne	r2,zero,811324 <altera_avalon_uart_read+0x17c>
  811288:	e0bffb17 	ldw	r2,-20(fp)
  81128c:	10c00217 	ldw	r3,8(r2)
  811290:	e0bffb17 	ldw	r2,-20(fp)
  811294:	10800317 	ldw	r2,12(r2)
  811298:	1880221e 	bne	r3,r2,811324 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  81129c:	e0bff917 	ldw	r2,-28(fp)
  8112a0:	1004c03a 	cmpne	r2,r2,zero
  8112a4:	1000061e 	bne	r2,zero,8112c0 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8112a8:	08113d80 	call	8113d8 <alt_get_errno>
  8112ac:	00c002c4 	movi	r3,11
  8112b0:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  8112b4:	00800044 	movi	r2,1
  8112b8:	e0bff705 	stb	r2,-36(fp)
        break;
  8112bc:	00001f06 	br	81133c <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8112c0:	0005303a 	rdctl	r2,status
  8112c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112c8:	e0fff517 	ldw	r3,-44(fp)
  8112cc:	00bfff84 	movi	r2,-2
  8112d0:	1884703a 	and	r2,r3,r2
  8112d4:	1001703a 	wrctl	status,r2
  
  return context;
  8112d8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8112dc:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8112e0:	e0bffb17 	ldw	r2,-20(fp)
  8112e4:	10800117 	ldw	r2,4(r2)
  8112e8:	10c02014 	ori	r3,r2,128
  8112ec:	e0bffb17 	ldw	r2,-20(fp)
  8112f0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8112f4:	e0bffb17 	ldw	r2,-20(fp)
  8112f8:	10800017 	ldw	r2,0(r2)
  8112fc:	11000304 	addi	r4,r2,12
  811300:	e0bffb17 	ldw	r2,-20(fp)
  811304:	10800117 	ldw	r2,4(r2)
  811308:	1007883a 	mov	r3,r2
  81130c:	2005883a 	mov	r2,r4
  811310:	10c00035 	stwio	r3,0(r2)
  811314:	e0bffa17 	ldw	r2,-24(fp)
  811318:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81131c:	e0bff417 	ldw	r2,-48(fp)
  811320:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  811324:	e0bff617 	ldw	r2,-40(fp)
  811328:	1004c03a 	cmpne	r2,r2,zero
  81132c:	1000031e 	bne	r2,zero,81133c <altera_avalon_uart_read+0x194>
  811330:	e0bffd17 	ldw	r2,-12(fp)
  811334:	1004c03a 	cmpne	r2,r2,zero
  811338:	103fc81e 	bne	r2,zero,81125c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81133c:	0005303a 	rdctl	r2,status
  811340:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811344:	e0fff317 	ldw	r3,-52(fp)
  811348:	00bfff84 	movi	r2,-2
  81134c:	1884703a 	and	r2,r3,r2
  811350:	1001703a 	wrctl	status,r2
  
  return context;
  811354:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  811358:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81135c:	e0bffb17 	ldw	r2,-20(fp)
  811360:	10800117 	ldw	r2,4(r2)
  811364:	10c02014 	ori	r3,r2,128
  811368:	e0bffb17 	ldw	r2,-20(fp)
  81136c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811370:	e0bffb17 	ldw	r2,-20(fp)
  811374:	10800017 	ldw	r2,0(r2)
  811378:	11000304 	addi	r4,r2,12
  81137c:	e0bffb17 	ldw	r2,-20(fp)
  811380:	10800117 	ldw	r2,4(r2)
  811384:	1007883a 	mov	r3,r2
  811388:	2005883a 	mov	r2,r4
  81138c:	10c00035 	stwio	r3,0(r2)
  811390:	e0bffa17 	ldw	r2,-24(fp)
  811394:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811398:	e0bff217 	ldw	r2,-56(fp)
  81139c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8113a0:	e0bff703 	ldbu	r2,-36(fp)
  8113a4:	1005003a 	cmpeq	r2,r2,zero
  8113a8:	1000031e 	bne	r2,zero,8113b8 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  8113ac:	00bffd04 	movi	r2,-12
  8113b0:	e0bfff15 	stw	r2,-4(fp)
  8113b4:	00000206 	br	8113c0 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  8113b8:	e0bff617 	ldw	r2,-40(fp)
  8113bc:	e0bfff15 	stw	r2,-4(fp)
  8113c0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8113c4:	e037883a 	mov	sp,fp
  8113c8:	dfc00117 	ldw	ra,4(sp)
  8113cc:	df000017 	ldw	fp,0(sp)
  8113d0:	dec00204 	addi	sp,sp,8
  8113d4:	f800283a 	ret

008113d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8113d8:	defffd04 	addi	sp,sp,-12
  8113dc:	dfc00215 	stw	ra,8(sp)
  8113e0:	df000115 	stw	fp,4(sp)
  8113e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8113e8:	00802074 	movhi	r2,129
  8113ec:	10935704 	addi	r2,r2,19804
  8113f0:	10800017 	ldw	r2,0(r2)
  8113f4:	1005003a 	cmpeq	r2,r2,zero
  8113f8:	1000061e 	bne	r2,zero,811414 <alt_get_errno+0x3c>
  8113fc:	00802074 	movhi	r2,129
  811400:	10935704 	addi	r2,r2,19804
  811404:	10800017 	ldw	r2,0(r2)
  811408:	103ee83a 	callr	r2
  81140c:	e0bfff15 	stw	r2,-4(fp)
  811410:	00000306 	br	811420 <alt_get_errno+0x48>
  811414:	00802074 	movhi	r2,129
  811418:	109a7104 	addi	r2,r2,27076
  81141c:	e0bfff15 	stw	r2,-4(fp)
  811420:	e0bfff17 	ldw	r2,-4(fp)
}
  811424:	e037883a 	mov	sp,fp
  811428:	dfc00117 	ldw	ra,4(sp)
  81142c:	df000017 	ldw	fp,0(sp)
  811430:	dec00204 	addi	sp,sp,8
  811434:	f800283a 	ret

00811438 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  811438:	defff204 	addi	sp,sp,-56
  81143c:	dfc00d15 	stw	ra,52(sp)
  811440:	df000c15 	stw	fp,48(sp)
  811444:	df000c04 	addi	fp,sp,48
  811448:	e13ffc15 	stw	r4,-16(fp)
  81144c:	e17ffd15 	stw	r5,-12(fp)
  811450:	e1bffe15 	stw	r6,-8(fp)
  811454:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  811458:	e0bffe17 	ldw	r2,-8(fp)
  81145c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  811460:	e0bfff17 	ldw	r2,-4(fp)
  811464:	1090000c 	andi	r2,r2,16384
  811468:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  81146c:	00004006 	br	811570 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811470:	e0bffc17 	ldw	r2,-16(fp)
  811474:	10800517 	ldw	r2,20(r2)
  811478:	10800044 	addi	r2,r2,1
  81147c:	10800fcc 	andi	r2,r2,63
  811480:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  811484:	e0bffc17 	ldw	r2,-16(fp)
  811488:	10c00417 	ldw	r3,16(r2)
  81148c:	e0bff917 	ldw	r2,-28(fp)
  811490:	1880251e 	bne	r3,r2,811528 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  811494:	e0bffa17 	ldw	r2,-24(fp)
  811498:	1005003a 	cmpeq	r2,r2,zero
  81149c:	1000051e 	bne	r2,zero,8114b4 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8114a0:	08116000 	call	811600 <alt_get_errno>
  8114a4:	1007883a 	mov	r3,r2
  8114a8:	008002c4 	movi	r2,11
  8114ac:	18800015 	stw	r2,0(r3)
        break;
  8114b0:	00003206 	br	81157c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114b4:	0005303a 	rdctl	r2,status
  8114b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114bc:	e0fff717 	ldw	r3,-36(fp)
  8114c0:	00bfff84 	movi	r2,-2
  8114c4:	1884703a 	and	r2,r3,r2
  8114c8:	1001703a 	wrctl	status,r2
  
  return context;
  8114cc:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8114d0:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8114d4:	e0bffc17 	ldw	r2,-16(fp)
  8114d8:	10800117 	ldw	r2,4(r2)
  8114dc:	10c11014 	ori	r3,r2,1088
  8114e0:	e0bffc17 	ldw	r2,-16(fp)
  8114e4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8114e8:	e0bffc17 	ldw	r2,-16(fp)
  8114ec:	10800017 	ldw	r2,0(r2)
  8114f0:	11000304 	addi	r4,r2,12
  8114f4:	e0bffc17 	ldw	r2,-16(fp)
  8114f8:	10800117 	ldw	r2,4(r2)
  8114fc:	1007883a 	mov	r3,r2
  811500:	2005883a 	mov	r2,r4
  811504:	10c00035 	stwio	r3,0(r2)
  811508:	e0bffb17 	ldw	r2,-20(fp)
  81150c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811510:	e0bff617 	ldw	r2,-40(fp)
  811514:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811518:	e0bffc17 	ldw	r2,-16(fp)
  81151c:	10c00417 	ldw	r3,16(r2)
  811520:	e0bff917 	ldw	r2,-28(fp)
  811524:	18bffc26 	beq	r3,r2,811518 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  811528:	e0bff817 	ldw	r2,-32(fp)
  81152c:	10bfffc4 	addi	r2,r2,-1
  811530:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  811534:	e0bffc17 	ldw	r2,-16(fp)
  811538:	10c00517 	ldw	r3,20(r2)
  81153c:	e0bffd17 	ldw	r2,-12(fp)
  811540:	10800003 	ldbu	r2,0(r2)
  811544:	1009883a 	mov	r4,r2
  811548:	e0bffc17 	ldw	r2,-16(fp)
  81154c:	1885883a 	add	r2,r3,r2
  811550:	10801704 	addi	r2,r2,92
  811554:	11000005 	stb	r4,0(r2)
  811558:	e0bffd17 	ldw	r2,-12(fp)
  81155c:	10800044 	addi	r2,r2,1
  811560:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  811564:	e0fffc17 	ldw	r3,-16(fp)
  811568:	e0bff917 	ldw	r2,-28(fp)
  81156c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811570:	e0bff817 	ldw	r2,-32(fp)
  811574:	1004c03a 	cmpne	r2,r2,zero
  811578:	103fbd1e 	bne	r2,zero,811470 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81157c:	0005303a 	rdctl	r2,status
  811580:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811584:	e0fff517 	ldw	r3,-44(fp)
  811588:	00bfff84 	movi	r2,-2
  81158c:	1884703a 	and	r2,r3,r2
  811590:	1001703a 	wrctl	status,r2
  
  return context;
  811594:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  811598:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81159c:	e0bffc17 	ldw	r2,-16(fp)
  8115a0:	10800117 	ldw	r2,4(r2)
  8115a4:	10c11014 	ori	r3,r2,1088
  8115a8:	e0bffc17 	ldw	r2,-16(fp)
  8115ac:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8115b0:	e0bffc17 	ldw	r2,-16(fp)
  8115b4:	10800017 	ldw	r2,0(r2)
  8115b8:	11000304 	addi	r4,r2,12
  8115bc:	e0bffc17 	ldw	r2,-16(fp)
  8115c0:	10800117 	ldw	r2,4(r2)
  8115c4:	1007883a 	mov	r3,r2
  8115c8:	2005883a 	mov	r2,r4
  8115cc:	10c00035 	stwio	r3,0(r2)
  8115d0:	e0bffb17 	ldw	r2,-20(fp)
  8115d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115d8:	e0bff417 	ldw	r2,-48(fp)
  8115dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8115e0:	e0fffe17 	ldw	r3,-8(fp)
  8115e4:	e0bff817 	ldw	r2,-32(fp)
  8115e8:	1885c83a 	sub	r2,r3,r2
}
  8115ec:	e037883a 	mov	sp,fp
  8115f0:	dfc00117 	ldw	ra,4(sp)
  8115f4:	df000017 	ldw	fp,0(sp)
  8115f8:	dec00204 	addi	sp,sp,8
  8115fc:	f800283a 	ret

00811600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811600:	defffd04 	addi	sp,sp,-12
  811604:	dfc00215 	stw	ra,8(sp)
  811608:	df000115 	stw	fp,4(sp)
  81160c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811610:	00802074 	movhi	r2,129
  811614:	10935704 	addi	r2,r2,19804
  811618:	10800017 	ldw	r2,0(r2)
  81161c:	1005003a 	cmpeq	r2,r2,zero
  811620:	1000061e 	bne	r2,zero,81163c <alt_get_errno+0x3c>
  811624:	00802074 	movhi	r2,129
  811628:	10935704 	addi	r2,r2,19804
  81162c:	10800017 	ldw	r2,0(r2)
  811630:	103ee83a 	callr	r2
  811634:	e0bfff15 	stw	r2,-4(fp)
  811638:	00000306 	br	811648 <alt_get_errno+0x48>
  81163c:	00802074 	movhi	r2,129
  811640:	109a7104 	addi	r2,r2,27076
  811644:	e0bfff15 	stw	r2,-4(fp)
  811648:	e0bfff17 	ldw	r2,-4(fp)
}
  81164c:	e037883a 	mov	sp,fp
  811650:	dfc00117 	ldw	ra,4(sp)
  811654:	df000017 	ldw	fp,0(sp)
  811658:	dec00204 	addi	sp,sp,8
  81165c:	f800283a 	ret

00811660 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  811660:	defff404 	addi	sp,sp,-48
  811664:	df000b15 	stw	fp,44(sp)
  811668:	df000b04 	addi	fp,sp,44
  81166c:	e13ffb15 	stw	r4,-20(fp)
  811670:	e17ffc15 	stw	r5,-16(fp)
  811674:	e1bffd15 	stw	r6,-12(fp)
  811678:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81167c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811680:	00802074 	movhi	r2,129
  811684:	109a7c04 	addi	r2,r2,27120
  811688:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81168c:	1005003a 	cmpeq	r2,r2,zero
  811690:	1000411e 	bne	r2,zero,811798 <alt_alarm_start+0x138>
  {
    if (alarm)
  811694:	e0bffb17 	ldw	r2,-20(fp)
  811698:	1005003a 	cmpeq	r2,r2,zero
  81169c:	10003b1e 	bne	r2,zero,81178c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8116a0:	e0fffb17 	ldw	r3,-20(fp)
  8116a4:	e0bffd17 	ldw	r2,-12(fp)
  8116a8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8116ac:	e0fffb17 	ldw	r3,-20(fp)
  8116b0:	e0bffe17 	ldw	r2,-8(fp)
  8116b4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8116b8:	0005303a 	rdctl	r2,status
  8116bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8116c0:	e0fff817 	ldw	r3,-32(fp)
  8116c4:	00bfff84 	movi	r2,-2
  8116c8:	1884703a 	and	r2,r3,r2
  8116cc:	1001703a 	wrctl	status,r2
  
  return context;
  8116d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8116d4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8116d8:	00802074 	movhi	r2,129
  8116dc:	109a7d04 	addi	r2,r2,27124
  8116e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8116e4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8116e8:	e0fffc17 	ldw	r3,-16(fp)
  8116ec:	e0bff917 	ldw	r2,-28(fp)
  8116f0:	1885883a 	add	r2,r3,r2
  8116f4:	10c00044 	addi	r3,r2,1
  8116f8:	e0bffb17 	ldw	r2,-20(fp)
  8116fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  811700:	e0bffb17 	ldw	r2,-20(fp)
  811704:	10c00217 	ldw	r3,8(r2)
  811708:	e0bff917 	ldw	r2,-28(fp)
  81170c:	1880042e 	bgeu	r3,r2,811720 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  811710:	e0fffb17 	ldw	r3,-20(fp)
  811714:	00800044 	movi	r2,1
  811718:	18800405 	stb	r2,16(r3)
  81171c:	00000206 	br	811728 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  811720:	e0bffb17 	ldw	r2,-20(fp)
  811724:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  811728:	e0fffb17 	ldw	r3,-20(fp)
  81172c:	00802074 	movhi	r2,129
  811730:	10935b04 	addi	r2,r2,19820
  811734:	e0bff615 	stw	r2,-40(fp)
  811738:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81173c:	e0fff717 	ldw	r3,-36(fp)
  811740:	e0bff617 	ldw	r2,-40(fp)
  811744:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  811748:	e0bff617 	ldw	r2,-40(fp)
  81174c:	10c00017 	ldw	r3,0(r2)
  811750:	e0bff717 	ldw	r2,-36(fp)
  811754:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811758:	e0bff617 	ldw	r2,-40(fp)
  81175c:	10c00017 	ldw	r3,0(r2)
  811760:	e0bff717 	ldw	r2,-36(fp)
  811764:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  811768:	e0fff617 	ldw	r3,-40(fp)
  81176c:	e0bff717 	ldw	r2,-36(fp)
  811770:	18800015 	stw	r2,0(r3)
  811774:	e0bffa17 	ldw	r2,-24(fp)
  811778:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81177c:	e0bff517 	ldw	r2,-44(fp)
  811780:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  811784:	e03fff15 	stw	zero,-4(fp)
  811788:	00000506 	br	8117a0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81178c:	00bffa84 	movi	r2,-22
  811790:	e0bfff15 	stw	r2,-4(fp)
  811794:	00000206 	br	8117a0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  811798:	00bfde84 	movi	r2,-134
  81179c:	e0bfff15 	stw	r2,-4(fp)
  8117a0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8117a4:	e037883a 	mov	sp,fp
  8117a8:	df000017 	ldw	fp,0(sp)
  8117ac:	dec00104 	addi	sp,sp,4
  8117b0:	f800283a 	ret

008117b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8117b4:	deffff04 	addi	sp,sp,-4
  8117b8:	df000015 	stw	fp,0(sp)
  8117bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8117c0:	e037883a 	mov	sp,fp
  8117c4:	df000017 	ldw	fp,0(sp)
  8117c8:	dec00104 	addi	sp,sp,4
  8117cc:	f800283a 	ret

008117d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8117d0:	defff904 	addi	sp,sp,-28
  8117d4:	dfc00615 	stw	ra,24(sp)
  8117d8:	df000515 	stw	fp,20(sp)
  8117dc:	df000504 	addi	fp,sp,20
  8117e0:	e13ffd15 	stw	r4,-12(fp)
  8117e4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8117e8:	e0bffd17 	ldw	r2,-12(fp)
  8117ec:	1005003a 	cmpeq	r2,r2,zero
  8117f0:	1000041e 	bne	r2,zero,811804 <alt_dev_llist_insert+0x34>
  8117f4:	e0bffd17 	ldw	r2,-12(fp)
  8117f8:	10800217 	ldw	r2,8(r2)
  8117fc:	1004c03a 	cmpne	r2,r2,zero
  811800:	1000071e 	bne	r2,zero,811820 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  811804:	08118840 	call	811884 <alt_get_errno>
  811808:	1007883a 	mov	r3,r2
  81180c:	00800584 	movi	r2,22
  811810:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  811814:	00bffa84 	movi	r2,-22
  811818:	e0bfff15 	stw	r2,-4(fp)
  81181c:	00001306 	br	81186c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  811820:	e0fffd17 	ldw	r3,-12(fp)
  811824:	e0bffe17 	ldw	r2,-8(fp)
  811828:	e0bffb15 	stw	r2,-20(fp)
  81182c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  811830:	e0fffc17 	ldw	r3,-16(fp)
  811834:	e0bffb17 	ldw	r2,-20(fp)
  811838:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81183c:	e0bffb17 	ldw	r2,-20(fp)
  811840:	10c00017 	ldw	r3,0(r2)
  811844:	e0bffc17 	ldw	r2,-16(fp)
  811848:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81184c:	e0bffb17 	ldw	r2,-20(fp)
  811850:	10c00017 	ldw	r3,0(r2)
  811854:	e0bffc17 	ldw	r2,-16(fp)
  811858:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81185c:	e0fffb17 	ldw	r3,-20(fp)
  811860:	e0bffc17 	ldw	r2,-16(fp)
  811864:	18800015 	stw	r2,0(r3)

  return 0;  
  811868:	e03fff15 	stw	zero,-4(fp)
  81186c:	e0bfff17 	ldw	r2,-4(fp)
}
  811870:	e037883a 	mov	sp,fp
  811874:	dfc00117 	ldw	ra,4(sp)
  811878:	df000017 	ldw	fp,0(sp)
  81187c:	dec00204 	addi	sp,sp,8
  811880:	f800283a 	ret

00811884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811884:	defffd04 	addi	sp,sp,-12
  811888:	dfc00215 	stw	ra,8(sp)
  81188c:	df000115 	stw	fp,4(sp)
  811890:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811894:	00802074 	movhi	r2,129
  811898:	10935704 	addi	r2,r2,19804
  81189c:	10800017 	ldw	r2,0(r2)
  8118a0:	1005003a 	cmpeq	r2,r2,zero
  8118a4:	1000061e 	bne	r2,zero,8118c0 <alt_get_errno+0x3c>
  8118a8:	00802074 	movhi	r2,129
  8118ac:	10935704 	addi	r2,r2,19804
  8118b0:	10800017 	ldw	r2,0(r2)
  8118b4:	103ee83a 	callr	r2
  8118b8:	e0bfff15 	stw	r2,-4(fp)
  8118bc:	00000306 	br	8118cc <alt_get_errno+0x48>
  8118c0:	00802074 	movhi	r2,129
  8118c4:	109a7104 	addi	r2,r2,27076
  8118c8:	e0bfff15 	stw	r2,-4(fp)
  8118cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8118d0:	e037883a 	mov	sp,fp
  8118d4:	dfc00117 	ldw	ra,4(sp)
  8118d8:	df000017 	ldw	fp,0(sp)
  8118dc:	dec00204 	addi	sp,sp,8
  8118e0:	f800283a 	ret

008118e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8118e4:	defffd04 	addi	sp,sp,-12
  8118e8:	dfc00215 	stw	ra,8(sp)
  8118ec:	df000115 	stw	fp,4(sp)
  8118f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8118f4:	00bfff04 	movi	r2,-4
  8118f8:	00c02074 	movhi	r3,129
  8118fc:	18ca2604 	addi	r3,r3,10392
  811900:	1885883a 	add	r2,r3,r2
  811904:	e0bfff15 	stw	r2,-4(fp)
  811908:	00000606 	br	811924 <_do_ctors+0x40>
        (*ctor) (); 
  81190c:	e0bfff17 	ldw	r2,-4(fp)
  811910:	10800017 	ldw	r2,0(r2)
  811914:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811918:	e0bfff17 	ldw	r2,-4(fp)
  81191c:	10bfff04 	addi	r2,r2,-4
  811920:	e0bfff15 	stw	r2,-4(fp)
  811924:	e0ffff17 	ldw	r3,-4(fp)
  811928:	00802074 	movhi	r2,129
  81192c:	108a2504 	addi	r2,r2,10388
  811930:	18bff62e 	bgeu	r3,r2,81190c <_do_ctors+0x28>
        (*ctor) (); 
}
  811934:	e037883a 	mov	sp,fp
  811938:	dfc00117 	ldw	ra,4(sp)
  81193c:	df000017 	ldw	fp,0(sp)
  811940:	dec00204 	addi	sp,sp,8
  811944:	f800283a 	ret

00811948 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811948:	defffd04 	addi	sp,sp,-12
  81194c:	dfc00215 	stw	ra,8(sp)
  811950:	df000115 	stw	fp,4(sp)
  811954:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811958:	00bfff04 	movi	r2,-4
  81195c:	00c02074 	movhi	r3,129
  811960:	18ca2604 	addi	r3,r3,10392
  811964:	1885883a 	add	r2,r3,r2
  811968:	e0bfff15 	stw	r2,-4(fp)
  81196c:	00000606 	br	811988 <_do_dtors+0x40>
        (*dtor) (); 
  811970:	e0bfff17 	ldw	r2,-4(fp)
  811974:	10800017 	ldw	r2,0(r2)
  811978:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81197c:	e0bfff17 	ldw	r2,-4(fp)
  811980:	10bfff04 	addi	r2,r2,-4
  811984:	e0bfff15 	stw	r2,-4(fp)
  811988:	e0ffff17 	ldw	r3,-4(fp)
  81198c:	00802074 	movhi	r2,129
  811990:	108a2604 	addi	r2,r2,10392
  811994:	18bff62e 	bgeu	r3,r2,811970 <_do_dtors+0x28>
        (*dtor) (); 
}
  811998:	e037883a 	mov	sp,fp
  81199c:	dfc00117 	ldw	ra,4(sp)
  8119a0:	df000017 	ldw	fp,0(sp)
  8119a4:	dec00204 	addi	sp,sp,8
  8119a8:	f800283a 	ret

008119ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8119ac:	defff904 	addi	sp,sp,-28
  8119b0:	dfc00615 	stw	ra,24(sp)
  8119b4:	df000515 	stw	fp,20(sp)
  8119b8:	df000504 	addi	fp,sp,20
  8119bc:	e13ffd15 	stw	r4,-12(fp)
  8119c0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8119c4:	e0bffe17 	ldw	r2,-8(fp)
  8119c8:	10800017 	ldw	r2,0(r2)
  8119cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8119d0:	e13ffd17 	ldw	r4,-12(fp)
  8119d4:	080d1b80 	call	80d1b8 <strlen>
  8119d8:	10800044 	addi	r2,r2,1
  8119dc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8119e0:	00000d06 	br	811a18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8119e4:	e0bffc17 	ldw	r2,-16(fp)
  8119e8:	11000217 	ldw	r4,8(r2)
  8119ec:	e1bffb17 	ldw	r6,-20(fp)
  8119f0:	e17ffd17 	ldw	r5,-12(fp)
  8119f4:	081246c0 	call	81246c <memcmp>
  8119f8:	1004c03a 	cmpne	r2,r2,zero
  8119fc:	1000031e 	bne	r2,zero,811a0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811a00:	e0bffc17 	ldw	r2,-16(fp)
  811a04:	e0bfff15 	stw	r2,-4(fp)
  811a08:	00000706 	br	811a28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811a0c:	e0bffc17 	ldw	r2,-16(fp)
  811a10:	10800017 	ldw	r2,0(r2)
  811a14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811a18:	e0fffe17 	ldw	r3,-8(fp)
  811a1c:	e0bffc17 	ldw	r2,-16(fp)
  811a20:	10fff01e 	bne	r2,r3,8119e4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  811a24:	e03fff15 	stw	zero,-4(fp)
  811a28:	e0bfff17 	ldw	r2,-4(fp)
}
  811a2c:	e037883a 	mov	sp,fp
  811a30:	dfc00117 	ldw	ra,4(sp)
  811a34:	df000017 	ldw	fp,0(sp)
  811a38:	dec00204 	addi	sp,sp,8
  811a3c:	f800283a 	ret

00811a40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811a40:	defffa04 	addi	sp,sp,-24
  811a44:	dfc00515 	stw	ra,20(sp)
  811a48:	df000415 	stw	fp,16(sp)
  811a4c:	df000404 	addi	fp,sp,16
  811a50:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811a54:	00802074 	movhi	r2,129
  811a58:	10935204 	addi	r2,r2,19784
  811a5c:	10800017 	ldw	r2,0(r2)
  811a60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811a64:	00003306 	br	811b34 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  811a68:	e0bffd17 	ldw	r2,-12(fp)
  811a6c:	11000217 	ldw	r4,8(r2)
  811a70:	080d1b80 	call	80d1b8 <strlen>
  811a74:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  811a78:	e0bffd17 	ldw	r2,-12(fp)
  811a7c:	10c00217 	ldw	r3,8(r2)
  811a80:	e0bffc17 	ldw	r2,-16(fp)
  811a84:	1885883a 	add	r2,r3,r2
  811a88:	10bfffc4 	addi	r2,r2,-1
  811a8c:	10800003 	ldbu	r2,0(r2)
  811a90:	10803fcc 	andi	r2,r2,255
  811a94:	1080201c 	xori	r2,r2,128
  811a98:	10bfe004 	addi	r2,r2,-128
  811a9c:	10800bd8 	cmpnei	r2,r2,47
  811aa0:	1000031e 	bne	r2,zero,811ab0 <alt_find_file+0x70>
    {
      len -= 1;
  811aa4:	e0bffc17 	ldw	r2,-16(fp)
  811aa8:	10bfffc4 	addi	r2,r2,-1
  811aac:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811ab0:	e0bffc17 	ldw	r2,-16(fp)
  811ab4:	1007883a 	mov	r3,r2
  811ab8:	e0bffe17 	ldw	r2,-8(fp)
  811abc:	1885883a 	add	r2,r3,r2
  811ac0:	10800003 	ldbu	r2,0(r2)
  811ac4:	10803fcc 	andi	r2,r2,255
  811ac8:	1080201c 	xori	r2,r2,128
  811acc:	10bfe004 	addi	r2,r2,-128
  811ad0:	10800be0 	cmpeqi	r2,r2,47
  811ad4:	10000a1e 	bne	r2,zero,811b00 <alt_find_file+0xc0>
  811ad8:	e0bffc17 	ldw	r2,-16(fp)
  811adc:	1007883a 	mov	r3,r2
  811ae0:	e0bffe17 	ldw	r2,-8(fp)
  811ae4:	1885883a 	add	r2,r3,r2
  811ae8:	10800003 	ldbu	r2,0(r2)
  811aec:	10803fcc 	andi	r2,r2,255
  811af0:	1080201c 	xori	r2,r2,128
  811af4:	10bfe004 	addi	r2,r2,-128
  811af8:	1004c03a 	cmpne	r2,r2,zero
  811afc:	10000a1e 	bne	r2,zero,811b28 <alt_find_file+0xe8>
  811b00:	e0bffd17 	ldw	r2,-12(fp)
  811b04:	11000217 	ldw	r4,8(r2)
  811b08:	e1bffc17 	ldw	r6,-16(fp)
  811b0c:	e17ffe17 	ldw	r5,-8(fp)
  811b10:	081246c0 	call	81246c <memcmp>
  811b14:	1004c03a 	cmpne	r2,r2,zero
  811b18:	1000031e 	bne	r2,zero,811b28 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811b1c:	e0bffd17 	ldw	r2,-12(fp)
  811b20:	e0bfff15 	stw	r2,-4(fp)
  811b24:	00000806 	br	811b48 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  811b28:	e0bffd17 	ldw	r2,-12(fp)
  811b2c:	10800017 	ldw	r2,0(r2)
  811b30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811b34:	00c02074 	movhi	r3,129
  811b38:	18d35204 	addi	r3,r3,19784
  811b3c:	e0bffd17 	ldw	r2,-12(fp)
  811b40:	10ffc91e 	bne	r2,r3,811a68 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811b44:	e03fff15 	stw	zero,-4(fp)
  811b48:	e0bfff17 	ldw	r2,-4(fp)
}
  811b4c:	e037883a 	mov	sp,fp
  811b50:	dfc00117 	ldw	ra,4(sp)
  811b54:	df000017 	ldw	fp,0(sp)
  811b58:	dec00204 	addi	sp,sp,8
  811b5c:	f800283a 	ret

00811b60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811b60:	defffc04 	addi	sp,sp,-16
  811b64:	df000315 	stw	fp,12(sp)
  811b68:	df000304 	addi	fp,sp,12
  811b6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  811b70:	00bffa04 	movi	r2,-24
  811b74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811b78:	e03ffe15 	stw	zero,-8(fp)
  811b7c:	00001e06 	br	811bf8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  811b80:	e0bffe17 	ldw	r2,-8(fp)
  811b84:	00c02074 	movhi	r3,129
  811b88:	18ce5a04 	addi	r3,r3,14696
  811b8c:	10800324 	muli	r2,r2,12
  811b90:	10c5883a 	add	r2,r2,r3
  811b94:	10800017 	ldw	r2,0(r2)
  811b98:	1004c03a 	cmpne	r2,r2,zero
  811b9c:	1000131e 	bne	r2,zero,811bec <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  811ba0:	e0bffe17 	ldw	r2,-8(fp)
  811ba4:	00c02074 	movhi	r3,129
  811ba8:	18ce5a04 	addi	r3,r3,14696
  811bac:	10800324 	muli	r2,r2,12
  811bb0:	10c7883a 	add	r3,r2,r3
  811bb4:	e0bfff17 	ldw	r2,-4(fp)
  811bb8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  811bbc:	00802074 	movhi	r2,129
  811bc0:	10935604 	addi	r2,r2,19800
  811bc4:	10c00017 	ldw	r3,0(r2)
  811bc8:	e0bffe17 	ldw	r2,-8(fp)
  811bcc:	1880040e 	bge	r3,r2,811be0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  811bd0:	00c02074 	movhi	r3,129
  811bd4:	18d35604 	addi	r3,r3,19800
  811bd8:	e0bffe17 	ldw	r2,-8(fp)
  811bdc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  811be0:	e0bffe17 	ldw	r2,-8(fp)
  811be4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  811be8:	00000606 	br	811c04 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811bec:	e0bffe17 	ldw	r2,-8(fp)
  811bf0:	10800044 	addi	r2,r2,1
  811bf4:	e0bffe15 	stw	r2,-8(fp)
  811bf8:	e0bffe17 	ldw	r2,-8(fp)
  811bfc:	10800810 	cmplti	r2,r2,32
  811c00:	103fdf1e 	bne	r2,zero,811b80 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811c04:	e0bffd17 	ldw	r2,-12(fp)
}
  811c08:	e037883a 	mov	sp,fp
  811c0c:	df000017 	ldw	fp,0(sp)
  811c10:	dec00104 	addi	sp,sp,4
  811c14:	f800283a 	ret

00811c18 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811c18:	defffe04 	addi	sp,sp,-8
  811c1c:	dfc00115 	stw	ra,4(sp)
  811c20:	df000015 	stw	fp,0(sp)
  811c24:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811c28:	0009883a 	mov	r4,zero
  811c2c:	01440004 	movi	r5,4096
  811c30:	08123900 	call	812390 <alt_icache_flush>
#endif
}
  811c34:	e037883a 	mov	sp,fp
  811c38:	dfc00117 	ldw	ra,4(sp)
  811c3c:	df000017 	ldw	fp,0(sp)
  811c40:	dec00204 	addi	sp,sp,8
  811c44:	f800283a 	ret

00811c48 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811c48:	defff904 	addi	sp,sp,-28
  811c4c:	dfc00615 	stw	ra,24(sp)
  811c50:	df000515 	stw	fp,20(sp)
  811c54:	df000504 	addi	fp,sp,20
  811c58:	e13ffc15 	stw	r4,-16(fp)
  811c5c:	e17ffd15 	stw	r5,-12(fp)
  811c60:	e1bffe15 	stw	r6,-8(fp)
  811c64:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811c68:	e0800217 	ldw	r2,8(fp)
  811c6c:	d8800015 	stw	r2,0(sp)
  811c70:	e13ffc17 	ldw	r4,-16(fp)
  811c74:	e17ffd17 	ldw	r5,-12(fp)
  811c78:	e1bffe17 	ldw	r6,-8(fp)
  811c7c:	e1ffff17 	ldw	r7,-4(fp)
  811c80:	0811e1c0 	call	811e1c <alt_iic_isr_register>
}  
  811c84:	e037883a 	mov	sp,fp
  811c88:	dfc00117 	ldw	ra,4(sp)
  811c8c:	df000017 	ldw	fp,0(sp)
  811c90:	dec00204 	addi	sp,sp,8
  811c94:	f800283a 	ret

00811c98 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  811c98:	defff904 	addi	sp,sp,-28
  811c9c:	df000615 	stw	fp,24(sp)
  811ca0:	df000604 	addi	fp,sp,24
  811ca4:	e13ffe15 	stw	r4,-8(fp)
  811ca8:	e17fff15 	stw	r5,-4(fp)
  811cac:	e0bfff17 	ldw	r2,-4(fp)
  811cb0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811cb4:	0005303a 	rdctl	r2,status
  811cb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811cbc:	e0fffb17 	ldw	r3,-20(fp)
  811cc0:	00bfff84 	movi	r2,-2
  811cc4:	1884703a 	and	r2,r3,r2
  811cc8:	1001703a 	wrctl	status,r2
  
  return context;
  811ccc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811cd0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  811cd4:	e0fffc17 	ldw	r3,-16(fp)
  811cd8:	00800044 	movi	r2,1
  811cdc:	10c4983a 	sll	r2,r2,r3
  811ce0:	1007883a 	mov	r3,r2
  811ce4:	00802074 	movhi	r2,129
  811ce8:	109a7b04 	addi	r2,r2,27116
  811cec:	10800017 	ldw	r2,0(r2)
  811cf0:	1886b03a 	or	r3,r3,r2
  811cf4:	00802074 	movhi	r2,129
  811cf8:	109a7b04 	addi	r2,r2,27116
  811cfc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811d00:	00802074 	movhi	r2,129
  811d04:	109a7b04 	addi	r2,r2,27116
  811d08:	10800017 	ldw	r2,0(r2)
  811d0c:	100170fa 	wrctl	ienable,r2
  811d10:	e0bffd17 	ldw	r2,-12(fp)
  811d14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d18:	e0bffa17 	ldw	r2,-24(fp)
  811d1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811d20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  811d24:	e037883a 	mov	sp,fp
  811d28:	df000017 	ldw	fp,0(sp)
  811d2c:	dec00104 	addi	sp,sp,4
  811d30:	f800283a 	ret

00811d34 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811d34:	defff904 	addi	sp,sp,-28
  811d38:	df000615 	stw	fp,24(sp)
  811d3c:	df000604 	addi	fp,sp,24
  811d40:	e13ffe15 	stw	r4,-8(fp)
  811d44:	e17fff15 	stw	r5,-4(fp)
  811d48:	e0bfff17 	ldw	r2,-4(fp)
  811d4c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d50:	0005303a 	rdctl	r2,status
  811d54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d58:	e0fffb17 	ldw	r3,-20(fp)
  811d5c:	00bfff84 	movi	r2,-2
  811d60:	1884703a 	and	r2,r3,r2
  811d64:	1001703a 	wrctl	status,r2
  
  return context;
  811d68:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811d6c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  811d70:	e0fffc17 	ldw	r3,-16(fp)
  811d74:	00800044 	movi	r2,1
  811d78:	10c4983a 	sll	r2,r2,r3
  811d7c:	0084303a 	nor	r2,zero,r2
  811d80:	1007883a 	mov	r3,r2
  811d84:	00802074 	movhi	r2,129
  811d88:	109a7b04 	addi	r2,r2,27116
  811d8c:	10800017 	ldw	r2,0(r2)
  811d90:	1886703a 	and	r3,r3,r2
  811d94:	00802074 	movhi	r2,129
  811d98:	109a7b04 	addi	r2,r2,27116
  811d9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811da0:	00802074 	movhi	r2,129
  811da4:	109a7b04 	addi	r2,r2,27116
  811da8:	10800017 	ldw	r2,0(r2)
  811dac:	100170fa 	wrctl	ienable,r2
  811db0:	e0bffd17 	ldw	r2,-12(fp)
  811db4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811db8:	e0bffa17 	ldw	r2,-24(fp)
  811dbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811dc0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  811dc4:	e037883a 	mov	sp,fp
  811dc8:	df000017 	ldw	fp,0(sp)
  811dcc:	dec00104 	addi	sp,sp,4
  811dd0:	f800283a 	ret

00811dd4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  811dd4:	defffc04 	addi	sp,sp,-16
  811dd8:	df000315 	stw	fp,12(sp)
  811ddc:	df000304 	addi	fp,sp,12
  811de0:	e13ffe15 	stw	r4,-8(fp)
  811de4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811de8:	000530fa 	rdctl	r2,ienable
  811dec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811df0:	e0ffff17 	ldw	r3,-4(fp)
  811df4:	00800044 	movi	r2,1
  811df8:	10c4983a 	sll	r2,r2,r3
  811dfc:	1007883a 	mov	r3,r2
  811e00:	e0bffd17 	ldw	r2,-12(fp)
  811e04:	1884703a 	and	r2,r3,r2
  811e08:	1004c03a 	cmpne	r2,r2,zero
}
  811e0c:	e037883a 	mov	sp,fp
  811e10:	df000017 	ldw	fp,0(sp)
  811e14:	dec00104 	addi	sp,sp,4
  811e18:	f800283a 	ret

00811e1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811e1c:	defff404 	addi	sp,sp,-48
  811e20:	dfc00b15 	stw	ra,44(sp)
  811e24:	df000a15 	stw	fp,40(sp)
  811e28:	df000a04 	addi	fp,sp,40
  811e2c:	e13ffb15 	stw	r4,-20(fp)
  811e30:	e17ffc15 	stw	r5,-16(fp)
  811e34:	e1bffd15 	stw	r6,-12(fp)
  811e38:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  811e3c:	00bffa84 	movi	r2,-22
  811e40:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  811e44:	e0bffc17 	ldw	r2,-16(fp)
  811e48:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  811e4c:	e0bff917 	ldw	r2,-28(fp)
  811e50:	10800808 	cmpgei	r2,r2,32
  811e54:	1000291e 	bne	r2,zero,811efc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e58:	0005303a 	rdctl	r2,status
  811e5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e60:	e0fff717 	ldw	r3,-36(fp)
  811e64:	00bfff84 	movi	r2,-2
  811e68:	1884703a 	and	r2,r3,r2
  811e6c:	1001703a 	wrctl	status,r2
  
  return context;
  811e70:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  811e74:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  811e78:	e0bff917 	ldw	r2,-28(fp)
  811e7c:	00c02074 	movhi	r3,129
  811e80:	18da8804 	addi	r3,r3,27168
  811e84:	100490fa 	slli	r2,r2,3
  811e88:	10c7883a 	add	r3,r2,r3
  811e8c:	e0bffd17 	ldw	r2,-12(fp)
  811e90:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  811e94:	e0bff917 	ldw	r2,-28(fp)
  811e98:	00c02074 	movhi	r3,129
  811e9c:	18da8804 	addi	r3,r3,27168
  811ea0:	100490fa 	slli	r2,r2,3
  811ea4:	10c5883a 	add	r2,r2,r3
  811ea8:	10c00104 	addi	r3,r2,4
  811eac:	e0bffe17 	ldw	r2,-8(fp)
  811eb0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  811eb4:	e0bffd17 	ldw	r2,-12(fp)
  811eb8:	1005003a 	cmpeq	r2,r2,zero
  811ebc:	1000051e 	bne	r2,zero,811ed4 <alt_iic_isr_register+0xb8>
  811ec0:	e17ff917 	ldw	r5,-28(fp)
  811ec4:	e13ffb17 	ldw	r4,-20(fp)
  811ec8:	0811c980 	call	811c98 <alt_ic_irq_enable>
  811ecc:	e0bfff15 	stw	r2,-4(fp)
  811ed0:	00000406 	br	811ee4 <alt_iic_isr_register+0xc8>
  811ed4:	e17ff917 	ldw	r5,-28(fp)
  811ed8:	e13ffb17 	ldw	r4,-20(fp)
  811edc:	0811d340 	call	811d34 <alt_ic_irq_disable>
  811ee0:	e0bfff15 	stw	r2,-4(fp)
  811ee4:	e0bfff17 	ldw	r2,-4(fp)
  811ee8:	e0bffa15 	stw	r2,-24(fp)
  811eec:	e0bff817 	ldw	r2,-32(fp)
  811ef0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ef4:	e0bff617 	ldw	r2,-40(fp)
  811ef8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  811efc:	e0bffa17 	ldw	r2,-24(fp)
}
  811f00:	e037883a 	mov	sp,fp
  811f04:	dfc00117 	ldw	ra,4(sp)
  811f08:	df000017 	ldw	fp,0(sp)
  811f0c:	dec00204 	addi	sp,sp,8
  811f10:	f800283a 	ret

00811f14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  811f14:	defff904 	addi	sp,sp,-28
  811f18:	dfc00615 	stw	ra,24(sp)
  811f1c:	df000515 	stw	fp,20(sp)
  811f20:	df000504 	addi	fp,sp,20
  811f24:	e13ffc15 	stw	r4,-16(fp)
  811f28:	e17ffd15 	stw	r5,-12(fp)
  811f2c:	e1bffe15 	stw	r6,-8(fp)
  811f30:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  811f34:	e13ffd17 	ldw	r4,-12(fp)
  811f38:	e17ffe17 	ldw	r5,-8(fp)
  811f3c:	e1bfff17 	ldw	r6,-4(fp)
  811f40:	080eac00 	call	80eac0 <open>
  811f44:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  811f48:	e0bffb17 	ldw	r2,-20(fp)
  811f4c:	1004803a 	cmplt	r2,r2,zero
  811f50:	10001c1e 	bne	r2,zero,811fc4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  811f54:	e0bffb17 	ldw	r2,-20(fp)
  811f58:	00c02074 	movhi	r3,129
  811f5c:	18ce5a04 	addi	r3,r3,14696
  811f60:	10800324 	muli	r2,r2,12
  811f64:	10c5883a 	add	r2,r2,r3
  811f68:	10c00017 	ldw	r3,0(r2)
  811f6c:	e0bffc17 	ldw	r2,-16(fp)
  811f70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811f74:	e0bffb17 	ldw	r2,-20(fp)
  811f78:	00c02074 	movhi	r3,129
  811f7c:	18ce5a04 	addi	r3,r3,14696
  811f80:	10800324 	muli	r2,r2,12
  811f84:	10c5883a 	add	r2,r2,r3
  811f88:	10800104 	addi	r2,r2,4
  811f8c:	10c00017 	ldw	r3,0(r2)
  811f90:	e0bffc17 	ldw	r2,-16(fp)
  811f94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  811f98:	e0bffb17 	ldw	r2,-20(fp)
  811f9c:	00c02074 	movhi	r3,129
  811fa0:	18ce5a04 	addi	r3,r3,14696
  811fa4:	10800324 	muli	r2,r2,12
  811fa8:	10c5883a 	add	r2,r2,r3
  811fac:	10800204 	addi	r2,r2,8
  811fb0:	10c00017 	ldw	r3,0(r2)
  811fb4:	e0bffc17 	ldw	r2,-16(fp)
  811fb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811fbc:	e13ffb17 	ldw	r4,-20(fp)
  811fc0:	080ee280 	call	80ee28 <alt_release_fd>
  }
} 
  811fc4:	e037883a 	mov	sp,fp
  811fc8:	dfc00117 	ldw	ra,4(sp)
  811fcc:	df000017 	ldw	fp,0(sp)
  811fd0:	dec00204 	addi	sp,sp,8
  811fd4:	f800283a 	ret

00811fd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811fd8:	defffb04 	addi	sp,sp,-20
  811fdc:	dfc00415 	stw	ra,16(sp)
  811fe0:	df000315 	stw	fp,12(sp)
  811fe4:	df000304 	addi	fp,sp,12
  811fe8:	e13ffd15 	stw	r4,-12(fp)
  811fec:	e17ffe15 	stw	r5,-8(fp)
  811ff0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  811ff4:	01002074 	movhi	r4,129
  811ff8:	210e5d04 	addi	r4,r4,14708
  811ffc:	e17ffd17 	ldw	r5,-12(fp)
  812000:	01800044 	movi	r6,1
  812004:	01c07fc4 	movi	r7,511
  812008:	0811f140 	call	811f14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81200c:	01002074 	movhi	r4,129
  812010:	210e5a04 	addi	r4,r4,14696
  812014:	e17ffe17 	ldw	r5,-8(fp)
  812018:	000d883a 	mov	r6,zero
  81201c:	01c07fc4 	movi	r7,511
  812020:	0811f140 	call	811f14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  812024:	01002074 	movhi	r4,129
  812028:	210e6004 	addi	r4,r4,14720
  81202c:	e17fff17 	ldw	r5,-4(fp)
  812030:	01800044 	movi	r6,1
  812034:	01c07fc4 	movi	r7,511
  812038:	0811f140 	call	811f14 <alt_open_fd>
}  
  81203c:	e037883a 	mov	sp,fp
  812040:	dfc00117 	ldw	ra,4(sp)
  812044:	df000017 	ldw	fp,0(sp)
  812048:	dec00204 	addi	sp,sp,8
  81204c:	f800283a 	ret

00812050 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  812050:	defffa04 	addi	sp,sp,-24
  812054:	df000515 	stw	fp,20(sp)
  812058:	df000504 	addi	fp,sp,20
  81205c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812060:	0005303a 	rdctl	r2,status
  812064:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812068:	e0fffd17 	ldw	r3,-12(fp)
  81206c:	00bfff84 	movi	r2,-2
  812070:	1884703a 	and	r2,r3,r2
  812074:	1001703a 	wrctl	status,r2
  
  return context;
  812078:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81207c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  812080:	e0bfff17 	ldw	r2,-4(fp)
  812084:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  812088:	e0bffc17 	ldw	r2,-16(fp)
  81208c:	10c00017 	ldw	r3,0(r2)
  812090:	e0bffc17 	ldw	r2,-16(fp)
  812094:	10800117 	ldw	r2,4(r2)
  812098:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81209c:	e0bffc17 	ldw	r2,-16(fp)
  8120a0:	10c00117 	ldw	r3,4(r2)
  8120a4:	e0bffc17 	ldw	r2,-16(fp)
  8120a8:	10800017 	ldw	r2,0(r2)
  8120ac:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8120b0:	e0fffc17 	ldw	r3,-16(fp)
  8120b4:	e0bffc17 	ldw	r2,-16(fp)
  8120b8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8120bc:	e0fffc17 	ldw	r3,-16(fp)
  8120c0:	e0bffc17 	ldw	r2,-16(fp)
  8120c4:	18800015 	stw	r2,0(r3)
  8120c8:	e0bffe17 	ldw	r2,-8(fp)
  8120cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120d0:	e0bffb17 	ldw	r2,-20(fp)
  8120d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8120d8:	e037883a 	mov	sp,fp
  8120dc:	df000017 	ldw	fp,0(sp)
  8120e0:	dec00104 	addi	sp,sp,4
  8120e4:	f800283a 	ret

008120e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8120e8:	defffb04 	addi	sp,sp,-20
  8120ec:	dfc00415 	stw	ra,16(sp)
  8120f0:	df000315 	stw	fp,12(sp)
  8120f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8120f8:	d0a01017 	ldw	r2,-32704(gp)
  8120fc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  812100:	d0a73217 	ldw	r2,-25400(gp)
  812104:	10800044 	addi	r2,r2,1
  812108:	d0a73215 	stw	r2,-25400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81210c:	00003106 	br	8121d4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  812110:	e0bffe17 	ldw	r2,-8(fp)
  812114:	10800017 	ldw	r2,0(r2)
  812118:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81211c:	e0bffe17 	ldw	r2,-8(fp)
  812120:	10800403 	ldbu	r2,16(r2)
  812124:	10803fcc 	andi	r2,r2,255
  812128:	1005003a 	cmpeq	r2,r2,zero
  81212c:	1000051e 	bne	r2,zero,812144 <alt_tick+0x5c>
  812130:	d0a73217 	ldw	r2,-25400(gp)
  812134:	1004c03a 	cmpne	r2,r2,zero
  812138:	1000021e 	bne	r2,zero,812144 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81213c:	e0bffe17 	ldw	r2,-8(fp)
  812140:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  812144:	e0bffe17 	ldw	r2,-8(fp)
  812148:	10c00217 	ldw	r3,8(r2)
  81214c:	d0a73217 	ldw	r2,-25400(gp)
  812150:	10c01e36 	bltu	r2,r3,8121cc <alt_tick+0xe4>
  812154:	e0bffe17 	ldw	r2,-8(fp)
  812158:	10800403 	ldbu	r2,16(r2)
  81215c:	10803fcc 	andi	r2,r2,255
  812160:	1004c03a 	cmpne	r2,r2,zero
  812164:	1000191e 	bne	r2,zero,8121cc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  812168:	e0bffe17 	ldw	r2,-8(fp)
  81216c:	10c00317 	ldw	r3,12(r2)
  812170:	e0bffe17 	ldw	r2,-8(fp)
  812174:	11000517 	ldw	r4,20(r2)
  812178:	183ee83a 	callr	r3
  81217c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  812180:	e0bffd17 	ldw	r2,-12(fp)
  812184:	1004c03a 	cmpne	r2,r2,zero
  812188:	1000031e 	bne	r2,zero,812198 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81218c:	e13ffe17 	ldw	r4,-8(fp)
  812190:	08120500 	call	812050 <alt_alarm_stop>
  812194:	00000d06 	br	8121cc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  812198:	e0bffe17 	ldw	r2,-8(fp)
  81219c:	10c00217 	ldw	r3,8(r2)
  8121a0:	e0bffd17 	ldw	r2,-12(fp)
  8121a4:	1887883a 	add	r3,r3,r2
  8121a8:	e0bffe17 	ldw	r2,-8(fp)
  8121ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8121b0:	e0bffe17 	ldw	r2,-8(fp)
  8121b4:	10c00217 	ldw	r3,8(r2)
  8121b8:	d0a73217 	ldw	r2,-25400(gp)
  8121bc:	1880032e 	bgeu	r3,r2,8121cc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8121c0:	e0fffe17 	ldw	r3,-8(fp)
  8121c4:	00800044 	movi	r2,1
  8121c8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8121cc:	e0bfff17 	ldw	r2,-4(fp)
  8121d0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8121d4:	d0e01004 	addi	r3,gp,-32704
  8121d8:	e0bffe17 	ldw	r2,-8(fp)
  8121dc:	10ffcc1e 	bne	r2,r3,812110 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8121e0:	e037883a 	mov	sp,fp
  8121e4:	dfc00117 	ldw	ra,4(sp)
  8121e8:	df000017 	ldw	fp,0(sp)
  8121ec:	dec00204 	addi	sp,sp,8
  8121f0:	f800283a 	ret

008121f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8121f4:	defffd04 	addi	sp,sp,-12
  8121f8:	dfc00215 	stw	ra,8(sp)
  8121fc:	df000115 	stw	fp,4(sp)
  812200:	df000104 	addi	fp,sp,4
  812204:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812208:	e13fff17 	ldw	r4,-4(fp)
  81220c:	08122440 	call	812244 <alt_busy_sleep>
}
  812210:	e037883a 	mov	sp,fp
  812214:	dfc00117 	ldw	ra,4(sp)
  812218:	df000017 	ldw	fp,0(sp)
  81221c:	dec00204 	addi	sp,sp,8
  812220:	f800283a 	ret

00812224 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  812224:	deffff04 	addi	sp,sp,-4
  812228:	df000015 	stw	fp,0(sp)
  81222c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  812230:	000170fa 	wrctl	ienable,zero
}
  812234:	e037883a 	mov	sp,fp
  812238:	df000017 	ldw	fp,0(sp)
  81223c:	dec00104 	addi	sp,sp,4
  812240:	f800283a 	ret

00812244 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  812244:	defffa04 	addi	sp,sp,-24
  812248:	dfc00515 	stw	ra,20(sp)
  81224c:	df000415 	stw	fp,16(sp)
  812250:	df000404 	addi	fp,sp,16
  812254:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  812258:	008000c4 	movi	r2,3
  81225c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  812260:	e0fffc17 	ldw	r3,-16(fp)
  812264:	008003f4 	movhi	r2,15
  812268:	10909004 	addi	r2,r2,16960
  81226c:	188b383a 	mul	r5,r3,r2
  812270:	0100bef4 	movhi	r4,763
  812274:	213c2004 	addi	r4,r4,-3968
  812278:	080e3100 	call	80e310 <__udivsi3>
  81227c:	100b883a 	mov	r5,r2
  812280:	01200034 	movhi	r4,32768
  812284:	213fffc4 	addi	r4,r4,-1
  812288:	080e3100 	call	80e310 <__udivsi3>
  81228c:	100b883a 	mov	r5,r2
  812290:	e13fff17 	ldw	r4,-4(fp)
  812294:	080e3100 	call	80e310 <__udivsi3>
  812298:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  81229c:	e0bffd17 	ldw	r2,-12(fp)
  8122a0:	1005003a 	cmpeq	r2,r2,zero
  8122a4:	1000281e 	bne	r2,zero,812348 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8122a8:	e03ffe15 	stw	zero,-8(fp)
  8122ac:	00001606 	br	812308 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8122b0:	00a00034 	movhi	r2,32768
  8122b4:	10bfffc4 	addi	r2,r2,-1
  8122b8:	10bfffc4 	addi	r2,r2,-1
  8122bc:	103ffe1e 	bne	r2,zero,8122b8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8122c0:	e0fffc17 	ldw	r3,-16(fp)
  8122c4:	008003f4 	movhi	r2,15
  8122c8:	10909004 	addi	r2,r2,16960
  8122cc:	188b383a 	mul	r5,r3,r2
  8122d0:	0100bef4 	movhi	r4,763
  8122d4:	213c2004 	addi	r4,r4,-3968
  8122d8:	080e3100 	call	80e310 <__udivsi3>
  8122dc:	100b883a 	mov	r5,r2
  8122e0:	01200034 	movhi	r4,32768
  8122e4:	213fffc4 	addi	r4,r4,-1
  8122e8:	080e3100 	call	80e310 <__udivsi3>
  8122ec:	1007883a 	mov	r3,r2
  8122f0:	e0bfff17 	ldw	r2,-4(fp)
  8122f4:	10c5c83a 	sub	r2,r2,r3
  8122f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8122fc:	e0bffe17 	ldw	r2,-8(fp)
  812300:	10800044 	addi	r2,r2,1
  812304:	e0bffe15 	stw	r2,-8(fp)
  812308:	e0fffe17 	ldw	r3,-8(fp)
  81230c:	e0bffd17 	ldw	r2,-12(fp)
  812310:	18bfe716 	blt	r3,r2,8122b0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812314:	e0fffc17 	ldw	r3,-16(fp)
  812318:	008003f4 	movhi	r2,15
  81231c:	10909004 	addi	r2,r2,16960
  812320:	188b383a 	mul	r5,r3,r2
  812324:	0100bef4 	movhi	r4,763
  812328:	213c2004 	addi	r4,r4,-3968
  81232c:	080e3100 	call	80e310 <__udivsi3>
  812330:	1007883a 	mov	r3,r2
  812334:	e0bfff17 	ldw	r2,-4(fp)
  812338:	1885383a 	mul	r2,r3,r2
  81233c:	10bfffc4 	addi	r2,r2,-1
  812340:	103ffe1e 	bne	r2,zero,81233c <alt_busy_sleep+0xf8>
  812344:	00000c06 	br	812378 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812348:	e0fffc17 	ldw	r3,-16(fp)
  81234c:	008003f4 	movhi	r2,15
  812350:	10909004 	addi	r2,r2,16960
  812354:	188b383a 	mul	r5,r3,r2
  812358:	0100bef4 	movhi	r4,763
  81235c:	213c2004 	addi	r4,r4,-3968
  812360:	080e3100 	call	80e310 <__udivsi3>
  812364:	1007883a 	mov	r3,r2
  812368:	e0bfff17 	ldw	r2,-4(fp)
  81236c:	1885383a 	mul	r2,r3,r2
  812370:	10bfffc4 	addi	r2,r2,-1
  812374:	00bffe16 	blt	zero,r2,812370 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  812378:	0005883a 	mov	r2,zero
}
  81237c:	e037883a 	mov	sp,fp
  812380:	dfc00117 	ldw	ra,4(sp)
  812384:	df000017 	ldw	fp,0(sp)
  812388:	dec00204 	addi	sp,sp,8
  81238c:	f800283a 	ret

00812390 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  812390:	defffb04 	addi	sp,sp,-20
  812394:	df000415 	stw	fp,16(sp)
  812398:	df000404 	addi	fp,sp,16
  81239c:	e13ffe15 	stw	r4,-8(fp)
  8123a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8123a4:	e0bfff17 	ldw	r2,-4(fp)
  8123a8:	10840070 	cmpltui	r2,r2,4097
  8123ac:	1000021e 	bne	r2,zero,8123b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8123b0:	00840004 	movi	r2,4096
  8123b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8123b8:	e0fffe17 	ldw	r3,-8(fp)
  8123bc:	e0bfff17 	ldw	r2,-4(fp)
  8123c0:	1885883a 	add	r2,r3,r2
  8123c4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8123c8:	e0bffe17 	ldw	r2,-8(fp)
  8123cc:	e0bffd15 	stw	r2,-12(fp)
  8123d0:	00000506 	br	8123e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8123d4:	e0bffd17 	ldw	r2,-12(fp)
  8123d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8123dc:	e0bffd17 	ldw	r2,-12(fp)
  8123e0:	10800804 	addi	r2,r2,32
  8123e4:	e0bffd15 	stw	r2,-12(fp)
  8123e8:	e0fffd17 	ldw	r3,-12(fp)
  8123ec:	e0bffc17 	ldw	r2,-16(fp)
  8123f0:	18bff836 	bltu	r3,r2,8123d4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8123f4:	e0bffe17 	ldw	r2,-8(fp)
  8123f8:	108007cc 	andi	r2,r2,31
  8123fc:	1005003a 	cmpeq	r2,r2,zero
  812400:	1000021e 	bne	r2,zero,81240c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  812404:	e0bffd17 	ldw	r2,-12(fp)
  812408:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81240c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812410:	e037883a 	mov	sp,fp
  812414:	df000017 	ldw	fp,0(sp)
  812418:	dec00104 	addi	sp,sp,4
  81241c:	f800283a 	ret

00812420 <atexit>:
  812420:	200b883a 	mov	r5,r4
  812424:	000d883a 	mov	r6,zero
  812428:	0009883a 	mov	r4,zero
  81242c:	000f883a 	mov	r7,zero
  812430:	08124e01 	jmpi	8124e0 <__register_exitproc>

00812434 <exit>:
  812434:	defffe04 	addi	sp,sp,-8
  812438:	000b883a 	mov	r5,zero
  81243c:	dc000015 	stw	r16,0(sp)
  812440:	dfc00115 	stw	ra,4(sp)
  812444:	2021883a 	mov	r16,r4
  812448:	08126180 	call	812618 <__call_exitprocs>
  81244c:	00802074 	movhi	r2,129
  812450:	10934d04 	addi	r2,r2,19764
  812454:	11000017 	ldw	r4,0(r2)
  812458:	20800f17 	ldw	r2,60(r4)
  81245c:	10000126 	beq	r2,zero,812464 <exit+0x30>
  812460:	103ee83a 	callr	r2
  812464:	8009883a 	mov	r4,r16
  812468:	08128080 	call	812808 <_exit>

0081246c <memcmp>:
  81246c:	00c000c4 	movi	r3,3
  812470:	1980032e 	bgeu	r3,r6,812480 <memcmp+0x14>
  812474:	2144b03a 	or	r2,r4,r5
  812478:	10c4703a 	and	r2,r2,r3
  81247c:	10000f26 	beq	r2,zero,8124bc <memcmp+0x50>
  812480:	31ffffc4 	addi	r7,r6,-1
  812484:	3000061e 	bne	r6,zero,8124a0 <memcmp+0x34>
  812488:	00000a06 	br	8124b4 <memcmp+0x48>
  81248c:	39ffffc4 	addi	r7,r7,-1
  812490:	00bfffc4 	movi	r2,-1
  812494:	21000044 	addi	r4,r4,1
  812498:	29400044 	addi	r5,r5,1
  81249c:	38800526 	beq	r7,r2,8124b4 <memcmp+0x48>
  8124a0:	20c00003 	ldbu	r3,0(r4)
  8124a4:	28800003 	ldbu	r2,0(r5)
  8124a8:	18bff826 	beq	r3,r2,81248c <memcmp+0x20>
  8124ac:	1885c83a 	sub	r2,r3,r2
  8124b0:	f800283a 	ret
  8124b4:	0005883a 	mov	r2,zero
  8124b8:	f800283a 	ret
  8124bc:	180f883a 	mov	r7,r3
  8124c0:	20c00017 	ldw	r3,0(r4)
  8124c4:	28800017 	ldw	r2,0(r5)
  8124c8:	18bfed1e 	bne	r3,r2,812480 <memcmp+0x14>
  8124cc:	31bfff04 	addi	r6,r6,-4
  8124d0:	21000104 	addi	r4,r4,4
  8124d4:	29400104 	addi	r5,r5,4
  8124d8:	39bff936 	bltu	r7,r6,8124c0 <memcmp+0x54>
  8124dc:	003fe806 	br	812480 <memcmp+0x14>

008124e0 <__register_exitproc>:
  8124e0:	defffa04 	addi	sp,sp,-24
  8124e4:	00802074 	movhi	r2,129
  8124e8:	10934d04 	addi	r2,r2,19764
  8124ec:	dc000015 	stw	r16,0(sp)
  8124f0:	14000017 	ldw	r16,0(r2)
  8124f4:	dd000415 	stw	r20,16(sp)
  8124f8:	2829883a 	mov	r20,r5
  8124fc:	81405217 	ldw	r5,328(r16)
  812500:	dcc00315 	stw	r19,12(sp)
  812504:	dc800215 	stw	r18,8(sp)
  812508:	dc400115 	stw	r17,4(sp)
  81250c:	dfc00515 	stw	ra,20(sp)
  812510:	2023883a 	mov	r17,r4
  812514:	3027883a 	mov	r19,r6
  812518:	3825883a 	mov	r18,r7
  81251c:	28002526 	beq	r5,zero,8125b4 <__register_exitproc+0xd4>
  812520:	29000117 	ldw	r4,4(r5)
  812524:	008007c4 	movi	r2,31
  812528:	11002716 	blt	r2,r4,8125c8 <__register_exitproc+0xe8>
  81252c:	8800101e 	bne	r17,zero,812570 <__register_exitproc+0x90>
  812530:	2105883a 	add	r2,r4,r4
  812534:	1085883a 	add	r2,r2,r2
  812538:	20c00044 	addi	r3,r4,1
  81253c:	1145883a 	add	r2,r2,r5
  812540:	0009883a 	mov	r4,zero
  812544:	15000215 	stw	r20,8(r2)
  812548:	28c00115 	stw	r3,4(r5)
  81254c:	2005883a 	mov	r2,r4
  812550:	dfc00517 	ldw	ra,20(sp)
  812554:	dd000417 	ldw	r20,16(sp)
  812558:	dcc00317 	ldw	r19,12(sp)
  81255c:	dc800217 	ldw	r18,8(sp)
  812560:	dc400117 	ldw	r17,4(sp)
  812564:	dc000017 	ldw	r16,0(sp)
  812568:	dec00604 	addi	sp,sp,24
  81256c:	f800283a 	ret
  812570:	29802204 	addi	r6,r5,136
  812574:	00800044 	movi	r2,1
  812578:	110e983a 	sll	r7,r2,r4
  81257c:	30c04017 	ldw	r3,256(r6)
  812580:	2105883a 	add	r2,r4,r4
  812584:	1085883a 	add	r2,r2,r2
  812588:	1185883a 	add	r2,r2,r6
  81258c:	19c6b03a 	or	r3,r3,r7
  812590:	14802015 	stw	r18,128(r2)
  812594:	14c00015 	stw	r19,0(r2)
  812598:	00800084 	movi	r2,2
  81259c:	30c04015 	stw	r3,256(r6)
  8125a0:	88bfe31e 	bne	r17,r2,812530 <__register_exitproc+0x50>
  8125a4:	30804117 	ldw	r2,260(r6)
  8125a8:	11c4b03a 	or	r2,r2,r7
  8125ac:	30804115 	stw	r2,260(r6)
  8125b0:	003fdf06 	br	812530 <__register_exitproc+0x50>
  8125b4:	00802074 	movhi	r2,129
  8125b8:	109ac804 	addi	r2,r2,27424
  8125bc:	100b883a 	mov	r5,r2
  8125c0:	80805215 	stw	r2,328(r16)
  8125c4:	003fd606 	br	812520 <__register_exitproc+0x40>
  8125c8:	00800034 	movhi	r2,0
  8125cc:	10800004 	addi	r2,r2,0
  8125d0:	1000021e 	bne	r2,zero,8125dc <__register_exitproc+0xfc>
  8125d4:	013fffc4 	movi	r4,-1
  8125d8:	003fdc06 	br	81254c <__register_exitproc+0x6c>
  8125dc:	01006404 	movi	r4,400
  8125e0:	103ee83a 	callr	r2
  8125e4:	1007883a 	mov	r3,r2
  8125e8:	103ffa26 	beq	r2,zero,8125d4 <__register_exitproc+0xf4>
  8125ec:	80805217 	ldw	r2,328(r16)
  8125f0:	180b883a 	mov	r5,r3
  8125f4:	18000115 	stw	zero,4(r3)
  8125f8:	18800015 	stw	r2,0(r3)
  8125fc:	80c05215 	stw	r3,328(r16)
  812600:	18006215 	stw	zero,392(r3)
  812604:	18006315 	stw	zero,396(r3)
  812608:	0009883a 	mov	r4,zero
  81260c:	883fc826 	beq	r17,zero,812530 <__register_exitproc+0x50>
  812610:	003fd706 	br	812570 <__register_exitproc+0x90>

00812614 <register_fini>:
  812614:	f800283a 	ret

00812618 <__call_exitprocs>:
  812618:	00802074 	movhi	r2,129
  81261c:	10934d04 	addi	r2,r2,19764
  812620:	10800017 	ldw	r2,0(r2)
  812624:	defff304 	addi	sp,sp,-52
  812628:	df000b15 	stw	fp,44(sp)
  81262c:	d8800115 	stw	r2,4(sp)
  812630:	00800034 	movhi	r2,0
  812634:	10800004 	addi	r2,r2,0
  812638:	1005003a 	cmpeq	r2,r2,zero
  81263c:	d8800215 	stw	r2,8(sp)
  812640:	d8800117 	ldw	r2,4(sp)
  812644:	dd400815 	stw	r21,32(sp)
  812648:	dd000715 	stw	r20,28(sp)
  81264c:	10805204 	addi	r2,r2,328
  812650:	dfc00c15 	stw	ra,48(sp)
  812654:	ddc00a15 	stw	r23,40(sp)
  812658:	dd800915 	stw	r22,36(sp)
  81265c:	dcc00615 	stw	r19,24(sp)
  812660:	dc800515 	stw	r18,20(sp)
  812664:	dc400415 	stw	r17,16(sp)
  812668:	dc000315 	stw	r16,12(sp)
  81266c:	282b883a 	mov	r21,r5
  812670:	2039883a 	mov	fp,r4
  812674:	d8800015 	stw	r2,0(sp)
  812678:	2829003a 	cmpeq	r20,r5,zero
  81267c:	d8800117 	ldw	r2,4(sp)
  812680:	14405217 	ldw	r17,328(r2)
  812684:	88001026 	beq	r17,zero,8126c8 <__call_exitprocs+0xb0>
  812688:	ddc00017 	ldw	r23,0(sp)
  81268c:	88800117 	ldw	r2,4(r17)
  812690:	8c802204 	addi	r18,r17,136
  812694:	143fffc4 	addi	r16,r2,-1
  812698:	80000916 	blt	r16,zero,8126c0 <__call_exitprocs+0xa8>
  81269c:	05bfffc4 	movi	r22,-1
  8126a0:	a000151e 	bne	r20,zero,8126f8 <__call_exitprocs+0xe0>
  8126a4:	8409883a 	add	r4,r16,r16
  8126a8:	2105883a 	add	r2,r4,r4
  8126ac:	1485883a 	add	r2,r2,r18
  8126b0:	10c02017 	ldw	r3,128(r2)
  8126b4:	a8c01126 	beq	r21,r3,8126fc <__call_exitprocs+0xe4>
  8126b8:	843fffc4 	addi	r16,r16,-1
  8126bc:	85bff81e 	bne	r16,r22,8126a0 <__call_exitprocs+0x88>
  8126c0:	d8800217 	ldw	r2,8(sp)
  8126c4:	10003126 	beq	r2,zero,81278c <__call_exitprocs+0x174>
  8126c8:	dfc00c17 	ldw	ra,48(sp)
  8126cc:	df000b17 	ldw	fp,44(sp)
  8126d0:	ddc00a17 	ldw	r23,40(sp)
  8126d4:	dd800917 	ldw	r22,36(sp)
  8126d8:	dd400817 	ldw	r21,32(sp)
  8126dc:	dd000717 	ldw	r20,28(sp)
  8126e0:	dcc00617 	ldw	r19,24(sp)
  8126e4:	dc800517 	ldw	r18,20(sp)
  8126e8:	dc400417 	ldw	r17,16(sp)
  8126ec:	dc000317 	ldw	r16,12(sp)
  8126f0:	dec00d04 	addi	sp,sp,52
  8126f4:	f800283a 	ret
  8126f8:	8409883a 	add	r4,r16,r16
  8126fc:	88c00117 	ldw	r3,4(r17)
  812700:	2105883a 	add	r2,r4,r4
  812704:	1445883a 	add	r2,r2,r17
  812708:	18ffffc4 	addi	r3,r3,-1
  81270c:	11800217 	ldw	r6,8(r2)
  812710:	1c001526 	beq	r3,r16,812768 <__call_exitprocs+0x150>
  812714:	10000215 	stw	zero,8(r2)
  812718:	303fe726 	beq	r6,zero,8126b8 <__call_exitprocs+0xa0>
  81271c:	00c00044 	movi	r3,1
  812720:	1c06983a 	sll	r3,r3,r16
  812724:	90804017 	ldw	r2,256(r18)
  812728:	8cc00117 	ldw	r19,4(r17)
  81272c:	1884703a 	and	r2,r3,r2
  812730:	10001426 	beq	r2,zero,812784 <__call_exitprocs+0x16c>
  812734:	90804117 	ldw	r2,260(r18)
  812738:	1884703a 	and	r2,r3,r2
  81273c:	10000c1e 	bne	r2,zero,812770 <__call_exitprocs+0x158>
  812740:	2105883a 	add	r2,r4,r4
  812744:	1485883a 	add	r2,r2,r18
  812748:	11400017 	ldw	r5,0(r2)
  81274c:	e009883a 	mov	r4,fp
  812750:	303ee83a 	callr	r6
  812754:	88800117 	ldw	r2,4(r17)
  812758:	98bfc81e 	bne	r19,r2,81267c <__call_exitprocs+0x64>
  81275c:	b8800017 	ldw	r2,0(r23)
  812760:	147fd526 	beq	r2,r17,8126b8 <__call_exitprocs+0xa0>
  812764:	003fc506 	br	81267c <__call_exitprocs+0x64>
  812768:	8c000115 	stw	r16,4(r17)
  81276c:	003fea06 	br	812718 <__call_exitprocs+0x100>
  812770:	2105883a 	add	r2,r4,r4
  812774:	1485883a 	add	r2,r2,r18
  812778:	11000017 	ldw	r4,0(r2)
  81277c:	303ee83a 	callr	r6
  812780:	003ff406 	br	812754 <__call_exitprocs+0x13c>
  812784:	303ee83a 	callr	r6
  812788:	003ff206 	br	812754 <__call_exitprocs+0x13c>
  81278c:	88800117 	ldw	r2,4(r17)
  812790:	1000081e 	bne	r2,zero,8127b4 <__call_exitprocs+0x19c>
  812794:	89000017 	ldw	r4,0(r17)
  812798:	20000726 	beq	r4,zero,8127b8 <__call_exitprocs+0x1a0>
  81279c:	b9000015 	stw	r4,0(r23)
  8127a0:	8809883a 	mov	r4,r17
  8127a4:	00000000 	call	0 <__reset-0x800000>
  8127a8:	bc400017 	ldw	r17,0(r23)
  8127ac:	883fb71e 	bne	r17,zero,81268c <__call_exitprocs+0x74>
  8127b0:	003fc506 	br	8126c8 <__call_exitprocs+0xb0>
  8127b4:	89000017 	ldw	r4,0(r17)
  8127b8:	882f883a 	mov	r23,r17
  8127bc:	2023883a 	mov	r17,r4
  8127c0:	883fb21e 	bne	r17,zero,81268c <__call_exitprocs+0x74>
  8127c4:	003fc006 	br	8126c8 <__call_exitprocs+0xb0>

008127c8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8127c8:	defffd04 	addi	sp,sp,-12
  8127cc:	df000215 	stw	fp,8(sp)
  8127d0:	df000204 	addi	fp,sp,8
  8127d4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8127d8:	e0bfff17 	ldw	r2,-4(fp)
  8127dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8127e0:	e0bffe17 	ldw	r2,-8(fp)
  8127e4:	1005003a 	cmpeq	r2,r2,zero
  8127e8:	1000021e 	bne	r2,zero,8127f4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8127ec:	002af070 	cmpltui	zero,zero,43969
  8127f0:	00000106 	br	8127f8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8127f4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  8127f8:	e037883a 	mov	sp,fp
  8127fc:	df000017 	ldw	fp,0(sp)
  812800:	dec00104 	addi	sp,sp,4
  812804:	f800283a 	ret

00812808 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  812808:	defffd04 	addi	sp,sp,-12
  81280c:	dfc00215 	stw	ra,8(sp)
  812810:	df000115 	stw	fp,4(sp)
  812814:	df000104 	addi	fp,sp,4
  812818:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  81281c:	e13fff17 	ldw	r4,-4(fp)
  812820:	08127c80 	call	8127c8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  812824:	003fff06 	br	812824 <_exit+0x1c>
  812828:	00000010 	cmplti	zero,zero,0
  81282c:	00000000 	call	0 <__reset-0x800000>
  812830:	00527a01 	jmpi	527a0 <__reset-0x7ad860>
  812834:	011f7c01 	jmpi	11f7c0 <__reset-0x6e0840>
  812838:	001b0c0b 	ldhu	zero,27696(zero)
  81283c:	00000028 	cmpgeui	zero,zero,0
  812840:	00000018 	cmpnei	zero,zero,0
  812844:	0080d42c 	andhi	r2,zero,848
  812848:	000005dc 	xori	zero,zero,23
  81284c:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  812850:	92099170 	cmpltui	r8,r18,9797
  812854:	95079308 	cmpgei	r20,r18,7756
  812858:	97049605 	stb	fp,4696(r18)
  81285c:	90019f03 	ldbu	zero,1660(r18)
  812860:	9c06940a 	0x9c06940a
  812864:	00000002 	0x2
  812868:	00000028 	cmpgeui	zero,zero,0
  81286c:	00000044 	movi	zero,1
  812870:	0080da08 	cmpgei	r2,zero,872
  812874:	000005b0 	cmpltui	zero,zero,22
  812878:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  81287c:	92099168 	cmpgeui	r8,r18,9797
  812880:	95079308 	cmpgei	r20,r18,7756
  812884:	9c039705 	stb	r16,3676(r19)
  812888:	90019f02 	0x90019f02
  81288c:	9606940a 	0x9606940a
  812890:	00000004 	movi	zero,0
  812894:	00812614 	movui	r2,1176
