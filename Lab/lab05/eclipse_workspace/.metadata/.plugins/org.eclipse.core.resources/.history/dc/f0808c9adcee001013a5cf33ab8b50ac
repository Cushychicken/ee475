/*
 * gpsparse.h
 *
 *  Created on: Oct 4, 2011
 *      Author: nash.reilly
 */

#ifndef GPSPARSE_H_
#define GPSPARSE_H_

void checksum(char test, char cs);
char check_upd(char test, char cs);
int atoh(char test);

void checksum(char test, char cs){
  int j,k;
  char pkt[83];

  j = 0;																		/*Sets checksum flag to 0                             */
  k = 0;

  if(test == 'G'){
	  cs  		= test;
	  pkt[j] 	= test;
	  j++;
	  test		= getchar();
	  if(test == 'P'){
		  cs = check_upd(test,cs);
		  pkt[j] = test;
		  j++;
		  test = getchar();
		  if(test == 'G'){
			  cs = check_upd(test,cs);
			  pkt[j] 	= test;
			  j++;
			  test 	= getchar();
			  if(test == 'G'){
				  cs   	= check_upd(test,cs);
				  pkt[j] 	= test;
				  j++;
				  test 	= getchar();
				  if(test == 'A'){							/*If it makes it this far, GPGGA has been found       */
					  cs = check_upd(test,cs);			/*Checksum ready for data after GPGGA                 */
					  pkt[j] 	= test;
					  j++;
					  test 	= getchar();
					  while(test != '$'){						/*Loop reads in new character from serial, checks for */
						  pkt[j] = test;
						  j++;
						  if (test == '*'){					/*checksum separator, updates checksum if checksum    */
							  k = 1;							/*separator not present, and prints checksum in hex   */
						  };									/*once checksum separator comes up in the flow        */
						  if (k != 1){
							  cs = check_upd(test,cs);
						  };
						  test = getchar();
					  };

					  for(j=0; (pkt[j]!= '*'); j++){
						  if(j == 0){
							  cs = pkt[j];
						  } else {
							  cs = check_upd(pkt[j], cs);
						  }
					  };
					  printf("Checksum (hex) = 0x%x\n", cs);

					  for(j=0; (pkt[j]!= '\n'); j++){
						  printf("%c", pkt[j]);
					  };
					  printf("\n");
				  };
			  };
		  };
	  };
  };

};

char check_upd(char test, char cs){
  cs = (cs ^ test);
  return(cs);
};

int atoh(char test){
	int temp;
	switch(test){
	case '0':
		temp = 0;
	case '1':
		temp = 1;
	case '2':
		temp = 2;
	case '3':
		temp = 3;
	case '4':
		temp = 4;
	case '5':
		temp = 5;
	case '6':
		temp = 6;
	case '7':
		temp = 7;
	case '8':
		temp = 8;
	case '9':
		temp = 9;
	case 'A':
		temp = 10;
	case 'B':
		temp = 11;
	case 'C':
		temp = 12;
	case 'D':
		temp = 13;
	case 'E':
		temp = 14;
	case 'F':
		temp = 15;
	default:
		temp = 0;
	};
	return(temp);
};

#endif /* GPSPARSE_H_ */
