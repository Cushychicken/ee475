/*
 * gps.c
 *
 *  Created on: Oct 3, 2011
 *      Author: nash.reilly
 */

#include <stdio.h>
#include <string.h>
#include "C:\NRCREE475\lab04\DE2_System\nios_qsys\software\lcdwrite\lcdwrite.h"
#include "gpsparse.h"

/*char checksum(char test, char cs);*/
int atoh(char test);

typedef struct packet{
	char ident[6];
	char time[10];
	char latitude[12];
	char ns[2];
	char longitude[12];
	char ew[2];
	char qual[2];
	char satnum[3];
	char hdop[5];
	char ant_ht[7];
	char ant_unt[2];
	char geoid_diff[7];
	char geoid_unt[2];
	char cs[3];
 };

int main()
{
	char test;
	char cs;
	char pkt[83];
	int check, temp, j, k;

	while(1){
		test=getchar();																/*Gets first character from serial stream             */
		j = 0;																		/*Sets checksum flag to 0                             */
		k = 0;

		checksum(test,cs);

		if(0){
		if(test == 'G'){
			cs  	= test;
			pkt[j] 	= test;
			j++;
			test	= getchar();
				if(test == 'P'){
					cs     = checksum(test,cs);
					pkt[j] = test;
					j++;
				    test = getchar();
				    	if(test == 'G'){
				    		cs   	= checksum(test,cs);
				    		pkt[j] 	= test;
				    		j++;
				    		test 	= getchar();
				    			if(test == 'G'){
				    				cs   	= checksum(test,cs);
				    				pkt[j] 	= test;
				    				j++;
				    				test 	= getchar();
				    					if(test == 'A'){							/*If it makes it this far, GPGGA has been found       */
				    						cs   	= checksum(test,cs);			/*Checksum ready for data after GPGGA                 */
				    						pkt[j] 	= test;
				    						j++;
				    						test 	= getchar();
				    						while(test != '$'){						/*Loop reads in new character from serial, checks for */
				    							pkt[j] = test;
				    							j++;
				    							if (test == '*'){					/*checksum separator, updates checksum if checksum    */
				    								k = 1;							/*separator not present, and prints checksum in hex   */
				    							};									/*once checksum separator comes up in the flow        */
				    							if (k != 1){
				    								cs = checksum(test,cs);
				    							};
				    							test = getchar();
				    						};
				    						for(j=0; (pkt[j]!= '\n'); j++){
				    							printf("%c", pkt[j]);
				    						};
				    						printf("\n");
				    					};
				    			};
				    	};
				};
		};
	};
	};
	return 0;
}

/*
char checksum(char test, char cs){
  cs = (cs ^ test);
  return(cs);
}
*/

int atoh(char test){
	int temp;
	switch(test){
	case '0':
		temp = 0;
	case '1':
		temp = 1;
	case '2':
		temp = 2;
	case '3':
		temp = 3;
	case '4':
		temp = 4;
	case '5':
		temp = 5;
	case '6':
		temp = 6;
	case '7':
		temp = 7;
	case '8':
		temp = 8;
	case '9':
		temp = 9;
	case 'A':
		temp = 10;
	case 'B':
		temp = 11;
	case 'C':
		temp = 12;
	case 'D':
		temp = 13;
	case 'E':
		temp = 14;
	case 'F':
		temp = 15;
	};
	return(temp);
}
